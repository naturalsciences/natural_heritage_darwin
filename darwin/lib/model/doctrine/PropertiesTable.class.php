<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PropertiesTable extends DarwinTable
{
  /**
  * Find a property (joined with values)
  * for a given table and record id
  * @param string $table_name db table name
  * @param int $record_id id of the record
  * @return a Doctrine_collection of results
  */
  
  //ftheeten 2019 01 18 added extra_id
  public function findForTable($table_name, $record_id, $extra_id=Array())
  {
    $q = Doctrine_Query::create()
      ->from('Properties p')
      ->orderBy('p.property_type ASC, p.applies_to_indexed ASC');
    $q = $this->addCatalogueReferences($q, $table_name, $record_id, 'p', true);
    
    //ftheeten 2019 01 18
    if(count($extra_id)>0)
    {
        foreach($extra_id as $item=>$id)
        {       
            if(is_integer($id))
            {
                $q->orWhere("p.id= ?", $id);
            }
        }
    }
    return $q->execute();
  }


  /**
  * Get Distincts type of properties
  * @return array an Array of types in keys
  */
  public function getDistinctType($ref_relation=null)
  {
    if(is_null($ref_relation))
      $q = $this->createFlatDistinct('properties', 'property_type', 'type');
    else
      $q = $this->createFlatDistinctDepend('properties', 'property_type', $ref_relation, 'type');

    $a = DarwinTable::CollectionToArray($q->execute(), 'type');
    return array_merge(array(''=>''),$a);
  }

  /**
  * Get Distincts Sub Type of properties
  * filter by type if one given
  * @param string $type a type
  * @return array an Array of sub-types in keys/values
  */
  public function getDistinctApplies($type=null)
  {
    if(is_null($type))
      $q = $this->createFlatDistinct('properties', 'applies_to', 'applies_to');
    else
      $q = $this->createFlatDistinctDepend('properties', 'applies_to', $type, 'applies_to');
    $a =  DarwinTable::CollectionToArray($q->execute(), 'applies_to');
    return array_merge(array(''=>''),$a);

  }

  /**
  * Get Distincts units (accuracy + normal) of properties
  * filter by type if one given
  * @param string $type a type
  * @return array an Array of Qualifier in keys/values
  */
  public function getDistinctUnit($type=null)
  {
    if(is_null($type))
      $q = $this->createFlatDistinct('properties', 'property_unit', 'unit');
    else
      $q = $this->createFlatDistinctDepend('properties', 'property_unit', $type, 'unit');
    $res_unit = DarwinTable::CollectionToArray($q->execute(), 'unit');

    return array_merge(array(''=>''),$res_unit);
  }
  
  
      //ftheeten2014 03 11
	  //to access a subproperty associated to a specimen
	  //by filtering its type
   public function getOneSubPropertyByType($table='specimens', $id, $type_property)
   {
    $query= Doctrine_Query::create()->
    from('Properties p')->
    where('p.record_id = ?', $id)->
    andWhere('p.referenced_relation = ?', $table)->
    andWhere('p.property_type = ?', $type_property);
                                              
    return $query->fetchOne();
   }
   
   //ftheeten 2019 01 16 get propery by table
    public function getPropertiesByTable($table='specimens', $id)
   {
    $query= Doctrine_Query::create()->
    from('Properties p')->
    where('p.record_id = ?', $id)->
    andWhere('p.referenced_relation = ?', $table);                                              
    return $query->execute();
   }
   
            //ftheeten 2016 01 17
   public function getYesNo()
   {                                             
        return Array("yes"=> "yes", "no"=> "no");
   }

}
