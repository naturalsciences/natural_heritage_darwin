<?php

/**
 * GeoreferencesByServiceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class GeoreferencesByServiceTable extends DarwinTable
{
    /**
     * Returns an instance of this class.
     *
     * @return GeoreferencesByServiceTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('GeoreferencesByService');
    }
	
	public function findExistingWFS($url, $table, $id, $data_origin='WFS_SERVICE')
	{
		
		 $q = Doctrine_Query::create()
		  ->select("g.*")
		  ->from('GeoreferencesByService g')
		  ->where('fulltoindex(g.wfs_url) = fulltoindex(?)', $url)
		  ->andWhere('g.data_origin = ?', $data_origin)
		  ->andWhere('g.wfs_table = ?', $table)
		  ->andWhere('g.wfs_id = ?', $id)
		   ;
		//$q->execute();
		$obj=$q->fetchOne();
		//print_r($obj);
		if(!$obj)
		{
			return -1;
		}
		else
		{
			return $obj->getId();
		}
	}
	
	public function serializeIfNew($url,  $table, $wfs_id, $name, $geo_json, $data_origin="WFS_SERVICE")
	{
		
		$id=Doctrine_Core::getTable('GeoreferencesByService')->findExistingWFS($url, $table, $wfs_id, $data_origin);
		if($id<0)
		{
			$conn_MGR = Doctrine_Manager::connection();
			$conn = $conn_MGR->getDbh();
			$query="INSERT INTO  georeferences_by_service (data_origin, wfs_url, wfs_table, wfs_id, name, geom) VALUES(:data_origin, :url, :table, :wfsid, :name, ST_SETSRID(ST_GeomFromGeoJSON(:geom),4326)) RETURNING id;";
			$stmt=$conn->prepare($query);
			$stmt->bindValue(":data_origin", $data_origin);
			$stmt->bindValue(":url", $url);
			$stmt->bindValue(":table", $table);
			$stmt->bindValue(":wfsid", $wfs_id);
			$stmt->bindValue(":name", $name);
			$stmt->bindValue(":geom", $geo_json);
			
			$stmt->execute();
			
			$obj_id=$stmt->fetchColumn(0);
			
			return $obj_id;
		}
		return $id;
	}
	
	  public function getDistinctDataOrigin()
	  {
		
		 $q = Doctrine_Query::create()
				->useResultCache(true)
				->setResultCacheLifeSpan(5) //5 sec
				->From('GeoreferencesByService')
				->select('DISTINCT data_origin')
				->orderBy("data_origin ASC");
			 $rs= $q->execute();
			 $res=Array();
			foreach($rs as $row)
			{
				$res[$row["data_origin"]]=$row["data_origin"];
			}

			return $res;		
	  }

}