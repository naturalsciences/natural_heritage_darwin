<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UsersTrackingTable extends DarwinTable
{
  public function getDistinctTable()
  {
    return $this->createDistinct('UsersTracking', 'referenced_relation', 'name')->execute();
  }

  /**
  * getMyItems
  * Get the last modified items for a user
  * @param int $user_id The user id to look for
  * @param int $max_items a number of items to get
  * @return Doctrine_Query Query with last items order by time desc
  */
  public function getMyItems($user_id, $max_items = 0)
  {
    $q = Doctrine_Query::create()
      ->from('UsersTracking r')
      ->where('r.user_ref = ?',$user_id)
      ->orderBy('r.modification_date_time desc')
      ->orderBy('r.id desc');
    return $q;
  }

  /**
  * getMyItemsForPlot
  * Get number of changes for the user in a given range of time
  * @param int $user_id The user id to look for
  * @param string $range The range of data to look : day (last 6 days), month (last 31 days) or year (last 365 days).
  * @return array Array of data by date ($k = dates and nbr)
  */
  public function getMyItemsForPlot($user_id, $range)
  {
    $conn = Doctrine_Manager::connection()->getDbh();
    $days = 6;
    if($range=='month') $days = 31;
    if($range=='year') $days = 365;

    $statement = $conn->prepare("SELECT X.dates, count(id) as nbr
      FROM  ( select current_date - s.a as dates from generate_series(0,".$days.") as s(a) ) as X
        LEFT JOIN users_tracking u on (X.dates = modification_date_time::date AND u.user_ref= :user_id )
      GROUP BY X.dates
      ORDER BY X.dates
    ");
    $statement->execute(array('user_id' => $user_id));
    $resultset = $statement->fetchAll(PDO::FETCH_ASSOC);
    $datas = array();
    foreach($resultset as $row)
    {
      array_push($datas,array($row['dates'],$row['nbr']));
    }
    return $datas;
  }


  function getRelated($table, $id) {
    $q = Doctrine_Query::create()
      ->from('UsersTracking r')
      ->innerJoin('r.Users')
      ->where('r.referenced_relation = ?',$table)
      ->andWhere('r.record_id = ?',$id)
      ->orderBy('r.modification_date_time desc');
    return $q->execute();
  }
}
