<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VernacularNamesTable extends DarwinTable
{
  /**
  * Find vernacular names
  * for a given table and record id
  * @param string $table_name db table name
  * @param int $record_id id of the record
  * @return a Doctrine_collection of results
  */
  public function findForTable($table_name, $record_id) {
     $q = Doctrine_Query::create()
        ->from('VernacularNames v')
        ->orderBy('v.community ASC, v.name_indexed');
     $q = $this->addCatalogueReferences($q, $table_name, $record_id, 'v', true);
     return $q->execute();
  }

  /**
  * Get Distincts type of communities
  * @return array an Array of types in keys
  */
  public function getDistinctCommunities() {
    return $this->createDistinct('VernacularNames', 'community', 'community')->execute();
  }

  public function findAllCommonNames($listId = null)
  {
    if($listId == null) return array() ;
     $q = Doctrine_Query::create()
           ->from('VernacularNames v')
      ->orderBy('v.record_id');

    if(count($listId['taxonomy'])) $q->orWhere('referenced_relation=?','taxonomy')->andWhereIn('record_id',$listId['taxonomy']);
    if(count($listId['chronostratigraphy'])) $q->orWhere('referenced_relation=?','chronostratigraphy')->andWhereIn('record_id',$listId['chronostratigraphy']);
    if(count($listId['lithostratigraphy'])) $q->orWhere('referenced_relation=?',"lithostratigraphy")->andWhereIn('record_id',$listId['lithostratigraphy']) ;
    if(count($listId['lithology'])) $q->orWhere('referenced_relation=?',"lithology")->andWhereIn('record_id',$listId['lithology']);
    if(count($listId['mineralogy'])) $q->orWhere('referenced_relation=?',"mineralogy")->andWhereIn('record_id',$listId['mineralogy']) ;    

    // if the array have no data, then there a nothing to look for 
    if(count($listId['mineralogy'])+count($listId['mineralogy'])+count($listId['lithology'])+count($listId['lithostratigraphy'])+count($listId['taxonomy']) == 0) 
      return array() ;

    $result = $q->execute();
    if(!$result->count())
      return array() ;

    $tab = array('taxonomy'=> array(), 'chronostratigraphy' => array(), 'lithostratigraphy' => array(), 'lithology' => array(),'mineralogy' => array()) ;
    foreach($result as $key=>$vernacular)
    {
      if (!isset($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()])) {
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()] = array('community' => array(), 'name' => '') ;
      }
      
      if ($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] != '')
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] .= ','.$vernacular->getName() ;
      else
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] = $vernacular->getName() ;

      if(!isset($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()]))
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()] = $vernacular->getName() ;
      else
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()] .= ','.$vernacular->getName() ;

    }
    return $tab ;
  }

}