<?php

/**
 * IdentifiersTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class IdentifiersTable extends DarwinTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object IdentifiersTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Identifiers');
    }
	
	public function findForTable($table_name, $record_id)
	  {
		$q = Doctrine_Query::create()
		  ->from('Identifiers i');
		$q = $this->addCatalogueReferences($q, $table_name, $record_id, 'i', true)
		  ->orderby('protocol asc');
		return $q->execute();
	  }
	  
	   public function getDistinctProtocol()
	  {
		
		$q = $this->createFlatDistinct('identifiers', 'protocol', 'protocol');
		$a = DarwinTable::CollectionToArray($q->execute(), 'protocol');
		return array_merge(array(''=>''),$a);
	  }
	  
	  public function getLinkedId($protocol, $identifier, $referenced_relation)
	  {
		  $returned=NULL;
		  $q = Doctrine_Query::create()
		  ->from('Identifiers i')->andWhere("referenced_relation =? AND LOWER(protocol)=? AND value=?", array($referenced_relation,strtolower($protocol), $identifier ));
		  $res=$q->fetchOne();
		  if($res!==null)
		  {
			  $returned=$res->getRecordId();
		  }
		 
		 return $returned;
	  }
}