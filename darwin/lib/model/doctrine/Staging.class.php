<?php

/**
 * Staging
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Staging extends BaseStaging
{
  public $codes = array();
  public $linkedInfo=null;

  private static $errors = array(
    'not_found' => 'This %field% was not found in our database, please choose an existing one or remove it',
    'too_much' => 'Too many records match this %field%\'s value, please choose the good one or leave empty',
    'bad_hierarchy'=> 'The hierarchy of this %field% is different from the one in our database, please choose or create the correct hierarchy',
    'people' => 'One or more %field% were not found or have too many results. In both cases, you must choose an existing one or create one.',
    'duplicate' => 'This record seems to have already been saved. You can see it %here% or you can also choose an existing one with the button below.',
  );

  public function getCategory()
  {
      return $this->_get('category');
  }
  public function getGtu()
  {
    return $this->_get('gtu_code');
  }
    
    
  
   //ftheeten 2019 05 21
   public function getCode()
  {
    $val=NULL;
    $tmpArray=Doctrine_Core::getTable('Codes')->getMainCodesRelatedArray("staging", array($this->getId()));
    if(count($tmpArray)>0)
    {
        $val=trim($tmpArray[0]->getCodePrefix().$tmpArray[0]->getCodePrefixSeparator().$tmpArray[0]->getCode().$tmpArray[0]->getCodeSuffixSeparator().$tmpArray[0]->getCodeSuffix());
    }
    
     return $val;
  }
  
     //ftheeten 2019 05 21
   public function setCode($val)
  {
    $tmpArray=Doctrine_Core::getTable('Codes')->getMainCodesRelatedArray("staging", array($this->getId()));
    if(count($tmpArray)>0)
    {
        $obj=$tmpArray[0];
        $obj->delete();
    }
    $this->addRelCode($val);
   
  }
  
  
    private  function startsWith($string, $test) 
    { 
        print("test $string $test");
        $strlen = strlen($string);
        $testlen = strlen($test);
        if ($testlen > $strlen) return false;
            return substr_compare($string, $test, 0, $testlen) === 0;
    }
    
   private function endsWith($string, $test) 
    {
        $strlen = strlen($string);
        $testlen = strlen($test);
        if ($testlen > $strlen) return false;
            return substr_compare($string, $test, $strlen - $testlen, $testlen) === 0;
    }
     private function string_isset($str)
    {
        if(isset($str))
        {
            if(strlen($str)>0)
            {
                return TRUE;
            }
        }
        return FALSE;
        
    }
	
	public function getCollectionId()
	{
		return Doctrine_Core::getTable('Imports')->find($this->getImportRef())->getCollectionRef();
	}
  
    private function addRelCode($value, $category="main")
  {

     $collection_ref=Doctrine_Core::getTable('Imports')->find($this->getImportRef())->getCollectionRef();
	 $collection= Doctrine_Core::getTable('Collections')->find($collection_ref);
        if(strlen(trim($value))>0)
        {

            $code = new Codes() ;
            $code->setReferencedRelation("staging") ;
            $code->setRecordId($this->getId()) ;
            $code->setCodeCategory(strtolower($category)) ;
            $tmpCode=$value;
                  


            if($this->string_isset($collection->code_prefix)&&$category=="main")
            {
                $prefixTmp=$collection->getCodePrefix();
                $sepFlag=FALSE;
                if($this->string_isset($collection->getCodePrefixSeparator()))
                {
                    $prefixTmp.=$collection->getCodePrefixSeparator();
                    $sepFlag=TRUE;
                }
                if($this->startsWith($tmpCode,$prefixTmp ))
                {  
                    $tmpCode=substr_replace($tmpCode,'',0, strlen($prefixTmp));
                }
                $code->setCodePrefix($collection->getCodePrefix());
                if($sepFlag)
                {
                     $code->setCodePrefixSeparator($collection->getCodePrefixSeparator());
                }
                
            }
            if($this->string_isset($collection->getCodeSuffix())&&$category=="main")
            {
                $suffixTmp=$collection->getCodeSuffix();
                $sepFlag=FALSE;
                if($this->string_isset($collection->getCodeSuffixSeparator()))
                {
                    $suffixTmp.=$collection->getCodeSuffixSeparator();
                    $sepFlag=TRUE;
                }
                if($this->endsWith($tmpCode,$suffixTmp ))
                {                
                    $tmpCode=substr_replace($tmpCode,'',strlen($tmpCode)-strlen($suffixTmp), strlen($suffixTmp));
                }
                if($sepFlag)
                {
                     $code->setCodeSuffixSeparator($collection->getCodeSuffixSeparator());
                }
                
            }
            $code->setCode($tmpCode) ;
            if(is_numeric($tmpCode)&&$collection->getCodeAutoIncrement()&&$category=="main")
            {
               
                if((int)$tmpCode>(int)$collection->getCodeLastValue())
                {
                    
                    $collection->setCodeLastValue($tmpCode);
                    $collection->save();
                }
            }
            $code->save();
                    
        }
  }
  
  


  public function getTaxon()
  {
    return $this->_get('taxon_name');
  }

  public function getChrono()
  {
    return $this->_get('chrono_name');
  }

  public function getLitho()
  {
    return $this->_get('litho_name');
  }

  public function getMineral()
  {
    return $this->_get('mineral_name');
  }

  public function getLithology()
  {
    return $this->_get('lithology_name');
  }
  public function getInstitution()
  {
    return $this->_get('institution_name');
  }
  public function getIg()
  {
    return $this->_get('ig_num');
  }

  public function getExpedition()
  {
    return $this->_get('expedition_name');
  }

  public function getAcquisition()
  {
    return $this->_get('acquisition_category');
  }

  public function getStationVisible()
  {
    return $this->_get('station_visible');
  }

  public function getStatusFor($field)
  {
    $emtpy = 'fld_empty';
    $tb_completed = 'fld_tocomplete';
    $tb_ok = 'fld_ok';
    if($this[$field] == '')
    {
      return $emtpy;
    }
    elseif($field == "taxon")
    {
      if($this['taxon_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "chrono")
    {
      if($this['chrono_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "litho")
    {
      if($this['litho_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "lithology")
    {
      if($this['lithology_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "mineral")
    {
      if($this['mineral_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "institution")
    {
      if($this['institution_ref'] == '')
        return $tb_completed;
      else
        return $tb_ok;
    }
    elseif($field == "gtu")
    {
      if($this['gtu_ref'] == '') 
		  return $tb_completed ;
      else
        return $tb_ok;
    }
    elseif($field == "expedition")
    {
      if($this['expedition_ref'] == '') 
		  return $tb_completed ;
      else
        return $tb_ok;
    }
    elseif($field == "code")
    {      
		//ftheeten cast Hstore as array
      if(array_key_exists("code", (array)$this->getStatus())) 
		  return $tb_completed ;
      else
        return $tb_ok;
    }
	elseif($field == "category")
    {      
	//ftheeten cast Hstore as array
      if(array_key_exists("category", (array)$this->getStatus())) 
		  return $tb_completed ;
      else
        return $tb_ok;
    }
	
  }
/*
  public function getIdentifier()
  {
    $q = Doctrine_Query::create()
      ->select('i.determination_status')
      ->from('identifications i')
      ->where('i.record_id = ?',$this->getId())
      ->andWhere('referenced_relation=\'staging\'');
    $identifiers = $q->fetchOne();
    return $this->getPeopleInError('identifiers',$identifiers) ;
  }
*/
  public function getIndividualCount()
  {
    if($this->_get('individual_count_min') == $this->_get('individual_count_max'))
      return $this->_get('individual_count_min');
    return $this->_get('individual_count_min') .'-'.$this->_get('individual_count_max');
  }

  public function getPartCount()
  {
    if($this->_get('part_count_min') == $this->_get('part_count_max'))
      return $this->_get('part_count_min');
    return $this->_get('part_count_min') .'-'.$this->_get('part_count_max');
  }

  public function getStatus()
  {
    $hstore = new Hstore() ;
    $hstore->import($this->_get('status')) ;
    return $hstore ;
  }

  public function getCodes()
  {
    return $this->codes;
  }

  public function setLinkedInfo($nbr)
  {
    $this->linkedInfo = $nbr;
  }

  public function getLinkedInfo()
  {
    if(isset($this->linkedInfo))
      return $this->linkedInfo - count($this->codes);
    return 0;
  }
  public function setStatus($value)
  {
    $status = '' ;    
    foreach($value as $field => $error)
    {
      if($error != 'done') $status .= '"'.$field.'"=>"'.$error.'",' ;
    }
    $this->_set('status', substr($status,0,strlen($status)-1));
  }

  // if tosave is set so it the save of the stagingForm wicht this function, I only return the list a fields in error
  public function getFields($tosave = null)
  {
    $status = $this->getStatus() ;
    if(!$status) return null ;
    $fieldsToShow = array();
    foreach($status as $key => $value)
    {
      if($tosave)
      {
        // staging_people and institution_relationship status are updated by a trigger, so we don't care about it here
        if(!in_array($key,array('people','identifiers','operator','institution_relationship'))) $fieldsToShow[$key] = $value ;
      }
      else  $fieldsToShow[$key] = array(
                                    'embedded_field' => $this->getFieldsToUseFor($key).'_'.$value, // to TEST
                                    'display_error' => self::$errors[($key=='duplicate'?$key:$value)],
                                    'fields' => $this->getFieldsToUseFor($key));
      if($key == 'duplicate') $fieldsToShow[$key]['duplicate_record'] = $value ;
    }
    return($fieldsToShow) ;
  }

  private function getErrorToDisplay($error_type)
  {
    try{
        $i18n_object = sfContext::getInstance()->getI18n();
    }
    catch( Exception $e )
    {
        return self::$errors[$error_type];
    }
    return array_map(array($i18n_object, '__'), self::$errors[$error_type]);
  }

  private function getFieldsToUseFor($field)
  {
    if($field == 'taxon') return('taxon_ref') ;
    if($field == 'chrono') return('chrono_ref') ;
    if($field == 'litho') return('litho_ref') ;
    if($field == 'mineral') return('mineral_ref') ;
    if($field == 'lithology') return('lithology_ref') ;
    if($field == 'expedition') return('expedition_ref') ;
    if($field == 'igs') return('ig_ref') ;
    if($field == 'people') return('people') ;
    if($field == 'identifiers') return('identifiers') ;
    if($field == 'institution') return('institution_ref') ;
    if($field == 'institution_relationship') return('relation_institution_ref') ;
    if($field == 'duplicate') return('spec_ref') ;
    if($field == 'operator') return('operator') ;
	#ftheeten 2019 01 29
	if($field == 'gtu') return('gtu_ref') ;
	if($field == 'code') return('code_ref') ;
	if($field == 'category') return('category') ;
    return($field) ;
  }
}
