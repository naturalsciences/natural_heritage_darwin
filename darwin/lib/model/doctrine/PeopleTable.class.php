<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PeopleTable extends DarwinTable
{
  /**
  * Find item for autocompletion
  * @param $user The User object for right management
  * @param $needle the string entered by the user for search
  * @param $exact bool are we searching the exact term or more or less fuzzy
  * @return Array of results
  */
  //ftheeten PHP level has to have a default value
   public function completeAsArray($user, $needle, $exact, $limit = 30, $level='', $agg=false)
  {
  
    $conn_MGR = Doctrine_Manager::connection();
    $q = Doctrine_Query::create()
      ->from('People')
      ->andWhere('is_physical = ?', true)
      ->orderBy('formated_name ASC')
      ->limit($limit);
    if($exact)
	{
		;
		$q->andWhere("formated_name = ?",$needle);
    }
	else
	{
	
      $q->andWhere("fulltoindex(formated_name,FALSE) like concat('%',fulltoindex(".$conn_MGR->quote($needle, 'string')."),'%') ");
    }
	$q_results = $q->execute();
    $result = array();
    foreach($q_results as $item) {
      $result[] = array('label' => $item->getFormatedName(), 'value'=> $item->getId() );
    }
    return $result;
  }


  /**
  * Find all distinct tyoe of institutions
  * @return Doctrine_Collection with only the key 'type'
  */
  public function getDistinctTitles()
  {
    return $this->createFlatDistinct('people', 'title', 'titles')->execute();

  }

  /**
  * Search all physical people by name
  * @param string $name a part of the formated name to look for (with ts)
  * @return Doctrine_Collection Collection of People
  */
  public function searchPysical($name)
  {
    $q = Doctrine_Query::create()
      ->from('People p')
      ->andWhere('p.is_physical = ?', true)
      ->andWhere('p.id != 0')
      ->andWhere('p.formated_name_indexed like concat(\'%\', fulltoindex(?), \'%\' )',$name);
    return $q->execute();
  }


  /**
  * Find Only people not institution
  * @param int the id of the people
  * @return Doctrine_Record 
  */
  public function findPeople($id)
  {
    $q = Doctrine_Query::create()
	 ->from('People p')
	 ->where('p.id = ?', $id)
   ->andWhere('p.id != 0')
	 ->andWhere('p.is_physical = ?', true);

    return $q->fetchOne(); 
  }
  
  /**
  * Find Only people with specified family name
  * @param string the name of the people
  * @return Doctrine_Record 
  */
    public function getPeopleByName($name)
    {
      $q = Doctrine_Query::create()
      ->from('people p')
      ->where('p.family_name = ?', $name);

      return $q->fetchOne(); 
    }
	
    public function getPeopleAsArray($id)
	{
		$sql="SELECT p.* FROM people p WHERE id=:id;";
		$conn_MGR = Doctrine_Manager::connection();
        $conn = $conn_MGR->getDbh();
		$stmt=$conn->prepare($sql);
        $stmt->bindValue(":id", $id);
			
		$stmt->execute();
        $rs=$stmt->fetchAll(PDO::FETCH_ASSOC);
		
		if(count($rs)>0)
		{
            $rs=$rs[0];			
			$sql2="SELECT i.* FROM identifiers i WHERE i.referenced_relation='people' AND i.record_id=:id";
			$stmt2=$conn->prepare($sql2);
			$stmt2->bindValue(":id", strtolower($rs["id"]));
			$stmt2->execute();
			$rs2=$stmt2->fetchAll(PDO::FETCH_ASSOC);
			$identifiers=Array();
			foreach($rs2 as $rec2)
			{
				$identifiers[]=Array("identifier_protocol"=> $rec2["protocol"], "identifier_value"=> $rec2["value"]);
			}
			$rs["people_identifiers"]=$identifiers;
		}
		return $rs;
	}
	
	
    public function getPeopleAsArrayIdentifier($identifier_protocol, $identifier_value)
	{
		$sql="select i.record_id  from Identifiers i where referenced_relation = 'people' AND LOWER(i.protocol)=:protocol AND i.value=:value;";
		$conn_MGR = Doctrine_Manager::connection();
        $conn = $conn_MGR->getDbh();
		$stmt=$conn->prepare($sql);
        $stmt->bindValue(":protocol", strtolower($identifier_protocol));
		$stmt->bindValue(":value", $identifier_value);
		$stmt->execute();
        $rs=$stmt->fetchAll(PDO::FETCH_ASSOC);
		$res_json=Array();
		
		foreach($rs as $rec)
		{
			$res_json[]=$this->getPeopleAsArray($rec["record_id"]);
		}
		return $res_json;		
	}

}
