<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UsersTable extends DarwinTable
{
  /**
  * Find item for autocompletion
  * @param $user The User object for right management
  * @param $needle the string entered by the user for search
  * @param $exact bool are we searching the exact term or more or less fuzzy
  * @return Array of results
  */
  public function completeAsArray($user, $needle, $exact, $limit = 30, $level)
  {
    $conn_MGR = Doctrine_Manager::connection();
    $q = Doctrine_Query::create()
      ->from('Users')
      ->orderBy('formated_name ASC')
      ->limit($limit);
    if($exact)
      $q->andWhere("formated_name = ?",$needle);
    else
      $q->andWhere("formated_name_indexed like concat('%',fulltoindex(".$conn_MGR->quote($needle, 'string')."),'%') ");
    $q_results = $q->execute();
    $result = array();
    foreach($q_results as $item) {
      $result[] = array('label' => $item->getFormatedName(), 'value'=> $item->getId() );
    }
    return $result;
  }

  /**
  * Get a user with his username and password in internal system
  * @param string $username The username
  * @param string $password The password of the user
  * @return a record with the user or null if it's not found
  */
  public function getUserByPassword($username, $password)
  {
      $q = Doctrine_Query::create()
          ->useResultCache(null)
          ->from('Users u')
          ->leftJoin('u.UsersLoginInfos ul')
          ->andWhere('ul.user_name = ?',$username)
          ->andWhere('ul.password = ?',sha1(sfConfig::get('dw_salt').$password))
          ->andWhere('ul.login_system is null')
          ->andWhere('ul.login_type = ?', 'local');
      return $q->fetchOne();
  }

  public function getTrackingUsers()
  {
    $q = Doctrine_Query::create()
      ->from('Users u')
      //->innerJoin('u.UsersTracking t');
      ->where('exists( select user_ref from users_tracking where user_ref=u.id)');
    return $q->execute();
  }

  public function findUser($id)
  {
    $q = Doctrine_Query::create()
      ->from('users u')
      ->where('u.id = ?', $id);
    return $q->fetchOne(); 
  }
  
  public  function getManagerWithId($id)
  {
    $q = Doctrine_Query::create()
      ->from('users u')
      ->where('u.db_user_type >= 4')
      ->andwhere('u.id = ?', $id);

    return $q->fetchOne(); 
  }

  public function getDistinctTitle()
  {
      return $this->createFlatDistinct('users', 'title', 'title')->execute();
  }	
  
  public function getDistinctSubType()
  {
      return $this->createFlatDistinct('users', 'sub_type', 'sub_type')->execute();
  }

  public function getUserByLoginAndEMail($username, $email)
  {
    $q = Doctrine_Query::create()
          ->useResultCache(null)
          ->from('Users u')
          ->innerJoin('u.UsersLoginInfos ul')
          ->innerJoin('u.UsersComm uc')
          ->andWhere('ul.user_name = ?',$username)
          ->andWhere('ul.login_system is null')
          ->andWhere('ul.login_type = ?', 'local')
          ->andWhere('uc.comm_type = ?', 'e-mail')
          ->andWhere('lower(uc.entry) = lower(?)', $email);
    return $q->fetchOne();
  }

  public function getUserByLogin($username, $type='local')
  {
     $q = Doctrine_Query::create()
      ->useResultCache(null)
      ->from('Users u')
      ->innerJoin('u.UsersLoginInfos ul')
      ->andWhere('ul.user_name = ?',$username)
      ->andWhere('ul.login_system is null')
      ->andWhere('ul.login_type = ?', $type);
    return $q->fetchOne();
  }

  public function getUserByLoginWithEmailOnly($username, $type='local')
  {
     $q = Doctrine_Query::create()
          ->useResultCache(null)
          ->from('Users u')
          ->innerJoin('u.UsersLoginInfos ul')
          ->innerJoin('u.UsersComm uc')
          ->andWhere('ul.user_name = ?',$username)
          ->andWhere('ul.login_system is null')
          ->andWhere('ul.login_type = ?', $type)
          ->andWhere('uc.comm_type = ?', 'e-mail');
    return $q->fetchOne();
  }

  /**
   * Get list of encoders and conservators available if at least conservator
   * Get the list of himself if encoder ... Otherwise sends nothing
   * @param myUser $user A doctrine myUser class object containing informations about the current user
   * @return mixed[] A collection of users entries
   */
  public function getRestrictedEncodersList(myUser $user) {
    $result = array();
    $q = Doctrine_Query::create()
        ->select('u.id')
        ->addSelect('u.formated_name')
        ->from('Users u')
        ->where('u.db_user_type >= 2')
        ->orderBy('u.formated_name_indexed');
    if ($user->isA(Users::ENCODER)) {
      $q->addWhere('u.id = ?', array($user->getId()));
    }
    elseif (! ( $user->isAtLeast( Users::MANAGER ) ) ) {
      return $result;
    }
    else {
      $result[] = $this->getI18N()->__('All');
    }
    $results = $q->fetchArray();
    foreach ( $results as $results_item ) {
      $result[$results_item['id']] = $results_item['formated_name'];
    }
    return $result;
  }
  
  public function getWidgetTemplate($user, $collection_ref)
  {

	if($collection_ref!==null)
	{
		 $q = Doctrine_Query::create()
			->select('DISTINCT w.*')
			->from('WidgetProfiles w')
			->andWhere('EXISTS(select 1 from collections_rights c where (c.user_ref= ?  AND c.collection_ref=?)
		    AND c.widget_profile_ref=w.id   )', array($user->getId(), $collection_ref));
			return $q->fetchOne();
    }
    else
    {
		return null;
	}	
  }
  
  public function getPreferredWidgetTemplate($user)
  {
	$default_collection_tmp=$user->getDefaultWidgetCollectionRef();
	$default_collection=null;
	if(strlen(trim($default_collection_tmp))>0)
	{
		if(is_numeric($default_collection_tmp))
		{
			 $default_collection=$default_collection_tmp;
		}
	}
	if($default_collection!==null)
	{
		 $q = Doctrine_Query::create()
			->select('DISTINCT w.*')
			->from('WidgetProfiles w')
			->andWhere('EXISTS(select 1 from collections_rights c where (c.user_ref= ?  AND c.collection_ref=?)
		    AND c.widget_profile_ref=w.id   )', array($user->getId(), $default_collection));
			return $q->fetchOne();
    }
    else
    {
		return null;
	}	
  }
  
   public function getWidgetTemplates($user_id, $add_custom=false)
  {
	  
	  $user_tmp=Doctrine_Core::getTable('Users')->find($user_id);
	  $default_collection_tmp=$user_tmp->getDefaultWidgetCollectionRef();
	  
	  $default_collection=null;
	  if(strlen(trim($default_collection_tmp))>0)
	  {
		if(is_numeric($default_collection_tmp))
		{
			 $default_collection=$default_collection_tmp;
		}
	  }
	  if($default_collection!==null)
	  {			
			 $q = Doctrine_Query::create()
			->select('DISTINCT w.*')
			->from('WidgetProfiles w')
			->andWhere('EXISTS(select 1 from collections_rights c where (c.user_ref= ?  OR c.collection_ref=?)
							  AND c.widget_profile_ref=w.id   )', array($user_id, $default_collection))
			->orderBy('w.name');
	  }
	  else
	  {
		  $q = Doctrine_Query::create()
			->select('DISTINCT w.*')
			->from('WidgetProfiles w')
			->andWhere('EXISTS(select 1 from collections_rights c where c.user_ref= ? 
							  AND c.widget_profile_ref=w.id  )', $user_id)
			->orderBy('w.name');
	   }	
		//$results = $q->fetchArray();
		
	
		$rs=$q->execute();
		if( $add_custom==false)
		{
			return $rs;
			
		}
		else
		{
			$tmp=new WidgetProfiles();
			$tmp->setId(-1);
			$tmp->setName("User defined");
			
			
			$rs->add($tmp);
			return $rs;
		}
  }
}
