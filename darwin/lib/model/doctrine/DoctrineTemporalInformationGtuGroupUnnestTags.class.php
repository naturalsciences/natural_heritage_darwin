<?php

/**
 * DoctrineTemporalInformationGtuGroupUnnestTags
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
   //ftheeten PHP8

	const ESC_RAW='esc_raw';


class DoctrineTemporalInformationGtuGroupUnnestTags extends BaseDoctrineTemporalInformationGtuGroupUnnestTags
{
	
    public function getGtuFromDateMasked ()
      {
        $dateTime = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true, true);
        return $dateTime->getDateMasked();
      }
      
      public function getGtuToDateMasked ()
      {
        $dateTime = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'),false, true);
        return $dateTime->getDateMasked();
      }
      
      public function getGtuFromDate()
      {
        $from_date = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true,true);
        return $from_date->getDateTimeMaskedAsArray();
      }

      public function getGtuToDate()
      {
        $to_date = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'), false,true);
        return $to_date->getDateTimeMaskedAsArray();
      }

      public function setGtuFromDate($fd)
      {
        if ($fd instanceof FuzzyDateTime)
        {
          $this->_set('gtu_from_date', $fd->format('Y/m/d H:i:s'));
          $this->_set('gtu_from_date_mask', $fd->getMask());
        }
        else
        {
          $dateTime = new FuzzyDateTime($fd, 56, true,true);
          if(is_array($fd))
            $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
          $this->_set('gtu_from_date', $dateTime->format('Y/m/d H:i:s'));
          $this->_set('gtu_from_date_mask', $dateTime->getMask());
        }
      }

      public function setGtuToDate($fd)
      {
        if ($fd instanceof FuzzyDateTime)
        {
          $this->_set('gtu_to_date', $fd->format('Y/m/d H:i:s'));
          $this->_set('gtu_to_date_mask', $fd->getMask());
        }
        else
        {
          $dateTime = new FuzzyDateTime($fd, 56, false,true);
          if(is_array($fd))
            $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
          $this->_set('gtu_to_date', $dateTime->format('Y/m/d H:i:s'));
          $this->_set('gtu_to_date_mask', $dateTime->getMask());
        }
      }

      public function getName($view = null, $countriesOnly = false)
      {
        if($this->_get('id')==0) return '-';
        $nbr = count($this->TagGroups);
        if(! $nbr) return "No Tags";
        $str = '<ul  class="search_tags">';
        foreach($this->TagGroups as $group)
        {
          if(!$countriesOnly || ($countriesOnly && $group->getSubGroupName()=='country')) {
            $str .= '<li><label>'.$group->getSubGroupName().'<span class="gtu_group"> - '.TagGroups::getGroup($group->getGroupName()).'</span></label><ul class="name_tags'.($view!=null?"_view":"").'">';
            $tags = explode(";",$group->getTagValue());
            foreach($tags as $value)
              if (strlen($value))
                $str .=  '<li>' . trim($value).'</li>';
            $str .= '</ul><div class="clear"></div>';
            if($countriesOnly)
              break;
          }
        }
        $str .= '</ul>';
        return $str;
      }
      
        public function getMap()
      {
        if( $this->getLatitude() != '' && $this->getLongitude()!= '')
          return '<img class="gtu_img_loc" src="http://staticmap.openstreetmap.de/staticmap.php?&size=480x240&center='.$this->getLatitude().','.$this->getLongitude().'&zoom=6&markers='.$this->getLatitude().','.$this->getLongitude().',red-pushpin" alt="Sampling location" />';
        return '';
      }
  
      
        public function getTagsWithCode($view = null)
      {
        $str = $this->getName($view);
        if($this->getLongitude() != '')
          $str .= '<b class="img">'.$this->getMap().'</b>';
        $str .=  '<b class="code">'.$this->getCode().'</b>';
        $str .=  '<b class="lat">'.$this->getLatitude().'</b>';
        $str .=  '<b class="lon">'.$this->getLongitude().'</b>';
        $str .=  '<b class="date_from">'.$this->getGtuFromDateMasked().'</b>';
        $str .=  '<b class="date_to">'.$this->getGtuToDateMasked().'</b>';

        return $str;
      }

      public function getCode()
      {
        if(! $this->isNew() && $this->_get('id')==0)
          return '-';
        return $this->_get('code');
      }

      public function hasCountries()
      {
        $q = Doctrine_Query::create()
             ->from('TagGroups tg')
             ->where('tg.gtu_ref = ? and tg.sub_group_name_indexed = ?', array($this->_get('id'), 'country'));
        return (count($q->execute()));
      }

      
      //ftheeten 2018 01 07
       public function convertToTemporalInformation()
       {
            $returned = Array();
            $from_date_masks =explode(",",preg_replace('/\{|\|\'|\"}/i','', $this->getFromDateMask()));
            $from_date = explode(",",preg_replace('/\{|\|\'|\"}/i','', $this->getFromDate()));
            $to_date_masks =explode(",",preg_replace('/\{|\}/i','', $this->getToDateMask()));
            $to_date = explode(",",preg_replace('/\{|\}/i','', $this->getToDate()));
            if(count($from_date)>0&&(count($from_date_masks)==count($from_date))&&(count($to_date_masks)==count($to_date)))
            {
                for($i=0; $i<count( $from_date_masks); $i++)
                {
                
                    if((int)$from_date_masks[$i]>0)
                    {
                        $item = new TemporalInformation();
                        $item->setGtuRef($this->getId());
                        
                        $item->setFromDate(str_replace('"','',$from_date[$i]));
                        $item->setFromDateMask($from_date_masks[$i]);
                        if($i<count($to_date))
                        {
                            if((int)$to_date_masks[$i]>0)
                            {                                
                                $item->setToDate(str_replace('"','',$to_date[$i]));
                                $item->setToDateMask($to_date_masks[$i]);
                            }
                        }
                        $returned[]= $item;
                    }
                }
                
            }
          
            return $returned;
       }
       
  //ftheeten 2018 12 12
  public function getRelatedTemporalInformationMasked()
  {
  

	  $returned=Array();
      $tmpTemporalInformation = $this->convertToTemporalInformation();
      
      if(count($tmpTemporalInformation)>0)
      {
          foreach($tmpTemporalInformation as $key=>$item)
          {
                if((int)$item->getFromDateMask()>0||(int)$item->getToDateMask()>0)
                {
                    $tmp=Array();
                    //$tmp['id']=$item->getId();
                    $tmp['from_raw']=$item->getFromDate();
                    $tmp['to_raw']=$item->getToDate();
                    $tmp["from"]=$item->getFromDateString();//getFromDateMasked(ESC_RAW);
                    $tmp["to"]=$item->getToDateString(); //getToDateMasked(ESC_RAW);
                    $tmp["from_masked"]=$item->getFromDateMasked(ESC_RAW);
                    $tmp["to_masked"]=$item->getToDateMasked(ESC_RAW);
                    $tmp["from_mask"]=(int)$item->getFromDateMask();
                    $tmp["to_mask"]=(int)$item->getToDateMask();
                    
                    $tmp['from_year']=$item->getFromDate()['year'];
                    $tmp['from_month']=$item->getFromDate()['month'];
                    $tmp['from_day']=$item->getFromDate()['day'];
                    $tmp['from_hour']=$item->getFromDate()['hour'];
                    $tmp['from_minute']=$item->getFromDate()['minute'];
                    $tmp['from_second']=$item->getFromDate()['second'];
                    $tmp['to_year']=$item->getToDate()['year'];
                    $tmp['to_month']=$item->getToDate()['month'];
                    $tmp['to_day']=$item->getToDate()['day'];
                    $tmp['to_hour']=$item->getToDate()['hour'];
                    $tmp['to_minute']=$item->getToDate()['minute'];
                    $tmp['to_second']=$item->getToDate()['second'];
                    
                     
                      //test from data mask
                    $msk=(int)$item->getFromDateMask();
                 
                    if($msk&1)
                    {
                        $tmp["from_masked_select"]=$item->getFromDateMasked(ESC_RAW);
                    }
                    elseif($msk&2)
                    {
                        $tmp["from_masked_select"]=$item->getFromDateMasked(ESC_RAW);
                    }
                    elseif($msk&4)
                    {
                        $tmp["from_masked_select"]=$item->getFromDateMasked(ESC_RAW);
                    }
                    elseif($msk&8)
                    {
                        $tmp["from_masked_select"]=$item->getFromDate()['day'].'/'.$item->getFromDate()['month'].'/'.$item->getFromDate()['year'];
                    }
                    elseif($msk&16)
                    {
                        $tmp["from_masked_select"]='xx/'.$item->getFromDate()['month'].'/'.$item->getFromDate()['year'];
                    }
                    elseif($msk&32)
                    {
                        $tmp["from_masked_select"]='xx/xx/'.$item->getFromDate()['year'];
                    }
                    else
                    {
                         $tmp["from_masked_select"]='UNK';
                    }
                    //to
                    $msk=(int)$item->getToDateMask();
                 
                    if($msk&1)
                    {
                        $tmp["to_masked_select"]=$item->getToDateMasked(ESC_RAW);
                    }
                    elseif($msk&2)
                    {
                        $tmp["to_masked_select"]=$item->getToDateMasked(ESC_RAW);
                    }
                    elseif($msk&4)
                    {
                        $tmp["to_masked_select"]=$item->getToDateMasked(ESC_RAW);
                    }
                    elseif($msk&8)
                    {
                        $tmp["to_masked_select"]=$item->getToDate()['day'].'/'.$item->getToDate()['month'].'/'.$item->getFromDate()['year'];
                    }
                    elseif($msk&16)
                    {
                        $tmp["to_masked_select"]='xx/'.$item->getToDate()['month'].'/'.$item->getToDate()['year'];
                    }
                    elseif($msk&32)
                    {
                        $tmp["to_masked_select"]='xx/xx/'.$item->getToDate()['year'];
                    }
                    else
                    {
                         $tmp["to_masked_select"]='UNK';
                    }

                    $returned[]=$tmp;
                }
          }
          usort($returned, function($a, $b) {
            return ($a['from_masked'].$a['to_masked']) - ($b['from_masked'].$b['to_masked']);
            });
      }
	  $returned= array_unique($returned, SORT_REGULAR);
	  
	  
	  return $returned;
  }
}
