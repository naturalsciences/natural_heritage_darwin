<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Collections extends BaseCollections
{
  public function getLevel()
  {
      return  substr_count($this->getPath(),'/');
  }
  
  public function __toString()
  {
      return str_repeat('&nbsp;&nbsp;&nbsp;',$this->getLevel()-1).$this->getName();
  }
  public function getNameWithFormat()
  {
    return $this->getName();
  }

  public function getTypeInCol()
  {
    if(count($this->CollectionsRights) )
      return  $this->CollectionsRights[0]->getDbUserType();
    return 0;
  }




  
  protected $children = array();
  protected $parent_node = null;

  public function addChild($CollectionTree)
  {
    $CollectionTree->setParentNode($this);
    $this->children[strtolower($CollectionTree->getName())] = $CollectionTree;
  }

  public function hasChild()
  {
    return count($this->children) !=0;
  }

  public function getChilds()
  {
    ksort($this->children);
    return $this->children;
  }

  public function getParentNode()
  {
    return $this->parent_node;
  }

  protected function setParentNode($parent)
  {
    $this->parent_node = $parent;
  }
  
  public function getFirstCommonAncestor($item)
  {
    if($item->getParentRef() == $this->getId()) return $this;

    $i_path = explode('/',$item->getPath());
    $i_path[] = $item->getId();
    
    $t = $this;
    do{
      for($i=count($i_path)-1; $i >= 0 ; $i--)
      {
        if($t->getId() == $i_path[$i])
          return $t;
      }
      if($t->parent_node == null) return  $t;

      $t = $t->getParentNode();
    } while(true);
  }

  public function isEncodable()
  {
    if(count($this->CollectionsRights) && $this->CollectionsRights[0]->getDbUserType() >= Users::ENCODER)
      return true;
    return false;
  }
  
    public function detectTrueParentForAutoIncrement()
  {
   

    $i_path = explode('/',$this->getPath());
    $i_path[] = $this->getId();
    
    $t = $this;
    do{
      for($i=count($i_path)-1; $i >= 0 ; $i--)
      {
        if($t->getCodeAutoIncrement())
        {
          return $t;
        }
      }
      

      $t = $t->getParentNode();
    } while(true);
    return $this;
  }

  
}