<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Collections extends BaseCollections
{  
	
  public function getLevel()
  {
      return  substr_count($this->getPath(),'/');
  }
  
  public function __toString()
  {
      return str_repeat('&nbsp;&nbsp;&nbsp;',$this->getLevel()-1).$this->getName();
  }
  public function getNameWithFormat()
  {
    return $this->getName();
  }

  public function getTypeInCol()
  {
    if(count($this->CollectionsRights) )
      return  $this->CollectionsRights[0]->getDbUserType();
    return 0;
  }
  
  protected $children = array();
  protected $parent_node = null;

  public function addChild($CollectionTree)
  {
    $CollectionTree->setParentNode($this);
    $this->children[strtolower($CollectionTree->getName())] = $CollectionTree;
  }

  public function hasChild()
  {
    return count($this->children) !=0;
  }

  public function getChilds()
  {
    ksort($this->children);
    return $this->children;
  }

  public function getParentNode()
  {
    return $this->parent_node;
  }

  protected function setParentNode($parent)
  {
    $this->parent_node = $parent;
  }
  
  public function getFirstCommonAncestor($item)
  {
    if($item->getParentRef() == $this->getId()) return $this;

    $i_path = explode('/',$item->getPath());
    $i_path[] = $item->getId();
    
    $t = $this;
    do{
      for($i=count($i_path)-1; $i >= 0 ; $i--)
      {
        if($t->getId() == $i_path[$i])
          return $t;
      }
      if($t->parent_node === null) return  $t;

      $t = $t->getParentNode();
    } while(true);
  }

  public function isEncodable()
  {
    if(count($this->CollectionsRights) && $this->CollectionsRights[0]->getDbUserType() >= Users::ENCODER)
      return true;
    return false;
  }
  
  public function detectTrueParentForAutoIncrement()
  {
   

    $i_path = explode('/',$this->getPath());
    $i_path[] = $this->getId();
    
    $t = $this;
    do{
      for($i=count($i_path)-1; $i >= 0 ; $i--)
      {
        if($t->getCodeAutoIncrement())
        {
          return $t;
        }
      }
      

      $t = $t->getParentNode();
    } while(true);
    return $this;
  }
  
  public function getAutoIncrementFromParent()
  {
	  if($this->getCodeAutoIncrement())
	  {
			if($this->getCodeAiInherit())
			{
				$conn = Doctrine_Manager::connection();				
				$sql = "SELECT * FROM fct_rmca_collection_get_autoincrement_hierarchy(:coll_id);";
				$q = $conn->prepare($sql);
             
				$q->bindParam(":coll_id", $this->getId());
              
				$q->execute();
				$item=$q->fetch(PDO::FETCH_NUM);
             
				return $item[0];
    
			}
			else
			{
				return $this->getCodeLastValue();
			}
	  }
	  return -1;
  }
  
   public function getPathString()
  {
	  $conn = Doctrine_Manager::connection();				
	  $sql = "SELECT * FROM fct_rmca_get_collection_text_path(:coll_id);";
	  $q = $conn->prepare($sql);
             
	  $q->bindParam(":coll_id", $this->getId());
              
	 $q->execute();
	 $item=$q->fetch(PDO::FETCH_NUM);
             
	  return $item[0];
  }
  
public  function getCollectionPathName($id, $user)
  {
	  $tmp_colls=$user->getAttribute("collpaths");
	  if($tmp_colls===null)
	  {
		  $tmp_colls=Array();
		  
	  }
	  else
	  {
		  
		   $tmp_colls=$tmp_colls->getRawValue();;
		   
	  }
	  if(!array_key_exists($id,$tmp_colls))
	  {
		  $tmp_obj=Doctrine_Core::getTable('VCollectionsFullPathRecursive')->findOneById($id);
		  $path=$tmp_obj->getNameFullPath();
		   $tmp_colls[$id]=$path;
	  }
	  return   $tmp_colls[$id];
	}
		  /*$tmp_path=Doctrine_Core::getTable('Collections')->findOneById($id)->getPath();
		  $arr_path=explode("/", $tmp_path);
		  $arr_target=array();
		  foreach($arr_path as $item)
		  {
			  if(strlen($item)>0)
			  {

				  if(is_numeric($item))
				  {
					  $tmp_name= Doctrine_Core::getTable('Collections')->findOneById($item)->getName();
					  $arr_target[$item]=$tmp_name;
				  }
			  }
		  }
		   $arr_target[$id]=Doctrine_Core::getTable('Collections')->findOneById($id)->getName();
		   
		 
		  
		  $tmp_colls[$id]=$arr_target;
		  $user->setAttribute("collpaths",  $tmp_colls);
		  return   $tmp_colls[$id];
	  }
	  else
	  {
		 return   $tmp_colls[$id];
	  }
		  
		  
	 }
  
 /*public  function getCollectionPathName($id, $user)
  {
	  $tmp_colls=$user->getAttribute("collpaths");
	  if($tmp_colls===null)
	  {
		  $tmp_colls=Array();
		  
	  }
	  else
	  {
		  
		   $tmp_colls=$tmp_colls->getRawValue();;
		   
	  }
	  if(!array_key_exists($id,$tmp_colls))
	  {
		  
		  $tmp_path=Doctrine_Core::getTable('Collections')->findOneById($id)->getPath();
		  $arr_path=explode("/", $tmp_path);
		  $arr_target=array();
		  foreach($arr_path as $item)
		  {
			  if(strlen($item)>0)
			  {

				  if(is_numeric($item))
				  {
					  $tmp_name= Doctrine_Core::getTable('Collections')->findOneById($item)->getName();
					  $arr_target[$item]=$tmp_name;
				  }
			  }
		  }
		   $arr_target[$id]=Doctrine_Core::getTable('Collections')->findOneById($id)->getName();
		   
		 
		  
		  $tmp_colls[$id]=$arr_target;
		  $user->setAttribute("collpaths",  $tmp_colls);
		  return   $tmp_colls[$id];
	  }
	  else
	  {
		 return   $tmp_colls[$id];
	  }
		  
		  
	 }*/
  
}
