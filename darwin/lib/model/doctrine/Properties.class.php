<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Properties extends BaseProperties
{

  public function getLink()
  {
    return $this->getTable()->getLinkforKnownTable($this->getReferencedRelation(),$this->getRecordId());
  }
  public static function searchRecognizedUnitsGroups($unit){
    foreach(self::getRecognizedUnitsByType() as $type => $group) {
      if(in_array($unit, $group))
        return $group;
    }
    return false;
  }

  public static function getRecognizedUnitsByType(){
    return array(
      //time
      //'ns', 'shake', 'µs', 'ms', 'cs', 't', 'ds', 'min', 'h', 'd', 'j', 'y', 'year',
      'speed' => array(
        'Kt', 'Beaufort', 'm/s'),
      'weight' => array(
        'g', 'hg', 'kg', 'ton', 'dg', 'cg', 'mg', 'lb', 'lbs', 'pound' , 'ounce' , 'grain',),
      'volume' => array(
        'm³', 'l', 'cm³', 'ml', 'mm³' ,'µl' , 'µm³' , 'km³', 'Ml' , 'hl',),
      'temperature' => array(
        'K', '°C', '°F', '°Ra', '°Re', '°r', '°N', '°Rø', '°De',),
      'length' => array(
        'm', 'dm', 'cm', 'mm', 'µm', 'nm', 'pm', 'fm', 'am', 'zm', 'ym', 'am', 'dam', 'hm', 'km', 'Mm',
        'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym', 'mam', 'mom', 'Å', 'ua', 'ch', 'fathom', 'fermi', 'ft', 'in',
        'K', 'l.y.', 'ly', 'µ', 'mil', 'mi', 'nautical mi', 'pc', 'point', 'pt', 'pica', 'rd', 'yd', 'arp',
        'lieue', 'league', 'cal', 'twp', 'p', 'P', 'fur', 'brasse', 'vadem', 'fms',),
    );
  }
  private static function getModelList($table)
  {
    $file=sfConfig::get('sf_data_dir').'/feed/properties_template.yml' ;
    $data = new Doctrine_Parser_Yml();
    $array = $data->loadData($file);
    $model = array("" => "No templates") ;
    //This test below is theoricaly not necessary since the table should exist in properties_template.yml
    if(@is_array($array[$table]))
    {
      foreach($array[$table] as $key => $value)
        $model[$key] = $value['model_name'] ;
    }
    return $model ;
  }

  public static function getModels($table)
  {

    try{
        $i18n_object = sfContext::getInstance()->getI18n();
    }
    catch( Exception $e )
    {
        return self::getModelList($table);
    }
    return array_map(array($i18n_object, '__'), self::getModelList($table));
  }  
  
  /**
  * Set DateFrom field and mask if a fuzzyDateTime is passed
  * @param string|fuzzyDateTime $fd a fuzzyDateTime object or a string to pass to postgres
  * @return $this
  */
  public function setDateFrom($fd)
  {
     if(is_string($fd))
     {
	$this->_set('date_from',$fd);
     }
     else
     {
      $this->_set('date_from', $fd->format('Y/m/d H:i:s') );
      $this->_set('date_from_mask', $fd->getMask() );
     }
     return $this;
  }

  /**
  * Set DateTo field and mask if a fuzzyDateTime is passed
  * @param string|fuzzyDateTime $fd a fuzzyDateTime object or a string to pass to postgres
  * @return $this
  */
  public function setDateTo($fd)
  {
     if(is_string($fd))
     {
	$this->_set('date_to',$fd);
     }
     else
     {
      $this->_set('date_to', $fd->format('Y/m/d H:i:s') );
      $this->_set('date_to_mask', $fd->getMask() );
     }
     return $this;
  }
  
  /**
  * Get the From date masked with tag $tag depending on the mask value
  * @param string $tag Tag wich will be arround fuzzy values (default < em >)
  * @return string the Date masked
  */
  public function getFromDateMasked($tag='em')
  {
    $dateTime = new FuzzyDateTime($this->_get('date_from'), $this->_get('date_from_mask'),true,true);
    return $dateTime->getDateMasked($tag);
  }
 
  /**
  * Get the From date masked with tag $tag depending on the mask value
  * @param string $tag Tag wich will be arround fuzzy values (default < em >)
  * @return string the Date masked
  */
  public function getToDateMasked($tag='em')
  {
    $dateTime = new FuzzyDateTime($this->_get('date_to'), $this->_get('date_to_mask'),false,true);
    return $dateTime->getDateMasked($tag);
  }

  /** 
  * Get date To as array with masked values
  * @return array an array of masked elements with key year,month,day,hour,minute,second
  * @see FuzzyDateTime::getDateTimeMaskedAsArray
  */
  public function getDateTo()
  {
    $date = new FuzzyDateTime($this->_get('date_to'),$this->_get('date_to_mask'),true, true);
    return $date->getDateTimeMaskedAsArray();
  }
  
  //ftheeten 2019 01 30
    public function getDateToRaw()
  {    
    return $this->_get('date_to');
  }
  
  public function getDateFromRaw()
  {    
    return $this->_get('date_from');
  }
  

  /** 
  * Get date From as array with masked values
  * @return array an array of masked elements with key year,month,day,hour,minute,second
  * @see FuzzyDateTime::getDateTimeMaskedAsArray
  */
  public function getDateFrom()
  {
    $date = new FuzzyDateTime($this->_get('date_from'),$this->_get('date_from_mask'),false, true);
    return $date->getDateTimeMaskedAsArray();
  }
  
  public function setPropertyTemplate($template)
  {
    $file=sfConfig::get('sf_data_dir').'/feed/properties_template.yml' ;
    $data = new Doctrine_Parser_Yml();
    $array = $data->loadData($file);
    //This test below is theoricaly not necessary since the table should exist in properties_template.yml    
    if(@is_array($array[$this->getReferencedRelation()][$template]))
      $this->fromArray($array[$this->getReferencedRelation()][$template]) ;
    else
      return null ;
  }
}
