<?php

/**
 * BaseStagingMultimedia
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $referenced_relation
 * @property integer $record_id
 * @property boolean $is_digital
 * @property string $type
 * @property string $sub_type
 * @property string $title
 * @property string $description
 * @property string $uri
 * @property : { type: string } $filename
 * @property string $creation_date
 * @property integer $creation_date_mask
 * @property string $mime_type
 * @property boolean $visible
 * @property boolean $publishable
 * @property string $extracted_info
 * @property string $technical_parameters
 * @property string $external_uri
 * @property string $internet_protocol
 * @property string $field_observations
 * 
 * @method integer           getId()                   Returns the current record's "id" value
 * @method string            getReferencedRelation()   Returns the current record's "referenced_relation" value
 * @method integer           getRecordId()             Returns the current record's "record_id" value
 * @method boolean           getIsDigital()            Returns the current record's "is_digital" value
 * @method string            getType()                 Returns the current record's "type" value
 * @method string            getSubType()              Returns the current record's "sub_type" value
 * @method string            getTitle()                Returns the current record's "title" value
 * @method string            getDescription()          Returns the current record's "description" value
 * @method string            getUri()                  Returns the current record's "uri" value
 * @method string            getCreationDate()         Returns the current record's "creation_date" value
 * @method integer           getCreationDateMask()     Returns the current record's "creation_date_mask" value
 * @method string            getMimeType()             Returns the current record's "mime_type" value
 * @method boolean           getVisible()              Returns the current record's "visible" value
 * @method boolean           getPublishable()          Returns the current record's "publishable" value
 * @method string            getExtractedInfo()        Returns the current record's "extracted_info" value
 * @method string            getTechnicalParameters()  Returns the current record's "technical_parameters" value
 * @method string            getExternalUri()          Returns the current record's "external_uri" value
 * @method string            getInternetProtocol()     Returns the current record's "internet_protocol" value
 * @method string            getFieldObservations()    Returns the current record's "field_observations" value
 * @method StagingMultimedia setId()                   Sets the current record's "id" value
 * @method StagingMultimedia setReferencedRelation()   Sets the current record's "referenced_relation" value
 * @method StagingMultimedia setRecordId()             Sets the current record's "record_id" value
 * @method StagingMultimedia setIsDigital()            Sets the current record's "is_digital" value
 * @method StagingMultimedia setType()                 Sets the current record's "type" value
 * @method StagingMultimedia setSubType()              Sets the current record's "sub_type" value
 * @method StagingMultimedia setTitle()                Sets the current record's "title" value
 * @method StagingMultimedia setDescription()          Sets the current record's "description" value
 * @method StagingMultimedia setUri()                  Sets the current record's "uri" value
 * @method StagingMultimedia setCreationDate()         Sets the current record's "creation_date" value
 * @method StagingMultimedia setCreationDateMask()     Sets the current record's "creation_date_mask" value
 * @method StagingMultimedia setMimeType()             Sets the current record's "mime_type" value
 * @method StagingMultimedia setVisible()              Sets the current record's "visible" value
 * @method StagingMultimedia setPublishable()          Sets the current record's "publishable" value
 * @method StagingMultimedia setExtractedInfo()        Sets the current record's "extracted_info" value
 * @method StagingMultimedia setTechnicalParameters()  Sets the current record's "technical_parameters" value
 * @method StagingMultimedia setExternalUri()          Sets the current record's "external_uri" value
 * @method StagingMultimedia setInternetProtocol()     Sets the current record's "internet_protocol" value
 * @method StagingMultimedia setFieldObservations()    Sets the current record's "field_observations" value
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStagingMultimedia extends DarwinModel
{
    public function setTableDefinition()
    {
        $this->setTableName('staging_multimedia');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('referenced_relation', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('record_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_digital', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('type', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'image',
             ));
        $this->hasColumn('sub_type', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             ));
        $this->hasColumn('uri', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('filename', ': { type: string }', null, array(
             'type' => ': { type: string }',
             ));
        $this->hasColumn('creation_date', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('creation_date_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('mime_type', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('visible', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('publishable', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('extracted_info', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('technical_parameters', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('external_uri', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('internet_protocol', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('field_observations', 'string', null, array(
             'type' => 'string',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}