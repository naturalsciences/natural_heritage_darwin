<?php

/**
 * BaseStagingProperties
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $import_ref
 * @property string $specimen_main_id
 * @property string $specimen_uuid
 * @property integer $specimen_ref
 * @property string $property_type
 * @property string $applies_to
 * @property string $applies_to_indexed
 * @property integer $date_from_mask
 * @property string $date_from
 * @property integer $date_to_mask
 * @property string $date_to
 * @property boolean $is_quantitative
 * @property string $property_unit
 * @property string $method
 * @property string $method_indexed
 * @property string $lower_value
 * @property float $lower_value_unified
 * @property string $upper_value
 * @property float $upper_value_unified
 * @property string $property_accuracy
 * @property string $status
 * @property boolean $to_import
 * @property boolean $imported
 * @property Imports $Import
 * @property Specimens $Specimen
 * 
 * @method integer           getId()                  Returns the current record's "id" value
 * @method integer           getImportRef()           Returns the current record's "import_ref" value
 * @method string            getSpecimenMainId()      Returns the current record's "specimen_main_id" value
 * @method string            getSpecimenUuid()        Returns the current record's "specimen_uuid" value
 * @method integer           getSpecimenRef()         Returns the current record's "specimen_ref" value
 * @method string            getPropertyType()        Returns the current record's "property_type" value
 * @method string            getAppliesTo()           Returns the current record's "applies_to" value
 * @method string            getAppliesToIndexed()    Returns the current record's "applies_to_indexed" value
 * @method integer           getDateFromMask()        Returns the current record's "date_from_mask" value
 * @method string            getDateFrom()            Returns the current record's "date_from" value
 * @method integer           getDateToMask()          Returns the current record's "date_to_mask" value
 * @method string            getDateTo()              Returns the current record's "date_to" value
 * @method boolean           getIsQuantitative()      Returns the current record's "is_quantitative" value
 * @method string            getPropertyUnit()        Returns the current record's "property_unit" value
 * @method string            getMethod()              Returns the current record's "method" value
 * @method string            getMethodIndexed()       Returns the current record's "method_indexed" value
 * @method string            getLowerValue()          Returns the current record's "lower_value" value
 * @method float             getLowerValueUnified()   Returns the current record's "lower_value_unified" value
 * @method string            getUpperValue()          Returns the current record's "upper_value" value
 * @method float             getUpperValueUnified()   Returns the current record's "upper_value_unified" value
 * @method string            getPropertyAccuracy()    Returns the current record's "property_accuracy" value
 * @method string            getStatus()              Returns the current record's "status" value
 * @method boolean           getToImport()            Returns the current record's "to_import" value
 * @method boolean           getImported()            Returns the current record's "imported" value
 * @method Imports           getImport()              Returns the current record's "Import" value
 * @method Specimens         getSpecimen()            Returns the current record's "Specimen" value
 * @method StagingProperties setId()                  Sets the current record's "id" value
 * @method StagingProperties setImportRef()           Sets the current record's "import_ref" value
 * @method StagingProperties setSpecimenMainId()      Sets the current record's "specimen_main_id" value
 * @method StagingProperties setSpecimenUuid()        Sets the current record's "specimen_uuid" value
 * @method StagingProperties setSpecimenRef()         Sets the current record's "specimen_ref" value
 * @method StagingProperties setPropertyType()        Sets the current record's "property_type" value
 * @method StagingProperties setAppliesTo()           Sets the current record's "applies_to" value
 * @method StagingProperties setAppliesToIndexed()    Sets the current record's "applies_to_indexed" value
 * @method StagingProperties setDateFromMask()        Sets the current record's "date_from_mask" value
 * @method StagingProperties setDateFrom()            Sets the current record's "date_from" value
 * @method StagingProperties setDateToMask()          Sets the current record's "date_to_mask" value
 * @method StagingProperties setDateTo()              Sets the current record's "date_to" value
 * @method StagingProperties setIsQuantitative()      Sets the current record's "is_quantitative" value
 * @method StagingProperties setPropertyUnit()        Sets the current record's "property_unit" value
 * @method StagingProperties setMethod()              Sets the current record's "method" value
 * @method StagingProperties setMethodIndexed()       Sets the current record's "method_indexed" value
 * @method StagingProperties setLowerValue()          Sets the current record's "lower_value" value
 * @method StagingProperties setLowerValueUnified()   Sets the current record's "lower_value_unified" value
 * @method StagingProperties setUpperValue()          Sets the current record's "upper_value" value
 * @method StagingProperties setUpperValueUnified()   Sets the current record's "upper_value_unified" value
 * @method StagingProperties setPropertyAccuracy()    Sets the current record's "property_accuracy" value
 * @method StagingProperties setStatus()              Sets the current record's "status" value
 * @method StagingProperties setToImport()            Sets the current record's "to_import" value
 * @method StagingProperties setImported()            Sets the current record's "imported" value
 * @method StagingProperties setImport()              Sets the current record's "Import" value
 * @method StagingProperties setSpecimen()            Sets the current record's "Specimen" value
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStagingProperties extends DarwinModel
{
    public function setTableDefinition()
    {
        $this->setTableName('staging_properties');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('import_ref', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('specimen_main_id', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('specimen_uuid', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('specimen_ref', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('property_type', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('applies_to', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('applies_to_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('date_from_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('date_from', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('date_to_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('date_to', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '2038-12-31',
             ));
        $this->hasColumn('is_quantitative', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('property_unit', 'string', null, array(
             'type' => 'string',
             'default' => '',
             ));
        $this->hasColumn('method', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('method_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('lower_value', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             ));
        $this->hasColumn('lower_value_unified', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('upper_value', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             ));
        $this->hasColumn('upper_value_unified', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('property_accuracy', 'string', null, array(
             'type' => 'string',
             'default' => '',
             ));
        $this->hasColumn('status', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('to_import', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('imported', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Imports as Import', array(
             'local' => 'import_ref',
             'foreign' => 'id'));

        $this->hasOne('Specimens as Specimen', array(
             'local' => 'specimen_ref',
             'foreign' => 'id'));
    }
}