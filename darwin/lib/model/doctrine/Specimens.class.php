<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Specimens extends BaseSpecimens
{
  public function getAcquisitionDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $dateTime->getDateMasked();
  }

  public function getAcquisitionDate()
  {
    $from_date = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getRawAcquisitionDate()
  {
    return $this->_get('acquisition_date');
  }

  public function setAcquisitionDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      if ($this->getAcquisitionDate() != $fd->getDateTimeMaskedAsArray()) {
        $this->_set('acquisition_date', $fd->format('Y/m/d'));
        $this->_set('acquisition_date_mask', $fd->getMask());
      }
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true); 
      if ($this->getAcquisitionDate() != $dateTime->getDateTimeMaskedAsArray()) {
        $this->_set('acquisition_date', $dateTime->format('Y/m/d'));
        $this->_set('acquisition_date_mask', $dateTime->getMask());
      }
    }
  }

  public function setHostRelationship($value)
  {
    if($value != $this->_get('host_relationship')) {
      $this->_set('host_relationship', $value);
    }
  }

  public function setCategory($value)
  {
    if($value != $this->_get('category')) {
      $this->_set('category', $value);
    }
  }

  public static function getCategories()
  {
    return array(
      'physical' => 'Physical',
      'observation' => 'Observation',
      'figurate' => 'Figurate',
      'figurate-physical' => 'Figurate-Physical',
    );
  }

  public function getName()
  {
    $name = '-';
    if(! $this->isNew() && $this->_get('id')==0)
      return $name;
    $codes = Doctrine_Core::getTable('Codes')->getCodesRelated('specimens', $this->_get('id'));
    if (!$codes->count())
      return $name;
    $name = '';
    foreach ($codes as $code)
    {
      if ($code->getCodeCategory() == 'main') {
        $name = '['.$code->getCodeFormated().'] ';
        break;
      }
      else {
        $name .= '['.$code->getCodeFormated().'] ';
      }
    }
    $name = rtrim($name);
    return $name;
  }
  
  public function getNameAndPart()
  {
    return $this->getName()." (".$this->getSpecimenPart().')'; 
  }


  public function getAggregatedName($sep = ' / ')
  {
    $items = array(
        $this->getCollectionName(),
        $this->getTaxonName(),
        $this->getChronoName(),
        $this->getLithoName(),
        $this->getLithologyName(),
        $this->getMineralName()
   );

    $items = array_filter($items);
    return implode($sep, $items);
  } 


  public function getCountryTags($is_view = false)
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';
    
    return $str;
  }

  public function getOtherGtuTags()
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';

    return $str;
  }
  
  //ftheeten 2018 10 05
   public function getAllGtuTags()
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    foreach(explode(";",$this->getGtuOthersTagValue()) as $value)
    {
        $tags[]=$value;
    }
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';

    return $str;
  }

  public function getTypeFormated()
  {
    return ucfirst($this->_get('type'));
  }

  public function getTypeSearchFormated()
  {
    return ucfirst($this->_get('type_search'));
  }

  public function getTypeGroupFormated()
  {
    return ucfirst($this->_get('type_group'));
  }
  

  public function getSexFormated()
  {
    if ($this->_get('sex') == 'undefined')
      return '-';
    return ucfirst($this->_get('sex'));
  }

  public function getSexSearchFormated()
  {
    return ucfirst($this->_get('sex'));
  }

  public function getStateFormated()
  {
    if ($this->_get('state') == 'not applicable')
      return '-';
    return ucfirst($this->_get('state'));
  }

  public function getStateSearchFormated()
  {
    return ucfirst($this->_get('state'));
  }

  public function getStageFormated()
  {
    if ($this->_get('stage') == 'undefined')
      return '-';
    return ucfirst($this->_get('stage'));
  }

  public function getStageSearchFormated()
  {
    return ucfirst($this->_get('stage'));
  }

  public function getSocialStatusFormated()
  {
    if ($this->_get('social_status') == 'not applicable')
      return '-';
    return ucfirst($this->_get('social_status'));
  }

  public function getSocialStatusSearchFormated()
  {
    return ucfirst($this->_get('social_status'));
  }

  public function getRockFormFormated()
  {
    if ($this->_get('rock_form') == 'not applicable')
      return '-';
    return ucfirst($this->_get('rock_form'));
  }

  public function getRockFormSearchFormated()
  {
    return ucfirst($this->_get('rock_form'));
  }
  
  public function getTaxonomicIdentification()
  {
    return $this->getDoctrineTaxonomicIdentifications()->getTaxonomicIdentification();    
  }
  
   //ftheeten group date 2018 11 30
    public function getGtuFromDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuToDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'),false, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuFromDate()
  {
    $from_date = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true,true);
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getGtuToDate()
  {
    $to_date = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'), false,true);
    return $to_date->getDateTimeMaskedAsArray();
  }

  public function setGtuFromDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_from_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_from_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $dateTime->getMask());
    }
  }

  public function setGtuToDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_to_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, false,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_to_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $dateTime->getMask());
    }
  }
  
  public function getRawGtuToDate()
  {
    return $this->_get('gtu_to_date');
  }
  
    public function getRawGtuFromDate()
  {
    return $this->_get('gtu_from_date');
  }

  
    public function getMainCode()
   {
		return Doctrine_Core::getTable('Specimens')->getMainCode($this->getId());
   }
   
   //2020 01 14
  public function getXMLDataCite($institution="Royal Belgian Institute for Natural Sciences (RBINS)")
  {
    
    $collection= Doctrine_Core::getTable('Collections')->findOneById($this->getCollectionRef());
    $returned ="";
    $returned.="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    $returned.='<resource xmlns="http://datacite.org/schema/kernel-4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   ';
    $returned.='<identifier identifierType="DOI"></identifier>
    <creators>
        <creator>
            <creatorName>'.htmlspecialchars($institution).'</creatorName>
        </creator>
    </creators>';
    $returned.='<subjects>
            <subject xml:lang="en-US" schemeURI="http://dewey.info/" subjectScheme="dewey">570 Biology</subject>
            </subjects>';
    $returned.='<titles>
                <title>I.G.:'.htmlspecialchars($this->getIgNum()).' '.htmlspecialchars($this->getMainCode().' '.$this->getTaxonName()).'</title>
            </titles>';
    $returned.='<publisher>'.htmlspecialchars($institution).'</publisher>';
    $returned.='<publicationYear>'.substr($this->getSpecimenCreationDate(),0,4).'</publicationYear>';
    
    $Collectors = Doctrine_Core::getTable('CataloguePeople')->getPeopleRelated('specimens','collector',$this->getId());
    $people=Array();
    foreach( $Collectors as $collector_link)
    {
        $col=Array();
        $collector=Doctrine_Core::getTable('People')->findOneById($collector_link->getPeopleRef());
        $col["contributorType"]="dataCollector";
        $col["contributorName"]=htmlspecialchars($collector->getFormatedName());
        $col["givenName"]=htmlspecialchars($collector->getGivenName());
        $col["familyName"]=htmlspecialchars($collector->getFamilyName());
        $people[]=$col;
    }
    $Identifications = Doctrine_Core::getTable('Identifications')->getIdentificationsRelated('specimens',$this->getId()) ;
        foreach ($Identifications as $key=>$val)
        {
          
          $Identifier = Doctrine_Core::getTable('CataloguePeople')->getPeopleRelated('identifications', 'identifier', $val->getId()) ;
          foreach ($Identifier as $ident_link)
          {
            $ident=Array();
            $identifier=Doctrine_Core::getTable('People')->findOneById($ident_link->getPeopleRef());
            $ident["contributorType"]="Researcher";
            $ident["contributorName"]=htmlspecialchars($identifier->getFormatedName());
            $ident["givenName"]=htmlspecialchars($identifier->getGivenName());
            $ident["familyName"]=htmlspecialchars($identifier->getFamilyName());
            $people[]=$ident;
          }
        }
    $returned.='<Contributors>';
    foreach($people as $ppl)
    {
        $returned.='<contributor contributorType="'.$ppl[contributorType].'">
                        <contributorName>'.$ppl["contributorName"].'</contributorName>
                        <givenName>'.$ppl["givenName"].'</givenName>
                        <familyName>'.$ppl["familyName"].'</familyName>                        
                    </contributor>
                ';
    }
    $returned.='</Contributors>';
    $returned.='<description xml:lang="en-US" descriptionType="Abstract">
                    Physical object in collection '.$collection->getPathString().
                '</description>';
    $returned.='<resourceType resourceTypeGeneral="data-set">Web page (DaRWIN Collection Manegement system)</resourceType>';
    $returned.='</resource>';
    
    return $returned;
  }

// end group date  

}
