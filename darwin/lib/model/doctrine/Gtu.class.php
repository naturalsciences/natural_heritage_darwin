<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Gtu extends BaseGtu
{
  public function getGtuFromDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuToDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'),false, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuFromDate()
  {
    $from_date = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true,true);
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getGtuToDate()
  {
    $to_date = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'), false,true);
    return $to_date->getDateTimeMaskedAsArray();
  }

  public function setGtuFromDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_from_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_from_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $dateTime->getMask());
    }
  }

  public function setGtuToDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_to_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, false,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_to_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $dateTime->getMask());
    }
  }

  public function getName($view = null, $countriesOnly = false)
  {
    if($this->_get('id')==0) return '-';
    $nbr = count($this->TagGroups);
    if(! $nbr) return "No Tags";
    $str = '<ul  class="search_tags">';
    foreach($this->TagGroups as $group)
    {
      if(!$countriesOnly || ($countriesOnly && $group->getSubGroupName()=='country')) {
        $str .= '<li><label>'.$group->getSubGroupName().'<span class="gtu_group"> - '.TagGroups::getGroup($group->getGroupName()).'</span></label><ul class="name_tags'.(($view !== null)?"_view":"").'">';
        $tags = explode(";",$group->getTagValue());
        foreach($tags as $value)
          if (strlen($value))
            $str .=  '<li>' . trim($value).'</li>';
        $str .= '</ul><div class="clear"></div>';
        if($countriesOnly)
          break;
      }
    }
    $str .= '</ul>';
    return $str;
  }

  public function getMap()
  {
    if( $this->getLatitude() != '' && $this->getLongitude()!= '')
      return '<img class="gtu_img_loc" src="http://staticmap.openstreetmap.de/staticmap.php?&size=480x240&center='.$this->getLatitude().','.$this->getLongitude().'&zoom=5&markers='.$this->getLatitude().','.$this->getLongitude().',red-pushpin" alt="Sampling location" />';
    return '';
  }
  public function getTagsWithCode($view = null)
  {
    $str = $this->getName($view);
    //if($this->getLongitude() != '')
     // $str .= '<b class="img">'.$this->getMap().'</b>';
    $str .=  '<b class="code">'.$this->getCode().'</b>';
    $str .=  '<b class="lat">'.$this->getLatitude().'</b>';
    $str .=  '<b class="lon">'.$this->getLongitude().'</b>';

    return $str;
  }

  public function getCode()
  {
    if(! $this->isNew() && $this->_get('id')==0)
      return '-';
    return $this->_get('code');
  }

  public function hasCountries()
  {
    $q = Doctrine_Query::create()
         ->from('TagGroups tg')
         ->where('tg.gtu_ref = ? and tg.sub_group_name_indexed = ?', array($this->_get('id'), 'country'));
    return (count($q->execute()));
  }
  
  //ftheeten 2018 12 12
  public function getRelatedTemporalInformationMaskedLogic()
  {
    return  Doctrine_Core::getTable('Gtu')->getRelatedTemporalInformationMaskedGtuId($this->getId());
  }  
  
  

  
    //ftheeten 2018 12 12
  public function getRelatedTemporalInformationMaskedList()
  {
	  $returned=Array();
      $tmp=$this->getRelatedTemporalInformationMaskedLogic();
      foreach($tmp as $date)
      {
        if($date["to_mask"]>0)
        {
            $returned[$date["id"]]="From : ".strip_tags($date["from_masked"]). " - To : " .strip_tags($date["to_masked"]);
        }
        else
        {
            $returned[$date["id"]]="From : ".strip_tags($date["from_masked"]);
        }
      }
      
      /*usort($returned, function($a, $b) {
        return ($a - $b);
        });*/
      return $returned;
  }
  
   //ftheeten 2018 12 12
  public function getRelatedTemporalInformationMasked()
  {

	  $returned=Array();
      $tmpTemporalInformation = $this->getRelatedTemporalInformationMaskedLogic();
      
      if(count($tmpTemporalInformation)>0)
      {
     
          foreach($tmpTemporalInformation as $key=>$item)
          {
                if((int)$item["from_mask"]>0||(int)$item["to_mask"]>0)
                {
                    
                    $tmp=Array();
                    //$tmp['id']=$item->getId();
                    $tmp['from_raw']=$item["from"];
                    $tmp['to_raw']=$item["to"];
                    $tmp["from"]=$item["from"];//getFromDateMasked(ESC_RAW);
                    $tmp["to"]=$item["to"]; //getToDateMasked(ESC_RAW);
                    $tmp["from_masked"]=$item["from_masked"];
                    $tmp["to_masked"]=$item["to_masked"];
                    $tmp["from_mask"]=(int)$item["from_mask"];
                    $tmp["to_mask"]=(int)$item['to_mask'];
                    
                    $tmp['from_year']=$item["from_year"];
                    $tmp['from_month']=$item["from_month"];
                    $tmp['from_day']=$item["from_day"];
                    $tmp['from_hour']=$item["from_hour"];
                    $tmp['from_minute']=$item["from_minute"];
                    $tmp['from_second']=$item["from_second"];
                    $tmp['to_year']=$item["to_year"];
                    $tmp['to_month']=$item["to_month"];
                    $tmp['to_day']=$item["to_day"];
                    $tmp['to_hour']=$item["to_hour"];
                    $tmp['to_minute']=$item["to_minute"];
                    $tmp['to_second']=$item["to_second"];
                    
                    //test from data mask
                    $msk=(int)$item["from_mask"];
                 
                    if($msk&1)
                    {
                        $tmp["from_masked_select"]=strip_tags($item["from_masked"] );
                    }
                    elseif($msk&2)
                    {
                        $tmp["from_masked_select"]=strip_tags($item["from_masked"] );
                    }
                    elseif($msk&4)
                    {
                        $tmp["from_masked_select"]=strip_tags($item["from_masked"] );
                    }
                    elseif($msk&8)
                    {
                        $tmp["from_masked_select"]=$item['from_day'].'/'.$item['from_month'].'/'.$item['from_year'];
                    }
                    elseif($msk&16)
                    {
                        $tmp["from_masked_select"]='xx/'.$item['from_month'].'/'.$item['from_year'];
                    }
                    elseif($msk&32)
                    {
                        $tmp["from_masked_select"]='xx/xx/'.$item['from_year'];
                    }
                    else
                    {
                         $tmp["from_masked_select"]='UNK';
                    }
                    //to
                    $msk=(int)(int)$item["to_mask"];
                 
                    if($msk&1)
                    {
                        $tmp["to_masked_select"]=strip_tags($item["to_masked"] );
                    }
                    elseif($msk&2)
                    {
                        $tmp["to_masked_select"]=strip_tags($item["to_masked"] );
                    }
                    elseif($msk&4)
                    {
                        $tmp["to_masked_select"]=strip_tags($item["to_masked"] );
                    }
                    elseif($msk&8)
                    {
                        $tmp["to_masked_select"]=$item['to_day'].'/'.$item['to_month'].'/'.$item['to_year'];
                    }
                    elseif($msk&16)
                    {
                        $tmp["to_masked_select"]='xx/'.$item['to_month'].'/'.$item['to_year'];
                    }
                    elseif($msk&32)
                    {
                        $tmp["to_masked_select"]='xx/xx/'.$item['to_year'];
                    }
                    else
                    {
                         $tmp["to_masked_select"]='UNK';
                    }

                    $returned[]=$tmp;
                }
          }
          usort($returned, function($a, $b) {
            return ($a['from_masked'].$a['to_masked']) - ($b['from_masked'].$b['to_masked']);
            });
      }
	  $returned= array_unique($returned, SORT_REGULAR);
	  
	  
	  return $returned;
  }
  
  
  //2019 03 08
  public function addNewTemporalInformation($fd_from, $fd_to=null)
  {   
    $temporalInformation=null;
    $set=false;
    if ($fd_from instanceof FuzzyDateTime)
    {       
      $temporalInformation= new TemporalInformation();
      $temporalInformation->setGtuRef($this->getId());
      $temporalInformation->setFromDate($fd_from->format('Y/m/d H:i:s'));
      $temporalInformation->setFromDateMask($fd_from->getMask());
      $set = True;
    }
    else
    {
     
      $dateTime = new FuzzyDateTime($fd_from, 56, true,true);
      if(is_array($fd_from))
      {
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd_from));
      }
      $temporalInformation= new TemporalInformation();      
      $temporalInformation->setGtuRef($this->getId());
      $temporalInformation->setFromDate($dateTime->format('Y/m/d H:i:s'));
      $temporalInformation->setFromDateMask($dateTime->getMask());
      $set = True;
    }
    if(isset($fd_from)&&isset($fd_to)&&isset($temporalInformation))
    {
        if ($fd_to instanceof FuzzyDateTime)
        {          
          $temporalInformation->setFromDate($fd_to->format('Y/m/d H:i:s'));
          $temporalInformation->setFromDateMask($fd_to->getMask());
          $set = True;
        }
        else
        {
          $dateTime = new FuzzyDateTime($fd_to, 56, false,true);
          if(is_array($fd_from))
            $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd_to));        
          $temporalInformation->setToDate($dateTime->format('Y/m/d H:i:s'));
          $temporalInformation->setToDateMask($dateTime->getMask());
          $set = True;
        }
    }
    if($set)
    {
        $temporalInformation->save();
    }
  }


  
  
  
  //ftheeten 2018 12 12
  /*public function getComments()
  {
    return $this->getDoctrineGtuComments()->getComments();    
  }*/
  
 /* public function getArrayFromDate()
  {
    return "";
  }*/
}
