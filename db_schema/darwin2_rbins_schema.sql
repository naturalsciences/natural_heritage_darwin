--
-- PostgreSQL database dump
--

-- Dumped from database version 13.4 (Debian 13.4-0+deb11u1)
-- Dumped by pg_dump version 14.0

-- Started on 2021-11-10 16:48:49

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 16 (class 2615 OID 1438545)
-- Name: darwin2; Type: SCHEMA; Schema: -; Owner: darwin2
--

CREATE SCHEMA darwin2;


ALTER SCHEMA darwin2 OWNER TO darwin2;

--
-- TOC entry 21 (class 2615 OID 1438546)
-- Name: darwin2_rbins_data; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA darwin2_rbins_data;


ALTER SCHEMA darwin2_rbins_data OWNER TO postgres;

--
-- TOC entry 22 (class 2615 OID 1438547)
-- Name: data_cleaning; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA data_cleaning;


ALTER SCHEMA data_cleaning OWNER TO postgres;

--
-- TOC entry 19 (class 2615 OID 1438548)
-- Name: georeferencing; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA georeferencing;


ALTER SCHEMA georeferencing OWNER TO postgres;

--
-- TOC entry 29 (class 2615 OID 1438549)
-- Name: import; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA import;


ALTER SCHEMA import OWNER TO postgres;

--
-- TOC entry 31 (class 2615 OID 1438550)
-- Name: ipt; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA ipt;


ALTER SCHEMA ipt OWNER TO postgres;

--
-- TOC entry 18 (class 2615 OID 1438551)
-- Name: mista_work; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA mista_work;


ALTER SCHEMA mista_work OWNER TO postgres;

--
-- TOC entry 14 (class 2615 OID 1438552)
-- Name: naturalheritage; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA naturalheritage;


ALTER SCHEMA naturalheritage OWNER TO postgres;

--
-- TOC entry 24 (class 2615 OID 1438554)
-- Name: wfs; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA wfs;


ALTER SCHEMA wfs OWNER TO postgres;

--
-- TOC entry 2 (class 3079 OID 1438555)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 8102 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 1 (class 3079 OID 1438540)
-- Name: plpython3u; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpython3u WITH SCHEMA pg_catalog;


--
-- TOC entry 8103 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpython3u; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpython3u IS 'PL/Python3U untrusted procedural language';


--
-- TOC entry 3 (class 3079 OID 1438560)
-- Name: file_fdw; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS file_fdw WITH SCHEMA public;


--
-- TOC entry 8104 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION file_fdw; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION file_fdw IS 'foreign-data wrapper for flat file access';


--
-- TOC entry 4 (class 3079 OID 1438564)
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- TOC entry 8105 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- TOC entry 5 (class 3079 OID 1438575)
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- TOC entry 8106 (class 0 OID 0)
-- Dependencies: 5
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- TOC entry 6 (class 3079 OID 1438702)
-- Name: intarray; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS intarray WITH SCHEMA public;


--
-- TOC entry 8107 (class 0 OID 0)
-- Dependencies: 6
-- Name: EXTENSION intarray; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION intarray IS 'functions, operators, and index support for 1-D arrays of integers';


--
-- TOC entry 7 (class 3079 OID 1438824)
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- TOC entry 8108 (class 0 OID 0)
-- Dependencies: 7
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


--
-- TOC entry 8 (class 3079 OID 1438903)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 8109 (class 0 OID 0)
-- Dependencies: 8
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 9 (class 3079 OID 1438940)
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- TOC entry 8110 (class 0 OID 0)
-- Dependencies: 9
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- TOC entry 10 (class 3079 OID 1439955)
-- Name: postgres_fdw; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgres_fdw WITH SCHEMA public;


--
-- TOC entry 8111 (class 0 OID 0)
-- Dependencies: 10
-- Name: EXTENSION postgres_fdw; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgres_fdw IS 'foreign-data wrapper for remote PostgreSQL servers';


--
-- TOC entry 11 (class 3079 OID 1439959)
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA darwin2;


--
-- TOC entry 8112 (class 0 OID 0)
-- Dependencies: 11
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


--
-- TOC entry 12 (class 3079 OID 1439980)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- TOC entry 8113 (class 0 OID 0)
-- Dependencies: 12
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- TOC entry 2539 (class 1247 OID 1439992)
-- Name: coverages; Type: TYPE; Schema: darwin2; Owner: darwin2
--

CREATE TYPE darwin2.coverages AS ENUM (
    'temporal',
    'spatial'
);


ALTER TYPE darwin2.coverages OWNER TO darwin2;

--
-- TOC entry 2542 (class 1247 OID 1439999)
-- Name: encoders_stats_collections; Type: TYPE; Schema: darwin2; Owner: postgres
--

CREATE TYPE darwin2.encoders_stats_collections AS (
	encoder text,
	collection_path text,
	new_items bigint,
	updated_items bigint,
	new_types bigint,
	updated_types bigint,
	new_species bigint
);


ALTER TYPE darwin2.encoders_stats_collections OWNER TO postgres;

--
-- TOC entry 2545 (class 1247 OID 1440001)
-- Name: full_text_language; Type: DOMAIN; Schema: darwin2; Owner: darwin2
--

CREATE DOMAIN darwin2.full_text_language AS character varying NOT NULL DEFAULT 'simple'::character varying
	CONSTRAINT full_text_language_chk CHECK (((VALUE)::text = ANY (ARRAY[('danish'::character varying)::text, ('dutch'::character varying)::text, ('english'::character varying)::text, ('finnish'::character varying)::text, ('french'::character varying)::text, ('german'::character varying)::text, ('hungarian'::character varying)::text, ('italian'::character varying)::text, ('norwegian'::character varying)::text, ('portuguese'::character varying)::text, ('romanian'::character varying)::text, ('russian'::character varying)::text, ('spanish'::character varying)::text, ('swedish'::character varying)::text, ('turkish'::character varying)::text, ('simple'::character varying)::text])));


ALTER DOMAIN darwin2.full_text_language OWNER TO darwin2;

--
-- TOC entry 2549 (class 1247 OID 1440005)
-- Name: rmca_taxon_report; Type: TYPE; Schema: darwin2; Owner: darwin2
--

CREATE TYPE darwin2.rmca_taxon_report AS (
	domain character varying,
	kingdom character varying,
	super_phylum character varying,
	phylum character varying,
	sub_phylum character varying,
	infra_phylum character varying,
	super_cohort_botany character varying,
	cohort_botany character varying,
	sub_cohort_botany character varying,
	infra_cohort_botany character varying,
	super_class character varying,
	class character varying,
	sub_class character varying,
	infra_class character varying,
	super_division character varying,
	division character varying,
	sub_division character varying,
	infra_division character varying,
	super_legion character varying,
	legion character varying,
	sub_legion character varying,
	infra_legion character varying,
	super_cohort_zoology character varying,
	cohort_zoology character varying,
	sub_cohort_zoology character varying,
	infra_cohort_zoology character varying,
	super_order character varying,
	"order" character varying,
	sub_order character varying,
	infra_order character varying,
	section_zoology character varying,
	sub_section_zoology character varying,
	super_family character varying,
	family character varying,
	sub_family character varying,
	infra_family character varying,
	super_tribe character varying,
	tribe character varying,
	sub_tribe character varying,
	infra_tribe character varying,
	genus character varying,
	sub_genus character varying,
	section_botany character varying,
	sub_section_botany character varying,
	serie character varying,
	sub_serie character varying,
	super_species character varying,
	species character varying,
	sub_species character varying,
	variety character varying,
	sub_variety character varying,
	form character varying,
	sub_form character varying,
	abberans character varying,
	nb_records character varying,
	physical_specimen_min character varying,
	physical_specimen_max character varying,
	nb_types character varying,
	type_details character varying,
	container_details character varying,
	sub_container_details character varying,
	storage_details character varying,
	sub_storage_details character varying
);


ALTER TYPE darwin2.rmca_taxon_report OWNER TO darwin2;

--
-- TOC entry 2552 (class 1247 OID 1440008)
-- Name: stats_collections; Type: TYPE; Schema: darwin2; Owner: postgres
--

CREATE TYPE darwin2.stats_collections AS (
	collection character varying,
	new_items bigint,
	updated_items bigint,
	new_types bigint,
	updated_types bigint,
	new_species bigint
);


ALTER TYPE darwin2.stats_collections OWNER TO postgres;

--
-- TOC entry 2555 (class 1247 OID 1440011)
-- Name: taxo_collections; Type: TYPE; Schema: darwin2; Owner: darwin2
--

CREATE TYPE darwin2.taxo_collections AS (
	family character varying,
	family_cnt bigint,
	genus character varying,
	genus_cnt bigint,
	species character varying,
	species_cnt bigint
);


ALTER TYPE darwin2.taxo_collections OWNER TO darwin2;

--
-- TOC entry 2558 (class 1247 OID 1440014)
-- Name: taxo_collections_no_fam; Type: TYPE; Schema: darwin2; Owner: darwin2
--

CREATE TYPE darwin2.taxo_collections_no_fam AS (
	count bigint
);


ALTER TYPE darwin2.taxo_collections_no_fam OWNER TO darwin2;

--
-- TOC entry 2561 (class 1247 OID 1440017)
-- Name: taxo_collections_total; Type: TYPE; Schema: darwin2; Owner: darwin2
--

CREATE TYPE darwin2.taxo_collections_total AS (
	count bigint
);


ALTER TYPE darwin2.taxo_collections_total OWNER TO darwin2;

--
-- TOC entry 2564 (class 1247 OID 1440018)
-- Name: box3d_extent; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.box3d_extent;


ALTER TYPE public.box3d_extent OWNER TO postgres;

--
-- TOC entry 2565 (class 1247 OID 1440019)
-- Name: chip; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.chip;


ALTER TYPE public.chip OWNER TO postgres;

--
-- TOC entry 790 (class 1255 OID 1440020)
-- Name: check_auto_increment_code_in_spec(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.check_auto_increment_code_in_spec() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  col collections%ROWTYPE;
  number BIGINT ;
BEGIN
  IF TG_OP != 'DELETE' THEN
    IF NEW.referenced_relation = 'specimens' THEN
      SELECT c.* INTO col FROM collections c INNER JOIN specimens s ON s.collection_ref=c.id WHERE s.id=NEW.record_id;
      IF FOUND THEN
        IF NEW.code_category = 'main' THEN
          IF isinteger(NEW.code) AND strpos(NEW.code, 'E') = 0 THEN
            number := NEW.code::bigint;
            IF number > col.code_last_value THEN
              UPDATE collections set code_last_value = number WHERE id=col.id ;
            END IF;
          ELSE
            UPDATE collections
            SET code_last_value = (SELECT max(code_num)
                                   FROM codes inner join specimens
                                     ON codes.referenced_relation = 'specimens'
                                     AND codes.record_id = specimens.id
                                   WHERE codes.code_category = 'main'
                                     AND specimens.collection_ref = col.id
                                     AND codes.code_num IS NOT NULL
                                  )
            WHERE id = col.id
              AND EXISTS (SELECT 1
                          FROM codes inner join specimens
                            ON codes.referenced_relation = 'specimens'
                            AND codes.record_id = specimens.id
                          WHERE codes.code_category = 'main'
                            AND specimens.collection_ref = col.id
                            AND codes.code_num IS NOT NULL
                          LIMIT 1
                         );
            IF NOT FOUND THEN
              UPDATE collections
              SET code_last_value = DEFAULT
              WHERE id=col.id;
            END IF;
          END IF;
        ELSEIF TG_OP = 'UPDATE' THEN
          IF OLD.code_category = 'main' THEN
            IF isinteger(OLD.code) AND strpos(OLD.code, 'E') = 0 THEN
              number := OLD.code::bigint;
              IF number = col.code_last_value THEN
                UPDATE collections
                SET code_last_value = (SELECT max(code_num)
                                       FROM codes inner join specimens
                                         ON codes.referenced_relation = 'specimens'
                                         AND codes.record_id = specimens.id
                                       WHERE codes.code_category = 'main'
                                         AND specimens.collection_ref = col.id
                                         AND codes.code_num IS NOT NULL
                                      )
                WHERE id = col.id
                  AND EXISTS (SELECT 1
                              FROM codes inner join specimens
                                ON codes.referenced_relation = 'specimens'
                                AND codes.record_id = specimens.id
                              WHERE codes.code_category = 'main'
                                AND specimens.collection_ref = col.id
                                AND codes.code_num IS NOT NULL
                              LIMIT 1
                             );
                IF NOT FOUND THEN
                  UPDATE collections
                  SET code_last_value = DEFAULT
                  WHERE id=col.id;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF ;
    RETURN NEW;
  ELSE
    IF OLD.referenced_relation = 'specimens' AND OLD.code_category = 'main' THEN
      SELECT c.* INTO col FROM collections c INNER JOIN specimens s ON s.collection_ref=c.id WHERE s.id=OLD.record_id;
      IF FOUND AND isinteger(OLD.code) AND strpos(OLD.code, 'E') = 0 THEN
        UPDATE collections
        SET code_last_value = (SELECT max(code_num)
                               FROM codes INNER JOIN specimens
                                 ON  codes.referenced_relation = 'specimens'
                                 AND codes.record_id = specimens.id
                               WHERE codes.code_category = 'main'
                                 AND specimens.collection_ref = col.id
                                 AND codes.code_num IS NOT NULL
                              )
        WHERE id=col.id
          AND EXISTS (SELECT 1
                      FROM codes inner join specimens
                        ON codes.referenced_relation = 'specimens'
                        AND codes.record_id = specimens.id
                      WHERE codes.code_category = 'main'
                        AND specimens.collection_ref = col.id
                        AND codes.code_num IS NOT NULL
                      LIMIT 1
                     );
        IF NOT FOUND THEN
          UPDATE collections
          SET code_last_value = DEFAULT
          WHERE id=col.id;
        END IF;
      END IF;
    END IF ;
    RETURN OLD;
  END IF;
END;
$$;


ALTER FUNCTION darwin2.check_auto_increment_code_in_spec() OWNER TO darwin2;

--
-- TOC entry 1764 (class 1255 OID 1440021)
-- Name: check_auto_increment_code_in_spec_on_specimen(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.check_auto_increment_code_in_spec_on_specimen() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  col collections%ROWTYPE;
  codesrow codes%ROWTYPE;
  number BIGINT ;
BEGIN
  IF TG_OP = 'DELETE' THEN
  --raise notice 'delete';
   SELECT c.* INTO codesrow FROM codes c INNER JOIN specimens s ON c.record_id=OLD.id and referenced_relation='specimens' AND c.code_category = 'main';
   IF FOUND THEN
    
      SELECT c.* INTO col FROM collections c INNER JOIN specimens s ON s.collection_ref=c.id WHERE s.id=OLD.id;
      IF col.id Is NOT NULL AND isnumeric(codesrow.code) AND strpos(codesrow.code, 'E') = 0 THEN
      		
      		SELECT max(code_num) into number
                               FROM codes INNER JOIN specimens
                                 ON  codes.referenced_relation = 'specimens'
                                 AND codes.record_id = specimens.id
                                 
                               WHERE codes.code_category = 'main'
                                 AND specimens.collection_ref = col.id
                                 AND specimens.id !=OLD.id
                                 AND codes.code_num IS NOT NULL;
        --raise notice 'reinit % %', col.id, number;                         
       
        --IF isnumeric(number) THEN
		 UPDATE collections
		SET code_last_value = number
		WHERE id=col.id
		  AND EXISTS (SELECT 1
			      FROM codes inner join specimens
				ON codes.referenced_relation = 'specimens'
				AND codes.record_id = specimens.id
			      WHERE codes.code_category = 'main'
				AND specimens.collection_ref = col.id
				 AND specimens.id !=OLD.id
				AND codes.code_num IS NOT NULL
			      LIMIT 1
			     );
	--END IF;
        IF NOT FOUND THEN
		raise notice 'default';
          UPDATE collections
          SET code_last_value = DEFAULT
          WHERE id=col.id;
        END IF;
     -- ELSE
	--raise notice 'no update %', OLD.id::varchar; 
      END IF;
   -- ELSE
--	raise notice 'not updated % ', OLD.code;
    END IF ;
    RETURN OLD;
  END IF;
END;
$$;


ALTER FUNCTION darwin2.check_auto_increment_code_in_spec_on_specimen() OWNER TO darwin2;

--
-- TOC entry 1761 (class 1255 OID 1440022)
-- Name: chk_part_not_loaned(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.chk_part_not_loaned() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

    IF exists( SELECT 1 FROM loan_items i INNER JOIN loan_status s on i.loan_ref = s.loan_ref
        WHERE s.is_last= true AND s.status != 'closed' AND i.part_ref = OLD.id ) THEN
      RAISE EXCEPTION 'The Part is currently used in an ongoing loan';
    END IF;
    RETURN OLD;
END;
$$;


ALTER FUNCTION darwin2.chk_part_not_loaned() OWNER TO postgres;

--
-- TOC entry 1766 (class 1255 OID 1440023)
-- Name: chk_specimens_not_loaned(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.chk_specimens_not_loaned() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

    IF exists( SELECT 1 FROM loan_items i INNER JOIN loan_status s on i.loan_ref = s.loan_ref
        WHERE s.is_last= true AND s.status != 'closed' AND i.specimen_ref = OLD.id ) THEN
      RAISE EXCEPTION 'The Part is currently used in an ongoing loan';
    END IF;
    RETURN OLD;
END;
$$;


ALTER FUNCTION darwin2.chk_specimens_not_loaned() OWNER TO postgres;

--
-- TOC entry 791 (class 1255 OID 1440024)
-- Name: clean_imports(integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.clean_imports(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
declare
  recStaging RECORD;
  intCount integer := 0;
begin
  FOR recStaging IN SELECT DISTINCT taxon_ref, taxon_level_name FROM staging where import_ref = 61 and taxon_level_ref is not null order by taxon_level_name desc LOOP
    SELECT COUNT(*) INTO intCount 
    FROM taxonomy INNER JOIN specimens ON taxonomy.id = specimens.taxon_ref
    WHERE taxonomy.id = recStaging.taxon_ref::integer;
    IF intCount = 0 THEN
      SELECT COUNT(*) INTO intCount FROM taxonomy INNER JOIN specimens ON taxonomy.id = specimens.taxon_parent_ref WHERE specimens.taxon_parent_ref = recStaging.taxon_ref::integer;
      IF intCount = 0 THEN
        begin
          DELETE FROM taxonomy WHERE id = recStaging.taxon_ref::integer;
        exception when foreign_key_violation then
          INSERT INTO zzz_taxa_imported_not_cleaned VALUES (recStaging.taxon_ref::integer, 'Other taxa depends on this taxon.');
        end;
      ELSE
        INSERT INTO zzz_taxa_imported_not_cleaned VALUES (recStaging.taxon_ref::integer, 'Taxon linked as taxon_parent_ref to ' || intCount::varchar || ' specimens');
      END IF;
    ELSE
      INSERT INTO zzz_taxa_imported_not_cleaned VALUES (recStaging.taxon_ref::integer, 'Taxon linked as taxon_ref to ' || intCount::varchar || ' specimens');
    END IF;
    intCount:=0;
  END LOOP;
  return true;
exception
  when others then
    RAISE WARNING 'An error occured: %', SQLERRM;
    return false;
end;
$$;


ALTER FUNCTION darwin2.clean_imports(integer) OWNER TO postgres;

--
-- TOC entry 1765 (class 1255 OID 1440025)
-- Name: cleanup_sample_properties(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.cleanup_sample_properties(dms_string text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE SECURITY DEFINER COST 10
    AS $_$
BEGIN
	if dms_string = '' then
		dms_string=null;
	end if;
	dms_string := trim(dms_string);
	dms_string := trim(dms_string, chr(160));
	dms_string := regexp_replace(dms_string,'^(\d+)?,(\d+)$','\1.\2');
	dms_string := replace(dms_string,' - ','-');
	dms_string := replace(dms_string,' - ','-');
	dms_string := regexp_replace(dms_string,'^(\d+)? to (\d+)$','\1-\2');
	dms_string := regexp_replace(dms_string,'^(\d+)\.0+$','\1');
return dms_string;
END;
$_$;


ALTER FUNCTION darwin2.cleanup_sample_properties(dms_string text) OWNER TO darwin2;

--
-- TOC entry 1767 (class 1255 OID 1440026)
-- Name: cleanupdms(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.cleanupdms(dms_string text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE SECURITY DEFINER COST 10
    AS $_$
BEGIN
if  dms_string ~ '^\d+(\.\d+)?$' then
	return dms_string;
end if;
	dms_string := replace(dms_string,'’','''');
	dms_string := replace(dms_string,',','.');
	dms_string := replace(dms_string,'º','°');
	dms_string := replace(dms_string,' ','');
	dms_string := replace(dms_string,'''''','"');
	dms_string := regexp_replace(dms_string,'^0','');
	dms_string := regexp_replace(dms_string,'^°(\d*)?\.','\1°');
	dms_string := regexp_replace(dms_string,'(\d*)?°(\d*)?''([NEWS])$','\1°\2''00"\3');
	dms_string := trim(dms_string);
	dms_string := trim(dms_string, chr(160));
return dms_string;
END;
$_$;


ALTER FUNCTION darwin2.cleanupdms(dms_string text) OWNER TO darwin2;

--
-- TOC entry 1768 (class 1255 OID 1440027)
-- Name: concat(text[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.concat(VARIADIC text[]) RETURNS text
    LANGUAGE sql
    AS $_$
    SELECT array_to_string($1,'');
$_$;


ALTER FUNCTION darwin2.concat(VARIADIC text[]) OWNER TO darwin2;

--
-- TOC entry 1769 (class 1255 OID 1440028)
-- Name: convert_to_integer(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.convert_to_integer(v_input character varying) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE v_int_value INTEGER DEFAULT 0;
BEGIN
    BEGIN
        v_int_value := v_input::INTEGER;
    EXCEPTION WHEN OTHERS THEN
/*        RAISE NOTICE 'Invalid integer value: "%".  Returning NULL.', v_input;*/
        RETURN 0;
    END;
RETURN v_int_value;
END;
$$;


ALTER FUNCTION darwin2.convert_to_integer(v_input character varying) OWNER TO darwin2;

--
-- TOC entry 1762 (class 1255 OID 1440029)
-- Name: convert_to_real(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.convert_to_real(v_input character varying) RETURNS real
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE v_int_value REAL DEFAULT 0;
BEGIN
    BEGIN
        v_int_value := v_input::REAL;
    EXCEPTION WHEN OTHERS THEN
/*        RAISE NOTICE 'Invalid integer value: "%".  Returning NULL.', v_input;*/
        RETURN 0;
    END;
RETURN v_int_value;
END;
$$;


ALTER FUNCTION darwin2.convert_to_real(v_input character varying) OWNER TO darwin2;

--
-- TOC entry 803 (class 1255 OID 1440030)
-- Name: convert_to_unified(character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
DECLARE
    r_val real :=0;
BEGIN
    IF property is NULL THEN
        RETURN NULL;
    END IF;

    BEGIN
      r_val := property::real;
    EXCEPTION WHEN SQLSTATE '22P02' THEN
      RETURN null;
   WHEN OTHERS THEN
      RETURN null;
    END;

    IF property_unit IN ('Kt', 'Beaufort', 'm/s') THEN
        RETURN fct_cpy_speed_conversion(r_val, property_unit)::text;
    END IF;

    IF property_unit IN ( 'g', 'hg', 'kg', 'ton', 'dg', 'cg', 'mg', 'lb', 'lbs', 'pound' , 'ounce' , 'grain') THEN
        RETURN fct_cpy_weight_conversion(r_val, property_unit)::text;
    END IF;

    IF property_unit IN ('m³', 'l', 'cm³', 'ml', 'mm³' ,'µl' , 'µm³' , 'km³', 'Ml' , 'hl') THEN
        RETURN fct_cpy_volume_conversion(r_val, property_unit)::text;
    END IF;

    IF property_unit IN ('K', '°C', '°F', '°Ra', '°Re', '°r', '°N', '°Rø', '°De') THEN
        RETURN fct_cpy_temperature_conversion(r_val, property_unit)::text;
    END IF;

    IF property_unit IN ('m', 'dm', 'cm', 'mm', 'µm', 'nm', 'pm', 'fm', 'am', 'zm', 'ym', 'am', 'dam', 'hm', 'km', 'Mm', 'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym', 'mam', 'mom', 'Å', 'ua', 'ch', 'fathom', 'fermi', 'ft', 'in', 'K', 'l.y.', 'ly', 'µ', 'mil', 'mi', 'nautical mi', 'pc', 'point', 'pt', 'pica', 'rd', 'yd', 'arp', 'lieue', 'league', 'cal', 'twp', 'p', 'P', 'fur', 'brasse', 'vadem', 'fms') THEN
        RETURN fct_cpy_length_conversion(r_val, property_unit)::text;
    END IF;

    RETURN  property;

END;
$$;


ALTER FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying) OWNER TO postgres;

--
-- TOC entry 804 (class 1255 OID 1440031)
-- Name: convert_to_unified(character varying, character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying, property_type character varying) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
    r_val real :=0;
BEGIN
    IF property is NULL THEN
        RETURN NULL;
    END IF;

    BEGIN
      r_val := property::real;
    EXCEPTION WHEN SQLSTATE '22P02' THEN
      RETURN null;
    WHEN OTHERS THEN
	RETURN NULL;
    END;

    IF property_type = 'speed' THEN
        RETURN fct_cpy_speed_conversion(r_val, property_unit)::text;
    END IF;

    IF property_type = 'weight' THEN
        RETURN fct_cpy_weight_conversion(r_val, property_unit)::text;
    END IF;

    IF property_type = 'volume' THEN
        RETURN fct_cpy_volume_conversion(r_val, property_unit)::text;
    END IF;

    IF property_type = 'temperature' AND property_unit IN ('K', '°C', '°F', '°Ra', '°Re', '°r', '°N', '°Rø', '°De') THEN
        RETURN fct_cpy_temperature_conversion(r_val, property_unit)::text;
    END IF;

    IF property_type IN ('length') AND property_unit IN ('m', 'dm', 'cm', 'mm', 'µm', 'nm', 'pm', 'fm', 'am', 'zm', 'ym', 'am', 'dam', 'hm', 'km', 'Mm', 'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym', 'mam', 'mom', 'Å', 'ua', 'ch', 'fathom', 'fermi', 'ft', 'in', 'K', 'l.y.', 'ly', 'µ', 'mil', 'mi', 'nautical mi', 'pc', 'point', 'pt', 'pica', 'rd', 'yd', 'arp', 'lieue', 'league', 'cal', 'twp', 'p', 'P', 'fur', 'brasse', 'vadem', 'fms') THEN
        RETURN fct_cpy_length_conversion(r_val, property_unit)::text;
    END IF;

    RETURN  property;
END;
$$;


ALTER FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying, property_type character varying) OWNER TO postgres;

--
-- TOC entry 1771 (class 1255 OID 1440032)
-- Name: dms2dd(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.dms2dd(strdegminsec text) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
	DECLARE
		i				numeric;
		j				numeric;
		intDmsLen		numeric;		  -- Length of original string
		strCompassPoint Char(1);
		strNorm		 varchar(32) = ''; -- Will contain normalized string
		strDegMinSecB	varchar(100);
		blnGotSeparator integer;		  -- Keeps track of separator sequences
		arrDegMinSec	varchar[];		-- TYPE stringarray is table of varchar(2048) ;
		dDeg			numeric := 0;
		dMin			numeric := 0;
		dSec			numeric := 0;
		strChr		  Char(1);
	BEGIN
		if strDegMinSec is null or strDegMinSec='' or strDegMinSec=' ' then 
			return null; 
		elsif  strDegMinSec ~ '^\d+(\.\d+)?$' then
			return trunc(strDegMinSec::numeric,10)::double precision;
		else 
		-- Remove leading and trailing spaces
		strDegMinSecB := REPLACE(strDegMinSec,' ','');
		-- assume no leading and trailing spaces?
		intDmsLen := Length(strDegMinSecB);

		blnGotSeparator := 0; -- Not in separator sequence right now

		-- Loop over string, replacing anything that is not a digit or a
		-- decimal separator with
		-- a single blank
		FOR i in 1..intDmsLen LOOP
		  -- Get current character
		  strChr := SubStr(strDegMinSecB, i, 1);

		  -- either add character to normalized string or replace
		  -- separator sequence with single blank		 
		  If strpos('-0123456789,.', strChr) > 0 Then
			 -- add character but replace comma with point
			 If (strChr <> ',') Then
				strNorm := strNorm || strChr;
			 Else
				strNorm := strNorm || '.';
			 End If;
			 blnGotSeparator := 0;
		  ElsIf strpos('neswNESW',strChr) > 0 Then -- Extract Compass Point if present
			strCompassPoint := strChr;
		  Else
			 -- ensure only one separator is replaced with a blank -
			 -- suppress the rest
			 If blnGotSeparator = 0 Then
				strNorm := strNorm || ' ';
				blnGotSeparator := 0;
			 End If;
		  End If;
		End Loop;

		-- Split normalized string into array of max 3 components
		arrDegMinSec := string_to_array(strNorm, ' ');
--	  raise notice 'array: %',arrDegMinSec;
		--convert specified components to double
		i := array_upper(arrDegMinSec,1);
--	raise notice 'i: %',i;
		j:=1;
		If i >= j and arrDegMinSec[j] <> '' Then
		  dDeg := CAST(arrDegMinSec[j] AS numeric);
		End If;
		j:=2;
		If i >= j and arrDegMinSec[j] <> '' Then
		  dMin := CAST(arrDegMinSec[j] AS numeric);
		End If;
		j:=3;
		If i >= j and arrDegMinSec[j] <> '' Then --if I'm at position 3+
		  dSec := CAST(arrDegMinSec[j] AS numeric);
		End If;

		-- convert components to value
		return trunc(CASE WHEN UPPER(strCompassPoint) IN ('S','W') 
					THEN -1 
					ELSE 1 
				END 
				*
				(dDeg + dMin / 60 + dSec / 3600),10)::double precision;
	end if;
	End 
$_$;


ALTER FUNCTION darwin2.dms2dd(strdegminsec text) OWNER TO darwin2;

--
-- TOC entry 1772 (class 1255 OID 1440033)
-- Name: fct_add_in_dict(text, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, dict_val text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  query_str varchar;
BEGIN
  IF dict_val is NULL THEN 
    RETURN TRUE;
  END IF;
    query_str := ' INSERT INTO flat_dict (referenced_relation, dict_field, dict_value)
    (
      SELECT ' || quote_literal(ref_relation) || ' , ' || quote_literal(ref_field) || ', ' || quote_literal(dict_val) || ' WHERE NOT EXISTS
      (SELECT id FROM flat_dict WHERE
        referenced_relation = ' || quote_literal(ref_relation) || '
        AND dict_field = ' || quote_literal(ref_field) || '
        AND dict_value = ' || quote_literal(dict_val) || ')
    );';
    execute query_str;
    RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, dict_val text) OWNER TO darwin2;

--
-- TOC entry 1770 (class 1255 OID 1440034)
-- Name: fct_add_in_dict(text, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, old_value text, new_val text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  query_str varchar;
BEGIN
  IF new_val is NULL OR old_value IS NOT DISTINCT FROM new_val THEN
    RETURN TRUE;
  END IF;
    query_str := ' INSERT INTO flat_dict (referenced_relation, dict_field, dict_value)
    (
      SELECT ' || quote_literal(ref_relation) || ' , ' || quote_literal(ref_field) || ', ' || quote_literal(new_val) || ' WHERE NOT EXISTS
      (SELECT id FROM flat_dict WHERE
        referenced_relation = ' || quote_literal(ref_relation) || '
        AND dict_field = ' || quote_literal(ref_field) || '
        AND dict_value = ' || quote_literal(new_val) || ')
    );';
    execute query_str;
    RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, old_value text, new_val text) OWNER TO darwin2;

--
-- TOC entry 1775 (class 1255 OID 1440035)
-- Name: fct_add_in_dict_dept(text, text, text, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_add_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  query_str varchar;
  dpt_new_val varchar;
BEGIN
  IF new_val is NULL OR ( old_value IS NOT DISTINCT FROM new_val AND depending_old_value IS NOT DISTINCT FROM depending_new_value ) THEN
    RETURN TRUE;
  END IF;
  dpt_new_val := coalesce(depending_new_value,'');

    query_str := ' INSERT INTO flat_dict (referenced_relation, dict_field, dict_value, dict_depend)
    (
      SELECT ' || quote_literal(ref_relation) || ' , ' || quote_literal(ref_field) || ', ' || quote_literal(new_val) || ', '
        || quote_literal(dpt_new_val) || ' WHERE NOT EXISTS
      (SELECT id FROM flat_dict WHERE
        referenced_relation = ' || quote_literal(ref_relation) || '
        AND dict_field = ' || quote_literal(ref_field) || '
        AND dict_value = ' || quote_literal(new_val) || '
        AND dict_depend = ' || quote_literal(dpt_new_val) || '
      )
    );';
    --RAISE info 'hem %' ,  dpt_new_val;
    execute query_str;
    RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_add_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text) OWNER TO postgres;

--
-- TOC entry 1777 (class 1255 OID 1440036)
-- Name: fct_after_save_add_code(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_after_save_add_code(collectionid integer, specimenid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  col collections%ROWTYPE;
BEGIN
  SELECT c.* INTO col FROM collections c WHERE c.id = collectionId;
  IF FOUND THEN
    IF col.code_auto_increment = TRUE THEN
      INSERT INTO codes (referenced_relation, record_id, code_prefix, code_prefix_separator, code, code_suffix_separator, code_suffix)
      SELECT 'specimens', specimenId, col.code_prefix, col.code_prefix_separator, (col.code_last_value+1)::varchar, col.code_suffix_separator, col.code_suffix
      WHERE NOT EXISTS (SELECT 1 
                        FROM codes 
                        WHERE referenced_relation = 'specimens'
                          AND record_id = specimenId
                          AND code_category = 'main'
                          AND code_num IS NOT NULL
                        LIMIT 1
                       );
    END IF;
  END IF;
  RETURN 0;
END;
$$;


ALTER FUNCTION darwin2.fct_after_save_add_code(collectionid integer, specimenid integer) OWNER TO postgres;

--
-- TOC entry 1776 (class 1255 OID 1440037)
-- Name: fct_array_find(anyarray, anyelement); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_array_find(in_array anyarray, elem anyelement, OUT item_order integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
    select s from generate_series(1,array_upper($1, 1)) as s where $1[s] = $2;
$_$;


ALTER FUNCTION darwin2.fct_array_find(in_array anyarray, elem anyelement, OUT item_order integer) OWNER TO darwin2;

--
-- TOC entry 1778 (class 1255 OID 1440038)
-- Name: fct_array_find(character varying, anyelement); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_array_find(in_array character varying, elem anyelement, OUT item_order integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
    select fct_array_find(string_to_array($1,','), $2::text);
$_$;


ALTER FUNCTION darwin2.fct_array_find(in_array character varying, elem anyelement, OUT item_order integer) OWNER TO darwin2;

--
-- TOC entry 1779 (class 1255 OID 1440039)
-- Name: fct_auto_insert_status_history(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_auto_insert_status_history() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 user_id int;
BEGIN
    SELECT COALESCE(get_setting('darwin.userid'),'0')::integer INTO user_id;
    IF user_id = 0 THEN
      RETURN NEW;
    END IF;

    INSERT INTO loan_status
      (loan_ref, user_ref, status, modification_date_time, comment, is_last)
      VALUES
      (NEW.id, user_id, 'new', now(), '', true);

    INSERT INTO loan_rights
      (loan_ref, user_ref, has_encoding_right)
      VALUES
      (NEW.id, user_id, true);

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_auto_insert_status_history() OWNER TO darwin2;

--
-- TOC entry 1773 (class 1255 OID 1440040)
-- Name: fct_cast_to_real(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cast_to_real(element text) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE r_val double precision;
BEGIN
    BEGIN
      r_val := element::double precision;
      return r_val;
    EXCEPTION WHEN SQLSTATE '22P02' THEN
      RETURN null;
    END;
END;
$$;


ALTER FUNCTION darwin2.fct_cast_to_real(element text) OWNER TO darwin2;

--
-- TOC entry 805 (class 1255 OID 1440041)
-- Name: fct_catalogue_import_keywords_update(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_catalogue_import_keywords_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  booContinue BOOLEAN := FALSE;
  intDiag INTEGER;
BEGIN
  IF TG_TABLE_NAME = 'staging_catalogue' THEN
    IF TG_OP IN ('INSERT', 'UPDATE') THEN
      IF COALESCE(NEW.catalogue_ref,0) != 0 AND COALESCE(NEW.level_ref,0) != 0 THEN
        UPDATE classification_keywords as mck
        SET
          referenced_relation = (
            SELECT level_type
            FROM catalogue_levels
            WHERE id = NEW.level_ref
          ),
          record_id = NEW.catalogue_ref
        WHERE mck.referenced_relation = TG_TABLE_NAME
              AND mck.record_id = NEW.id
              AND NOT EXISTS (
            SELECT 1
            FROM classification_keywords as sck
            WHERE sck.referenced_relation = (
              SELECT level_type
              FROM catalogue_levels
              WHERE id = NEW.level_ref
            )
                  AND sck.record_id = NEW.catalogue_ref
                  AND sck.keyword_type = mck.keyword_type
                  AND sck.keyword_indexed = mck.keyword_indexed
        );
      END IF;
      RETURN NEW;
    ELSE
      DELETE FROM classification_keywords
      WHERE referenced_relation = 'staging_catalogue'
            AND record_id = OLD.id;
      RETURN NULL;
    END IF;
  ELSEIF TG_TABLE_NAME = 'staging' THEN
    IF TG_OP IN ('INSERT', 'UPDATE') THEN
      IF COALESCE(NEW.taxon_ref,0) != 0 AND COALESCE(NEW.taxon_level_ref,0) != 0 THEN
        IF TG_OP = 'UPDATE' THEN
          IF COALESCE(NEW.taxon_ref,0) != COALESCE(OLD.taxon_ref,0) THEN
            booContinue := TRUE;
          END IF;
        ELSE
          booContinue := TRUE;
        END IF;
        IF booContinue = TRUE THEN
          UPDATE classification_keywords as mck
          SET
            referenced_relation = 'taxonomy',
            record_id = NEW.taxon_ref
          WHERE mck.referenced_relation = TG_TABLE_NAME
                AND mck.record_id = NEW.id
                AND mck.keyword_type IN (
            'GenusOrMonomial',
            'Subgenus',
            'SpeciesEpithet',
            'FirstEpiteth',
            'SubspeciesEpithet',
            'InfraspecificEpithet',
            'AuthorTeamAndYear',
            'AuthorTeam',
            'AuthorTeamOriginalAndYear',
            'AuthorTeamParenthesisAndYear',
            'SubgenusAuthorAndYear',
            'CultivarGroupName',
            'CultivarName',
            'Breed',
            'CombinationAuthorTeamAndYear',
            'NamedIndividual'
          )
                AND NOT EXISTS (
              SELECT 1
              FROM classification_keywords as sck
              WHERE sck.referenced_relation = 'taxonomy'
                    AND sck.record_id = NEW.taxon_ref
                    AND sck.keyword_type = mck.keyword_type
                    AND sck.keyword_indexed = mck.keyword_indexed
          );
        END IF;
      ELSEIF COALESCE(NEW.mineral_ref,0) != 0 AND COALESCE(NEW.mineral_level_ref,0) != 0 THEN
        IF TG_OP = 'UPDATE' THEN
          IF COALESCE(NEW.mineral_ref,0) != COALESCE(OLD.mineral_ref,0) THEN
            booContinue := TRUE;
          END IF;
        ELSE
          booContinue := TRUE;
        END IF;
        IF booContinue = TRUE THEN
          UPDATE classification_keywords as mck
          SET
            referenced_relation = 'mineralogy',
            record_id = NEW.mineral_ref
          WHERE mck.referenced_relation = TG_TABLE_NAME
                AND mck.record_id = NEW.id
                AND mck.keyword_type IN (
            'AuthorTeamAndYear',
            'AuthorTeam',
            'NamedIndividual'
          )
                AND NOT EXISTS (
              SELECT 1
              FROM classification_keywords as sck
              WHERE sck.referenced_relation = 'mineralogy'
                    AND sck.record_id = NEW.mineral_ref
                    AND sck.keyword_type = mck.keyword_type
                    AND sck.keyword_indexed = mck.keyword_indexed
          );
        END IF;
      END IF;
      RETURN NEW;
    ELSE
      DELETE FROM classification_keywords
      WHERE referenced_relation = 'staging'
            AND record_id = OLD.id;
      RETURN NULL;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION darwin2.fct_catalogue_import_keywords_update() OWNER TO postgres;

--
-- TOC entry 1784 (class 1255 OID 1440042)
-- Name: fct_chk_arerole(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_arerole() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  IF NEW.people_type = 'author' THEN

    IF NOT EXISTS( SELECT id FROM people WHERE (db_people_type & 2)!=0 AND id=NEW.people_ref) THEN
      RAISE EXCEPTION 'Author must be defined as author.';
    END IF;

  ELSIF NEW.people_type = 'identifier' THEN

    IF NOT EXISTS( SELECT id FROM people WHERE (db_people_type & 4)!=0 AND id=NEW.people_ref) THEN
      RAISE EXCEPTION 'Experts must be defined as identifier.';
    END IF;

  ELSIF NEW.people_type = 'expert' THEN

    IF NOT EXISTS( SELECT id FROM people WHERE (db_people_type & 8)!=0 AND id=NEW.people_ref) THEN
      RAISE EXCEPTION 'Experts must be defined as expert.';
    END IF;

  ELSIF NEW.people_type = 'collector' THEN

    IF NOT EXISTS( SELECT id FROM people WHERE (db_people_type & 16)!=0 AND id=NEW.people_ref) THEN
      RAISE EXCEPTION 'Collectors must be defined as collector.';
    END IF;

  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_arerole() OWNER TO darwin2;

--
-- TOC entry 1780 (class 1255 OID 1440043)
-- Name: fct_chk_canupdatecollectionsrights(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_canupdatecollectionsrights() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  mgrName varchar;
  booContinue boolean := false;
BEGIN
  /*Check an unpromotion occurs by modifying db_user_type explicitely or implicitely by replacing a user by an other
    or moving a user from one collection to an other
  */
  IF (NEW.db_user_type < 4 AND OLD.db_user_type >=4) OR NEW.collection_ref IS DISTINCT FROM OLD.collection_ref OR NEW.user_ref IS DISTINCT FROM OLD.user_ref THEN
    SELECT formated_name INTO mgrName
    FROM collections INNER JOIN users ON users.id = collections.main_manager_ref
    WHERE collections.id = OLD.collection_ref
      AND main_manager_ref = OLD.user_ref;
    /*If user concerned still main manager of the collection, cannot be updated*/
    IF FOUND THEN
      RAISE EXCEPTION 'This manager (%) cannot be updated because he/she is still defined as a main manager for this collection', mgrName;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_canupdatecollectionsrights() OWNER TO darwin2;

--
-- TOC entry 1781 (class 1255 OID 1440044)
-- Name: fct_chk_onceinpath(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_onceinpath(path character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM * FROM regexp_split_to_table(path, E'\/') as i_id WHERE i_id != '' GROUP BY i_id HAVING COUNT(*)>1;
    IF FOUND THEN
        RETURN FALSE;
    END IF;
    RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_onceinpath(path character varying) OWNER TO darwin2;

--
-- TOC entry 1785 (class 1255 OID 1440045)
-- Name: fct_chk_parentcollinstitution(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_parentcollinstitution() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  institutionRef integer;
  booContinue boolean := false;
BEGIN
  IF TG_OP = 'INSERT' THEN
    booContinue := true;
  ELSIF TG_OP = 'UPDATE' THEN
    IF NEW.institution_ref IS DISTINCT FROM OLD.institution_ref OR NEW.parent_ref IS DISTINCT FROM OLD.parent_ref THEN
      booContinue := true;
    END IF;
  END IF;
  IF booContinue THEN
    IF NEW.parent_ref IS NOT NULL THEN
      SELECT institution_ref INTO institutionRef FROM collections WHERE id = NEW.parent_ref;
      IF institutionRef != NEW.institution_ref THEN
        RAISE EXCEPTION 'You tried to insert or update a collection with an other institution than the one given for the parent collection';
      END IF;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_parentcollinstitution() OWNER TO darwin2;

--
-- TOC entry 1782 (class 1255 OID 1440046)
-- Name: fct_chk_peopleismoral(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_peopleismoral() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec_exists boolean;
BEGIN
   SELECT is_physical FROM people WHERE id=NEW.institution_ref into rec_exists;

   IF rec_exists = TRUE THEN
    RAISE EXCEPTION 'You cannot link a moral person as Institution';
   END IF;

   RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_peopleismoral() OWNER TO darwin2;

--
-- TOC entry 806 (class 1255 OID 1440047)
-- Name: fct_chk_peopletype(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_peopletype() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  IF NEW.db_people_type IS DISTINCT FROM OLD.db_people_type THEN

    /** AUTHOR FLAG IS 2 **/
    IF NOT (NEW.db_people_type & 2)>0  THEN
      IF EXISTS( SELECT * FROM catalogue_people WHERE people_ref=NEW.id AND people_type='author')  THEN
        RAISE EXCEPTION 'Author still used as author.';
      END IF;
    END IF;

    /** IDENTIFIER FLAG IS 4 **/
    IF NOT (NEW.db_people_type & 4)>0  THEN
      IF EXISTS( SELECT * FROM catalogue_people WHERE people_ref=NEW.id AND people_type='identifier')  THEN
        RAISE EXCEPTION 'Identifier still used as identifier.';
      END IF;
    END IF;

    /** Expert Flag is 8 **/
    IF NOT (NEW.db_people_type & 8)>0  THEN
      IF EXISTS( SELECT * FROM catalogue_people WHERE people_ref=NEW.id AND people_type='expert')  THEN
        RAISE EXCEPTION 'Expert still used as expert.';
      END IF;
    END IF;

          /** COLLECTOR Flag is 16 **/
    IF NOT (NEW.db_people_type & 16)>0   THEN
      IF EXISTS( SELECT * FROM catalogue_people WHERE people_ref=NEW.id AND people_type='collector')  THEN
        RAISE EXCEPTION 'Collector still used as collector.';
      END IF;
    END IF;
  END IF;
  RETURN NEW;

END;
$$;


ALTER FUNCTION darwin2.fct_chk_peopletype() OWNER TO darwin2;

--
-- TOC entry 807 (class 1255 OID 1440048)
-- Name: fct_chk_possible_upper_level(character varying, integer, integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_possible_upper_level(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
response boolean;
BEGIN
  EXECUTE 'SELECT true WHERE EXISTS( SELECT * ' ||
          'from possible_upper_levels ' ||
          'where level_ref = ' || quote_literal(new_level_ref) ||
          '  and coalesce(level_upper_ref,0) = case when ' || quote_literal(coalesce(new_parent_ref,0)) || ' != '|| quote_literal(0) || ' then (select level_ref from ' || quote_ident(referenced_relation) || ' where id = ' || quote_literal(coalesce(new_parent_ref,0)) || ') else ' || quote_literal(coalesce(new_parent_ref,0)) || ' end' ||
          '                              )'
    INTO response;
    raise notice 'SELECT true WHERE EXISTS( SELECT * from possible_upper_levels where level_ref = %  and coalesce(level_upper_ref,0) = case when % !=  % then (select level_ref from % where id = %) else % end )'
    , quote_literal(new_level_ref) ,quote_literal(coalesce(new_parent_ref,0)), quote_literal(0), quote_ident(referenced_relation), quote_literal(coalesce(new_parent_ref,0)),  quote_literal(coalesce(new_parent_ref,0));
  IF response IS NULL THEN
  raise notice 'null';
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_possible_upper_level(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) OWNER TO darwin2;

--
-- TOC entry 808 (class 1255 OID 1440049)
-- Name: fct_chk_possible_upper_level_rmca_allow_upper(character varying, integer, integer, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_chk_possible_upper_level_rmca_allow_upper(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
response boolean;

BEGIN

  PERFORM FROM possible_upper_levels WHERE level_ref=new_level_ref ;
  IF NOT FOUND THEN
	    RETURN TRUE;
  END IF;

  
  PERFORM FROM possible_upper_levels WHERE level_ref=new_level_ref AND level_upper_ref IS NULL ;
  IF FOUND THEN
	    RETURN TRUE;
  END IF;

  EXECUTE 'SELECT true WHERE EXISTS( SELECT * ' ||
          'from possible_upper_levels ' ||
          'where level_ref = ' || quote_literal(new_level_ref) ||
          '  and coalesce(level_upper_ref,0) = case when ' || quote_literal(coalesce(new_parent_ref,0)) || ' != '|| quote_literal(0) || ' then (select level_ref from ' || quote_ident(referenced_relation) || ' where id = ' || quote_literal(coalesce(new_parent_ref,0)) || ') else ' || quote_literal(coalesce(new_parent_ref,0)) || ' end' ||
          '                              )'
    INTO response;
  IF response IS NULL THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_possible_upper_level_rmca_allow_upper(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) OWNER TO postgres;

--
-- TOC entry 1788 (class 1255 OID 1440050)
-- Name: fct_chk_referencedrecord(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_referencedrecord() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec_exists integer;
BEGIN
	  IF NEW.record_id != -1 THEN --ftheeten 2019 01 18
		  EXECUTE 'SELECT 1 WHERE EXISTS ( SELECT id FROM ' || quote_ident(NEW.referenced_relation)  || ' WHERE id=' || quote_literal(NEW.record_id) || ')' INTO rec_exists;
		  IF rec_exists IS NULL THEN
		    RAISE EXCEPTION 'The referenced record does not exists % %',NEW.referenced_relation, NEW.record_id;
		  END IF;	 
	  END IF;	
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_referencedrecord() OWNER TO darwin2;

--
-- TOC entry 1789 (class 1255 OID 1440051)
-- Name: fct_chk_referencedrecordrelationship(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_referencedrecordrelationship() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec_exists integer;
BEGIN

  EXECUTE 'SELECT count(id)  FROM ' || quote_ident(NEW.referenced_relation)  || ' WHERE id=' || quote_literal(NEW.record_id_1) ||  ' OR id=' || quote_literal(NEW.record_id_2) INTO rec_exists;

  IF rec_exists != 2 THEN
    RAISE EXCEPTION 'The referenced record does not exists';
  END IF;

  RETURN NEW;

END;
$$;


ALTER FUNCTION darwin2.fct_chk_referencedrecordrelationship() OWNER TO darwin2;

--
-- TOC entry 809 (class 1255 OID 1440052)
-- Name: fct_chk_specimencollectionallowed(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_specimencollectionallowed() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id integer;
  db_user_type_cpy smallint;
  col_ref integer;
BEGIN
  SELECT COALESCE(get_setting('darwin.userid'),'0')::integer INTO user_id;
  /*If no user id allows modification -> if we do a modif in SQL it should be possible*/
  IF user_id = 0 THEN
    IF TG_OP = 'DELETE' THEN
      RETURN OLD;
    END IF;
    RETURN NEW;
  END IF;

  IF user_id = -1 THEN
    RETURN NEW;
  END IF;
  /*If user_id <> 0, get db_user_type of user concerned*/
  SELECT db_user_type INTO db_user_type_cpy FROM users WHERE id = user_id;
  /*If admin allows whatever*/
  IF db_user_type_cpy = 8 THEN
    IF TG_OP = 'DELETE' THEN
      RETURN OLD;
    END IF;
    RETURN NEW;
  END IF;

  IF TG_TABLE_NAME = 'specimens' THEN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
      IF NOT EXISTS (SELECT 1 FROM fct_search_authorized_encoding_collections (user_id) as r WHERE r = NEW.collection_ref) THEN
        RAISE EXCEPTION 'You don''t have the rights to insert into or update a specimen in this collection';
      END IF;
    ELSE /*Delete*/
      PERFORM true WHERE OLD.collection_ref::integer IN (SELECT * FROM fct_search_authorized_encoding_collections(user_id));
      IF NOT EXISTS (SELECT 1 FROM fct_search_authorized_encoding_collections (user_id) as r WHERE r = OLD.collection_ref) THEN
        RAISE EXCEPTION 'You don''t have the rights to delete a specimen from this collection';
      END IF;
    END IF;
  END IF;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_chk_specimencollectionallowed() OWNER TO darwin2;

--
-- TOC entry 1786 (class 1255 OID 1440053)
-- Name: fct_chk_upper_level_for_childrens(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_chk_upper_level_for_childrens() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec_exists integer;
  name_taxon varchar;
BEGIN

  EXECUTE 'SELECT count(id) , string_agg(name, '';'') FROM ' || quote_ident(TG_TABLE_NAME::text) ||
    ' WHERE parent_ref=' || quote_literal(NEW.id) ||
    ' AND fct_chk_possible_upper_level('|| quote_literal(TG_TABLE_NAME::text) ||
    ', parent_ref, level_ref, id) = false ' INTO rec_exists, name_taxon;

  IF rec_exists > 0 THEN
    RAISE EXCEPTION 'Children of this record does not follow the level hierarchy %', name_taxon;
  END IF;
  RETURN NEW;

END;
$$;


ALTER FUNCTION darwin2.fct_chk_upper_level_for_childrens() OWNER TO darwin2;

--
-- TOC entry 1794 (class 1255 OID 1440054)
-- Name: fct_clean_staging_catalogue(integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_clean_staging_catalogue(importref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
    recDistinctStagingCatalogue RECORD;
  BEGIN
    FOR recDistinctStagingCatalogue IN SELECT DISTINCT ON (level_ref, fullToIndex(name), name)
                                       id, import_ref, name, level_ref
                                       FROM
                                         (
                                           SELECT
                                             id,
                                             import_ref,
                                             name,
                                             level_ref
                                           FROM staging_catalogue
                                           WHERE import_ref = importRef
                                           ORDER BY level_ref, fullToIndex(name), id
                                         ) as subqry
    LOOP
      UPDATE staging_catalogue
      SET parent_ref = recDistinctStagingCatalogue.id
      WHERE
        import_ref = importRef
        AND parent_ref IN
            (
              SELECT id
              FROM staging_catalogue
              WHERE import_ref = importRef
                AND name = recDistinctStagingCatalogue.name
                AND level_ref = recDistinctStagingCatalogue.level_ref
                AND id != recDistinctStagingCatalogue.id
            );
      DELETE FROM staging_catalogue
      WHERE import_ref = importRef
            and name = recDistinctStagingCatalogue.name
            and level_ref = recDistinctStagingCatalogue.level_ref
            and id != recDistinctStagingCatalogue.id;
    END LOOP;
    RETURN TRUE;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE WARNING 'Error:%', SQLERRM;
      RETURN FALSE;
  END;
$$;


ALTER FUNCTION darwin2.fct_clean_staging_catalogue(importref integer) OWNER TO postgres;

--
-- TOC entry 1793 (class 1255 OID 1440055)
-- Name: fct_clear_identifiers_in_flat(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_clear_identifiers_in_flat() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  tmp_user text;
BEGIN
 SELECT COALESCE(get_setting('darwin.userid'),'0') INTO tmp_user;
  PERFORM set_config('darwin.userid', '-1', false) ;

  IF EXISTS(SELECT true FROM catalogue_people cp WHERE cp.record_id = OLD.id AND cp.referenced_relation = 'identifications') THEN
    -- There's NO identifier associated to this identification'
    UPDATE specimens SET spec_ident_ids = fct_remove_array_elem(spec_ident_ids,
      (
        select array_agg(people_ref) FROM catalogue_people p  INNER JOIN identifications i ON p.record_id = i.id AND i.id = OLD.id
        AND people_ref NOT in
          (
            SELECT people_ref from catalogue_people p INNER JOIN identifications i ON p.record_id = i.id AND p.referenced_relation = 'identifications'
            AND p.people_type='identifier' where i.record_id=OLD.record_id AND i.referenced_relation=OLD.referenced_relation AND i.id != OLD.id
          )
      ))
      WHERE id = OLD.record_id;
  END IF;

  PERFORM set_config('darwin.userid', tmp_user, false) ;
  RETURN OLD;

END;
$$;


ALTER FUNCTION darwin2.fct_clear_identifiers_in_flat() OWNER TO darwin2;

--
-- TOC entry 1795 (class 1255 OID 1440056)
-- Name: fct_clear_referencedrecord(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_clear_referencedrecord() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP ='UPDATE' THEN
    IF NEW.id != OLD.id THEN
      UPDATE template_table_record_ref SET record_id = NEW.id WHERE referenced_relation = TG_TABLE_NAME AND record_id = OLD.id;
    END IF;
  ELSEIF TG_OP = 'DELETE' THEN
    DELETE FROM template_table_record_ref where referenced_relation = TG_TABLE_NAME AND record_id = OLD.id;
  END IF;
  RETURN NULL;
 END;
$$;


ALTER FUNCTION darwin2.fct_clear_referencedrecord() OWNER TO darwin2;

--
-- TOC entry 1790 (class 1255 OID 1440057)
-- Name: fct_clr_specialstatus(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_clr_specialstatus() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  newType varchar := fullToIndex(NEW.type);
BEGIN

  -- IF Type not changed
  IF TG_OP = 'UPDATE' THEN
    IF fullToIndex(OLD.type) = newType THEN
      RETURN NEW;
    END IF;
  END IF;

  IF newType = 'specimen' THEN
    NEW.type_search := 'specimen';
    NEW.type_group := 'specimen';
  ELSIF newType = 'type' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'type';
  ELSIF newType = 'subtype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'type';
  ELSIF newType = 'allotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'allotype';
  ELSIF newType = 'cotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'syntype';
  ELSIF newType = 'genotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'type';
  ELSIF newType = 'holotype' THEN
    NEW.type_search := 'holotype';
    NEW.type_group := 'holotype';
  ELSIF newType = 'hypotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'hypotype';
  ELSIF newType = 'lectotype' THEN
    NEW.type_search := 'lectotype';
    NEW.type_group := 'lectotype';
  ELSIF newType = 'locotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'locotype';
  ELSIF newType = 'neallotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'type';
  ELSIF newType = 'neotype' THEN
    NEW.type_search := 'neotype';
    NEW.type_group := 'neotype';
  ELSIF newType = 'paralectotype' THEN
    NEW.type_search := 'paralectotype';
    NEW.type_group := 'paralectotype';
  ELSIF newType = 'paratype' THEN
    NEW.type_search := 'paratype';
    NEW.type_group := 'paratype';
  ELSIF newType = 'plastotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'plastotype';
  ELSIF newType = 'plesiotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'plesiotype';
  ELSIF newType = 'syntype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'syntype';
  ELSIF newType = 'topotype' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'topotype';
  ELSIF newType = 'typeinlitteris' THEN
    NEW.type_search := 'type';
    NEW.type_group := 'type in litteris';
  ELSE
    NEW.type_search := 'type';
    NEW.type_group := 'type';
  END IF;

  RETURN NEW;
EXCEPTION
  WHEN RAISE_EXCEPTION THEN
    return NULL;
END;
$$;


ALTER FUNCTION darwin2.fct_clr_specialstatus() OWNER TO darwin2;

--
-- TOC entry 1797 (class 1255 OID 1440058)
-- Name: fct_count_units(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_count_units() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rid integer;
  do_with_type boolean default true;
BEGIN

  IF TG_TABLE_NAME = 'specimen_individuals' THEN
    IF TG_OP = 'INSERT' THEN
      rid := NEW.specimen_ref;
    ELSIF TG_OP = 'UPDATE' THEN
      rid := OLD.specimen_ref;
      IF OLD.type_group IS NOT DISTINCT FROM NEW.type_group THEN
        do_with_type := false;
      END IF;
    ELSE
      rid := OLD.specimen_ref;
    END IF;

    IF do_with_type THEN
      UPDATE specimens_flat s set 
        with_types = exists (select 1 from  specimen_individuals  i2 WHERE i2.specimen_ref = s.specimen_ref AND  i2.type_group <> 'specimen')
      WHERE
         s.specimen_ref = rid
        AND with_types != exists (select 1 from  specimen_individuals  i2 WHERE i2.specimen_ref = s.specimen_ref AND  i2.type_group <> 'specimen');
    END IF;

    UPDATE specimens_flat s set 
      with_individuals = exists (select 1 from  specimen_individuals  i2 WHERE i2.specimen_ref = s.specimen_ref)
      WHERE
        s.specimen_ref = rid
      AND with_individuals != exists (select 1 from  specimen_individuals  i2 WHERE i2.specimen_ref = s.specimen_ref);

  ELSIF TG_TABLE_NAME = 'specimen_parts' THEN

    IF TG_OP = 'INSERT' THEN
      rid = NEW.specimen_individual_ref;
    ELSE
      rid = OLD.specimen_individual_ref;
    END IF;

      UPDATE specimen_individuals i SET
      with_parts = exists (select 1 from specimen_parts p WHERE p.specimen_individual_ref = i.id )
      WHERE i.id = rid
      AND with_parts != exists (select 1 from specimen_parts p WHERE p.specimen_individual_ref = i.id );
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_count_units() OWNER TO postgres;

--
-- TOC entry 1798 (class 1255 OID 1440059)
-- Name: fct_cpy_deleted_file(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_deleted_file() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO multimedia_todelete (uri) VALUES (OLD.uri);
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_deleted_file() OWNER TO postgres;

--
-- TOC entry 1799 (class 1255 OID 1440060)
-- Name: fct_cpy_formattedname(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_formattedname() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP ='UPDATE' THEN
    IF NEW.family_name = OLD.family_name AND NEW.given_name = OLD.given_name AND NEW.title = OLD.title
	THEN
      RETURN NEW;
    END IF;
  END IF;

  IF NEW.is_physical THEN
    IF COALESCE(NEW.title, '') = '' THEN
      NEW.formated_name := COALESCE(NEW.family_name,'') || ' ' || COALESCE(NEW.given_name,'');
    ELSE
      NEW.formated_name := COALESCE(NEW.family_name,'') || ' ' || COALESCE(NEW.given_name,'') || ' (' || NEW.title || ')';
    END IF;
  ELSE
    NEW.formated_name := NEW.family_name;
  END IF;

  NEW.formated_name_indexed := fullToIndex(NEW.formated_name, TRUE);
  NEW.formated_name_unique := toUniqueStr(NEW.formated_name, TRUE);
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_formattedname() OWNER TO darwin2;

--
-- TOC entry 845 (class 1255 OID 1440061)
-- Name: fct_cpy_fulltoindex(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_fulltoindex() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  codeNum varchar;
BEGIN
        IF TG_TABLE_NAME = 'properties' THEN
                NEW.applies_to_indexed := COALESCE(fullToIndex(NEW.applies_to),'');
                NEW.method_indexed := COALESCE(fullToIndex(NEW.method),'');
        ELSIF TG_TABLE_NAME = 'chronostratigraphy' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'collections' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'expeditions' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'bibliography' THEN
                NEW.title_indexed := fullToIndex(NEW.title);
        ELSIF TG_TABLE_NAME = 'identifications' THEN
                NEW.value_defined_indexed := COALESCE(fullToIndex(NEW.value_defined),'');
        ELSIF TG_TABLE_NAME = 'lithology' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'lithostratigraphy' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'mineralogy' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
                NEW.formule_indexed := fullToIndex(NEW.formule);
        ELSIF TG_TABLE_NAME = 'people' THEN
                NEW.formated_name_indexed := COALESCE(fullToIndex(NEW.formated_name),'');
                NEW.name_formated_indexed := fulltoindex(coalesce(NEW.given_name,'') || coalesce(NEW.family_name,''));
                NEW.formated_name_unique := COALESCE(toUniqueStr(NEW.formated_name),'');
        ELSIF TG_TABLE_NAME = 'codes' THEN
                codeNum := coalesce(trim(regexp_replace(NEW.code, '[^0-9]','','g')), '');
                IF codeNum = '' THEN
                  NEW.code_num := 0;               
                ELSE
                  NEW.code_num := codeNum::bigint;
                END IF;
                NEW.full_code_indexed := fullToIndex(COALESCE(NEW.code_prefix,'') || COALESCE(NEW.code::text,'') || COALESCE(NEW.code_suffix,'') );
        ELSIF TG_TABLE_NAME = 'tag_groups' THEN
                NEW.group_name_indexed := fullToIndex(NEW.group_name);
                NEW.sub_group_name_indexed := fullToIndex(NEW.sub_group_name);
        ELSIF TG_TABLE_NAME = 'taxonomy' THEN
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'classification_keywords' THEN
                NEW.keyword_indexed := fullToIndex(NEW.keyword);
        ELSIF TG_TABLE_NAME = 'users' THEN
                NEW.formated_name_indexed := COALESCE(fullToIndex(NEW.formated_name),'');
                NEW.formated_name_unique := COALESCE(toUniqueStr(NEW.formated_name),'');
        ELSIF TG_TABLE_NAME = 'vernacular_names' THEN
                NEW.community_indexed := fullToIndex(NEW.community);
                NEW.name_indexed := fullToIndex(NEW.name);
        ELSIF TG_TABLE_NAME = 'igs' THEN
                NEW.ig_num_indexed := fullToIndex(NEW.ig_num);
        ELSIF TG_TABLE_NAME = 'collecting_methods' THEN
                NEW.method_indexed := fullToIndex(NEW.method);
        ELSIF TG_TABLE_NAME = 'collecting_tools' THEN
                NEW.tool_indexed := fullToIndex(NEW.tool);
        ELSIF TG_TABLE_NAME = 'loans' THEN
                NEW.search_indexed := fullToIndex(COALESCE(NEW.name,'') || COALESCE(NEW.description,''));
        ELSIF TG_TABLE_NAME = 'multimedia' THEN
                NEW.search_indexed := fullToIndex ( COALESCE(NEW.title,'') ||  COALESCE(NEW.description,'') || COALESCE(NEW.extracted_info,'') ) ;
        ELSIF TG_TABLE_NAME = 'comments' THEN
                NEW.comment_indexed := fullToIndex(NEW.comment);
        ELSIF TG_TABLE_NAME = 'ext_links' THEN
                NEW.comment_indexed := fullToIndex(NEW.comment);
        ELSIF TG_TABLE_NAME = 'specimens' THEN
                NEW.object_name_indexed := fullToIndex(COALESCE(NEW.object_name,'') );
				NEW.ig_main_code_indexed:= COALESCE(NEW.ig_num_indexed,'')||'_'||COALESCE(NEW.main_code_indexed,'');
        END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_fulltoindex() OWNER TO darwin2;

--
-- TOC entry 1787 (class 1255 OID 1440062)
-- Name: fct_cpy_gtutags(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_gtutags() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  curs_entry refcursor;
  entry_row RECORD;
  seen_el varchar[];
BEGIN
  IF TG_OP != 'DELETE' THEN
    --ftheeten 2020 02 11
    OPEN curs_entry FOR SELECT distinct(fulltoIndex(tags, TRUE)) as u_tag, trim(tags) as tags
                        FROM regexp_split_to_table(case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value, ';') as tags
                        WHERE fulltoIndex(tags) != '';
    LOOP
      FETCH curs_entry INTO entry_row;
      EXIT WHEN NOT FOUND;

      seen_el := array_append(seen_el, entry_row.u_tag);

     IF EXISTS( SELECT 1 FROM tags
                WHERE gtu_ref = NEW.gtu_ref
                  AND group_ref = NEW.id
                  AND tag_indexed = entry_row.u_tag) THEN
        IF TG_OP = 'UPDATE' THEN
          IF OLD.sub_group_name != NEW.sub_group_name THEN
            UPDATE tags
            SET sub_group_type = NEW.sub_group_name
            WHERE group_ref = NEW.id;
          END IF;
        END IF;
        CONTINUE;
      ELSE
        INSERT INTO tags (gtu_ref, group_ref, tag_indexed, tag, group_type, sub_group_type )
        VALUES ( NEW.gtu_ref, NEW.id, entry_row.u_tag, entry_row.tags, NEW.group_name, NEW.sub_group_name);
      END IF;
    END LOOP;

    CLOSE curs_entry;

    UPDATE gtu
    SET tag_values_indexed = (SELECT array_agg(tags_list)
                              FROM (SELECT lineToTagRows(tag_agg) AS tags_list
                                    FROM (SELECT case when international_name != '' THEN international_name || ';' ELSE '' END || tag_value AS tag_agg
                                          FROM tag_groups
                                          WHERE id <> NEW.id
                                            AND gtu_ref = NEW.gtu_ref
                                          UNION
                                          SELECT case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value
                                         ) as tag_list_selection
                                   ) as tags_rows
                             )
    WHERE id = NEW.gtu_ref;

    DELETE FROM tags
           WHERE group_ref = NEW.id
              AND gtu_ref = NEW.gtu_ref
              AND fct_array_find(seen_el, tag_indexed ) IS NULL;
    RETURN NEW;
  ELSE
    UPDATE gtu
    SET tag_values_indexed = (SELECT array_agg(tags_list)
                              FROM (SELECT lineToTagRows(tag_agg) AS tags_list
                                    FROM (SELECT tag_value AS tag_agg
                                          FROM tag_groups
                                          WHERE id <> OLD.id
                                            AND gtu_ref = OLD.gtu_ref
                                         ) as tag_list_selection
                                   ) as tags_rows
                             )
    WHERE id = OLD.gtu_ref;
    RETURN NULL;
  END IF;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_gtutags() OWNER TO darwin2;

--
-- TOC entry 1791 (class 1255 OID 1440063)
-- Name: fct_cpy_ig_to_loan_items(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_ig_to_loan_items() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF OLD.ig_ref is distinct from NEW.ig_ref THEN
    UPDATE loan_items li SET ig_ref = NEW.ig_ref
    WHERE specimen_ref = NEW.ID
    AND li.ig_ref IS NOT DISTINCT FROM OLD.ig_ref;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_ig_to_loan_items() OWNER TO postgres;

--
-- TOC entry 1800 (class 1255 OID 1440064)
-- Name: fct_cpy_length_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'dm' THEN
        ($1)*10^(-1)
      WHEN $2 = 'ft' THEN
        ($1)*3.048*10^(-1)
      WHEN $2 = 'P' THEN
        ($1)*3.24839385*10^(-1)
      WHEN $2 = 'yd' THEN
        ($1)*9.144*10^(-1)
      WHEN $2 = 'cm' THEN
        ($1)*10^(-2)
      WHEN $2 = 'in' THEN
        ($1)*2.54*10^(-2)
      WHEN $2 = 'mm' THEN
        ($1)*10^(-3)
      WHEN $2 = 'pica' THEN
        ($1)*4.233333*10^(-3)
      WHEN $2 = 'p' THEN
        ($1)*27.069949*10^(-3)
      WHEN $2 = 'mom' THEN
        ($1)*10^(-4)
      WHEN $2 IN ('pt', 'point') THEN
        ($1)*3.527778*10^(-4)
      WHEN $2 = 'mil' THEN
        ($1)*2.54*10^(-5)
      WHEN $2 IN ('µm', 'µ') THEN
        ($1)*10^(-6)
      WHEN $2 = 'twp' THEN
        ($1)*17.639*10^(-6)
      WHEN $2 = 'cal' THEN
        ($1)*254*10^(-6)
      WHEN $2 = 'nm' THEN
        ($1)*10^(-9)
      WHEN $2 = 'Å' THEN
        ($1)*10^(-10)
      WHEN $2 = 'pm' THEN
        ($1)*10^(-12)
      WHEN $2 IN ('fm', 'fermi') THEN
        ($1)*10^(-15)
      WHEN $2 = 'am' THEN
        ($1)*10^(-18)
      WHEN $2 = 'zm' THEN
        ($1)*10^(-21)
      WHEN $2 = 'ym' THEN
        ($1)*10^(-24)
      WHEN $2 IN ('brasse', 'vadem') THEN
        ($1)*1.8288
      WHEN $2 = 'fathom' THEN
        ($1)*1.828804
      WHEN $2 = 'rd' THEN
        ($1)*5.02921
      WHEN $2 = 'dam' THEN
        ($1)*10
      WHEN $2 = 'ch' THEN
        ($1)*20.11684
      WHEN $2 = 'arp' THEN
        ($1)*58.471089295
      WHEN $2 IN ('hm', 'K') THEN
        ($1)*10^2
      WHEN $2 = 'fur' THEN
        ($1)*201.168
      WHEN $2 = 'km' THEN
        ($1)*10^3
      WHEN $2 = 'mi' THEN
        ($1)*1.609344*10^3
      WHEN $2 = 'nautical mi' THEN
        ($1)*1.852*10^3
      WHEN $2 IN ('lieue', 'league') THEN
        ($1)*4.828032*10^3
      WHEN $2 = 'mam' THEN
        ($1)*10^4
      WHEN $2 = 'Mm' THEN
        ($1)*10^6
      WHEN $2 = 'Gm' THEN
        ($1)*10^9
      WHEN $2 = 'ua' THEN
        ($1)*1.495979*10^11
      WHEN $2 = 'Tm' THEN
        ($1)*10^12
      WHEN $2 = 'Pm' THEN
        ($1)*10^15
      WHEN $2 = 'pc' THEN
        ($1)*3.085678*10^16
      WHEN $2 IN ('ly', 'l.y.') THEN
        ($1)*9.4607304725808*10^15
      WHEN $2 = 'Em' THEN
        ($1)*10^18
      WHEN $2 = 'Zm' THEN
        ($1)*10^21
      WHEN $2 = 'Ym' THEN
        ($1)*10^24
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1796 (class 1255 OID 1440065)
-- Name: fct_cpy_length_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'dm' THEN
        ($1)*10^(-1)
      WHEN $2 = 'ft' THEN
        ($1)*3.048*10^(-1)
      WHEN $2 = 'P' THEN
        ($1)*3.24839385*10^(-1)
      WHEN $2 = 'yd' THEN
        ($1)*9.144*10^(-1)
      WHEN $2 = 'cm' THEN
        ($1)*10^(-2)
      WHEN $2 = 'in' THEN
        ($1)*2.54*10^(-2)
      WHEN $2 = 'mm' THEN
        ($1)*10^(-3)
      WHEN $2 = 'pica' THEN
        ($1)*4.233333*10^(-3)
      WHEN $2 = 'p' THEN
        ($1)*27.069949*10^(-3)
      WHEN $2 = 'mom' THEN
        ($1)*10^(-4)
      WHEN $2 IN ('pt', 'point') THEN
        ($1)*3.527778*10^(-4)
      WHEN $2 = 'mil' THEN
        ($1)*2.54*10^(-5)
      WHEN $2 IN ('µm', 'µ') THEN
        ($1)*10^(-6)
      WHEN $2 = 'twp' THEN
        ($1)*17.639*10^(-6)
      WHEN $2 = 'cal' THEN
        ($1)*254*10^(-6)
      WHEN $2 = 'nm' THEN
        ($1)*10^(-9)
      WHEN $2 = 'Å' THEN
        ($1)*10^(-10)
      WHEN $2 = 'pm' THEN
        ($1)*10^(-12)
      WHEN $2 IN ('fm', 'fermi') THEN
        ($1)*10^(-15)
      WHEN $2 = 'am' THEN
        ($1)*10^(-18)
      WHEN $2 = 'zm' THEN
        ($1)*10^(-21)
      WHEN $2 = 'ym' THEN
        ($1)*10^(-24)
      WHEN $2 IN ('brasse', 'vadem') THEN
        ($1)*1.8288
      WHEN $2 = 'fathom' THEN
        ($1)*1.828804
      WHEN $2 = 'rd' THEN
        ($1)*5.02921
      WHEN $2 = 'dam' THEN
        ($1)*10
      WHEN $2 = 'ch' THEN
        ($1)*20.11684
      WHEN $2 = 'arp' THEN
        ($1)*58.471089295
      WHEN $2 IN ('hm', 'K') THEN
        ($1)*10^2
      WHEN $2 = 'fur' THEN
        ($1)*201.168
      WHEN $2 = 'km' THEN
        ($1)*10^3
      WHEN $2 = 'mi' THEN
        ($1)*1.609344*10^3
      WHEN $2 = 'nautical mi' THEN
        ($1)*1.852*10^3
      WHEN $2 IN ('lieue', 'league') THEN
        ($1)*4.828032*10^3
      WHEN $2 = 'mam' THEN
        ($1)*10^4
      WHEN $2 = 'Mm' THEN
        ($1)*10^6
      WHEN $2 = 'Gm' THEN
        ($1)*10^9
      WHEN $2 = 'ua' THEN
        ($1)*1.495979*10^11
      WHEN $2 = 'Tm' THEN
        ($1)*10^12
      WHEN $2 = 'Pm' THEN
        ($1)*10^15
      WHEN $2 = 'pc' THEN
        ($1)*3.085678*10^16
      WHEN $2 IN ('ly', 'l.y.') THEN
        ($1)*9.4607304725808*10^15
      WHEN $2 = 'Em' THEN
        ($1)*10^18
      WHEN $2 = 'Zm' THEN
        ($1)*10^21
      WHEN $2 = 'Ym' THEN
        ($1)*10^24
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 1802 (class 1255 OID 1440066)
-- Name: fct_cpy_loan_history(integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_loan_history(loan_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN

  -- LOAN
  INSERT INTO loan_history (loan_ref, referenced_table, record_line)
  (
    select loan_id, 'loans', hstore(l.*) from loans l where l.id = loan_id

    UNION

    select loan_id, 'catalogue_people', hstore(p.*) from catalogue_people p where
      (referenced_relation='loans'  AND record_id = loan_id) OR (referenced_relation='loan_items'  AND record_id in (select id from loan_items l where l.loan_ref = loan_id) )

    UNION

    select loan_id, 'properties', hstore(c.*) from properties c where
      (referenced_relation='loans'  AND record_id = loan_id) OR (referenced_relation='loan_items'  AND record_id in (select id from loan_items l where l.loan_ref = loan_id) )

  );


  --ITEMS
  INSERT INTO loan_history (loan_ref, referenced_table, record_line)
  (
    select loan_id, 'loan_items', hstore(l.*) from loan_items l where l.loan_ref = loan_id

    UNION

    select loan_id, 'specimens', hstore(sfl.*) from specimens sfl
      where sfl.id in (select specimen_ref from loan_items l where l.loan_ref = loan_id)
  );

  -- BOTH
  INSERT INTO loan_history (loan_ref, referenced_table, record_line)
  (
    select loan_id, 'people', hstore(p.*) from people p where id in (select (record_line->'people_ref')::int from loan_history where loan_ref = loan_id
      and referenced_table='catalogue_people' and modification_date_time = now())

    UNION

    select loan_id, 'people_addresses', hstore(p.*) from people_addresses p where person_user_ref in (select (record_line->'id')::int from loan_history where loan_ref = loan_id
      and referenced_table='people' and modification_date_time = now())
  );
  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_loan_history(loan_id integer) OWNER TO postgres;

--
-- TOC entry 1803 (class 1255 OID 1440067)
-- Name: fct_cpy_location(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_location() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.location := POINT(NEW.latitude, NEW.longitude);
  IF NEW.latitude is NOT NULL and NEW.longitude IS NOT NULL THEN
  	NEW.geom=ST_SETSRID(ST_Point(NEW.location[1], NEW.location[0]),4326);
  ELSE
  	NEW.geom=NULL;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_location() OWNER TO darwin2;

--
-- TOC entry 1801 (class 1255 OID 1440068)
-- Name: fct_cpy_path(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_path() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
      IF TG_TABLE_NAME::text = 'collections' THEN

        IF NEW.id = 0 THEN
          NEW.parent_ref := null;
        END IF;
        IF NEW.parent_ref IS NULL THEN
          NEW.path :='/';
        ELSE
          EXECUTE 'SELECT path || id || ' || quote_literal('/') ||' FROM ' || quote_ident(TG_TABLE_NAME::text) || ' WHERE id=' || quote_literal(NEW.parent_ref) INTO STRICT NEW.path;
        END IF;
      ELSIF TG_TABLE_NAME::text = 'people_relationships' THEN
        SELECT path || NEW.person_1_ref || '/' INTO NEW.path
          FROM people_relationships
          WHERE person_2_ref=NEW.person_1_ref;
        IF NEW.path is NULL THEN
          NEW.path := '/' || NEW.person_1_ref || '/';
        END IF;
      END IF;
    ELSIF TG_OP = 'UPDATE' THEN
      IF TG_TABLE_NAME::text = 'collections' THEN

        IF NEW.parent_ref IS DISTINCT FROM OLD.parent_ref THEN
          IF NEW.parent_ref IS NULL THEN
            NEW.path := '/';
          ELSIF COALESCE(OLD.parent_ref,0) = COALESCE(NEW.parent_ref,0) THEN
            RETURN NEW;
          ELSE
            EXECUTE 'SELECT path || id || ' || quote_literal('/') ||' FROM ' || quote_ident(TG_TABLE_NAME::text) || ' WHERE id=' || quote_literal(NEW.parent_ref) INTO STRICT NEW.path;
          END IF;

          EXECUTE 'UPDATE ' || quote_ident(TG_TABLE_NAME::text) || ' SET path=replace(path, ' ||  quote_literal(OLD.path || OLD.id || '/') ||' , ' || quote_literal( NEW.path || OLD.id || '/') || ') ' ||
            ' WHERE path like ' || quote_literal(OLD.path || OLD.id || '/%');
        END IF;
      ELSE
        IF NEW.person_1_ref IS DISTINCT FROM OLD.person_1_ref OR NEW.person_2_ref IS DISTINCT FROM OLD.person_2_ref THEN
          SELECT path ||  NEW.person_1_ref || '/' INTO NEW.path FROM people_relationships WHERE person_2_ref=NEW.person_1_ref;

            IF NEW.path is NULL THEN
              NEW.path := '/' || NEW.person_1_ref || '/';
            END IF;
            -- AND UPDATE CHILDRENS
            UPDATE people_relationships SET path=replace(path, OLD.path, NEW.path) WHERE person_1_ref=OLD.person_2_ref;
        END IF;
      END IF;
    END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_path() OWNER TO darwin2;

--
-- TOC entry 1804 (class 1255 OID 1440069)
-- Name: fct_cpy_path_catalogs(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_path_catalogs() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'INSERT' AND (TG_TABLE_NAME::text = 'taxonomy' OR
          TG_TABLE_NAME::text = 'lithology' OR
          TG_TABLE_NAME::text = 'lithostratigraphy' OR
          TG_TABLE_NAME::text = 'mineralogy' OR
          TG_TABLE_NAME::text = 'chronostratigraphy') THEN

          IF NEW.parent_ref IS NULL THEN
            NEW.path ='/';
          ELSE
            EXECUTE 'SELECT path || id || ''/'' FROM ' || quote_ident(TG_TABLE_NAME::text) || ' WHERE id=' || quote_literal(NEW.parent_ref) INTO STRICT NEW.path;
          END IF;
    ELSIF TG_OP = 'UPDATE' AND (TG_TABLE_NAME::text = 'taxonomy' OR
        TG_TABLE_NAME::text = 'lithology' OR
        TG_TABLE_NAME::text = 'lithostratigraphy' OR
        TG_TABLE_NAME::text = 'mineralogy' OR
        TG_TABLE_NAME::text = 'chronostratigraphy') THEN

        IF NEW.parent_ref IS DISTINCT FROM OLD.parent_ref THEN
          IF NEW.parent_ref IS NULL THEN
            NEW.path ='/';
          ELSIF OLD.parent_ref IS NOT DISTINCT FROM NEW.parent_ref THEN
            RETURN NEW;
          ELSE
            EXECUTE 'SELECT  path || id || ''/''  FROM ' || quote_ident(TG_TABLE_NAME::text) || ' WHERE id=' || quote_literal(NEW.parent_ref) INTO STRICT NEW.path;
          END IF;

          EXECUTE 'UPDATE ' || quote_ident(TG_TABLE_NAME::text) || ' SET path=replace(path, ' ||  quote_literal(OLD.path || OLD.id || '/') ||' , ' || quote_literal( NEW.path || OLD.id || '/') || ') ' ||
            ' WHERE path like ' || quote_literal(OLD.path || OLD.id || '/%');
        END IF;
--         RAISE INFO 'nothing diff';
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_path_catalogs() OWNER TO darwin2;

--
-- TOC entry 1807 (class 1255 OID 1440070)
-- Name: fct_cpy_specimensmaincode(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_specimensmaincode() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	spec_code codes%ROWTYPE;
	must_be_copied collections.code_part_code_auto_copy%TYPE;
BEGIN
	SELECT collections.code_part_code_auto_copy INTO must_be_copied FROM collections
			INNER JOIN specimens ON collections.id = specimens.collection_ref
			INNER JOIN specimen_individuals ON specimen_individuals.specimen_ref=specimens.id
				WHERE specimen_individuals.id = NEW.specimen_individual_ref;

	IF must_be_copied = true THEN

		INSERT INTO codes (referenced_relation, record_id, code_category, code_prefix, code_prefix_separator,  code_suffix_separator, code, code_suffix)
		(
			SELECT 'specimen_parts',NEW.id, code_category, code_prefix, code_prefix_separator, code_suffix_separator, code, code_suffix
                               FROM codes
        	               INNER JOIN specimens ON record_id = specimens.id
                	       INNER JOIN specimen_individuals ON specimen_individuals.specimen_ref=specimens.id
                        	WHERE referenced_relation = 'specimens'
		                  AND  specimen_individuals.id = NEW.specimen_individual_ref
                                  AND code_category = 'main'
		);
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_specimensmaincode() OWNER TO darwin2;

--
-- TOC entry 1808 (class 1255 OID 1440071)
-- Name: fct_cpy_speed_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'Kt' THEN
        ($1)*0.51444444444444
      WHEN $2 = 'Beaufort' THEN
        CASE
          WHEN $1 = 0 THEN
            0.13888888888888
          WHEN $1 = 1 THEN
            3*0.27777777777778
          WHEN $1 = 2 THEN
            8*0.27777777777778
          WHEN $1 = 3 THEN
            15*0.27777777777778
          WHEN $1 = 4 THEN
            23.5*0.27777777777778
          WHEN $1 = 5 THEN
            33*0.27777777777778
          WHEN $1 = 6 THEN
            44*0.27777777777778
          WHEN $1 = 7 THEN
            55.5*0.27777777777778
          WHEN $1 = 8 THEN
            68*0.27777777777778
          WHEN $1 = 9 THEN
            81.5*0.27777777777778
          WHEN $1 = 10 THEN
            95.5*0.27777777777778
          WHEN $1 = 11 THEN
            110*0.27777777777778
          ELSE
            120*0.27777777777778
        END
      ELSE
        CASE
          WHEN strpos($2, '/') > 0 THEN
            fct_cpy_length_conversion($1, substr($2, 0, strpos($2, '/')))/fct_cpy_time_conversion(1, substr($2, strpos($2, '/')+1))
          ELSE
            $1
        END
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1805 (class 1255 OID 1440072)
-- Name: fct_cpy_speed_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'Kt' THEN
        ($1)*0.51444444444444
      WHEN $2 = 'Beaufort' THEN
        CASE
          WHEN $1 = 0 THEN
            0.13888888888888
          WHEN $1 = 1 THEN
            3*0.27777777777778
          WHEN $1 = 2 THEN
            8*0.27777777777778
          WHEN $1 = 3 THEN
            15*0.27777777777778
          WHEN $1 = 4 THEN
            23.5*0.27777777777778
          WHEN $1 = 5 THEN
            33*0.27777777777778
          WHEN $1 = 6 THEN
            44*0.27777777777778
          WHEN $1 = 7 THEN
            55.5*0.27777777777778
          WHEN $1 = 8 THEN
            68*0.27777777777778
          WHEN $1 = 9 THEN
            81.5*0.27777777777778
          WHEN $1 = 10 THEN
            95.5*0.27777777777778
          WHEN $1 = 11 THEN
            110*0.27777777777778
          ELSE
            120*0.27777777777778
        END
      ELSE
        CASE
          WHEN strpos($2, '/') > 0 THEN
            fct_cpy_length_conversion($1, substr($2, 0, strpos($2, '/')))/fct_cpy_time_conversion(1, substr($2, strpos($2, '/')+1))
          ELSE
            $1
        END
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 1813 (class 1255 OID 1440073)
-- Name: fct_cpy_tags_to_distinct(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_tags_to_distinct() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  CASE TG_OP
	WHEN 'UPDATE' THEN
		IF NEW.sub_group_name_indexed IS DISTINCT FROM OLD.sub_group_name_indexed or NEW.group_name_indexed IS DISTINCT FROM OLD.group_name_indexed or NEW.tag_value IS DISTINCT FROM OLD.tag_value THEN 
		BEGIN
			RAISE NOTICE 'try to update: %, %, % towards  %, %, %', OLD.sub_group_name_indexed, OLD.group_name_indexed,OLD.tag_value, NEW.sub_group_name_indexed, NEW.group_name_indexed,NEW.tag_value;
			UPDATE tag_group_distinct SET 
			sub_group_name_indexed=NEW.sub_group_name_indexed,
			group_name_indexed=NEW.group_name_indexed,
			tag_value=NEW.tag_value
			where 
			sub_group_name_indexed=OLD.sub_group_name_indexed AND
			group_name_indexed=OLD.group_name_indexed AND
			tag_value=OLD.tag_value;
			--delete the representation in the tag_tag_authority because we don't know if the term is still the same! The whole geonames import script will need to be run again for this term! The old vocabulary entry is kept, only the m:n link is severed.
			DELETE FROM tag_tag_authority WHERE tag_group_distinct_ref IN 
			(SELECT id FROM tag_group_distinct 
			where 
			sub_group_name_indexed=OLD.sub_group_name_indexed AND
			group_name_indexed=OLD.group_name_indexed AND
			tag_value=OLD.tag_value);
		EXCEPTION WHEN unique_violation THEN
			RAISE NOTICE 'UQ violation when updating!';
			--if renaming a term to something that already exists in the table, it means that the original has to go. It also means that the representation in the tag_authority has to go
			--delete first the representation in the tag_authority because otherwise a FK constraint error will be raised.
			DELETE FROM tag_authority WHERE tag_group_distinct_ref IN 
			(SELECT id FROM tag_group_distinct 
			WHERE 
			sub_group_name_indexed=OLD.sub_group_name_indexed AND
			group_name_indexed=OLD.group_name_indexed AND
			tag_value=OLD.tag_value);
			
			DELETE FROM tag_group_distinct WHERE
			sub_group_name_indexed=OLD.sub_group_name_indexed and
			group_name_indexed=OLD.group_name_indexed and
			tag_value=OLD.tag_value;
		END;
		END IF;
		RETURN NEW;
	WHEN 'INSERT' THEN
		BEGIN
			RAISE NOTICE 'try to insert: %, %, %', NEW.sub_group_name_indexed, NEW.group_name_indexed,NEW.tag_value;
			with insert_tag_group_distinct_cte as (
			INSERT INTO tag_group_distinct (sub_group_name_indexed,group_name_indexed,tag_value) VALUES
			(NEW.sub_group_name_indexed,
			NEW.group_name_indexed,
			NEW.tag_value) returning id)
			update tag_groups tg set tag_group_distinct_ref=cte.id from insert_tag_group_distinct_cte cte where tg.id=NEW.id;
			RAISE NOTICE 'Insert successful: created tag_group_distinct entry and made FK referral towards this from tag_groups';
			RETURN NEW;
		EXCEPTION WHEN unique_violation THEN
			RAISE NOTICE 'UQ violation when inserting in tag_group_distinct! Nothing new inserted in tag_group_distinct. You can ignore this message.';
		END;
  END CASE;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_tags_to_distinct() OWNER TO darwin2;

--
-- TOC entry 1810 (class 1255 OID 1440074)
-- Name: fct_cpy_tags_to_distinct_bedic(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_tags_to_distinct_bedic() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
    IF  (NEW.sub_group_name_indexed is not null or NEW.group_name_indexed is not null or NEW.tag_value is not null)  THEN
      CASE TG_OP
        WHEN 'UPDATE' THEN
            IF NEW.sub_group_name_indexed IS DISTINCT FROM OLD.sub_group_name_indexed or NEW.group_name_indexed IS DISTINCT FROM OLD.group_name_indexed or NEW.tag_value IS DISTINCT FROM OLD.tag_value THEN 
            BEGIN
                RAISE NOTICE 'try to update: %, %, % towards  %, %, %', OLD.sub_group_name_indexed, OLD.group_name_indexed,OLD.tag_value, NEW.sub_group_name_indexed, NEW.group_name_indexed,NEW.tag_value;
                UPDATE tag_group_distinct SET 
                sub_group_name_indexed=NEW.sub_group_name_indexed,
                group_name_indexed=NEW.group_name_indexed,
                tag_value=NEW.tag_value
                where 
                sub_group_name_indexed=OLD.sub_group_name_indexed AND
                group_name_indexed=OLD.group_name_indexed AND
                tag_value=OLD.tag_value;
                --delete the representation in the tag_tag_authority because we don't know if the term is still the same! The whole geonames import script will need to be run again for this term! The old vocabulary entry is kept, only the m:n link is severed.
                DELETE FROM tag_tag_authority WHERE tag_group_distinct_ref IN 
                (SELECT id FROM tag_group_distinct 
                where 
                sub_group_name_indexed=OLD.sub_group_name_indexed AND
                group_name_indexed=OLD.group_name_indexed AND
                tag_value=OLD.tag_value);
            EXCEPTION WHEN unique_violation THEN
                RAISE NOTICE 'UQ violation when updating!';
                --if renaming a term to something that already exists in the table, it means that the original has to go. It also means that the representation in the tag_authority has to go
                --delete first the representation in the tag_authority because otherwise a FK constraint error will be raised.
                DELETE FROM tag_authority WHERE tag_group_distinct_ref IN 
                (SELECT id FROM tag_group_distinct 
                WHERE 
                sub_group_name_indexed=OLD.sub_group_name_indexed AND
                group_name_indexed=OLD.group_name_indexed AND
                tag_value=OLD.tag_value);
                
                DELETE FROM tag_group_distinct WHERE
                sub_group_name_indexed=OLD.sub_group_name_indexed and
                group_name_indexed=OLD.group_name_indexed and
                tag_value=OLD.tag_value;
            END;
            END IF;
            RETURN NEW;
        WHEN 'INSERT' THEN
            BEGIN
                RAISE NOTICE 'try to insert: %, %, %', NEW.sub_group_name_indexed, NEW.group_name_indexed,NEW.tag_value;
                with insert_tag_group_distinct_cte as (
                INSERT INTO tag_group_distinct (sub_group_name_indexed,group_name_indexed,tag_value) VALUES
                (NEW.sub_group_name_indexed,
                NEW.group_name_indexed,
                NEW.tag_value) returning id)
                update tag_groups tg set tag_group_distinct_ref=cte.id from insert_tag_group_distinct_cte cte where tg.id=NEW.id;
                RAISE NOTICE 'Insert successful: created tag_group_distinct entry and made FK referral towards this from tag_groups';
                RETURN NEW;
            EXCEPTION WHEN unique_violation THEN
                RAISE NOTICE 'UQ violation when inserting in tag_group_distinct! Nothing new inserted in tag_group_distinct. You can ignore this message.';
            END;
      END CASE;
   END IF;

   RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_tags_to_distinct_bedic() OWNER TO darwin2;

--
-- TOC entry 1814 (class 1255 OID 1440075)
-- Name: fct_cpy_temperature_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = '°C' THEN
        ($1)+273.15
      WHEN $2 = '°F' THEN
        (($1)+459.67)/1.8
      WHEN $2 = '°Ra' THEN
        ($1)/1.8
      WHEN $2 in ('°Ré', '°r') THEN
        (($1)*5/4)+273.15
      WHEN $2 = '°N' THEN
        (($1)+273.15)*0.33
      WHEN $2 = '°Rø' THEN
        (((($1)-7.5)*40)/21)+273.15
      WHEN $2 = '°De' THEN
        373.15-(($1)*2/3)
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1811 (class 1255 OID 1440076)
-- Name: fct_cpy_temperature_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = '°C' THEN
        ($1)+273.15
      WHEN $2 = '°F' THEN
        (($1)+459.67)/1.8
      WHEN $2 = '°Ra' THEN
        ($1)/1.8
      WHEN $2 in ('°Ré', '°r') THEN
        (($1)*5/4)+273.15
      WHEN $2 = '°N' THEN
        (($1)+273.15)*0.33
      WHEN $2 = '°Rø' THEN
        (((($1)-7.5)*40)/21)+273.15
      WHEN $2 = '°De' THEN
        373.15-(($1)*2/3)
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 810 (class 1255 OID 1440077)
-- Name: fct_cpy_time_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'ns' THEN
        ($1)*10^(-9)
      WHEN $2 = 'shake' THEN
        ($1)*10^(-8)
      WHEN $2 = 'µs' THEN
        ($1)*10^(-6)
      WHEN $2 = 'ms' THEN
        ($1)*10^(-3)
      WHEN $2 = 'cs' THEN
        ($1)*10^(-2)
      WHEN $2 = 't' THEN
        ($1)/60
      WHEN $2 = 'ds' THEN
        ($1)*10^(-1)
      WHEN $2 = 'min' THEN
        60*($1)
      WHEN $2 = 'h' THEN
        3600*($1)
      WHEN $2 IN ('d', 'j') THEN
        86400*($1)
      WHEN $2 IN ('y', 'year') THEN
        ($1)*3.1536*10^7
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1809 (class 1255 OID 1440078)
-- Name: fct_cpy_time_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'ns' THEN
        ($1)*10^(-9)
      WHEN $2 = 'shake' THEN
        ($1)*10^(-8)
      WHEN $2 = 'µs' THEN
        ($1)*10^(-6)
      WHEN $2 = 'ms' THEN
        ($1)*10^(-3)
      WHEN $2 = 'cs' THEN
        ($1)*10^(-2)
      WHEN $2 = 't' THEN
        ($1)/60
      WHEN $2 = 'ds' THEN
        ($1)*10^(-1)
      WHEN $2 = 'min' THEN
        60*($1)
      WHEN $2 = 'h' THEN
        3600*($1)
      WHEN $2 IN ('d', 'j') THEN
        86400*($1)
      WHEN $2 IN ('y', 'year') THEN
        ($1)*3.1536*10^7
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 1806 (class 1255 OID 1440079)
-- Name: fct_cpy_unified_values(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_unified_values() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  property_line properties%ROWTYPE;
BEGIN
  NEW.lower_value_unified = convert_to_unified(NEW.lower_value, NEW.property_unit);
  NEW.upper_value_unified = convert_to_unified(CASE WHEN NEW.upper_value = '' THEN NEW.lower_value ELSE NEW.upper_value END, NEW.property_unit);
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_unified_values() OWNER TO darwin2;

--
-- TOC entry 1817 (class 1255 OID 1440080)
-- Name: fct_cpy_updatecollectionrights(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_updatecollectionrights() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	db_user_type_val integer ;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO collections_rights (collection_ref, user_ref, db_user_type)
    (SELECT NEW.id as coll_ref, NEW.main_manager_ref as mgr_ref, 4 as user_type
     UNION
     SELECT NEW.id as coll_ref, user_ref as mgr_ref, db_user_type as user_type
     FROM collections_rights
     WHERE collection_ref = NEW.parent_ref
       AND db_user_type = 4
    );
  ELSIF TG_OP = 'UPDATE' THEN
    IF NEW.main_manager_ref IS DISTINCT FROM OLD.main_manager_ref THEN
      SELECT db_user_type INTO db_user_type_val FROM collections_rights WHERE collection_ref = NEW.id AND user_ref = NEW.main_manager_ref;
      IF FOUND AND db_user_type_val is distinct from 4 THEN
        UPDATE collections_rights
        SET db_user_type = 4
        WHERE collection_ref = NEW.id
          AND user_ref = NEW.main_manager_ref;
      ELSE
        INSERT INTO collections_rights (collection_ref, user_ref, db_user_type)
        VALUES(NEW.id,NEW.main_manager_ref,4);
      END IF;
    END IF;
    IF NEW.parent_ref IS DISTINCT FROM OLD.parent_ref THEN
      INSERT INTO collections_rights (collection_ref, user_ref, db_user_type)
      (
        SELECT NEW.id, user_ref, db_user_type
        FROM collections_rights
        WHERE collection_ref = NEW.parent_ref
          AND db_user_type = 4
          AND user_ref NOT IN
            (
              SELECT user_ref
              FROM collections_rights
              WHERE collection_ref = NEW.id
            )
      );
    END IF;
  END IF;

  RETURN NEW;

EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'An error occured: %', SQLERRM;
    RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_updatecollectionrights() OWNER TO darwin2;

--
-- TOC entry 1818 (class 1255 OID 1440081)
-- Name: fct_cpy_updatecollinstitutioncascade(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_updatecollinstitutioncascade() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.institution_ref IS DISTINCT FROM OLD.institution_ref THEN
    UPDATE collections
    SET institution_ref = NEW.institution_ref
    WHERE id != NEW.id
      AND parent_ref = NEW.id;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_updatecollinstitutioncascade() OWNER TO darwin2;

--
-- TOC entry 1819 (class 1255 OID 1440082)
-- Name: fct_cpy_updatemywidgetscoll(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_updatemywidgetscoll() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  booContinue boolean := false;
BEGIN
  IF TG_TABLE_NAME = 'collections_rights' THEN
    IF TG_OP = 'DELETE' THEN
      booContinue := true;
    ELSE
      IF OLD.collection_ref IS DISTINCT FROM NEW.collection_ref OR OLD.user_ref IS DISTINCT FROM NEW.user_ref THEN
        booContinue := true;
      END IF;
    END IF;
    IF booContinue THEN
      /*!!! Whats done is only removing the old collection reference from list of collections set in widgets !!!
        !!! We considered the add of widgets available for someone in a collection still be a manual action !!!
      */
      UPDATE my_widgets
      SET collections = regexp_replace(collections, E'\,' || OLD.collection_ref || E'\,', E'\,', 'g')
      WHERE user_ref = OLD.user_ref
        AND collections ~ (E'\,' || OLD.collection_ref || E'\,');
    END IF;
  END IF;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_updatemywidgetscoll() OWNER TO darwin2;

--
-- TOC entry 1816 (class 1255 OID 1440083)
-- Name: fct_cpy_updatespechostimpact(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_updatespechostimpact() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  newTaxonRef specimens.host_taxon_ref%TYPE := 0;
BEGIN
  IF TG_OP = 'UPDATE' THEN
    IF NEW.host_specimen_ref IS DISTINCT FROM OLD.host_specimen_ref AND NEW.host_specimen_ref IS NOT NULL THEN
      SELECT taxon_ref INTO STRICT NEW.host_taxon_ref FROM specimens WHERE id = NEW.host_specimen_ref;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_updatespechostimpact() OWNER TO darwin2;

--
-- TOC entry 1823 (class 1255 OID 1440084)
-- Name: fct_cpy_updateuserrights(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_updateuserrights() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  db_user_type_val integer ;
  booCollFound boolean;
  booContinue boolean;
BEGIN
  /*When updating main manager ref -> impact potentially db_user_type
    of new user chosen as manager
  */
  IF TG_TABLE_NAME = 'collections' THEN
    /*We take in count only an update
      An insertion as it's creating an entry in collections_rights will trigger this current trigger again ;)
    */
    IF TG_OP = 'UPDATE' THEN
      IF NEW.main_manager_ref IS DISTINCT FROM OLD.main_manager_ref THEN
        UPDATE users
        SET db_user_type = 4
        WHERE id = NEW.main_manager_ref
          AND db_user_type < 4;
      END IF;
    END IF;
  ELSE -- trigger on collections_rights table
    IF TG_OP = 'INSERT' THEN
      /*If user is promoted by inserting her/him
        with a higher db_user_type than she/he is -> promote her/him
      */
      UPDATE users
      SET db_user_type = NEW.db_user_type
      WHERE id = NEW.user_ref
        AND db_user_type < NEW.db_user_type;
    END IF;
    IF TG_OP = 'UPDATE' THEN
      /*First case: replacing a user by an other*/
      IF NEW.user_ref IS DISTINCT FROM OLD.user_ref THEN
        /*Update the user db_user_type chosen as the new one as if it would be an insertion*/
        UPDATE users
        SET db_user_type = NEW.db_user_type
        WHERE id = NEW.user_ref
          AND db_user_type < NEW.db_user_type;
        /*Un promote the user replaced if necessary*/
        UPDATE users
          SET db_user_type = subq.db_user_type_max
          FROM (
                SELECT COALESCE(MAX(db_user_type),1) as db_user_type_max
                FROM collections_rights
                WHERE user_ref = OLD.user_ref
              ) subq
          WHERE id = OLD.user_ref
            AND db_user_type != 8;
      END IF;
      IF NEW.db_user_type IS DISTINCT FROM OLD.db_user_type THEN
        /* Promotion */
        IF NEW.db_user_type > OLD.db_user_type THEN
          UPDATE users
          SET db_user_type = NEW.db_user_type
          WHERE id = NEW.user_ref
            AND db_user_type < NEW.db_user_type;
        /* Unpromotion */
        ELSE
          UPDATE users
          SET db_user_type = subq.db_user_type_max
          FROM (
                SELECT COALESCE(MAX(db_user_type),1) as db_user_type_max
                FROM collections_rights
                WHERE user_ref = NEW.user_ref
              ) subq
          WHERE id = NEW.user_ref
            AND db_user_type != 8;
        END IF;
      END IF;
    END IF;
    IF TG_OP = 'DELETE' THEN
      IF OLD.db_user_type >=4 THEN
        SELECT true
        INTO booCollFound
        FROM collections
        WHERE id = OLD.collection_ref
          AND main_manager_ref = OLD.user_ref;
        IF FOUND THEN
          RAISE EXCEPTION 'You try to delete a manager who is still defined as a main manager of the current collection';
        END IF;
      END IF;
      UPDATE users
      SET db_user_type = subq.db_user_type_max
      FROM (
            SELECT COALESCE(MAX(db_user_type),1) as db_user_type_max
            FROM collections_rights
            WHERE user_ref = OLD.user_ref
           ) subq
      WHERE id = OLD.user_ref
        AND db_user_type != 8;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_cpy_updateuserrights() OWNER TO darwin2;

--
-- TOC entry 1820 (class 1255 OID 1440085)
-- Name: fct_cpy_volume_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'l' THEN
        ($1)*10^(-3)
      WHEN $2 = 'cm³' OR $2 = 'ml' THEN
        ($1)*10^(-6)
      WHEN $2 = 'mm³' OR $2 = 'µl' THEN
        ($1)*10^(-9)
      WHEN $2 = 'µm³' THEN
        ($1)*10^(-18)
      WHEN $2 = 'km³' THEN
        ($1)*10^(9)
      WHEN $2 = 'Ml' THEN
        ($1)*10^(3)
      WHEN $2 = 'hl' THEN
        ($1)*10
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1825 (class 1255 OID 1440086)
-- Name: fct_cpy_volume_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'l' THEN
        ($1)*10^(-3)
      WHEN $2 = 'cm³' OR $2 = 'ml' THEN
        ($1)*10^(-6)
      WHEN $2 = 'mm³' OR $2 = 'µl' THEN
        ($1)*10^(-9)
      WHEN $2 = 'µm³' THEN
        ($1)*10^(-18)
      WHEN $2 = 'km³' THEN
        ($1)*10^(9)
      WHEN $2 = 'Ml' THEN
        ($1)*10^(3)
      WHEN $2 = 'hl' THEN
        ($1)*10
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 1821 (class 1255 OID 1440087)
-- Name: fct_cpy_weight_conversion(real, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit text) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'hg' THEN
        ($1)*10^(2)
      WHEN $2 = 'kg' THEN
        ($1)*10^(3)
      WHEN $2 = 'Mg' OR $2 = 'ton' THEN
        ($1)*10^(6)
      WHEN $2 = 'dg' THEN
        ($1)*10^(-1)
      WHEN $2 = 'cg' THEN
        ($1)*10^(-2)
      WHEN $2 = 'mg' THEN
        ($1)*10^(-3)
      WHEN $2 = 'lb' OR $2 = 'lbs' OR $2 = 'pound' THEN
        ($1)*453.59237
      WHEN $2 = 'ounce' THEN
        ($1)*28.349523125
      WHEN $2 = 'grain' THEN
        ($1)*6.479891*10^(-2)
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit text) OWNER TO postgres;

--
-- TOC entry 1824 (class 1255 OID 1440088)
-- Name: fct_cpy_weight_conversion(real, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit character varying) RETURNS real
    LANGUAGE sql STABLE
    AS $_$
  SELECT  CASE
      WHEN $2 = 'hg' THEN
        ($1)*10^(2)
      WHEN $2 = 'kg' THEN
        ($1)*10^(3)
      WHEN $2 = 'Mg' OR $2 = 'ton' THEN
        ($1)*10^(6)
      WHEN $2 = 'dg' THEN
        ($1)*10^(-1)
      WHEN $2 = 'cg' THEN
        ($1)*10^(-2)
      WHEN $2 = 'mg' THEN
        ($1)*10^(-3)
      WHEN $2 = 'lb' OR $2 = 'lbs' OR $2 = 'pound' THEN
        ($1)*453.59237
      WHEN $2 = 'ounce' THEN
        ($1)*28.349523125
      WHEN $2 = 'grain' THEN
        ($1)*6.479891*10^(-2)
      ELSE
        $1
    END::real;
$_$;


ALTER FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit character varying) OWNER TO darwin2;

--
-- TOC entry 1822 (class 1255 OID 1440089)
-- Name: fct_del_in_dict(text, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, dict_val text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result integer;
  query_str text;
BEGIN
  IF dict_val is NULL THEN 
    RETURN TRUE;
  END IF;
  query_str := ' SELECT 1 WHERE EXISTS( SELECT id from ' || quote_ident(ref_relation) || ' where ' || quote_ident(ref_field) || ' = ' || quote_literal(dict_val) || ');';
  execute query_str into result;

  IF result IS NULL THEN
    DELETE FROM flat_dict where 
          referenced_relation = ref_relation
          AND dict_field = ref_field
          AND dict_value = dict_val;
  END IF;
  RETURN TRUE;
END;
$$;


ALTER FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, dict_val text) OWNER TO darwin2;

--
-- TOC entry 1826 (class 1255 OID 1440090)
-- Name: fct_del_in_dict(text, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, old_value text, new_val text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result boolean;
  query_str text;
BEGIN
  IF old_value IS null OR old_value IS NOT DISTINCT FROM new_val THEN
    RETURN TRUE;
  END IF;
  query_str := ' SELECT EXISTS( SELECT 1 from ' || quote_ident(ref_relation) || ' where ' || quote_ident(ref_field) || ' = ' || quote_literal(old_value) || ');';
  execute query_str into result;

  IF result = false THEN
    DELETE FROM flat_dict where
          referenced_relation = ref_relation
          AND dict_field = ref_field
          AND dict_value = old_value;
  END IF;
  RETURN TRUE;
END;
$$;


ALTER FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, old_value text, new_val text) OWNER TO darwin2;

--
-- TOC entry 1831 (class 1255 OID 1440091)
-- Name: fct_del_in_dict_dept(text, text, text, text, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_del_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text, depending_field text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result boolean;
  query_str text;
BEGIN
  IF old_value is NULL OR ( old_value IS NOT DISTINCT FROM new_val AND depending_old_value IS NOT DISTINCT FROM depending_new_value ) THEN
    RETURN TRUE;
  END IF;
  query_str := ' SELECT EXISTS( SELECT id from ' || quote_ident(ref_relation) || ' where ' || quote_ident(ref_field) || ' = ' || quote_literal(old_value)
  || ' AND ' || quote_ident(depending_field) || ' = ' || quote_literal(depending_old_value) || ' );';
  execute query_str into result;

  IF result = false THEN
    DELETE FROM flat_dict where
          referenced_relation = ref_relation
          AND dict_field = ref_field
          AND dict_value = old_value
          AND dict_depend = depending_old_value;
  END IF;
  RETURN TRUE;
END;
$$;


ALTER FUNCTION darwin2.fct_del_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text, depending_field text) OWNER TO postgres;

--
-- TOC entry 811 (class 1255 OID 1440092)
-- Name: fct_duplicate_loans(integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_duplicate_loans(loan_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  DECLARE
    new_loan_id loans.id%TYPE;
    new_loan_item_id loan_items.id%TYPE;
    rec_loan_items RECORD;
  BEGIN
    INSERT INTO loans (name, description)
      (SELECT name, description FROM loans WHERE id = loan_id)
    RETURNING id INTO new_loan_id;
    INSERT INTO loan_rights (loan_ref, user_ref, has_encoding_right)
      (SELECT new_loan_id, user_ref, has_encoding_right from loan_rights where loan_ref = loan_id);
    INSERT INTO catalogue_people (referenced_relation, record_id, people_type, people_sub_type, order_by, people_ref)
      (
        SELECT referenced_relation, new_loan_id, people_type, people_sub_type, order_by, people_ref
        FROM catalogue_people
        WHERE referenced_relation = 'loans'
          AND record_id = loan_id
      );
    INSERT INTO insurances (referenced_relation,
                            record_id,
                            insurance_value,
                            insurance_currency,
                            insurer_ref,
                            date_from_mask,
                            date_from,
                            date_to_mask,
                            date_to,
                            contact_ref)
      (SELECT
         referenced_relation,
         new_loan_id,
         insurance_value,
         insurance_currency,
         insurer_ref,
         date_from_mask,
         date_from,
         date_to_mask,
         date_to,
         contact_ref
       FROM insurances
        WHERE referenced_relation = 'loans'
          AND record_id = loan_id
      );
    INSERT INTO comments (referenced_relation, record_id, notion_concerned, comment)
      (SELECT referenced_relation, new_loan_id, notion_concerned, comment from comments where referenced_relation = 'loans' AND record_id = loan_id);
    INSERT INTO properties (
      referenced_relation,
      record_id,
      property_type,
      applies_to,
      date_from_mask,
      date_from,
      date_to_mask,
      date_to,
      is_quantitative,
      property_unit,
      method,
      lower_value,
      upper_value,
      property_accuracy
    )
      (
        SELECT
          referenced_relation,
          new_loan_id,
          property_type,
          applies_to,
          date_from_mask,
          date_from,
          date_to_mask,
          date_to,
          is_quantitative,
          property_unit,
          method,
          lower_value,
          upper_value,
          property_accuracy
        FROM properties
        WHERE referenced_relation = 'loans'
          AND record_id = loan_id
      );
    FOR rec_loan_items IN SELECT id FROM loan_items WHERE loan_ref = loan_id
      LOOP
        INSERT INTO loan_items (loan_ref, ig_ref, specimen_ref, details)
          (SELECT new_loan_id, ig_ref, specimen_ref, details FROM loan_items WHERE id = rec_loan_items.id)
        RETURNING id INTO new_loan_item_id;
        INSERT INTO catalogue_people (referenced_relation, record_id, people_type, people_sub_type, order_by, people_ref)
          (
            SELECT referenced_relation, new_loan_item_id, people_type, people_sub_type, order_by, people_ref
            FROM catalogue_people
            WHERE referenced_relation = 'loan_items'
                  AND record_id = rec_loan_items.id
          );
        INSERT INTO codes (
          referenced_relation,
          record_id,
          code_category,
          code_prefix,
          code_prefix_separator,
          code,
          code_suffix_separator,
          code_suffix,
          code_date,
          code_date_mask
        )
        (
          SELECT
           referenced_relation,
           new_loan_item_id,
           code_category,
           code_prefix,
           code_prefix_separator,
           code,
           code_suffix_separator,
           code_suffix,
           code_date,
           code_date_mask
          FROM codes
          WHERE referenced_relation = 'loan_items'
            AND record_id = rec_loan_items.id
        );
        INSERT INTO insurances (referenced_relation,
                                record_id,
                                insurance_value,
                                insurance_currency,
                                insurer_ref,
                                date_from_mask,
                                date_from,
                                date_to_mask,
                                date_to,
                                contact_ref)
          (SELECT
             referenced_relation,
             new_loan_item_id,
             insurance_value,
             insurance_currency,
             insurer_ref,
             date_from_mask,
             date_from,
             date_to_mask,
             date_to,
             contact_ref
           FROM insurances
           WHERE referenced_relation = 'loan_items'
                 AND record_id = rec_loan_items.id
          );
        INSERT INTO comments (referenced_relation, record_id, notion_concerned, comment)
          (SELECT referenced_relation, new_loan_item_id, notion_concerned, comment from comments where referenced_relation = 'loan_items' AND record_id = rec_loan_items.id);
        INSERT INTO properties (
          referenced_relation,
          record_id,
          property_type,
          applies_to,
          date_from_mask,
          date_from,
          date_to_mask,
          date_to,
          is_quantitative,
          property_unit,
          method,
          lower_value,
          upper_value,
          property_accuracy
        )
          (
            SELECT
              referenced_relation,
              new_loan_item_id,
              property_type,
              applies_to,
              date_from_mask,
              date_from,
              date_to_mask,
              date_to,
              is_quantitative,
              property_unit,
              method,
              lower_value,
              upper_value,
              property_accuracy
            FROM properties
            WHERE referenced_relation = 'loan_items'
                  AND record_id = rec_loan_items.id
          );
      END LOOP;
    RETURN new_loan_id;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END;
  $$;


ALTER FUNCTION darwin2.fct_duplicate_loans(loan_id integer) OWNER TO postgres;

--
-- TOC entry 1832 (class 1255 OID 1440093)
-- Name: fct_encode_uri(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_encode_uri(input text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
  parsed text;
  safePattern text;
BEGIN
  safePattern = 'a-zA-Z0-9_~/\-\.';
  IF input ~ ('[^' || safePattern || ']') THEN
    SELECT STRING_AGG(fragment, '')
    INTO parsed
    FROM (
      SELECT prefix || encoded AS fragment
      FROM (
        SELECT COALESCE(match[1], '') AS prefix,
               COALESCE('%' || encode(match[2]::bytea, 'hex'), '') AS encoded
        FROM (
          SELECT regexp_matches(
            input,
            '([' || safePattern || ']*)([^' || safePattern || '])?',
            'g') AS match
        ) matches
      ) parsed
    ) fragments;
    RETURN parsed;
  ELSE
    RETURN input;
  END IF;
END;
$$;


ALTER FUNCTION darwin2.fct_encode_uri(input text) OWNER TO darwin2;

--
-- TOC entry 1833 (class 1255 OID 1440094)
-- Name: fct_explode_array(anyarray); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_explode_array(in_array anyarray) RETURNS SETOF anyelement
    LANGUAGE sql IMMUTABLE
    AS $_$
    select ($1)[s] from generate_series(1,array_upper($1, 1)) as s;
$_$;


ALTER FUNCTION darwin2.fct_explode_array(in_array anyarray) OWNER TO darwin2;

--
-- TOC entry 1834 (class 1255 OID 1440095)
-- Name: fct_filter_encodable_row(character varying, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_filter_encodable_row(ids character varying, col_name character varying, user_id integer) RETURNS SETOF integer
    LANGUAGE sql
    AS $_$
with user_right as (
    select db_user_type
    from users
    where id = $3
)
select id
from specimens
where id in (select X::int from regexp_split_to_table($1, ',' ) as X)
      and case
          when (select db_user_type from user_right) = 8 then
            TRUE
          else
            collection_ref in (select X FROM fct_search_authorized_encoding_collections($3) as X)
          end
      and $2 = 'spec_ref';
$_$;


ALTER FUNCTION darwin2.fct_filter_encodable_row(ids character varying, col_name character varying, user_id integer) OWNER TO darwin2;

--
-- TOC entry 1827 (class 1255 OID 1440096)
-- Name: fct_find_tax_level(text, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_find_tax_level(tax_path text, searched_level integer) RETURNS integer
    LANGUAGE sql STABLE
    AS $_$
   SELECT id FROM taxonomy where  level_ref = $2 and id in (select i::int from regexp_split_to_table($1, E'\/') as i where i != '');
$_$;


ALTER FUNCTION darwin2.fct_find_tax_level(tax_path text, searched_level integer) OWNER TO darwin2;

--
-- TOC entry 1828 (class 1255 OID 1440097)
-- Name: fct_get_tax_hierarchy(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_get_tax_hierarchy(start_id integer, levels integer[]) RETURNS TABLE(r_start_id integer, id integer, name text, level_ref integer, parent_ref integer)
    LANGUAGE sql
    AS $$
WITH RECURSIVE select_levels AS (
        SELECT  t.id,t.name,t.level_ref,t.parent_ref
        FROM    darwin2.taxonomy t
        where t.id=start_id
        UNION ALL
        SELECT   tn.id, tn.name,tn.level_ref,tn.parent_ref
        FROM    darwin2.taxonomy tn
        JOIN    select_levels
        ON      tn.id = select_levels.parent_ref
        )
        select start_id,* from select_levels sl where sl.level_ref = ANY(levels);
$$;


ALTER FUNCTION darwin2.fct_get_tax_hierarchy(start_id integer, levels integer[]) OWNER TO darwin2;

--
-- TOC entry 240 (class 1259 OID 1440098)
-- Name: staging_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_id_seq OWNER TO darwin2;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 241 (class 1259 OID 1440100)
-- Name: staging; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging (
    id integer DEFAULT nextval('darwin2.staging_id_seq'::regclass) NOT NULL,
    import_ref integer NOT NULL,
    spec_ref integer,
    category character varying,
    expedition_ref integer,
    expedition_name character varying,
    expedition_from_date date,
    expedition_from_date_mask integer,
    expedition_to_date date,
    expedition_to_date_mask integer,
    station_visible boolean,
    gtu_ref integer,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_latitude double precision,
    gtu_longitude double precision,
    gtu_lat_long_accuracy double precision,
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_ref integer,
    taxon_name character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_extinct boolean,
    taxon_parents public.hstore,
    litho_ref integer,
    litho_name character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_parents public.hstore,
    chrono_ref integer,
    chrono_name character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_upper_bound numeric(10,3),
    chrono_lower_bound numeric(10,3),
    chrono_parents public.hstore,
    lithology_ref integer,
    lithology_name character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_parents public.hstore,
    mineral_ref integer,
    mineral_name character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parents public.hstore,
    host_taxon_name character varying,
    host_taxon_level_ref integer,
    host_taxon_level_name character varying,
    host_taxon_status character varying,
    ig_ref integer,
    ig_num character varying,
    ig_date_mask integer,
    ig_date date,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    individual_type character varying,
    individual_sex character varying,
    individual_state character varying,
    individual_stage character varying,
    individual_social_status character varying,
    individual_rock_form character varying,
    individual_count_min integer,
    individual_count_max integer,
    collectors text[],
    donators text[],
    part character varying,
    institution_ref integer,
    institution_name character varying,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container_type character varying,
    container_storage character varying,
    container character varying,
    sub_container_type character varying,
    sub_container_storage character varying,
    sub_container character varying,
    part_count_min integer,
    part_count_max integer,
    specimen_status character varying,
    complete boolean,
    surnumerary boolean,
    status public.hstore DEFAULT ''::public.hstore NOT NULL,
    to_import boolean DEFAULT false,
    object_name text,
    create_taxon boolean DEFAULT false NOT NULL,
    col text,
    mineral_classification text,
    specimen_taxonomy_ref integer,
    darwin_hierarchy character varying,
    part_count_males_min integer,
    part_count_males_max integer,
    part_count_females_min integer,
    part_count_females_max integer,
    part_count_juveniles_min integer,
    part_count_juveniles_max integer
);


ALTER TABLE darwin2.staging OWNER TO darwin2;

--
-- TOC entry 1829 (class 1255 OID 1440110)
-- Name: fct_imp_checker(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_rec integer :=0;
  tags staging_tag_groups ;
  tags_tag RECORD;
  update_count integer;
  tag_groups_line RECORD;
BEGIN
  IF import THEN
    /* If gtu_ref already defined, that means that check was already
       made for the line and there's no need to reassociate it
    */
    IF line.gtu_ref is not null THEN
      RETURN true;
    END IF;
    /* If no code is given, not even from date and not even tags (tag_groups here),
       that means there's not enough information to associate a gtu
    */
    IF (line.gtu_code is null OR COALESCE(fullToIndex(line.gtu_code),'')  = '') AND (line.gtu_from_date is null) AND NOT EXISTS (select 1 from staging_tag_groups g where g.staging_ref = line.id ) THEN
      RETURN true;
    END IF;
    /* Otherwise, we should try to associate a gtu_ref */
    select substr.id into ref_rec from (
       /* This part try to select gtu id for line.gtu_code NULL or line.gtu_code = '' making the comparison on all the
          other fields ensuring uniqueness (latitude, longitude, from_date and to_date)
          The criteria position('import/' in code) > 0 filter also on the already imported gtu without code only
       */
       select DISTINCT id from gtu g 
			/* ftheeten 2018 09 18*/
			--1 link staging-> prop
				LEFT JOIN staging_info
				ON line.id=staging_info.staging_ref
				AND referenced_relation='gtu'
				LEFT JOIN properties AS properties_staging_info
				ON properties_staging_info.referenced_relation='staging_info'
				AND properties_staging_info.record_id=staging_info.id
			--2 link gtu -> prop
				LEFT JOIN properties properties_gtu
				ON 
				gtu.id=properties_gtu.record_id
				AND properties_gtu.referenced_relation = 'gtu'
			--3 link staging tags
				LEFT JOIN staging_tag_groups
				ON
				line.id= staging_tag_groups.staging_ref
			--4 link gtu tags
				LEFT JOIN
				tag_groups
				ON gtu.id=tag_groups.gtu_ref
				
		/*  */
	   
			WHERE
         position('import/' in code) > 0 AND
         COALESCE(latitude,0) = COALESCE(line.gtu_latitude,0) AND
         COALESCE(longitude,0) = COALESCE(line.gtu_longitude,0) AND
         COALESCE(fullToIndex(line.gtu_code), '') = '' AND
         fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
         fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask) AND
         COALESCE(elevation,0) = COALESCE(line.gtu_elevation,0)
		  /* ftheeten 2018 09 18*/
			--compare props staging with props gtu
			AND array_agg(properties_staging_info.property_type ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.property_type ORDER BY properties_gtu.property_type) 
			AND array_agg(properties_staging_info.lower_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.lower_value ORDER BY properties_gtu.property_type)
			AND array_agg(properties_staging_info.upper_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.upper_value ORDER BY properties_gtu.property_type)
			--compare gtu tags with staging tags
			AND 
			array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) @> array_agg( stagin_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
			AND
			array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) <@ array_agg( stagin_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
			GROUP BY gtu.id

		 
		 /**/
         /* if we're not in the case of already imported gtu without code,
            we've got to find a gtu that correspond to the criterias of the current line
         */

       union
       select DISTINCT id from gtu g 
			/* ftheeten 2018 09 18*/
			--1 link staging-> prop
				LEFT JOIN staging_info
				ON line.id=staging_info.staging_ref
				AND referenced_relation='gtu'
				LEFT JOIN properties AS properties_staging_info
				ON properties_staging_info.referenced_relation='staging_info'
				AND properties_staging_info.record_id=staging_info.id
			--2 link gtu -> prop
				LEFT JOIN properties properties_gtu
				ON 
				gtu.id=properties_gtu.record_id
				AND properties_gtu.referenced_relation = 'gtu'
			--3 link staging tags
				LEFT JOIN staging_tag_groups
				ON
				line.id= staging_tag_groups.staging_ref
			--4 link gtu tags
				LEFT JOIN
				tag_groups
				ON gtu.id=tag_groups.gtu_ref
				
		/*  */
	   where
         position('import/' in code) = 0 AND
         COALESCE(latitude,0) = COALESCE(line.gtu_latitude,0) AND
         COALESCE(longitude,0) = COALESCE(line.gtu_longitude,0) AND
         COALESCE(fullToIndex(code),'') = COALESCE(fullToIndex(line.gtu_code),'') AND
         fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
         fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask) AND
         COALESCE(elevation,0) = COALESCE(line.gtu_elevation,0)
		 /* ftheeten 2018 09 18*/
			--compare props staging with props gtu
			AND array_agg(properties_staging_info.property_type ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.property_type ORDER BY properties_gtu.property_type) 
			AND array_agg(properties_staging_info.lower_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.lower_value ORDER BY properties_gtu.property_type)
			AND array_agg(properties_staging_info.upper_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.upper_value ORDER BY properties_gtu.property_type)
			--compare gtu tags with staging tags
			AND 
			array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) @> array_agg( stagin_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
			AND
			array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) <@ array_agg( stagin_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
			GROUP BY gtu.id

		 
		 /**/
       LIMIT 1
      ) as substr
    WHERE substr.id != 0 LIMIT 1;

    /* If no corresponding gtu found and we've chosen to import... insert the new gtu */
    IF NOT FOUND THEN
      INSERT into gtu
      (code,
       gtu_from_date_mask,
       gtu_from_date,
       gtu_to_date_mask,
       gtu_to_date,
       latitude,
       longitude,
       lat_long_accuracy,
       elevation,
       elevation_accuracy
      )
      VALUES
        (
          CASE COALESCE(fullToIndex(line.gtu_code),'') WHEN '' THEN 'import/'|| line.import_ref || '/' || line.id ELSE line.gtu_code END,
          COALESCE(line.gtu_from_date_mask,0),
          COALESCE(line.gtu_from_date, '01/01/0001'),
          COALESCE(line.gtu_to_date_mask,0),
          COALESCE(line.gtu_to_date, '31/12/2038'),
          line.gtu_latitude,
          line.gtu_longitude,
          line.gtu_lat_long_accuracy,
          line.gtu_elevation,
          line.gtu_elevation_accuracy
        )
      RETURNING id INTO line.gtu_ref;
      /* The new id is returned in line.gtu_ref and stored in ref_rec so it can be used further on */
      ref_rec := line.gtu_ref;
      /* Browse all tags to try importing them one by one and associate them with the newly created gtu */
      FOR tags IN SELECT * FROM staging_tag_groups WHERE staging_ref = line.id LOOP
        BEGIN
          INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name, tag_value)
            SELECT ref_rec,tags.group_name, tags.sub_group_name, tags.tag_value;
          EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE 'Error in fct_imp_checker_gtu (case non existing gtu): %', SQLERRM;
            /* Do nothing and continue */
        END ;
      END LOOP ;
    ELSE
      /* Define gtu_ref of the line object, so it can be used afterwards in the perform to bring correctly
         the additional comments and additional properties
      */
      line.gtu_ref = ref_rec;
      /* ELSE ADDED HERE TO CHECK IF THE TAGS (and the staging infos) OF THE EXISTING GTU EXISTS TOO */
      /* This case happens when a gtu that correspond to info entered in staging has been found */
      /* Browse all tags to try importing them one by one and associate them with the newly created gtu */
      FOR tags IN SELECT * FROM staging_tag_groups WHERE staging_ref = line.id LOOP
        /* We split all the tags entered by ; as it's the case in the interface */
        FOR tags_tag IN SELECT trim(regexp_split_to_table(tags.tag_value, E';+')) as value LOOP
          BEGIN
            /* We use an upsert here.
               Ideally, we should use locking, but we consider it's isolated.
             */
            UPDATE tag_groups
            SET tag_value = tag_value || ';' || tags.tag_value
            WHERE gtu_ref = ref_rec
                  AND group_name_indexed = fullToIndex(tags.group_name)
                  AND sub_group_name_indexed = fullToIndex(tags.sub_group_name)
                  AND fullToIndex(tags_tag.value) NOT IN (SELECT fullToIndex(regexp_split_to_table(tag_value, E';+')));
            GET DIAGNOSTICS update_count = ROW_COUNT;
            IF update_count = 0 THEN
              INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name, tag_value)
                SELECT ref_rec,tags.group_name, tags.sub_group_name, tags_tag.value
                WHERE NOT EXISTS (SELECT id
                                  FROM tag_groups
                                  WHERE gtu_ref = ref_rec
                                        AND group_name_indexed = fullToIndex(tags.group_name)
                                        AND sub_group_name_indexed = fullToIndex(tags.sub_group_name)
                                  LIMIT 1
                );
            END IF;
            EXCEPTION WHEN OTHERS THEN
              RAISE NOTICE 'Error in fct_imp_checker_gtu (case from existing gtu): %', SQLERRM;
              RAISE NOTICE 'gtu_ref is %', ref_rec;
              RAISE NOTICE 'group name is %', tags.group_name;
              RAISE NOTICE 'subg  roup name is %', tags.sub_group_name;
              RAISE NOTICE 'tag value is %', tags_tag.value;
              /* Do nothing here */
          END ;
        END LOOP;
      END LOOP ;
    END IF;
    /* Execute (perform = execute without any output) the update of reference_relation
       for the current staging line and for the gtu type of relationship.
       Referenced relation currently named 'staging_info' is replaced by gtu
       and record_id currently set to line.id (staging id) is replaced by line.gtu_ref (id of the new gtu created)
    */
    PERFORM fct_imp_checker_staging_info(line, 'gtu');

    /* Associate the gtu_ref in the staging and erase in hstore status the gtu tag signaling gtu has still to be treated */
    UPDATE staging SET status = delete(status,'gtu'), gtu_ref = ref_rec where id=line.id;

  END IF;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 1836 (class 1255 OID 1440113)
-- Name: fct_imp_checker_catalogue(darwin2.staging, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_catalogue(line darwin2.staging, catalogue_table text, prefix text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  ref_record RECORD;
  rec_id integer := null;
  line_store hstore;
  field_name text;
  field_level_name text;
  test text;
  ref refcursor;

     --ftheeten 2017 08 03
  taxonomy_ref_str varchar;
  restrict_taxonomy boolean;
  filter_taxonomy_str varchar;
   --ftheeten 2017 08 03
BEGIN
    line_store := hstore(line);
    field_name := prefix || '_name';
    field_name := line_store->field_name;
    field_level_name := prefix || '_level_name';
    field_level_name := coalesce(line_store->field_level_name,'');

         --ftheeten 2017 08 03
  taxonomy_ref_str :=line_store->'specimen_taxonomy_ref';
  restrict_taxonomy := false;
  filter_taxonomy_str:='';
  IF LENGTH(TRIM(taxonomy_ref_str))> 0 THEN
	IF(taxonomy_ref_str::int)>0 AND catalogue_table='taxonomy'  THEN
		restrict_taxonomy:=TRUE;
		filter_taxonomy_str:='  metadata_ref = '|| taxonomy_ref_str||' AND ';		
	END IF;
  END IF;
   --ftheeten 2017 08 03

    OPEN ref FOR EXECUTE 'SELECT * FROM ' || catalogue_table || ' t
    INNER JOIN catalogue_levels c on t.level_ref = c.id
    WHERE  '||filter_taxonomy_str ||' name = ' || quote_literal( field_name) || ' AND  level_sys_name = CASE WHEN ' || quote_literal(field_level_name) || ' = '''' THEN level_sys_name ELSE ' || quote_literal(field_level_name) || ' END
    LIMIT 2';
    LOOP
      FETCH ref INTO ref_record;
      IF  NOT FOUND THEN
        EXIT;  -- exit loop
      END IF;

      rec_id := ref_record.id;
      result_nbr := result_nbr +1;
    END LOOP;

    IF result_nbr = 1 THEN -- It's Ok!

      PERFORM fct_imp_checker_catalogues_parents(line,rec_id, catalogue_table, prefix);
      RETURN true;
    END IF;

    IF result_nbr >= 2 THEN
      UPDATE staging SET status = (status || hstore(prefix , 'too_much')) where id= line.id;
      RETURN true;
    END IF;

    CLOSE ref;

  /*** Then CHECK fuzzy name ***/

  result_nbr := 0;
  IF catalogue_table = 'mineralogy' THEN
    /*
     * @ToDo: We'll need to evaluate if we keep the fuzzyness here or if we apply the same as it's for the other catalogues (=)
     */
    OPEN ref FOR EXECUTE 'SELECT * FROM ' || catalogue_table || ' t
    INNER JOIN catalogue_levels c on t.level_ref = c.id
    WHERE   name_indexed like fullToIndex(' || quote_literal( field_name) || ') || ''%'' AND  level_sys_name = CASE WHEN ' || quote_literal(field_level_name) || ' = '''' THEN level_sys_name ELSE ' || quote_literal(field_level_name) || ' END
    LIMIT 2';
    LOOP
      FETCH ref INTO ref_record;
      IF  NOT FOUND THEN
        EXIT;  -- exit loop
      END IF;

      rec_id := ref_record.id;
      result_nbr := result_nbr +1;
    END LOOP;
  ELSE
    OPEN ref FOR EXECUTE 'SELECT * FROM ' || catalogue_table || ' t
    INNER JOIN catalogue_levels c on t.level_ref = c.id
    WHERE '||filter_taxonomy_str ||' name_indexed = fullToIndex(' || quote_literal( field_name) || ') AND  level_sys_name = CASE WHEN ' || quote_literal(field_level_name) || ' = '''' THEN level_sys_name ELSE ' || quote_literal(field_level_name) || ' END
    LIMIT 2';
    LOOP
      FETCH ref INTO ref_record;
      IF  NOT FOUND THEN
        EXIT;  -- exit loop
      END IF;

      rec_id := ref_record.id;
      result_nbr := result_nbr +1;
    END LOOP;
  END IF ;

  IF result_nbr = 1 THEN -- It's Ok!
    PERFORM fct_imp_checker_catalogues_parents(line,rec_id, catalogue_table, prefix);
    RETURN true;
  END IF;

  IF result_nbr >= 2 THEN
    UPDATE staging SET status = (status || hstore(prefix , 'too_much')) where id= line.id;
    RETURN true;
  END IF;

  IF result_nbr = 0 THEN
    UPDATE staging SET status = (status || hstore(prefix, 'not_found')) where id=line.id;
    RETURN true;
  END IF;

  CLOSE ref;
  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_catalogue(line darwin2.staging, catalogue_table text, prefix text) OWNER TO darwin2;

--
-- TOC entry 1837 (class 1255 OID 1440114)
-- Name: fct_imp_checker_catalogues_parents(darwin2.staging, integer, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_catalogues_parents(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  row_record record;
  lvl_name varchar;
  lvl_value varchar;
  rec_parents hstore;
  line_store hstore;
  field_name text;

   --ftheeten 2017 08 03
  taxonomy_ref_str varchar;
  restrict_taxonomy boolean;
  filter_taxonomy_str varchar;
   --ftheeten 2017 08 03

   --ftheeten 2018 08 14
   rec_parents_darwin hstore;
BEGIN
  line_store := hstore(line);
  field_name := prefix || '_parents';
  rec_parents := line_store->field_name;

   --ftheeten 2017 08 03
  taxonomy_ref_str :=line_store->'specimen_taxonomy_ref';
  restrict_taxonomy := false;
  filter_taxonomy_str:='';
  IF LENGTH(TRIM(taxonomy_ref_str))> 0 THEN
	IF(taxonomy_ref_str::int)>0 AND catalogue_table='taxonomy'  THEN
		restrict_taxonomy:=TRUE;
		filter_taxonomy_str:='  metadata_ref = '|| taxonomy_ref_str||' AND ';		
	END IF;
  END IF;
   --ftheeten 2017 08 03
--ftheeten 2018 06 16
If catalogue_table='taxonomy' THEN
	IF rec_parents is not null AND rec_parents != ''::hstore  AND rec_id is not null THEN
		
		 SELECT fct_rmca_sort_taxon_path_alphabetically_hstore(path) INTO rec_parents_darwin FROM taxonomy where id = rec_id; 
		 rec_parents := rec_parents - line.taxon_level_name;		
		 IF (rec_parents_darwin @> rec_parents) = FALSE THEN
					 EXECUTE 'UPDATE staging SET status = (status || ('|| quote_literal(prefix) || ' => ''bad_hierarchy'')), ' || prefix || '_ref = null where id=' || line.id;
			RETURN TRUE;

		 END IF;
	END IF;
ELSE

  IF rec_parents is not null AND rec_parents != ''::hstore  AND rec_id is not null THEN
    EXECUTE 'select * from '|| quote_ident(catalogue_table) || ' where id = ' || rec_id into row_record ;

    FOR lvl_name in SELECT s FROM fct_explode_array(akeys(rec_parents)) as s
    LOOP
      lvl_value := rec_parents->lvl_name;
      EXECUTE 'SELECT count(*) from ' || quote_ident(catalogue_table) || ' t
        INNER JOIN catalogue_levels c on t.level_ref = c.id
        WHERE level_sys_name = ' || quote_literal(lvl_name) || ' AND
          name_indexed like fullToIndex( ' || quote_literal(lvl_value) || '  ) || ''%''
          AND ' || quote_literal(row_record.path) || 'like t.path || t.id || ''/%'' ' INTO result_nbr;
      IF result_nbr = 0 THEN
        EXECUTE 'UPDATE staging SET status = (status || hstore('|| quote_literal(prefix) || ' ,''bad_hierarchy'')), ' || prefix || '_ref = null where id=' || line.id;
        RETURN TRUE;
      END IF;
    END LOOP;
  END IF;
END IF;
  EXECUTE 'UPDATE staging SET status = delete(status, ' || quote_literal(prefix) ||'), ' || prefix|| '_ref = ' || rec_id || ' where id=' || line.id;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_catalogues_parents(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) OWNER TO darwin2;

--
-- TOC entry 1835 (class 1255 OID 1440115)
-- Name: fct_imp_checker_catalogues_parents_bck20180829(darwin2.staging, integer, text, text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_catalogues_parents_bck20180829(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  row_record record;
  lvl_name varchar;
  lvl_value varchar;
  rec_parents hstore;
  line_store hstore;
  field_name text;
BEGIN
  line_store := hstore(line);
  field_name := prefix || '_parents';
  rec_parents := line_store->field_name;

  IF rec_parents is not null AND rec_parents != ''::hstore  AND rec_id is not null THEN
    EXECUTE 'select * from '|| quote_ident(catalogue_table) || ' where id = ' || rec_id into row_record ;

    FOR lvl_name in SELECT s FROM fct_explode_array(akeys(rec_parents)) as s
    LOOP
      lvl_value := rec_parents->lvl_name;
      EXECUTE 'SELECT count(*) from ' || quote_ident(catalogue_table) || ' t
        INNER JOIN catalogue_levels c on t.level_ref = c.id
        WHERE level_sys_name = ' || quote_literal(lvl_name) || ' AND
          name_indexed like fullToIndex( ' || quote_literal(lvl_value) || '  ) || ''%''
          AND ' || quote_literal(row_record.path) || 'like t.path || t.id || ''/%'' ' INTO result_nbr;
      IF result_nbr = 0 THEN
        EXECUTE 'UPDATE staging SET status = (status || ('|| quote_literal(prefix) || ' => ''bad_hierarchy'')), ' || prefix || '_ref = null where id=' || line.id;
        RETURN TRUE;
      END IF;
    END LOOP;
  END IF;

  EXECUTE 'UPDATE staging SET status = delete(status, ' || quote_literal(prefix) ||'), ' || prefix|| '_ref = ' || rec_id || ' where id=' || line.id;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_catalogues_parents_bck20180829(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) OWNER TO darwin2;

--
-- TOC entry 1830 (class 1255 OID 1440116)
-- Name: fct_imp_checker_category(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_category(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  ref_record RECORD;
  ref_rec integer :=0;
  ref refcursor;
BEGIN
  IF line.category != 'physical' AND line.category != 'observation'  AND line.category != 'figurate'   AND line.category != 'figurate-physical' AND line.category != 'composite-storage-unit'   THEN
    UPDATE staging SET status = (status || hstore('category' , 'not_found')) where id= line.id;
    RETURN true;
  END IF; 
  
  UPDATE staging SET status = delete(status,'category') where id=line.id;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_category(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 812 (class 1255 OID 1440117)
-- Name: fct_imp_checker_expeditions(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_expeditions(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  ref_record RECORD;
  ref_rec integer :=0;
  ref refcursor;
BEGIN
  IF line.expedition_name is null OR line.expedition_name ='' OR line.expedition_ref is not null THEN
    RETURN true;
  END IF;
  OPEN ref FOR select * from expeditions where name_indexed = fulltoindex(line.expedition_name) ; 
  LOOP
    FETCH ref INTO ref_record ;    
    IF NOT FOUND THEN
  EXIT ;
    END IF;
    ref_rec = ref_record.id ;
    result_nbr := result_nbr +1;
  END LOOP ;
  IF result_nbr = 0 THEN
    IF import THEN
      INSERT INTO expeditions (name, expedition_from_date, expedition_to_date, expedition_from_date_mask,expedition_to_date_mask)
      VALUES (
        line.expedition_name, COALESCE(line.expedition_from_date,'01/01/0001'),
        COALESCE(line.expedition_to_date,'31/12/2038'), COALESCE(line.expedition_from_date_mask,0),
        COALESCE(line.expedition_to_date_mask,0)
      )
      RETURNING id INTO line.expedition_ref;

      ref_rec := line.expedition_ref;
      PERFORM fct_imp_checker_staging_info(line, 'expeditions');
    ELSE
      RETURN TRUE;
    END IF;
  END IF;
  IF result_nbr >= 2 THEN
    UPDATE staging SET status = (status || hstore('expedition' , 'too_much')) where id= line.id;
    RETURN true;
  END IF; 
  /* So result_nbr = 1 ! */
  UPDATE staging SET status = delete(status,'expedition'), expedition_ref = ref_rec where id=line.id;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_expeditions(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 1838 (class 1255 OID 1440118)
-- Name: fct_imp_checker_gtu(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_gtu(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_rec integer :=0;
  tags staging_tag_groups ;
  tags_tag RECORD;
  update_count integer;
  tag_groups_line RECORD;
BEGIN
  IF import THEN
    /* If gtu_ref already defined, that means that check was already
       made for the line and there's no need to reassociate it
    */
    IF line.gtu_ref is not null THEN
      RETURN true;
    END IF;
    /* If no code is given, not even from date and not even tags (tag_groups here),
       that means there's not enough information to associate a gtu
    */
    IF (line.gtu_code is null OR COALESCE(fullToIndex(line.gtu_code),'')  = '') AND (line.gtu_from_date is null) AND NOT EXISTS (select 1 from staging_tag_groups g where g.staging_ref = line.id ) THEN
      RETURN true;
    END IF;
	
	
	---!!!!!!!!!!!!!!!!!!!!!!!!!!
	
		--fheeten 2018 10 31
		--ftheeten 2018 09 18 if just code and rest null (except date) then search gtu
		IF length(trim(line.gtu_code))=0 AND line.gtu_latitude Is NULL AND line.gtu_longitude IS NULL AND line.gtu_elevation IS NULL AND (SELECT COUNT(*) FROM staging_info WHERE staging_info.referenced_relation='gtu' AND  line.id=staging_info.staging_ref)=0 AND (SELECT COUNT(*) FROM staging_tag_groups WHERE line.id= staging_tag_groups.staging_ref )=0 
		AND
			(SELECT count(distinct comments.id)+
				count(distinct properties.id)
				from staging_info
				LEFT JOIN 
				 properties
				ON 
				 staging_info.id=properties.record_id
				AND properties.referenced_relation='staging_info'
				  LEFT JOIN 
				 comments
				ON 
				 staging_info.id=comments.record_id
				AND comments.referenced_relation='staging_info'
				WHERE
				staging_info.referenced_relation='gtu'
				AND
				staging_ref=line.id
				)=0 
		THEN
			return true;

		ELSIF

		-- position('import/' in line.gtu_code) = 0 AND 

		length(trim(line.gtu_code))>0 AND line.gtu_latitude Is NULL AND line.gtu_longitude IS NULL AND line.gtu_elevation IS NULL AND (SELECT COUNT(*) FROM staging_info WHERE staging_info.referenced_relation='gtu' AND  line.id=staging_info.staging_ref)=0 AND (SELECT COUNT(*) FROM staging_tag_groups WHERE line.id= staging_tag_groups.staging_ref )=0
		AND --no properties and comment in loaded data
		--ftheeten 2018 10 31
			(SELECT count(distinct comments.id)+
				count(distinct properties.id)
				from staging_info
				LEFT JOIN 
				 properties
				ON 
				 staging_info.id=properties.record_id
				AND properties.referenced_relation='staging_info'
				  LEFT JOIN 
				 comments
				ON 
				 staging_info.id=comments.record_id
				AND comments.referenced_relation='staging_info'
				WHERE
				staging_info.referenced_relation='gtu'
				AND
				staging_ref=line.id
				)=0 
		AND
		--only one GTU with indexed form of code  
		(SELECT count(DISTINCT id) FROM gtu g  
			
						WHERE COALESCE(fullToIndex(code),'') = COALESCE(fullToIndex(line.gtu_code),'') AND
					 fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
					 fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask))=1
	
		THEN
			SELECT substr.id INTO  ref_rec FROM (SELECT id FROM gtu g  
			
						WHERE COALESCE(fullToIndex(code),'') = COALESCE(fullToIndex(line.gtu_code),'') AND
					 fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
					 fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask)
					 
					 ) as substr
					WHERE substr.id != 0 LIMIT 1;
		ELSE
	
			/* Otherwise, we should try to associate a gtu_ref */
			select substr.id into ref_rec from (
			   /* This part try to select gtu id for line.gtu_code NULL or line.gtu_code = '' making the comparison on all the
				  other fields ensuring uniqueness (latitude, longitude, from_date and to_date)
				  The criteria position('import/' in code) > 0 filter also on the already imported gtu without code only
			   */
				   select DISTINCT g.id from gtu g 
						/* ftheeten 2018 09 18*/
						--1 link staging-> prop
							LEFT JOIN staging_info
							ON line.id=staging_info.staging_ref
							AND staging_info.referenced_relation='gtu'
							LEFT JOIN properties AS properties_staging_info
							ON properties_staging_info.referenced_relation='staging_info'
							AND properties_staging_info.record_id=staging_info.id
						--2 link gtu -> prop
							LEFT JOIN properties properties_gtu
							ON 
							g.id=properties_gtu.record_id
							AND properties_gtu.referenced_relation = 'gtu'
						--3 link staging tags
							LEFT JOIN staging_tag_groups
							ON
							line.id= staging_tag_groups.staging_ref
						--4 link gtu tags
							LEFT JOIN
							tag_groups
							ON g.id=tag_groups.gtu_ref
                        --5 link gtu comments
                            LEFT JOIN comments
                            ON comments.referenced_relation = 'staging_info'
                            AND comments.record_id=staging_info.id
							
					/*  */
				   
						WHERE
					 position('import/' in code) > 0 AND
					 COALESCE(latitude,0) = COALESCE(line.gtu_latitude,0) AND
					 COALESCE(longitude,0) = COALESCE(line.gtu_longitude,0) AND
					 COALESCE(fullToIndex(line.gtu_code), '') = '' AND
					 fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
					 fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask) AND
					 COALESCE(elevation,0) = COALESCE(line.gtu_elevation,0)
					  /* ftheeten 2018 09 18*/
						--compare props staging with props gtu
						GROUP BY g.id
						HAVING array_agg(properties_staging_info.property_type ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.property_type ORDER BY properties_gtu.property_type) 
						AND array_agg(properties_staging_info.lower_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.lower_value ORDER BY properties_gtu.property_type)
						AND array_agg(properties_staging_info.upper_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.upper_value ORDER BY properties_gtu.property_type)
						--compare gtu tags with staging tags
						AND 
						array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) @> array_agg( staging_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
						AND
						array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) <@ array_agg( staging_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
						

					 
					 /**/
					 /* if we're not in the case of already imported gtu without code,
						we've got to find a gtu that correspond to the criterias of the current line
					 */

				   union
				   select DISTINCT g.id from gtu g 
						/* ftheeten 2018 09 18*/
						--1 link staging-> prop
							LEFT JOIN staging_info
							ON line.id=staging_info.staging_ref
							AND referenced_relation='gtu'
							LEFT JOIN properties AS properties_staging_info
							ON properties_staging_info.referenced_relation='staging_info'
							AND properties_staging_info.record_id=staging_info.id
						--2 link gtu -> prop
							LEFT JOIN properties properties_gtu
							ON 
							g.id=properties_gtu.record_id
							AND properties_gtu.referenced_relation = 'gtu'
						--3 link staging tags
							LEFT JOIN staging_tag_groups
							ON
							line.id= staging_tag_groups.staging_ref
						--4 link gtu tags
							LEFT JOIN
							tag_groups
							ON g.id=tag_groups.gtu_ref
                        --5 link gtu comments
                            LEFT JOIN comments
                            ON comments.referenced_relation = 'staging_info'
                            AND comments.record_id=staging_info.id
							
					/*  */
				   where
					 position('import/' in code) = 0 AND
					 COALESCE(latitude,0) = COALESCE(line.gtu_latitude,0) AND
					 COALESCE(longitude,0) = COALESCE(line.gtu_longitude,0) AND
					 COALESCE(fullToIndex(code),'') = COALESCE(fullToIndex(line.gtu_code),'') AND
					 fct_mask_date(gtu_from_date,gtu_from_date_mask) = fct_mask_date(COALESCE(line.gtu_from_date, '01/01/0001')::timestamp,line.gtu_from_date_mask) AND
					 fct_mask_date(gtu_to_date,gtu_to_date_mask) = fct_mask_date(COALESCE(line.gtu_to_date, '31/12/2038')::timestamp,line.gtu_to_date_mask) AND
					 COALESCE(elevation,0) = COALESCE(line.gtu_elevation,0)
					 /* ftheeten 2018 09 18*/
					 GROUP BY g.id
						--compare props staging with props gtu
						HAVING array_agg(properties_staging_info.property_type ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.property_type ORDER BY properties_gtu.property_type) 
						AND array_agg(properties_staging_info.lower_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.lower_value ORDER BY properties_gtu.property_type)
						AND array_agg(properties_staging_info.upper_value ORDER BY properties_staging_info.property_type) = array_agg(properties_gtu.upper_value ORDER BY properties_gtu.property_type)
						--compare gtu tags with staging tags
						AND 
						array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) @> array_agg( staging_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
						AND
						array_agg( tag_groups.tag_value ORDER BY tag_groups.group_name, tag_groups.sub_group_name ) <@ array_agg( staging_tag_groups.tag_value ORDER BY staging_tag_groups.group_name, staging_tag_groups.sub_group_name )
						

					 
					 /**/
				   LIMIT 1
				  ) as substr
				WHERE substr.id != 0 LIMIT 1;
		END IF;
		---!!!!!!!!!!!!!!!!!!!!!!!!!!

    /* If no corresponding gtu found and we've chosen to import... insert the new gtu */
    IF NOT FOUND THEN
      INSERT into gtu
      (code,
      import_ref,
       gtu_from_date_mask,
       gtu_from_date,
       gtu_to_date_mask,
       gtu_to_date,
       latitude,
       longitude,
       lat_long_accuracy,
       elevation,
       elevation_accuracy
      )
      VALUES
        (
          CASE COALESCE(fullToIndex(line.gtu_code),'') WHEN '' THEN 'import/'|| line.import_ref || '/' || line.id ELSE line.gtu_code END,
          line.import_ref,
          COALESCE(line.gtu_from_date_mask,0),
          COALESCE(line.gtu_from_date, '01/01/0001'),
          COALESCE(line.gtu_to_date_mask,0),
          COALESCE(line.gtu_to_date, '31/12/2038'),
          line.gtu_latitude,
          line.gtu_longitude,
          line.gtu_lat_long_accuracy,
          line.gtu_elevation,
          line.gtu_elevation_accuracy
        )
      RETURNING id INTO line.gtu_ref;
      /* The new id is returned in line.gtu_ref and stored in ref_rec so it can be used further on */
      ref_rec := line.gtu_ref;
      /* Browse all tags to try importing them one by one and associate them with the newly created gtu */
      FOR tags IN SELECT * FROM staging_tag_groups WHERE staging_ref = line.id LOOP
        BEGIN
          INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name, tag_value)
            SELECT ref_rec,tags.group_name, tags.sub_group_name, tags.tag_value;
          EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE 'Error in fct_imp_checker_gtu (case non existing gtu): %', SQLERRM;
            /* Do nothing and continue */
        END ;
      END LOOP ;
    ELSE
      /* Define gtu_ref of the line object, so it can be used afterwards in the perform to bring correctly
         the additional comments and additional properties
      */
      line.gtu_ref = ref_rec;
      /* ELSE ADDED HERE TO CHECK IF THE TAGS (and the staging infos) OF THE EXISTING GTU EXISTS TOO */
      /* This case happens when a gtu that correspond to info entered in staging has been found */
      /* Browse all tags to try importing them one by one and associate them with the newly created gtu */
      FOR tags IN SELECT * FROM staging_tag_groups WHERE staging_ref = line.id LOOP
        /* We split all the tags entered by ; as it's the case in the interface */
        FOR tags_tag IN SELECT trim(regexp_split_to_table(tags.tag_value, E';+')) as value LOOP
          BEGIN
            /* We use an upsert here.
               Ideally, we should use locking, but we consider it's isolated.
             */
            UPDATE tag_groups
            SET tag_value = tag_value || ';' || tags.tag_value
            WHERE gtu_ref = ref_rec
                  AND group_name_indexed = fullToIndex(tags.group_name)
                  AND sub_group_name_indexed = fullToIndex(tags.sub_group_name)
                  AND fullToIndex(tags_tag.value) NOT IN (SELECT fullToIndex(regexp_split_to_table(tag_value, E';+')));
            GET DIAGNOSTICS update_count = ROW_COUNT;
            IF update_count = 0 THEN
              INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name, tag_value)
                SELECT ref_rec,tags.group_name, tags.sub_group_name, tags_tag.value
                WHERE NOT EXISTS (SELECT id
                                  FROM tag_groups
                                  WHERE gtu_ref = ref_rec
                                        AND group_name_indexed = fullToIndex(tags.group_name)
                                        AND sub_group_name_indexed = fullToIndex(tags.sub_group_name)
                                  LIMIT 1
                );
            END IF;
            EXCEPTION WHEN OTHERS THEN
              RAISE NOTICE 'Error in fct_imp_checker_gtu (case from existing gtu): %', SQLERRM;
              RAISE NOTICE 'gtu_ref is %', ref_rec;
              RAISE NOTICE 'group name is %', tags.group_name;
              RAISE NOTICE 'subg  roup name is %', tags.sub_group_name;
              RAISE NOTICE 'tag value is %', tags_tag.value;
              /* Do nothing here */
          END ;
        END LOOP;
      END LOOP ;
    END IF;
    /* Execute (perform = execute without any output) the update of reference_relation
       for the current staging line and for the gtu type of relationship.
       Referenced relation currently named 'staging_info' is replaced by gtu
       and record_id currently set to line.id (staging id) is replaced by line.gtu_ref (id of the new gtu created)
    */
    PERFORM fct_imp_checker_staging_info(line, 'gtu');

    /* Associate the gtu_ref in the staging and erase in hstore status the gtu tag signaling gtu has still to be treated */
    UPDATE staging SET status = delete(status,'gtu'), gtu_ref = ref_rec where id=line.id;

  END IF;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_gtu(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 1846 (class 1255 OID 1440121)
-- Name: fct_imp_checker_igs(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_igs(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_rec integer :=0;
BEGIN
  IF line.ig_num is null OR  line.ig_num = '' OR line.ig_ref is not null THEN
    RETURN true;
  END IF;

  select id into ref_rec from igs where ig_num = line.ig_num ;
  IF NOT FOUND THEN
    IF import THEN
        INSERT INTO igs (ig_num, ig_date_mask, ig_date)
        VALUES (line.ig_num,  COALESCE(line.ig_date_mask,line.ig_date_mask,'0'), COALESCE(line.ig_date,'01/01/0001'))
        RETURNING id INTO line.ig_ref;

        ref_rec := line.ig_ref;
        PERFORM fct_imp_checker_staging_info(line, 'igs');
    ELSE
    --UPDATE staging SET status = (status || ('igs' => 'not_found')), ig_ref = null where id=line.id;
      RETURN TRUE;
    END IF;
  END IF;

  UPDATE staging SET status = delete(status,'igs'), ig_ref = ref_rec where id=line.id;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_igs(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 848 (class 1255 OID 1440122)
-- Name: fct_imp_checker_manager(darwin2.staging); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_manager(line darwin2.staging) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	collection_ref_for_gtu_var INTEGER;
	collection_ref_var INTEGER;
	enforce_unicity BOOLEAN;
	
BEGIN

--2019 03 01
 SELECT collection_Ref , collection_ref_for_gtu, enforce_code_unicity INTO collection_ref_var, collection_ref_for_gtu_var, enforce_unicity FROM imports where imports.id =line.import_ref;
  IF line.taxon_name IS NOT NULL AND line.taxon_name is distinct from '' AND line.taxon_ref is null THEN
    PERFORM fct_imp_create_catalogues_and_parents(line, 'taxonomy','taxon');
    PERFORM fct_imp_checker_catalogue(line,'taxonomy','taxon');
  END IF;

  IF line.chrono_name IS NOT NULL AND line.chrono_name is distinct from '' AND line.chrono_ref is null THEN
    PERFORM fct_imp_checker_catalogue(line,'chronostratigraphy','chrono');
  END IF;

  IF line.lithology_name IS NOT NULL AND line.lithology_name is distinct from '' AND line.lithology_ref is null THEN
    PERFORM fct_imp_checker_catalogue(line,'lithology','lithology');
  END IF;

  IF line.mineral_name IS NOT NULL AND line.mineral_name is distinct from '' AND line.mineral_ref is null THEN
    PERFORM fct_imp_checker_catalogue(line,'mineralogy','mineral');
  END IF;

  IF line.litho_name IS NOT NULL AND line.litho_name is distinct from '' AND line.litho_ref is null THEN
    PERFORM fct_imp_checker_catalogue(line,'lithostratigraphy','litho');
  END IF;

  PERFORM fct_imp_checker_category(line);
  PERFORM fct_imp_checker_igs(line);
  PERFORM fct_imp_checker_expeditions(line);
  --MADAM FTHEETEN 2019 01 29 (DEV LINK TO GTU)
  --PERFORM fct_imp_checker_gtu(line);

  PERFORM fct_rmca_imp_checker_gtu_search_code(line, collection_ref_for_gtu_var);
  IF enforce_unicity IS TRUE THEN

	PERFORM fct_rmca_imp_checker_specimen_code(line, collection_ref_var);
  END IF;
  PERFORM fct_imp_checker_people(line);
  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_manager(line darwin2.staging) OWNER TO darwin2;

--
-- TOC entry 1849 (class 1255 OID 1440123)
-- Name: fct_imp_checker_people(darwin2.staging); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_imp_checker_people(line darwin2.staging) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_record integer :=0;
  cnt integer :=-1;
  p_name text;
  merge_status integer :=1;
  ident_line RECORD;
  people_line RECORD ;
BEGIN


  --  Donators and collectors

  FOR people_line IN select * from staging_people WHERE referenced_relation ='staging' AND record_id = line.id and  TRIM(formated_name)  != '' --ftheeten 2018 10 31 avoid null string
  LOOP
    IF people_line.people_ref is not null THEN
      continue;
    END IF;
    SELECT fct_look_for_people(people_line.formated_name) into ref_record;
    CASE ref_record
      WHEN -1,0 THEN merge_status := -1 ;
      --WHEN 0 THEN merge_status := 0;
      ELSE
        UPDATE staging_people SET people_ref = ref_record WHERE id=people_line.id ;
    END CASE;
  END LOOP;
  IF merge_status = 1 THEN
    UPDATE staging SET status = delete(status,'people') where id=line.id;
  ELSE
    UPDATE staging SET status = (status || hstore('people', 'people')) where id= line.id;
  END IF;

  -- Identifiers

  merge_status := 1 ;
  FOR ident_line in select * from identifications where referenced_relation ='staging' AND  record_id = line.id
  LOOP
    FOR people_line IN select * from staging_people WHERE referenced_relation ='identifications' AND record_id = ident_line.id
    and  TRIM(formated_name)  != '' --ftheeten 2018 10 31 avoid null string
    LOOP
      IF people_line.people_ref is not null THEN
        continue;
      END IF;
      SELECT fct_look_for_people(people_line.formated_name) into ref_record;
      CASE ref_record
        WHEN -1,0 THEN merge_status := -1 ;
        --WHEN 0 THEN merge_status := 0;
        ELSE
          UPDATE staging_people SET people_ref = ref_record WHERE id=people_line.id ;
      END CASE;
    END LOOP;
  END LOOP;

  IF merge_status = 1 THEN
    UPDATE staging SET status = delete(status,'identifiers') where id=line.id;
  ELSE
    UPDATE staging SET status = (status || hstore('identifiers' , 'people')) where id= line.id;
  END IF;

  -- Sequencers

  merge_status := 1 ;
  FOR ident_line in select * from collection_maintenance where referenced_relation ='staging' AND  record_id = line.id
  LOOP
    FOR people_line IN select * from staging_people WHERE referenced_relation ='collection_maintenance' AND record_id = ident_line.id
    and  TRIM(formated_name)  != '' --ftheeten 2018 10 31 avoid null string
    LOOP
      IF people_line.people_ref is not null THEN
        continue;
      END IF;
      SELECT fct_look_for_people(people_line.formated_name) into ref_record;
      CASE ref_record
        WHEN -1,0 THEN merge_status := -1 ;
        --WHEN 0 THEN merge_status := 0;
        ELSE
          UPDATE staging_people SET people_ref = ref_record WHERE id=people_line.id ;
      END CASE;
    END LOOP;
  END LOOP;

  IF merge_status = 1 THEN
    UPDATE staging SET status = delete(status,'operator') where id=line.id;
  ELSE
    UPDATE staging SET status = (status || hstore('operator', 'people')) where id= line.id;
  END IF;

  /**********
  * Institution
  **********/
  IF line.institution_name IS NOT NULL and line.institution_name  != '' AND line.institution_ref is null THEN
    SELECT fct_look_for_institution(line.institution_name) into ref_record ;
  CASE ref_record
  WHEN -1 THEN
    UPDATE staging SET status = (status || hstore('institution', 'too_much')) where id= line.id;
  WHEN 0 THEN
    UPDATE staging SET status = (status || hstore('institution' ,'not_found')) where id= line.id;
  ELSE
    UPDATE staging SET status = delete(status,'institution'), institution_ref = ref_record where id=line.id;
      END CASE;
  END IF;

  /**********
  * Institution in staging_relationship
  **********/
  FOR ident_line in select * from staging_relationship where record_id = line.id
  LOOP
    IF ident_line.institution_name IS NOT NULL and ident_line.institution_name  != '' AND ident_line.institution_ref is null AND ident_line.institution_name  != 'Not defined' THEN
      SELECT fct_look_for_institution(ident_line.institution_name) into ref_record;
      CASE ref_record
      WHEN -1 THEN
        UPDATE staging SET status = (status || hstore('institution_relationship' , 'too_much')) where id= line.id;
      WHEN 0 THEN
        UPDATE staging SET status = (status || hstore('institution_relationship', 'not_found')) where id= line.id;
        ELSE
          UPDATE staging_relationship SET institution_ref = ref_record WHERE id=ident_line.id ;
          UPDATE staging SET status = delete(status,'institution_relationship') where id=line.id;
      END CASE;
    END IF;
  END LOOP;

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_people(line darwin2.staging) OWNER TO darwin2;

--
-- TOC entry 1850 (class 1255 OID 1440124)
-- Name: fct_imp_checker_staging_info(darwin2.staging, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info(line darwin2.staging, st_type text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  info_line staging_info ;
  record_line RECORD ;

BEGIN

  FOR info_line IN select * from staging_info WHERE staging_ref = line.id AND referenced_relation = st_type
  LOOP
      CASE info_line.referenced_relation
      WHEN 'gtu' THEN
        IF line.gtu_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.gtu_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.gtu_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.gtu_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.gtu_ref);

        END IF;
      WHEN 'taxonomy' THEN
        IF line.taxon_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.taxon_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.taxon_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.taxon_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.taxon_ref);

        END IF;
      WHEN 'expeditions' THEN
        IF line.expedition_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.expedition_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.expedition_ref);

          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.expedition_ref);

        END IF;
      WHEN 'lithostratigraphy' THEN
        IF line.litho_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.litho_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.litho_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.litho_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.litho_ref);

        END IF;
      WHEN 'lithology' THEN
        IF line.lithology_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.lithology_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.lithology_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.lithology_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.lithology_ref);

        END IF;
      WHEN 'chronostratigraphy' THEN
        IF line.chrono_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.chrono_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.chrono_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.chrono_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.chrono_ref);

        END IF;
      WHEN 'mineralogy' THEN
        IF line.mineral_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.mineral_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.mineral_ref);

          PERFORM fct_imp_checker_staging_info_properties('staging_info', info_line.id, info_line.referenced_relation, line.mineral_ref);
          PERFORM fct_imp_checker_staging_info_multimedia('staging_info', info_line.id, info_line.referenced_relation, line.mineral_ref);

        END IF;
      WHEN 'igs' THEN
        IF line.ig_ref IS NOT NULL THEN

          PERFORM fct_imp_checker_staging_info_comments('staging_info', info_line.id, info_line.referenced_relation, line.ig_ref);
          PERFORM fct_imp_checker_staging_info_ext_links('staging_info', info_line.id, info_line.referenced_relation, line.ig_ref);

          PERFORM fct_imp_checker_staging_info_insurances('staging_info', info_line.id, info_line.referenced_relation, line.ig_ref);

        END IF;
      ELSE continue ;
      END CASE ;
  END LOOP;
  DELETE FROM staging_info WHERE staging_ref = line.id ;
  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info(line darwin2.staging, st_type text) OWNER TO postgres;

--
-- TOC entry 1851 (class 1255 OID 1440125)
-- Name: fct_imp_checker_staging_info_comments(character varying, integer, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info_comments(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
UPDATE comments as mc
SET referenced_relation = $3, record_id = $4
WHERE mc.referenced_relation = $1
      AND record_id = $2
      AND NOT EXISTS(SELECT 1
                     FROM comments AS sc
                     WHERE sc.referenced_relation = $3
                           AND sc.record_id = $4
                           AND sc.notion_concerned = mc.notion_concerned
                           AND sc.comment_indexed = mc.comment_indexed
                     LIMIT 1
);
$_$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info_comments(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) OWNER TO postgres;

--
-- TOC entry 1852 (class 1255 OID 1440126)
-- Name: fct_imp_checker_staging_info_ext_links(character varying, integer, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info_ext_links(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
UPDATE ext_links as mel
SET referenced_relation = $3, record_id = $4
WHERE mel.referenced_relation = $1
  AND record_id = $2
  AND NOT EXISTS(SELECT 1
                 FROM ext_links AS sel
                 WHERE sel.referenced_relation = $3
                       AND sel.record_id = $4
                       AND sel.url = mel.url
                );
$_$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info_ext_links(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) OWNER TO postgres;

--
-- TOC entry 1853 (class 1255 OID 1440127)
-- Name: fct_imp_checker_staging_info_insurances(character varying, integer, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info_insurances(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
UPDATE insurances as mi
SET referenced_relation = $3, record_id = $4
WHERE mi.referenced_relation = $1
      AND record_id = $2
      AND NOT EXISTS(SELECT 1
                     FROM insurances AS si
                     WHERE si.referenced_relation = $3
                           AND si.record_id = $4
                           AND si.insurance_value = mi.insurance_value
                           AND si.insurance_currency = mi.insurance_currency
                           AND si.date_from_mask = mi.date_from_mask
                           AND si.date_from = mi.date_from
                           AND si.date_to_mask = mi.date_to_mask
                           AND si.date_to = mi.date_to
                           AND COALESCE(si.insurer_ref,0) = COALESCE(mi.insurer_ref,0)
);
$_$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info_insurances(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) OWNER TO postgres;

--
-- TOC entry 1854 (class 1255 OID 1440128)
-- Name: fct_imp_checker_staging_info_multimedia(character varying, integer, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info_multimedia(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
UPDATE multimedia as mm
SET referenced_relation = $3, record_id = $4
WHERE mm.referenced_relation = $1
  AND record_id = $2
  AND NOT EXISTS(SELECT 1
                 FROM multimedia AS sm
                 WHERE sm.referenced_relation = $3
                       AND sm.record_id = $4
                       AND sm.mime_type = mm.mime_type
                       AND sm.search_indexed = mm.search_indexed
                );
$_$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info_multimedia(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) OWNER TO postgres;

--
-- TOC entry 813 (class 1255 OID 1440129)
-- Name: fct_imp_checker_staging_info_properties(character varying, integer, character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_info_properties(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
UPDATE properties as mp
SET referenced_relation = $3, record_id = $4
WHERE mp.referenced_relation = $1
  AND record_id = $2
  AND NOT EXISTS(SELECT 1
                 FROM properties AS sp
                 WHERE sp.referenced_relation = $3
                       AND sp.record_id = $4
                       AND sp.property_type = mp.property_type
                       AND sp.applies_to = mp.applies_to
                       AND sp.date_from_mask = mp.date_from_mask
                       AND sp.date_from = mp.date_from
                       AND sp.date_to_mask = mp.date_to_mask
                       AND sp.date_to = mp.date_to
                       AND sp.is_quantitative = mp.is_quantitative
                       AND sp.property_unit = mp.property_unit
                       AND sp.method_indexed = mp.method_indexed
                       AND sp.lower_value = mp.lower_value
                       AND sp.upper_value = mp.upper_value
                       AND sp.property_accuracy = mp.property_accuracy
                );
$_$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_info_properties(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) OWNER TO postgres;

--
-- TOC entry 1858 (class 1255 OID 1440130)
-- Name: fct_imp_checker_staging_relationship(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_checker_staging_relationship() RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
DECLARE
  relation_line RECORD ;
  specimen_ref INTEGER ;
  id_array integer ARRAY ;
BEGIN

  FOR relation_line IN select sr.*, s.spec_ref from staging_relationship sr, staging s WHERE sr.record_id = s.id AND s.spec_ref IS NOT NULL
  LOOP
    IF relation_line.staging_related_ref IS NOT NULL THEN
      SELECT spec_ref INTO specimen_ref FROM staging where id=relation_line.staging_related_ref ;
      
      IF specimen_ref IS NULL THEN
        id_array := array_append(id_array, relation_line.record_id);
        continue ;
       
      ELSE
        INSERT INTO specimens_relationships(id, specimen_ref, relationship_type, unit_type, specimen_related_ref, institution_ref)
        SELECT nextval('specimens_relationships_id_seq'), relation_line.spec_ref, relation_line.relationship_type, unit_type, specimen_ref, institution_ref
        from staging_relationship where id=relation_line.id AND staging_related_ref=relation_line.staging_related_ref;
      END IF;
    ELSIF  relation_line.existing_specimen_ref IS NOT NULL THEN --! staging_relationship.specimen_ref => related specimens; staging.spec_ref => creates specimen

		INSERT INTO specimens_relationships(id, specimen_ref, relationship_type, unit_type, specimen_related_ref, institution_ref)
			SELECT nextval('specimens_relationships_id_seq'), relation_line.spec_ref, relation_line.relationship_type, unit_type, relation_line.existing_specimen_ref, institution_ref
			from staging_relationship where id=relation_line.id;
    ELSE
	    INSERT INTO specimens_relationships(id, specimen_ref, relationship_type, unit_type, institution_ref,taxon_ref, mineral_ref, source_name,
	    source_id, quantity, unit)
		SELECT nextval('specimens_relationships_id_seq'), relation_line.spec_ref, relation_line.relationship_type, unit_type, institution_ref,
		taxon_ref, mineral_ref, source_name, source_id, quantity, unit
		from staging_relationship where id=relation_line.id ;
    END IF ;
    DELETE FROM staging_relationship WHERE id = relation_line.id ;
  END LOOP;
  RETURN id_array;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_checker_staging_relationship() OWNER TO postgres;

--
-- TOC entry 1857 (class 1255 OID 1440131)
-- Name: fct_imp_create_catalogues_and_parents(darwin2.staging, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_imp_create_catalogues_and_parents(line darwin2.staging, catalogue_table text, prefix text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  result_nbr integer :=0;
  row_record record;
  lvl_name varchar;
  lvl_value varchar;
  lvl_id integer;

  old_parent_id integer;
  parent_id integer;
  rec_parents hstore;
  line_store hstore;
  field_name1 text;
  field_name2 text;

  tmp text;
BEGIN
  line_store := hstore(line);
  field_name1 := prefix || '_parents';
  rec_parents := line_store->field_name1;

  IF line.create_taxon AND rec_parents is not null AND rec_parents != ''::hstore  THEN
    BEGIN
      field_name2 := prefix || '_name';
      field_name1 := prefix || '_level_name';

      IF line_store->field_name2 != '' THEN
        rec_parents = rec_parents || hstore(line_store->field_name1, line_store->field_name2);
      END IF;

      FOR row_record in SELECT s.key as lvl_name, s.value as lvl_value, l.id as lvl_id
        FROM each(rec_parents) as s LEFT JOIN catalogue_levels l on s.key = l.level_sys_name
        ORDER BY l.level_order ASC
      LOOP
        old_parent_id := parent_id;
        EXECUTE 'SELECT count(*), min(t.id) as id from ' || quote_ident(catalogue_table) || ' t
          INNER JOIN catalogue_levels c on t.level_ref = c.id
          WHERE level_sys_name = ' || quote_literal(row_record.lvl_name) || ' AND
            name_indexed like fullToIndex( ' || quote_literal(row_record.lvl_value) || '  ) || ''%'' '
          INTO result_nbr, parent_id;

        IF result_nbr = 0 THEN
          IF old_parent_id IS NULL THEN
            RAISE EXCEPTION 'Unable to create taxon with no common parents';
          END IF;
          EXECUTE 'INSERT INTO ' || quote_ident(catalogue_table) || '  (name, level_ref, parent_ref) VALUES
            (' || quote_literal(row_record.lvl_value) || ', ' ||
            quote_literal(row_record.lvl_id) ||', '|| quote_literal(old_parent_id) ||') returning ID' into parent_id ;

        END IF;
      END LOOP;

    EXCEPTION WHEN OTHERS THEN
      UPDATE staging set create_taxon = false where id = line.id;
      RETURN TRUE;
    END;
  END IF;
  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_imp_create_catalogues_and_parents(line darwin2.staging, catalogue_table text, prefix text) OWNER TO postgres;

--
-- TOC entry 1859 (class 1255 OID 1440132)
-- Name: fct_importer_abcd(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_abcd(req_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  userid integer;
  rec_id integer;
  people_id integer;
  all_line RECORD ;
  line staging;
  people_line RECORD;
  maintenance_line collection_maintenance;
  staging_line staging;
  id_to_delete integer ARRAY;
  id_to_keep integer ARRAY ;
  collection collections%ROWTYPE;
  code_count integer;
  collection_ref_for_gtu_var INTEGER;
BEGIN
--2019 03 01
RAISE NOTICE 'INIT';
 SELECT collection_ref_for_gtu INTO collection_ref_for_gtu_var FROM imports where imports.id =line.import_ref;
  SELECT * INTO collection FROM collections WHERE id = (SELECT collection_ref FROM imports WHERE id = req_import_ref AND is_finished = FALSE LIMIT 1);
  select user_ref into userid from imports where id=req_import_ref ;
  PERFORM set_config('darwin.userid',userid::varchar, false) ;
  INSERT INTO classification_keywords (referenced_relation, record_id, keyword_type, keyword)
    (
      SELECT DISTINCT ON (referenced_relation, taxon_ref, keyword_type, keyword_indexed)
        'taxonomy',
        taxon_ref,
        keyword_type,
        "keyword"
      FROM staging INNER JOIN classification_keywords as ckmain ON ckmain.referenced_relation = 'staging'
                                                               AND staging.id = ckmain.record_id
                   INNER JOIN imports as i ON i.id = staging.import_ref
      WHERE import_ref = req_import_ref
        AND to_import=true
        AND status = ''::hstore
        AND i.is_finished =  FALSE
        AND NOT EXISTS (
          SELECT 1
          FROM classification_keywords
          WHERE referenced_relation = 'taxonomy'
            AND record_id = staging.taxon_ref
            AND keyword_type = ckmain.keyword_type
            AND keyword_indexed = ckmain.keyword_indexed
        )
  );
  EXECUTE 'DELETE FROM classification_keywords
           WHERE referenced_relation = ''staging''
             AND record_id IN (
                                SELECT s.id
                                FROM staging s INNER JOIN imports i ON  s.import_ref = i.id
                                WHERE import_ref = $1
                                  AND to_import=true
                                  AND status = ''''::hstore
                                  AND i.is_finished =  FALSE
                             )'
  USING req_import_ref;
  RAISE NOTICE 'BEFORE LOOP';
  FOR all_line IN SELECT * from staging s INNER JOIN imports i on  s.import_ref = i.id
  WHERE import_ref = req_import_ref AND to_import=true and status = ''::hstore AND i.is_finished =  FALSE
  LOOP
    BEGIN
      RAISE NOTICE 'IN LOOP';
      -- I know it's dumb but....
      -- @ToDo: We need to correct this to avoid reselecting from the staging table !!!
      select * into staging_line from staging where id = all_line.id;
      PERFORM fct_imp_checker_igs(staging_line, true);
      PERFORM fct_imp_checker_expeditions(staging_line, true);
     -- PERFORM fct_imp_checker_gtu(staging_line, true);
     --ftheeten 2019 03 01
      PERFORM fct_rmca_imp_checker_gtu_search_code(staging_line, collection_ref_for_gtu_var, true);

      --RE SELECT WITH UPDATE
      select * into line from staging s INNER JOIN imports i on  s.import_ref = i.id where s.id=all_line.id;

      rec_id := nextval('specimens_id_seq');
      IF line.spec_ref IS NULL THEN
        INSERT INTO specimens (id, category, collection_ref, expedition_ref, gtu_ref, taxon_ref, litho_ref, chrono_ref, lithology_ref, mineral_ref,
                               acquisition_category, acquisition_date_mask, acquisition_date, station_visible, ig_ref, type, sex, stage, state, social_status, rock_form,
                               specimen_part, complete, institution_ref, building, floor, room, row, col, shelf, container, sub_container,container_type, sub_container_type,
                               container_storage, sub_container_storage, surnumerary, specimen_status, specimen_count_min, specimen_count_max,--ftheeten 2016 06 22
		specimen_count_males_min, specimen_count_males_max,specimen_count_females_min, specimen_count_females_max,specimen_count_juveniles_min, specimen_count_juveniles_max,

                                object_name,
                                --ftheeten 2016 12 08
				gtu_from_date_mask,
			       gtu_from_date,
			       gtu_to_date_mask,
			       gtu_to_date,
				--ftheeten 2018 03 26
				import_ref

                               )
        VALUES (rec_id, COALESCE(line.category,'physical') , all_line.collection_ref, line.expedition_ref, line.gtu_ref, line.taxon_ref, line.litho_ref, line.chrono_ref,
                        line.lithology_ref, line.mineral_ref, COALESCE(line.acquisition_category,''), COALESCE(line.acquisition_date_mask,0), COALESCE(line.acquisition_date,'01/01/0001'),
                                                                                                      COALESCE(line.station_visible,true),  line.ig_ref, COALESCE(line.individual_type,'specimen'), COALESCE(line.individual_sex,'undefined'),
                                                                                                      COALESCE(line.individual_stage,'undefined'), COALESCE(line.individual_state,'not applicable'),COALESCE(line.individual_social_status,'not applicable'),
                                                                                                      COALESCE(line.individual_rock_form,'not applicable'), COALESCE(line.part,'specimen'), COALESCE(line.complete,true), 

                                                                                                      COALESCE(line.institution_ref, collection.institution_ref), line.building,
                                                                                                                                                            line.floor, line.room, line.row,  line.col, line.shelf, line.container, line.sub_container,COALESCE(line.container_type,'container'),
                                                                                                                                                                                                                                    COALESCE(line.sub_container_type, 'container'), COALESCE(line.container_storage,''),COALESCE(line.sub_container_storage,''),
                                                                                                                                                                                                                                    COALESCE(line.surnumerary,false), COALESCE(line.specimen_status,''),COALESCE(line.part_count_min,1), COALESCE(line.part_count_max,line.part_count_min,1)
         --ftheeten 2016 06 22
        ,COALESCE(line.part_count_males_min,0),COALESCE(line.part_count_males_max,0),COALESCE(line.part_count_females_min,0),COALESCE(line.part_count_females_max,0),COALESCE(line.part_count_juveniles_min,0),COALESCE(line.part_count_juveniles_max,0)
                                                                                                                                                 , line.object_name,

        --ftheeten 2016 12 08
         COALESCE(line.gtu_from_date_mask,0),
         COALESCE(line.gtu_from_date, '01/01/0001'),
         COALESCE(line.gtu_to_date_mask,0),
         COALESCE(line.gtu_to_date, '31/12/2038'),                                                                                                                                                                                                                            --ftheeten 2018 03 26
                                                                                                                                                                                                                                    req_import_ref
        );

              --multimedia
			WITH tmp_multimedia
			AS (
					SELECT  staging_multimedia.id, staging_multimedia.is_digital, staging_multimedia.type, staging_multimedia.sub_type, 
					staging_multimedia.title, staging_multimedia.description, staging_multimedia.uri, staging_multimedia.filename, staging_multimedia.creation_date, staging_multimedia.creation_date_mask, 
					staging_multimedia.mime_type, staging_multimedia.visible, staging_multimedia.publishable, staging_multimedia.extracted_info, staging_multimedia.technical_parameters,
					 staging_multimedia.external_uri,
			    staging_multimedia.internet_protocol,
			    staging_multimedia.field_observations
					FROM staging_multimedia INNER JOIN staging ON staging_multimedia.record_id=staging.id WHERE staging_multimedia.referenced_relation='staging' AND staging.import_ref=req_import_ref
			)
			INSERT INTO multimedia(
			    referenced_relation, record_id, is_digital, type, sub_type, 
			    title, description, uri, filename, creation_date, creation_date_mask, 
			    mime_type, visible, publishable, extracted_info, 
			    technical_parameters,
			    external_uri,
			    internet_protocol,
			    field_observations
			    

			    )
			SELECT  'specimens', rec_id, tmp_multimedia.is_digital, tmp_multimedia.type, tmp_multimedia.sub_type, 
				tmp_multimedia.title, tmp_multimedia.description, tmp_multimedia.uri, tmp_multimedia.filename, tmp_multimedia.creation_date, tmp_multimedia.creation_date_mask, 
				tmp_multimedia.mime_type, tmp_multimedia.visible, tmp_multimedia.publishable, tmp_multimedia.extracted_info, tmp_multimedia.technical_parameters,  tmp_multimedia.external_uri,
			    tmp_multimedia.internet_protocol,
			    tmp_multimedia.field_observations
				FROM tmp_multimedia;
       WITH tmp_multimedia2
        AS (
			SELECT  staging_multimedia.id
			FROM staging_multimedia INNER JOIN staging ON staging_multimedia.record_id=staging.id WHERE 		            staging_multimedia.referenced_relation='staging' AND staging.import_ref=req_import_ref
        )
	DELETE FROM staging_multimedia WHERE id IN (SELECT id FROM tmp_multimedia2);
	--end multimedia
		
        FOR maintenance_line IN SELECT * from collection_maintenance where referenced_relation = 'staging' AND record_id=line.id
        LOOP
          SELECT people_ref into people_id FROM staging_people where referenced_relation='collection_maintenance' AND record_id=maintenance_line.id ;
          UPDATE collection_maintenance set people_ref=people_id where id=maintenance_line.id ;
          DELETE FROM staging_people where referenced_relation='collection_maintenance' AND record_id=maintenance_line.id AND import_ref= req_import_ref;
        END LOOP;

        SELECT COUNT(*) INTO code_count FROM codes WHERE referenced_relation = 'staging' AND record_id = line.id AND code_category = 'main' AND code IS NOT NULL;
        IF code_count = 0 THEN
          PERFORM fct_after_save_add_code(all_line.collection_ref, rec_id);
        ELSE
          UPDATE codes SET referenced_relation = 'specimens',
            record_id = rec_id,
            code_prefix = CASE WHEN code_prefix IS NULL THEN collection.code_prefix ELSE code_prefix END,
            code_prefix_separator = CASE WHEN code_prefix_separator IS NULL THEN collection.code_prefix_separator ELSE code_prefix_separator END,
            code_suffix = CASE WHEN code_suffix IS NULL THEN collection.code_suffix ELSE code_suffix END,
            code_suffix_separator = CASE WHEN code_suffix_separator IS NULL THEN collection.code_suffix_separator ELSE code_suffix_separator END
          WHERE referenced_relation = 'staging'
                AND record_id = line.id
                AND code_category = 'main';
        END IF;

        UPDATE template_table_record_ref SET referenced_relation ='specimens', record_id = rec_id where referenced_relation ='staging' and record_id = line.id;
        --UPDATE collection_maintenance SET referenced_relation ='specimens', record_id = rec_id where referenced_relation ='staging' and record_id = line.id;
        -- Import identifiers whitch identification have been updated to specimen
        INSERT INTO catalogue_people(id, referenced_relation, record_id, people_type, people_sub_type, order_by, people_ref)
          SELECT nextval('catalogue_people_id_seq'), s.referenced_relation, s.record_id, s.people_type, s.people_sub_type, s.order_by, s.people_ref
          FROM staging_people s, identifications i
          WHERE i.id = s.record_id AND s.referenced_relation = 'identifications' AND i.record_id = rec_id AND i.referenced_relation = 'specimens' 
--ftheeten 2018 10 31
AND s.people_ref  IS NOT NULL
          ;
        DELETE FROM staging_people where id in (SELECT s.id FROM staging_people s, identifications i WHERE i.id = s.record_id AND s.referenced_relation = 'identifications' AND i.record_id = rec_id AND i.referenced_relation = 'specimens' ) AND import_ref= req_import_ref;
        -- Import collecting_methods
        INSERT INTO specimen_collecting_methods(id, specimen_ref, collecting_method_ref)
          SELECT nextval('specimen_collecting_methods_id_seq'), rec_id, collecting_method_ref
          FROM staging_collecting_methods
          WHERE staging_ref = line.id;

        DELETE FROM staging_collecting_methods where staging_ref = line.id;
        UPDATE staging set spec_ref=rec_id WHERE id=all_line.id;

        FOR people_line IN SELECT * from staging_people WHERE referenced_relation = 'specimens'
        LOOP
          INSERT INTO catalogue_people(id, referenced_relation, record_id, people_type, people_sub_type, order_by, people_ref)
          VALUES(nextval('catalogue_people_id_seq'),people_line.referenced_relation, people_line.record_id, people_line.people_type, people_line.people_sub_type, people_line.order_by, people_line.people_ref) ;
        END LOOP;
        DELETE FROM staging_people WHERE referenced_relation = 'specimens' AND import_ref= req_import_ref ;

  
      END IF ;
      id_to_delete = array_append(id_to_delete,all_line.id) ;
    END;
  END LOOP;
  select fct_imp_checker_staging_relationship() into id_to_keep ;
  IF id_to_keep IS NOT NULL THEN
    DELETE from staging where (id = ANY (id_to_delete)) AND NOT (id = ANY (id_to_keep)) ;
  else
    DELETE from staging where (id = ANY (id_to_delete)) ;
  END IF ;
  IF EXISTS( select id FROM  staging WHERE import_ref = req_import_ref) THEN
    UPDATE imports set state = 'pending' where id = req_import_ref;
  ELSE
    UPDATE imports set state = 'finished', is_finished = true where id = req_import_ref;
  END IF;
  RETURN true;
END;
$_$;


ALTER FUNCTION darwin2.fct_importer_abcd(req_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1856 (class 1255 OID 1440135)
-- Name: fct_importer_catalogue(integer, text, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
        var_taxonomy_name varchar;
	is_reference boolean;
	var_creation_date date;
	var_creation_date_mask integer;
	var_definition_taxonomy varchar;
	var_source_taxonomy varchar;
	var_url_website_taxonomy varchar;
	var_url_webservice_taxonomy varchar;
	last_id_metadata integer;
	taxonomy_ref integer;	 
	--ftheeten 2019 02 19
	staging_catalogue_line staging_catalogue;
	kingdom_id integer;
	
BEGIN
	SELECT imports.specimen_taxonomy_ref , taxonomy_metadata.is_reference_taxonomy into taxonomy_ref, is_reference FROM imports LEFT JOIN taxonomy_metadata
	ON imports.specimen_taxonomy_ref=taxonomy_metadata.id	 WHERE imports.id=req_import_ref;
	IF taxonomy_ref IS NULL THEN
		--raise notice 'init';
		SELECT taxonomy_name, creation_date, creation_date_mask,definition_taxonomy, is_reference_taxonomy , source_taxonomy ,
		url_website_taxonomy,  url_webservice_taxonomy INTO var_taxonomy_name , var_creation_date, var_creation_date_mask , var_definition_taxonomy, is_reference, var_source_taxonomy,  var_url_website_taxonomy , var_url_webservice_taxonomy FROM imports WHERE id=req_import_ref;
		INSERT INTO taxonomy_metadata (taxonomy_name, creation_date, creation_date_mask, import_ref, 
	       definition, is_reference_taxonomy, source, url_website, url_webservice) VALUES (var_taxonomy_name, var_creation_date, var_creation_date_mask, req_import_ref, var_definition_taxonomy, is_reference, var_source_taxonomy, var_url_website_taxonomy, var_url_webservice_taxonomy) RETURNING id INTO last_id_metadata;
       ELSE
		last_id_metadata:=taxonomy_ref;
       END IF;

	
	IF is_reference = true THEN
		raise notice 'ref';
		raise notice 'import = %', req_import_ref;
		raise notice 'metadata %', last_id_metadata;
		--return fct_importer_catalogue_reference_taxonomy(req_import_ref , last_id_metadata, referenced_relation, exclude_invalid_entries   );
		return fct_importer_catalogue_non_reference_taxonomy(req_import_ref , last_id_metadata, referenced_relation, exclude_invalid_entries   );
	ELSE	
		raise notice 'non ref';
		raise notice 'import = %', req_import_ref;
		raise notice 'metadata %', last_id_metadata;
		--return fct_rmca_handle_non_reference_taxonomies(req_import_ref , last_id_metadata, exclude_invalid_entries   );
		return fct_importer_catalogue_non_reference_taxonomy(req_import_ref , last_id_metadata, referenced_relation, exclude_invalid_entries   );
		/*raise notice 'test kingdom';
                FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue where import_ref=req_import_ref and  parent_ref is null   and  parent_ref_internal is null  and level_ref<=34
			LOOP
				IF staging_catalogue_line.level_ref>2 THEN
					raise notice 'force kingdom';
					INSERT INTO darwin2.staging_catalogue(
						import_ref, name , level_ref,
						parent_ref, parent_ref_internal, catalogue_ref, 
						parent_updated,	is_reference_taxonomy, source_taxonomy, 
						name_cluster, imported)
						VALUES (
						staging_catalogue_line.import_ref, (SELECT taxonomy.name FROM imports LEFT JOIN taxonomy ON imports.taxonomy_kingdom=taxonomy.id::varchar where imports.id= staging_catalogue_line.import_ref LIMIT 1), 2
						, NULL, NULL, NULL, 
						false, 	staging_catalogue_line.is_reference_taxonomy, staging_catalogue_line.source_taxonomy, 
						staging_catalogue_line.name_cluster, false) RETURNING id into kingdom_id;
					UPDATE staging_catalogue SET parent_ref = kingdom_id  , parent_ref_internal= kingdom_id WHERE id=staging_catalogue_line.id;
				END IF;
			END LOOP;
	        RAISE NOTICE '2nd pass';
		return fct_rmca_handle_non_reference_taxonomies(req_import_ref , last_id_metadata, exclude_invalid_entries   );*/
	
	END IF;
END;
$$;


ALTER FUNCTION darwin2.fct_importer_catalogue(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1855 (class 1255 OID 1440136)
-- Name: fct_importer_catalogue_backup_pad(integer, text, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_backup_pad(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    staging_catalogue_line staging_catalogue;
    where_clause_complement_1 text := ' ';
    where_clause_complement_2 text := ' ';
    where_clause_complement_3 text := ' ';
    where_clause_complement_3_bis text := ' ';
    where_clause_complement_4 text := ' ';
    where_clause_complement_5 text := ' ';
    where_clause_exclude_invalid text := ' ';
    recCatalogue RECORD;
    parent_path template_classifications.path%TYPE;
    parentRef staging_catalogue.parent_ref%TYPE;
    parent_level catalogue_levels.id%TYPE;
    catalogueRef staging_catalogue.catalogue_ref%TYPE;
    levelRef staging_catalogue.level_ref%TYPE;
    error_msg TEXT := '';
    children_move_forward BOOLEAN := FALSE;
    level_naming TEXT;
    tempSQL TEXT;

    --ftheeten 2018 09 24
    taxonomy_ref INTEGER:=NULL;
  BEGIN

    
    --ftheeten 2018 09 24
    IF referenced_relation ='taxonomy' THEN
	SELECT specimen_taxonomy_ref INTO taxonomy_ref FROM imports WHERE id= req_import_ref;	
    END IF;
    --ftheeten 2018 09 24 end
    -- Browse all staging_catalogue lines
    FOR staging_catalogue_line IN SELECT * from staging_catalogue WHERE import_ref = req_import_ref ORDER BY level_ref, fullToIndex(name)
    LOOP
      IF trim(touniquestr(staging_catalogue_line.name)) = '' THEN
        RAISE EXCEPTION E'Case 0, Could not import this file, % is not a valid name.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
      END IF;
      SELECT parent_ref, catalogue_ref, level_ref INTO parentRef, catalogueRef, levelRef FROM staging_catalogue WHERE id = staging_catalogue_line.id;
      IF catalogueRef IS NULL THEN
        -- Check if we're at a top taxonomic entry in the template/staging_catalogue line
        IF parentRef IS NULL THEN
          -- If top entry, we have not parent defined and we therefore have no other filtering criteria
          where_clause_complement_1 := ' ';
          where_clause_complement_2 := ' ';
          where_clause_complement_3 := ' ';
          where_clause_complement_3_bis := ' ';
        ELSE
          -- If a child entry, we've got to use the informations from the already matched or created parent
          where_clause_complement_1 := '  AND tax.parent_ref = ' || parentRef || ' ';
          where_clause_complement_2 := '  AND tax.parent_ref != ' || parentRef || ' ';
          -- Select the path from parent catalogue unit
          EXECUTE 'SELECT path, level_ref FROM ' || quote_ident(referenced_relation) || ' WHERE id = $1'
          INTO parent_path, parent_level
          USING parentRef;
          where_clause_complement_3 := '  AND position (' || quote_literal(parent_path) || ' IN tax.path) = 1 ';
          where_clause_complement_3_bis := '  AND (select t2.level_ref from ' || quote_ident(referenced_relation) || ' as t2 where t2.id = tax.parent_ref) > ' || parent_level || ' ';
        END IF;
        where_clause_complement_4 := '  AND left(substring(tax.name from length(trim(' ||
                                     quote_literal(staging_catalogue_line.name) || '))+1),1) IN (' ||
                                     quote_literal(' ') || ', ' || quote_literal(',') || ') ';
        where_clause_complement_5 := '  AND left(substring(' || quote_literal(staging_catalogue_line.name) ||
                                     ' from length(trim(tax.name))+1),1) IN (' ||
                                     quote_literal(' ') || ', ' || quote_literal(',') || ') ';
        -- Set the invalid where clause if asked
        IF exclude_invalid_entries = TRUE THEN
          where_clause_exclude_invalid := '  AND tax.status != ' || quote_literal('invalid') || ' ';
        END IF;
        -- Check a perfect match entry
        -- Take care here, a limit 1 has been set, we only kept the EXIT in case the limit would be accidently removed
        FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                    'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                    'WHERE tax.level_ref = $1 ' ||
                                    '  AND tax.name_indexed = fullToIndex( $2 ) ' ||
                                    where_clause_exclude_invalid ||
                                    where_clause_complement_1 ||
                                    'LIMIT 1;'
        USING staging_catalogue_line.level_ref, staging_catalogue_line.name
        LOOP
          -- If more than one entry found, we set an error...
          IF recCatalogue.total_count > 1 THEN
            RAISE EXCEPTION E'Case 1, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
          END IF;
          EXIT;
        END LOOP;
        -- No perfect match occured with the same parent (if it applies - doesn't apply for top taxonomic entry in template)
        IF NOT FOUND THEN
          -- For this step, as it depends upon the existence of a parent, we test well we are on that case
          -- It concerns a perfect match with parents differents but with a path common
          -- That means, if only one entry exists, that they are the same but with a more detailed hierarchy in the
          -- already existing entry
          IF parentRef IS NOT NULL THEN
            FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                        'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                        'WHERE tax.level_ref = $1 ' ||
                                        '  AND tax.name_indexed = fullToIndex( $2 ) ' ||
                                        where_clause_exclude_invalid ||
                                        where_clause_complement_2 ||
                                        where_clause_complement_3 ||
                                        where_clause_complement_3_bis ||
                                        'LIMIT 1;'
            USING staging_catalogue_line.level_ref, staging_catalogue_line.name
            LOOP
              -- If for this kind of perfect match with different parent but kind of same path start, we get multiple
              -- possibilities, then fail
              IF recCatalogue.total_count > 1 THEN
                RAISE EXCEPTION E'Case 2, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
              END IF;
              EXIT;
            END LOOP;
            -- If it gave no result, we've got to move forward and try the next option
            IF NOT FOUND THEN
              children_move_forward := TRUE;
            END IF;
          END IF;
          IF parentRef IS NULL OR children_move_forward = TRUE THEN
            -- This next option try a fuzzy match, with, if it's a child entry in the template, a verification that
            -- the parent specified in the template and the path of the potential corresponding entry in catalogue
            -- have a common path...
            tempSQL := 'SELECT COUNT(id) OVER () as total_count, * ' ||
                       'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                       'WHERE tax.level_ref = $1 ' ||
                       '  AND tax.name_indexed LIKE fullToIndex( $2 ) || ' || quote_literal('%') ||
                       where_clause_exclude_invalid ||
                       where_clause_complement_3 ||
                       where_clause_complement_4;
            IF parentRef IS NOT NULL THEN
              tempSQL := tempSQL || where_clause_complement_1;
            END IF;
            tempSQL := tempSQL || 'LIMIT 1;';
            FOR recCatalogue IN EXECUTE tempSQL
            USING staging_catalogue_line.level_ref, staging_catalogue_line.name
            LOOP
              -- If we're on the case of a top entry in the template, we cannot afford the problem of multiple entries
              IF recCatalogue.total_count > 1 THEN
                RAISE EXCEPTION E'Case 3, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
              END IF;
              EXIT;
            END LOOP;
            -- Last chance is to try to find if the entry in DaRWIN shouldn't be completed
            -- This entry should be "alone" of its kind - check the NOT EXIST clause
            IF NOT FOUND THEN
              FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                          'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                          'WHERE tax.level_ref = $1 ' ||
                                          '  AND position(tax.name_indexed IN fullToIndex( $2 )) = 1 ' ||
                                          where_clause_exclude_invalid ||
                                          '  AND NOT EXISTS (SELECT 1 ' ||
                                          '                  FROM ' || quote_ident(referenced_relation) || ' as stax ' ||
                                          '                  WHERE stax.id != tax.id ' ||
                                          '                  AND stax.level_ref = tax.level_ref ' ||
                                          '                  AND stax.path = tax.path ' ||
                                          '                  AND stax.name_indexed LIKE tax.name_indexed || ' || quote_literal('%') ||
                                          '                  LIMIT 1 ' ||
                                          '                 ) ' ||
                                          where_clause_complement_3 ||
                                          where_clause_complement_5 ||
                                          'LIMIT 1;'
              USING staging_catalogue_line.level_ref, staging_catalogue_line.name
              LOOP
                IF recCatalogue.total_count > 1 THEN
                  RAISE EXCEPTION E'Case 4, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
                ELSE
                  -- If only one entry is found, we can replace the name of this entry
                  EXECUTE 'UPDATE ' || quote_ident(referenced_relation) || ' ' ||
                          'SET name = ' || quote_literal(staging_catalogue_line.name) || ' ' ||
                          'WHERE id = ' || recCatalogue.id || ';';
                END IF;
                EXIT;
              END LOOP;
              IF NOT FOUND THEN
                IF parentRef IS NOT NULL THEN
		  --ftheeten 2018 04 29 
	          IF referenced_relation ='taxonomy' THEN
			--ftheeten 2018 04 29 
			EXECUTE 'INSERT INTO taxonomy (id,name,level_ref,parent_ref, metadata_ref , import_ref) ' ||
				  'VALUES(DEFAULT,$1,$2,$3, $4, $5) ' ||
				  'RETURNING *;'
			  INTO recCatalogue
			  USING staging_catalogue_line.name,staging_catalogue_line.level_ref,parentRef, taxonomy_ref, req_import_ref;
	          ELSE
			  EXECUTE 'INSERT INTO ' || quote_ident(referenced_relation) || '(id,name,level_ref,parent_ref) ' ||
				  'VALUES(DEFAULT,$1,$2,$3) ' ||
				  'RETURNING *;'
			  INTO recCatalogue
			  USING staging_catalogue_line.name,staging_catalogue_line.level_ref,parentRef;
		  END IF;--ftheeten 2018 04 29 
                -- tell to update the staging line to set the catalogue_ref with the id found
                ELSE
                  SELECT level_name INTO level_naming FROM catalogue_levels WHERE id = staging_catalogue_line.level_ref;
                  RAISE EXCEPTION 'Could not import this file, % (level %) does not exist in DaRWIN and cannot be attached, correct your file or create this % manually', staging_catalogue_line.name,  level_naming, quote_ident(referenced_relation);
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
        -- update the staging line to set the catalogue_ref with the id found
        -- update the staging children lines
        WITH staging_catalogue_updated(updated_id/*, catalogue_ref_updated*/) AS (
          UPDATE staging_catalogue as sc
          SET catalogue_ref = recCatalogue.id
          WHERE sc.import_ref = staging_catalogue_line.import_ref
                AND sc.name = staging_catalogue_line.name
                AND sc.level_ref = staging_catalogue_line.level_ref
          RETURNING id
        )
        UPDATE staging_catalogue as msc
        SET parent_ref = recCatalogue.id,
          parent_updated = TRUE
        WHERE msc.import_ref = staging_catalogue_line.import_ref
              AND msc.parent_ref IN (
          SELECT updated_id FROM staging_catalogue_updated
        )
              AND parent_updated = FALSE;
      END IF;
      children_move_forward := FALSE;
    END LOOP;
    RETURN TRUE;
    EXCEPTION WHEN OTHERS THEN
    IF SQLERRM = 'This record does not follow the level hierarchy' THEN
      SELECT level_name INTO level_naming FROM catalogue_levels WHERE id = staging_catalogue_line.level_ref;
      RAISE EXCEPTION E'Could not import this file, % (level %) does not follow the accepted level hierarchy in DaRWIN an cannot be attached nor created.\nPlease correct your file.\nStaging Catalogue Line: %', staging_catalogue_line.name,  level_naming, staging_catalogue_line.id;
    ELSE
      RAISE EXCEPTION '%', SQLERRM;
    END IF;
  END;
  $_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_backup_pad(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1862 (class 1255 OID 1440139)
-- Name: fct_importer_catalogue_non_reference_taxonomy(integer, integer, text, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
	returned BOOLEAN;
	check_duplicates_hierarchies RECORD;
	duplicate_hierarchies_msg varchar;

  BEGIN	
  raise notice 'test';
	IF referenced_relation= 'taxonomy' THEN
		raise notice '0';
		
		--PERFORM fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref, true, false, not exclude_invalid_entries);
		--SELECT fct_importer_catalogue_reference_taxonomy_logic_reference INTO returned FROM  fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref , var_metadata_ref ,  exclude_invalid_entries );
		PERFORM fct_rmca_document_taxonomy_staging_darwin_non_reference(req_import_ref, var_metadata_ref, true, false, not exclude_invalid_entries);
		SELECT fct_importer_catalogue_reference_taxonomy_logic_non_reference INTO returned FROM  fct_importer_catalogue_reference_taxonomy_logic_non_reference(req_import_ref , var_metadata_ref ,  exclude_invalid_entries );
	ELSE
		SELECT fct_importer_catalogue_reference_taxonomy_rmca_non_taxo INTO returned  FROM fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref , var_metadata_ref , referenced_relation , exclude_invalid_entries );
		
	END IF;

	 RETURN returned;
  END;
  $$;


ALTER FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1863 (class 1255 OID 1440140)
-- Name: fct_importer_catalogue_non_reference_taxonomy_add_author(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author(var_staging_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	var_catalogue_ref INTEGER;
	var_name varchar;
	var_name_taxo varchar;
	var_level_ref integer;
	var_taxonomy_ref integer;
	var_cpts integer[];
	var_names varchar[];
	var_names2 varchar[];
	returned INTEGER;
		
BEGIN
	returned :=NULL;
	SELECT name, specimen_taxonomy_ref, level_ref, catalogue_Ref INTO var_name, var_taxonomy_ref , var_level_ref,var_catalogue_ref  FROM staging_catalogue LEFT JOIN imports ON staging_catalogue.import_ref=imports.id  WHERE staging_catalogue.id=var_staging_id;
	
	IF var_taxonomy_ref IS NOT NULL AND var_catalogue_ref IS NULL AND var_level_ref>=41 THEN
		SELECT array_agg(id),array_agg(name) INTO var_cpts,var_names FROM taxonomy WHERE metadata_ref=var_taxonomy_ref AND level_ref=var_level_ref AND name ~ 
		('^('|| replace(replace(replace(var_name,')','\)'), '(','\('),'.','\.')||')($|\s)');
		IF ARRAY_LENGTH(var_cpts,1) =1 THEN
			returned:=var_cpts[1];
			var_name_taxo:=var_names[1];
            raise notice '%', var_name_taxo;
			SELECT * INTO var_names2 FROM fct_rmca_taxonomy_split_name_author(var_name_taxo, var_level_ref);
			 raise notice '%', var_names2;
            IF ARRAY_LENGTH(var_names2,1)=2 THEN
            	raise notice 'go';
				IF TRIM(var_names2[1])=TRIM(var_name) THEN
                	raise notice 'update';
					UPDATE staging_catalogue SET name=var_name_taxo WHERE id=var_staging_id;
				END IF;
			END IF;
			
				
		END IF;
	END IF;
	
	RETURN returned;
END;
$_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author(var_staging_id integer) OWNER TO darwin2;

--
-- TOC entry 1860 (class 1255 OID 1440141)
-- Name: fct_importer_catalogue_non_reference_taxonomy_add_author_file(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_file(var_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

DECLARE

	returned boolean;
	
		
BEGIN
	returned:=FALSE;
	WITH name_no_author 
		AS
		(SELECT staging_catalogue.id, 
		keyword as author_year, 
		TRIM(REPLACE(name, keyword, '')) AS name_no_author,

		TRIM(REPLACE(name, keyword, ''))||' '||keyword as name_author
		FROM staging_catalogue LEFT JOIN classification_keywords
							ON classification_keywords.record_id=staging_catalogue.id
							AND referenced_relation='staging_catalogue' 
							WHERE					
							 keyword_type= 'AuthorTeamParenthesisAndYear' 
			     AND staging_catalogue.import_ref=var_import_ref
			     AND keyword ~ '.*[A-Z].*' and coalesce(TRIM(REPLACE(name, keyword, '')),'')   !=''           
		)
		UPDATE staging_catalogue 
		SET name=name_author,
		import_exception='duplicate_name_without_author'
		FROM name_no_author
		WHERE 
		name=name_no_author.name_no_author
		AND staging_catalogue.id !=name_no_author.id
		AND import_ref=var_import_ref;
     returned:=true;
     RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_file(var_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1861 (class 1255 OID 1440142)
-- Name: fct_importer_catalogue_non_reference_taxonomy_add_author_loop(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_loop(var_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned boolean;

BEGIN
	returned:=FALSE;
	PERFORM fct_importer_catalogue_non_reference_taxonomy_add_author_file(var_import_ref) ;
	PERFORM fct_importer_catalogue_non_reference_taxonomy_add_author(id) FROM staging_catalogue WHERE import_ref=var_import_ref AND level_ref>=41;
	returned:=TRUE;
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_loop(var_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1864 (class 1255 OID 1440143)
-- Name: fct_importer_catalogue_reference_taxonomy(integer, integer, text, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
	returned BOOLEAN;
	check_duplicates_hierarchies RECORD;
	duplicate_hierarchies_msg varchar;

  BEGIN	
  raise notice 'test';
	IF referenced_relation= 'taxonomy' THEN
		raise notice '0';
		
		PERFORM fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref, true, false, not exclude_invalid_entries);
		SELECT fct_importer_catalogue_reference_taxonomy_logic_reference INTO returned FROM  fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref , var_metadata_ref ,  exclude_invalid_entries );
	ELSE
		SELECT fct_importer_catalogue_reference_taxonomy_rmca_non_taxo INTO returned  FROM fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref , var_metadata_ref , referenced_relation , exclude_invalid_entries );
	END IF;

	 RETURN returned;
  END;
  $$;


ALTER FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 814 (class 1255 OID 1440144)
-- Name: fct_importer_catalogue_reference_taxonomy_logic(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
  DECLARE
	returned boolean;
	i integer;
	array_levels integer[];
	current_level integer;
	current_names RECORD;
	
	--taxo_path varchar[];
	reference_kingdom int;
	recCatalogue RECORD;
	line_created boolean;
	existing_taxon integer;
	taxon_to_copy integer;
	parent_to_update integer;

	name_parent varchar;
	--updated_id integer;
	is_updated boolean;


  BEGIN	
	PERFORM setval('taxonomy_id_seq', (SELECT MAX(id)+1 FROM taxonomy ), false);
	returned :=FALSE;

	SELECT taxonomy_kingdom INTO reference_kingdom FROM imports where id=req_import_ref LIMIT 1;
	SELECT  array_agg(distinct level_ref order by level_ref) INTO array_levels FROM  staging_catalogue WHERE  import_ref=req_import_ref ;


	FOR i in 1..ARRAY_LENGTH(array_levels, 1)
	LOOP
		current_level := array_levels[i];
		RAISE NOTICE '%', current_level;
		FOR  current_names in SELECT DISTINCT min(id) as min_id, min(parent_ref) as min_parent_ref, name,  fulltoindex(name,FALSE) as name_indexed FROM  staging_catalogue WHERE  import_ref=req_import_ref and level_ref = current_level --AND catalogue_ref IS NULL --AND parent_updated=false 
		GROUP BY name ORDER BY name_indexed
		LOOP
			line_created:=FALSE;
			raise notice '%', current_names.name;
			--SELECT fct_rmca_taxo_staging_path_in_reference INTO taxo_path FROM fct_rmca_taxo_staging_path_in_reference(current_names.min_id);
			--raise notice '%', taxo_path;
			IF exclude_invalid_entries =FALSE THEN
				SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.is_reference_taxonomy = TRUE and name_indexed=current_names.name_indexed and level_ref=current_level;
			ELSE
				SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.is_reference_taxonomy = TRUE and name_indexed=current_names.name_indexed and level_ref=current_level  AND status != 'invalid' ;
			END IF;
			IF existing_taxon IS NULL THEN
				--create higher of taxonomy
				IF current_level = 4 AND i=1 THEN 
					--raise notice 'init';
					parent_to_update:=reference_kingdom;
				ELSE
					SELECT parent_updated into is_updated FROM staging_catalogue WHERE id=current_names.min_id;
					--raise notice 'min parent ref %',current_names.min_parent_ref;
					IF is_updated IS TRUE THEN
						--raise notice 'found updated';
						parent_to_update:=current_names.min_parent_ref;
					ELSE
						SELECT catalogue_ref, name INTO parent_to_update, name_parent FROM staging_catalogue WHERE id=current_names.min_parent_ref;
					END IF;
					--parent_to_update:=current_names.min_parent_ref;
				END IF;
				--raise notice 'parent_to_update %',parent_to_update;
				IF parent_to_update IS NOT NULL THEN
					EXECUTE 'INSERT INTO taxonomy  (id,name,level_ref,parent_ref, metadata_ref, import_ref) ' ||
						  'VALUES(DEFAULT,$1,$2,$3,$4,$5) ' ||
						  'RETURNING *;'
						INTO recCatalogue
						USING current_names.name,current_level , parent_to_update , var_metadata_ref, req_import_ref;
					line_created:=TRUE;
						  --2019 02 10
						UPDATE staging_catalogue set imported =true WHERE id=current_names.min_id;


				END IF;	
				--in principle we'll be never in this case as the previosu row of the same staging record shoudl have created the taxonomy			
				
			ELSE
				
				taxon_to_copy:=existing_taxon;
				line_created:=TRUE;

				
				
			END IF;
			IF line_created=TRUE THEN
				--raise notice 'taxon_to_copy %',taxon_to_copy;
				--raise notice 'UPDATE staging';
				WITH staging_catalogue_updated(updated_id) AS (
				  UPDATE staging_catalogue as sc
				  SET catalogue_ref = taxon_to_copy
				  WHERE sc.import_ref = req_import_ref
					AND sc.name = current_names.name
					AND sc.level_ref = current_level
				  RETURNING id
				)
				UPDATE staging_catalogue as msc
				SET parent_ref = taxon_to_copy,
				  parent_updated = TRUE
				WHERE msc.import_ref = req_import_ref
				      AND msc.parent_ref IN (
				  SELECT updated_id FROM staging_catalogue_updated
				)
				      AND parent_updated = FALSE;
			      END IF;

		END LOOP;
	END LOOP;

	returned =TRUE;
	 RETURN returned;
  END;
  $_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1865 (class 1255 OID 1440145)
-- Name: fct_importer_catalogue_reference_taxonomy_logic_non_reference(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_non_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
  DECLARE
returned boolean;
i integer;
array_levels integer[];
current_level integer;
current_names RECORD;

--taxo_path varchar[];
reference_kingdom int;
recCatalogue RECORD;
line_created boolean;
existing_taxon integer;
taxon_to_copy integer;
parent_to_update integer;

name_parent varchar;
--updated_id integer;
is_updated boolean;
--_c text;


  BEGIN
PERFORM setval('taxonomy_id_seq', (SELECT MAX(id)+1 FROM taxonomy ), false);
returned :=FALSE;
PERFORM  fct_importer_catalogue_non_reference_taxonomy_add_author_loop(req_import_ref);
SELECT taxonomy_kingdom INTO reference_kingdom FROM imports where id=req_import_ref LIMIT 1;
SELECT  array_agg(distinct level_ref order by level_ref) INTO array_levels FROM  staging_catalogue WHERE  import_ref=req_import_ref ;


FOR i in 1..ARRAY_LENGTH(array_levels, 1)
LOOP
 current_level := array_levels[i];
 RAISE NOTICE '%', current_level;
 FOR  current_names in SELECT DISTINCT min(id) as min_id, min(parent_ref) as min_parent_ref, name,  fulltoindex(name,FALSE) as name_indexed FROM  staging_catalogue WHERE  import_ref=req_import_ref and level_ref = current_level AND
 name_cluster IN (select distinct s2.name_cluster FROM staging_catalogue s2
 WHERE s2.import_exception= 'taxon_to_be_created' AND s2.import_ref=req_import_ref) --AND catalogue_ref IS NULL --AND parent_updated=false
 GROUP BY name ORDER BY name_indexed
 LOOP
  BEGIN
 
   line_created:=FALSE;
   raise notice 'NAME TO IMPORT %', current_names.name;
   --SELECT fct_rmca_taxo_staging_path_in_reference INTO taxo_path FROM fct_rmca_taxo_staging_path_in_reference(current_names.min_id);
   --raise notice '%', taxo_path;
   IF exclude_invalid_entries =FALSE THEN
   RAISE NOTICE 'INVALID_INCLUDED';
    SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.id = var_metadata_ref and name_indexed=current_names.name_indexed and level_ref=current_level;
   ELSE
   RAISE NOTICE 'EXCLUDE_INVALID';
    SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.id = var_metadata_ref and name_indexed=current_names.name_indexed and level_ref=current_level  AND status != 'invalid' ;
   END IF;
   IF existing_taxon IS NULL THEN
    RAISE NOTICE 'CREATE';
    --create higher of taxonomy
    IF current_level = 4 AND i=1 THEN
     --raise notice 'init';
     parent_to_update:=reference_kingdom;
    ELSE
     SELECT parent_updated into is_updated FROM staging_catalogue WHERE id=current_names.min_id;
     --raise notice 'min parent ref %',current_names.min_parent_ref;
     IF is_updated IS TRUE THEN
      raise notice 'IS_UPDATED';
      parent_to_update:=current_names.min_parent_ref;
     ELSE
      raise notice 'IS_NOT_UPDATED';
      SELECT catalogue_ref, name INTO parent_to_update, name_parent FROM staging_catalogue WHERE id=current_names.min_parent_ref;
     END IF;
     --parent_to_update:=current_names.min_parent_ref;
     --SELECT catalogue_ref, name INTO parent_to_update, name_parent FROM staging_catalogue WHERE id= (SELECT parent_ref_internal FROM staging_catalogue WHERE
     -- id = current_names.min_id LIMIT 1);
    END IF;
    raise notice 'parent_to_update %',parent_to_update;
    IF parent_to_update IS NOT NULL THEN
     RAISE NOTICE 'INSERT INTO taxonomy  (id,name,level_ref,parent_ref, metadata_ref, import_ref) VALUES(DEFAULT,''%'',%,%,%,%) ', current_names.name,current_level , parent_to_update , var_metadata_ref, req_import_ref;
     EXECUTE 'INSERT INTO taxonomy  (id,name,level_ref,parent_ref, metadata_ref, import_ref) ' ||
        'VALUES(DEFAULT,$1,$2,$3,$4,$5) ' ||
        'RETURNING *;'
      INTO recCatalogue
      USING current_names.name,current_level , parent_to_update , var_metadata_ref, req_import_ref;
     --2019 03 21
     taxon_to_copy:=recCatalogue.id;
     line_created:=TRUE;
        --2019 02 10
      UPDATE staging_catalogue set imported =true , import_exception='imported_taxon' WHERE id=current_names.min_id;

    ELSE
     UPDATE staging_catalogue set imported =false , import_exception='taxon_to_be_created_without_suitable_parent' WHERE id=current_names.min_id;
    END IF;
    --in principle we'll be never in this case as the previous row of the same staging record shoudl have created the taxonomy  
   
   ELSE
    RAISE NOTICE 'EXISTS';
    taxon_to_copy:=existing_taxon;
    line_created:=TRUE;

   
   
   END IF;
   IF line_created=TRUE THEN
    --raise notice 'taxon_to_copy %',taxon_to_copy;
    --raise notice 'UPDATE staging';
    WITH staging_catalogue_updated(updated_id) AS (
      UPDATE staging_catalogue as sc
      SET catalogue_ref = taxon_to_copy
      WHERE sc.import_ref = req_import_ref
     AND sc.name = current_names.name
     AND sc.level_ref = current_level
      RETURNING id
    )
    UPDATE staging_catalogue as msc
    SET parent_ref = taxon_to_copy,
      parent_updated = TRUE
    WHERE msc.import_ref = req_import_ref
          AND msc.parent_ref IN (
      SELECT updated_id FROM staging_catalogue_updated
    )
    AND parent_updated = FALSE;
   END IF;
  EXCEPTION WHEN OTHERS THEN
  --RAISE NOTICE 'EXCEPTION';
 -- RAISE NOTICE '% %', SQLERRM, SQLSTATE;

  UPDATE staging_catalogue set import_exception= SQLERRM WHERE id=current_names.min_id;
  UPDATE imports SET state='pending', errors_in_import=SQLERRM  WHERE id=req_import_ref;
  --RETURN FALSE;
  END;
         

 END LOOP;
END LOOP;

returned =TRUE;
 RETURN returned;

  END;
  $_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_non_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1867 (class 1255 OID 1440148)
-- Name: fct_importer_catalogue_reference_taxonomy_logic_reference(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
  DECLARE
	returned boolean;
	i integer;
	array_levels integer[];
	current_level integer;
	current_names RECORD;
	
	--taxo_path varchar[];
	reference_kingdom int;
	recCatalogue RECORD;
	line_created boolean;
	existing_taxon integer;
	taxon_to_copy integer;
	parent_to_update integer;

	name_parent varchar;
	--updated_id integer;
	is_updated boolean;
	_c text;


  BEGIN	
	PERFORM setval('taxonomy_id_seq', (SELECT MAX(id)+1 FROM taxonomy ), false);
	returned :=FALSE;
	PERFORM  fct_importer_catalogue_non_reference_taxonomy_add_author_loop(req_import_ref);
	SELECT taxonomy_kingdom INTO reference_kingdom FROM imports where id=req_import_ref LIMIT 1;
	SELECT  array_agg(distinct level_ref order by level_ref) INTO array_levels FROM  staging_catalogue WHERE  import_ref=req_import_ref ;


	FOR i in 1..ARRAY_LENGTH(array_levels, 1)
	LOOP
		current_level := array_levels[i];
		RAISE NOTICE '%', current_level;
		FOR  current_names in SELECT DISTINCT min(id) as min_id, min(parent_ref) as min_parent_ref, name,  fulltoindex(name,FALSE) as name_indexed FROM  staging_catalogue WHERE  import_ref=req_import_ref and level_ref = current_level AND 
		name_cluster IN (select distinct s2.name_cluster FROM staging_catalogue s2 
		WHERE s2.import_exception= 'taxon_to_be_created' AND s2.import_ref=req_import_ref) --AND catalogue_ref IS NULL --AND parent_updated=false 
		GROUP BY name ORDER BY name_indexed
		LOOP
			BEGIN
			
				line_created:=FALSE;
				raise notice 'NAME TO IMPORT %', current_names.name;
				--SELECT fct_rmca_taxo_staging_path_in_reference INTO taxo_path FROM fct_rmca_taxo_staging_path_in_reference(current_names.min_id);
				--raise notice '%', taxo_path;
				IF exclude_invalid_entries =FALSE THEN
				RAISE NOTICE 'INVALID_INCLUDED';
					SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.is_reference_taxonomy = TRUE and name_indexed=current_names.name_indexed and level_ref=current_level;
				ELSE
				RAISE NOTICE 'EXCLUDE_INVALID';
					SELECT taxonomy.id INTO existing_taxon FROM taxonomy INNER JOIN taxonomy_metadata ON metadata_ref=taxonomy_metadata.id WHERE  taxonomy_metadata.is_reference_taxonomy = TRUE and name_indexed=current_names.name_indexed and level_ref=current_level  AND status != 'invalid' ;
				END IF;
				IF existing_taxon IS NULL THEN
					RAISE NOTICE 'CREATE';
					--create higher of taxonomy
					IF current_level = 4 AND i=1 THEN 
						--raise notice 'init';
						parent_to_update:=reference_kingdom;
					ELSE
						SELECT parent_updated into is_updated FROM staging_catalogue WHERE id=current_names.min_id;
						--raise notice 'min parent ref %',current_names.min_parent_ref;
						IF is_updated IS TRUE THEN
							raise notice 'IS_UPDATED';
							parent_to_update:=current_names.min_parent_ref;
						ELSE
							raise notice 'IS_NOT_UPDATED';
							SELECT catalogue_ref, name INTO parent_to_update, name_parent FROM staging_catalogue WHERE id=current_names.min_parent_ref;
						END IF;
						--parent_to_update:=current_names.min_parent_ref;
						--SELECT catalogue_ref, name INTO parent_to_update, name_parent FROM staging_catalogue WHERE id= (SELECT parent_ref_internal FROM staging_catalogue WHERE
						--	id = current_names.min_id LIMIT 1);
					END IF;
					raise notice 'parent_to_update %',parent_to_update;
					IF parent_to_update IS NOT NULL THEN
						RAISE NOTICE 'INSERT INTO taxonomy  (id,name,level_ref,parent_ref, metadata_ref, import_ref) VALUES(DEFAULT,''%'',%,%,%,%) ', current_names.name,current_level , parent_to_update , var_metadata_ref, req_import_ref; 
						EXECUTE 'INSERT INTO taxonomy  (id,name,level_ref,parent_ref, metadata_ref, import_ref) ' ||
							  'VALUES(DEFAULT,$1,$2,$3,$4,$5) ' ||
							  'RETURNING *;'
							INTO recCatalogue
							USING current_names.name,current_level , parent_to_update , var_metadata_ref, req_import_ref;
						--2019 03 21
						taxon_to_copy:=recCatalogue.id;
						line_created:=TRUE;
							  --2019 02 10
							UPDATE staging_catalogue set imported =true , import_exception='imported_taxon' WHERE id=current_names.min_id;

					ELSE
						UPDATE staging_catalogue set imported =false , import_exception='taxon_to_be_created_without_suitable_parent' WHERE id=current_names.min_id;
					END IF;	
					--in principle we'll be never in this case as the previous row of the same staging record shoudl have created the taxonomy			
					
				ELSE
					RAISE NOTICE 'EXISTS';
					taxon_to_copy:=existing_taxon;
					line_created:=TRUE;

					
					
				END IF;
				IF line_created=TRUE THEN
					--raise notice 'taxon_to_copy %',taxon_to_copy;
					--raise notice 'UPDATE staging';
					WITH staging_catalogue_updated(updated_id) AS (
					  UPDATE staging_catalogue as sc
					  SET catalogue_ref = taxon_to_copy
					  WHERE sc.import_ref = req_import_ref
						AND sc.name = current_names.name
						AND sc.level_ref = current_level
					  RETURNING id
					)
					UPDATE staging_catalogue as msc
					SET parent_ref = taxon_to_copy,
					  parent_updated = TRUE
					WHERE msc.import_ref = req_import_ref
					      AND msc.parent_ref IN (
					  SELECT updated_id FROM staging_catalogue_updated
					)
					AND parent_updated = FALSE;
				END IF;
			EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'EXCEPTION';
			RAISE NOTICE '% %', SQLERRM, SQLSTATE;
			GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
			RAISE NOTICE 'context: >>%<<', _c;
			UPDATE staging_catalogue set import_exception= SQLERRM WHERE id=current_names.min_id;
			UPDATE imports SET state='pending', errors_in_import=SQLERRM  WHERE id=req_import_ref;
			--RETURN FALSE;
			END;
				      

		END LOOP;
	END LOOP;

	returned =TRUE;
	 RETURN returned;

  END;
  $_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1868 (class 1255 OID 1440151)
-- Name: fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(integer, integer, text, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    staging_catalogue_line staging_catalogue;
    where_clause_complement_1 text := ' ';
    where_clause_complement_2 text := ' ';
    where_clause_complement_3 text := ' ';
    where_clause_complement_3_bis text := ' ';
    where_clause_complement_4 text := ' ';
    where_clause_complement_5 text := ' ';
    where_clause_exclude_invalid text := ' ';
    recCatalogue RECORD;
    id_existing_taxon integer;
    existing_text_hierarchy varchar;
    staging_text_hierarchy varchar;
    parent_path template_classifications.path%TYPE;
    parentRef staging_catalogue.parent_ref%TYPE;
    parent_level catalogue_levels.id%TYPE;
    catalogueRef staging_catalogue.catalogue_ref%TYPE;
    levelRef staging_catalogue.level_ref%TYPE;
    error_msg TEXT := '';
    children_move_forward BOOLEAN := FALSE;
    level_naming TEXT;
    tempSQL TEXT;
    check_duplicates_hierarchies RECORD;
    duplicate_hierarchies_msg varchar;


  BEGIN

    FOR staging_catalogue_line IN SELECT * from staging_catalogue WHERE import_ref = req_import_ref ORDER BY level_ref, fullToIndex(name)
    LOOP
	
      IF trim(touniquestr(staging_catalogue_line.name)) = '' THEN
        RAISE EXCEPTION E'Case 0, Could not import this file, % is not a valid name.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
      END IF;
      SELECT parent_ref, catalogue_ref, level_ref INTO parentRef, catalogueRef, levelRef FROM staging_catalogue WHERE id = staging_catalogue_line.id;
      --raise notice 'lie id % assign parentRef % found if %', staging_catalogue_line.id, parentRef, (SELECT parent_ref FROM staging_catalogue WHERE id = staging_catalogue_line.id) ;
      IF catalogueRef IS NULL THEN
        -- Check if we're at a top taxonomic entry in the template/staging_catalogue line
        IF parentRef IS NULL THEN
          -- If top entry, we have not parent defined and we therefore have no other filtering criteria
          where_clause_complement_1 := ' ';
          where_clause_complement_2 := ' ';
          where_clause_complement_3 := ' ';
          where_clause_complement_3_bis := ' ';
        ELSE
          -- If a child entry, we've got to use the informations from the already matched or created parent
          where_clause_complement_1 := '  AND tax.parent_ref = ' || parentRef || ' ';
          where_clause_complement_2 := '  AND tax.parent_ref != ' || parentRef || ' ';
          -- Select the path from parent catalogue unit
          EXECUTE 'SELECT path, level_ref FROM ' || quote_ident(referenced_relation) || ' WHERE id = $1'
          INTO parent_path, parent_level
          USING parentRef;
          where_clause_complement_3 := '  AND position (' || quote_literal(parent_path) || ' IN tax.path) = 1 ';
          where_clause_complement_3_bis := '  AND (select t2.level_ref from ' || quote_ident(referenced_relation) || ' as t2 where t2.id = tax.parent_ref) > ' || parent_level || ' ';
        END IF;
        where_clause_complement_4 := '  AND left(substring(tax.name from length(trim(' ||
                                     quote_literal(staging_catalogue_line.name) || '))+1),1) IN (' ||
                                     quote_literal(' ') || ', ' || quote_literal(',') || ') ';
        where_clause_complement_5 := '  AND left(substring(' || quote_literal(staging_catalogue_line.name) ||
                                     ' from length(trim(tax.name))+1),1) IN (' ||
                                     quote_literal(' ') || ', ' || quote_literal(',') || ') ';
        -- Set the invalid where clause if asked
        IF exclude_invalid_entries = TRUE THEN
          where_clause_exclude_invalid := '  AND tax.status != ' || quote_literal('invalid') || ' ';
        END IF;
        -- Check a perfect match entry
        -- Take care here, a limit 1 has been set, we only kept the EXIT in case the limit would be accidently removed
        FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                    'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                    'WHERE tax.level_ref = $1 ' ||
                                    '  AND tax.name_indexed = fullToIndex( $2 ) ' ||
                                    where_clause_exclude_invalid ||
                                    where_clause_complement_1 ||
                                    'LIMIT 1;'
        USING staging_catalogue_line.level_ref, staging_catalogue_line.name
        LOOP
          -- If more than one entry found, we set an error...
          IF recCatalogue.total_count > 1 THEN
            --RAISE notice E'Case 1, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
          END IF;
          EXIT;
        END LOOP;
        -- No perfect match occured with the same parent (if it applies - doesn't apply for top taxonomic entry in template)
        IF NOT FOUND THEN
          -- For this step, as it depends upon the existence of a parent, we test well we are on that case
          -- It concerns a perfect match with parents differents but with a path common
          -- That means, if only one entry exists, that they are the same but with a more detailed hierarchy in the
          -- already existing entry
          IF parentRef IS NOT NULL THEN
            FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                        'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                        'WHERE tax.level_ref = $1 ' ||
                                        '  AND tax.name_indexed = fullToIndex( $2 ) ' ||
                                        where_clause_exclude_invalid ||
                                        where_clause_complement_2 ||
                                        where_clause_complement_3 ||
                                        where_clause_complement_3_bis ||
                                        'LIMIT 1;'
            USING staging_catalogue_line.level_ref, staging_catalogue_line.name
            LOOP
              -- If for this kind of perfect match with different parent but kind of same path start, we get multiple
              -- possibilities, then fail
              IF recCatalogue.total_count > 1 THEN
                RAISE EXCEPTION E'Case 2, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
              END IF;
              EXIT;
            END LOOP;
            -- If it gave no result, we've got to move forward and try the next option
            IF NOT FOUND THEN
              children_move_forward := TRUE;
            END IF;
          END IF;
          IF parentRef IS NULL OR children_move_forward = TRUE THEN
            -- This next option try a fuzzy match, with, if it's a child entry in the template, a verification that
            -- the parent specified in the template and the path of the potential corresponding entry in catalogue
            -- have a common path...
            --RAISE NOTICE 'FOUND 1';
            tempSQL := 'SELECT COUNT(id) OVER () as total_count, * ' ||
                       'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                       'WHERE tax.level_ref = $1 ' ||
                       '  AND tax.name_indexed LIKE fullToIndex( $2 ) || ' || quote_literal('%') ||
                       where_clause_exclude_invalid ||
                       where_clause_complement_3 ||
                       where_clause_complement_4;
            IF parentRef IS NOT NULL THEN
              tempSQL := tempSQL || where_clause_complement_1;
            END IF;
            tempSQL := tempSQL || 'LIMIT 1;';
            FOR recCatalogue IN EXECUTE tempSQL
            USING staging_catalogue_line.level_ref, staging_catalogue_line.name
            LOOP
              -- If we're on the case of a top entry in the template, we cannot afford the problem of multiple entries
              IF recCatalogue.total_count > 1 THEN
                RAISE EXCEPTION E'Case 3, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
              END IF;
              EXIT;
            END LOOP;
            -- Last chance is to try to find if the entry in DaRWIN shouldn't be completed
            -- This entry should be "alone" of its kind - check the NOT EXIST clause
            IF NOT FOUND THEN
           -- RAISE NOTICE 'FOUND 2';
              FOR recCatalogue IN EXECUTE 'SELECT COUNT(id) OVER () as total_count, * ' ||
                                          'FROM ' || quote_ident(referenced_relation) || ' as tax ' ||
                                          'WHERE tax.level_ref = $1 ' ||
                                          '  AND position(tax.name_indexed IN fullToIndex( $2 )) = 1 ' ||
                                          where_clause_exclude_invalid ||
                                          '  AND NOT EXISTS (SELECT 1 ' ||
                                          '                  FROM ' || quote_ident(referenced_relation) || ' as stax ' ||
                                          '                  WHERE stax.id != tax.id ' ||
                                          '                  AND stax.level_ref = tax.level_ref ' ||
                                          '                  AND stax.path = tax.path ' ||
                                          '                  AND stax.name_indexed LIKE tax.name_indexed || ' || quote_literal('%') ||
                                          '                  LIMIT 1 ' ||
                                          '                 ) ' ||
                                          where_clause_complement_3 ||
                                          where_clause_complement_5 ||
                                          'LIMIT 1;'
              USING staging_catalogue_line.level_ref, staging_catalogue_line.name
              LOOP
                IF recCatalogue.total_count > 1 THEN
                  RAISE EXCEPTION E'Case 4, Could not import this file, % exists more than 1 time in DaRWIN, correct the catalogue (or file) to import this tree.\nStaging Catalogue Line: %', staging_catalogue_line.name, staging_catalogue_line.id;
                ELSE
                --raise notice 'upd 4';
                  -- If only one entry is found, we can replace the name of this entry
                  EXECUTE 'UPDATE ' || quote_ident(referenced_relation) || ' ' ||
                          'SET name = ' || quote_literal(staging_catalogue_line.name) || ' ' ||
                          'WHERE id = ' || recCatalogue.id || ';';
                END IF;
                EXIT;
              END LOOP;
              IF NOT FOUND THEN
               --raise notice 'not found';
              -- raise notice 'parentRef %', parentRef;
                IF parentRef IS NOT NULL THEN
               -- raise notice 'test';
		  IF LOWER(referenced_relation) = 'taxonomy' THEN
			--ftheeten 2018 04 15
			PERFORM * FROM taxonomy WHERE (name_indexed=fulltoindex(staging_catalogue_line.name) 
						OR (fct_rmca_taxonomy_split_name_author(name, level_ref))[1]=(fct_rmca_taxonomy_split_name_author(staging_catalogue_line.name, staging_catalogue_line.level_ref))[1])
								AND
										level_ref = staging_catalogue_line.level_ref 
										AND is_reference_taxonomy =TRUE;
			IF NOT FOUND THEN
				raise notice 'insert %', staging_catalogue_line.name;
				EXECUTE 'INSERT INTO ' || quote_ident(referenced_relation) || '(id,name,level_ref,parent_ref, metadata_ref, import_ref) ' ||
		 			  'VALUES(DEFAULT,$1,$2,$3,$4,$5) ' ||
					  'RETURNING *;'
				  INTO recCatalogue
				  USING staging_catalogue_line.name,staging_catalogue_line.level_ref,parentRef, var_metadata_ref, req_import_ref;
			ELSE
				raise notice 'insert %', staging_catalogue_line.name;
				
				--compare existing hierarchy with hierarchy in staging
				--ftheeten 2018 06 05
				SELECT id, fct_rmca_sort_taxon_path_alphabetically(path||id) INTO id_existing_taxon , existing_text_hierarchy FROM taxonomy WHERE (name_indexed=fulltoindex(staging_catalogue_line.name) 
						OR (fct_rmca_taxonomy_split_name_author(name, level_ref))[1]=(fct_rmca_taxonomy_split_name_author(staging_catalogue_line.name, staging_catalogue_line.level_ref))[1])
								AND
										level_ref = staging_catalogue_line.level_ref 
										AND is_reference_taxonomy =TRUE LIMIT 1;
				SELECT  fct_rmca_sort_taxon_path_alphabetically_staging(staging_catalogue_line.id) INTO staging_text_hierarchy;
				RAISE NOTICE E'Hierarchy in staging\t % (line %)', staging_text_hierarchy, staging_catalogue_line.id;
				RAISE NOTICE E'Hierarchy in Darwin \t %',existing_text_hierarchy;
				raise notice 'parent= %', parentRef;
				IF  staging_text_hierarchy != existing_text_hierarchy THEN
					RAISE EXCEPTION E'CASE 7  Could not import this file, % (level %) may already exists in DaRWIN with a different hierarchy and cannot be attached, please check  or create this % manually (line staging %, apparent parent %) \r\n Hierarchy in staging\t % \r\nHierarchy in Darwin\t %\r\n ', 

staging_catalogue_line.name,  
level_naming, 
quote_ident(referenced_relation), 
staging_catalogue_line.id, 
staging_catalogue_line.parent_ref,
staging_text_hierarchy, 
existing_text_hierarchy ;
				ELSE
					raise notice 'hierarchy exists (possibily overlapping with Paul-André code)';
					recCatalogue.id:=id_existing_taxon;
				END IF;
			END IF;	  
		     ELSE
			  EXECUTE 'INSERT INTO ' || quote_ident(referenced_relation) || '(id,name,level_ref,parent_ref) ' ||
				  'VALUES(DEFAULT,$1,$2,$3) ' ||
				  'RETURNING *;'
			  INTO recCatalogue
			  USING staging_catalogue_line.name,staging_catalogue_line.level_ref,parentRef;
			-- tell to update the staging line to set the catalogue_ref with the id found
	           END IF;
                ELSE
                  SELECT level_name INTO level_naming FROM catalogue_levels WHERE id = staging_catalogue_line.level_ref;
                  RAISE EXCEPTION 'CASE 6 Could not import this file, % (level %) does not exist in DaRWIN and cannot be attached, correct your file or create this % manually (line staging %, apparent parent %) ', staging_catalogue_line.name,  level_naming, quote_ident(referenced_relation), staging_catalogue_line.id, staging_catalogue_line.parent_ref;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
        -- update the staging line to set the catalogue_ref with the id found
        -- update the staging children lines
        IF recCatalogue.id is NULL then
		RAISe exception 'Problem for % (line %)', staging_catalogue_line.name, recCatalogue.id ;
	end if;
        WITH staging_catalogue_updated(updated_id/*, catalogue_ref_updated*/) AS (
          UPDATE staging_catalogue as sc
          SET catalogue_ref = recCatalogue.id
          WHERE sc.import_ref = staging_catalogue_line.import_ref
                AND sc.name = staging_catalogue_line.name
                AND sc.level_ref = staging_catalogue_line.level_ref
          RETURNING id
        )
        UPDATE staging_catalogue as msc
        SET parent_ref = recCatalogue.id,
          parent_updated = TRUE
        WHERE msc.import_ref = staging_catalogue_line.import_ref
              AND msc.parent_ref IN (
          SELECT updated_id FROM staging_catalogue_updated
        )
              AND parent_updated = FALSE;
      END IF;
      children_move_forward := FALSE;
    END LOOP;
    RETURN TRUE;
    /*EXCEPTION WHEN OTHERS THEN
    IF SQLERRM = 'This record does not follow the level hierarchy' THEN
      SELECT level_name INTO level_naming FROM catalogue_levels WHERE id = staging_catalogue_line.level_ref;
      RAISE EXCEPTION E'Could not import this file, % (level %) does not follow the accepted level hierarchy in DaRWIN an cannot be attached nor created.\nPlease correct your file.\nStaging Catalogue Line: %', staging_catalogue_line.name,  level_naming, staging_catalogue_line.id;
      
    ELSE
      RAISE EXCEPTION 'exception %', SQLERRM;
    END IF;*/
  END;
  $_$;


ALTER FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1869 (class 1255 OID 1440154)
-- Name: fct_informative_reset_last_flag(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_informative_reset_last_flag() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE informative_workflow
    SET is_last = true
    WHERE referenced_relation = OLD.referenced_relation
      AND record_id = OLD.record_id
      AND id = (select id from informative_workflow
        WHERE referenced_relation = OLD.referenced_relation AND record_id = OLD.record_id ORDER BY modification_date_time desc LIMIT 1)
    ;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_informative_reset_last_flag() OWNER TO postgres;

--
-- TOC entry 815 (class 1255 OID 1440155)
-- Name: fct_listing_botany(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_botany(nbr_records integer, VARIADIC taxon_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, domain text, kingdom text, super_phylum text, phylum text, sub_phylum text, infra_phylum text, super_cohort_botany text, cohort_botany text, sub_cohort_botany text, infra_cohort_botany text, super_class text, class text, sub_class text, infra_class text, super_division text, division text, sub_division text, infra_division text, super_legion text, legion text, sub_legion text, infra_legion text, super_order text, "order" text, sub_order text, infra_order text, super_family text, family text, sub_family text, infra_family text, super_tribe text, tribe text, sub_tribe text, infra_tribe text, genus text, sub_genus text, section_botany text, sub_section_botany text, serie text, sub_serie text, super_species text, species text, sub_species text, variety text, sub_variety text, form text, sub_form text, abberans text)
    LANGUAGE sql
    AS $_$
  SELECT "referenced_by_at_least_one_specimen","domain","kingdom","super_phylum","phylum","sub_phylum","infra_phylum","super_cohort_botany","cohort_botany","sub_cohort_botany","infra_cohort_botany","super_class","class","sub_class","infra_class","super_division","division","sub_division","infra_division","super_legion","legion","sub_legion","infra_legion","super_order","order","sub_order","infra_order","super_family","family","sub_family","infra_family","super_tribe","tribe","sub_tribe","infra_tribe","genus","sub_genus","section_botany","sub_section_botany","serie","sub_serie","super_species","species","sub_species","variety","sub_variety","form","sub_form","abberans" from fct_listing_taxonomy($1, variadic $2);
$_$;


ALTER FUNCTION darwin2.fct_listing_botany(nbr_records integer, VARIADIC taxon_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1866 (class 1255 OID 1440156)
-- Name: fct_listing_chronostratigraphy(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_chronostratigraphy(nbr_records integer, VARIADIC chrono_unit_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, eon text, era text, sub_era text, system text, serie text, stage text, sub_stage text, sub_level_1 text, sub_level_2 text)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    select_sql_part TEXT; -- Variable dedicated to store the select part of sql
    from_sql_part TEXT;
    where_sql_part TEXT;  -- Variable dedicated to store the where part of sql - this part being dynamically constructed
    where_first_list_of_ids TEXT; -- Will store the list of chrono_unit ids as string with comma as separation delimiter
    where_second_sql TEXT; -- Will store the second part of the where clause dynamically constructed
    order_by_sql_part TEXT;
    limit_sql_part TEXT DEFAULT '';
    chrono_unit_id INTEGER;
    recChronostratigraphic_levels RECORD;
  BEGIN
    -- First, test that there's at least one chrono_unit to search the hierarchy from
    IF array_length(chrono_unit_ids, 1) > 0 THEN
      -- Compose the list of chrono_unit ids as comma separated string
      where_first_list_of_ids := array_to_string(chrono_unit_ids, ',');
      -- Loop through these chrono_unit ids to compose the second part of the sql where clause
      FOREACH chrono_unit_id IN ARRAY chrono_unit_ids LOOP
        where_second_sql := 'or strpos	(chronos.path, (select ssschronos.path || ssschronos.id
                                                    from chronostratigraphy ssschronos
                                                    where ssschronos.id = ' || chrono_unit_id || '
                                                   )
                                        ) != 0 ';
        where_sql_part := COALESCE(where_sql_part, '') || where_second_sql;
      END LOOP;
      where_sql_part := 'where chronos.id in (select sschronos.id
                                          from chronostratigraphy sschronos
                                          where sschronos.id in (' || where_first_list_of_ids || ')
                                         ) ' ||  where_sql_part;
      select_sql_part := 'select distinct on ((chronos.path || chronos.id), chronos.level_ref)
                          case
                            when specimens.id is null then 0
                            else 1
                          end as "referenced_by_at_least_one_specimen", ';
      -- Browse all chronostratigraphic levels and for each of them, include a select clause
      FOR recChronostratigraphic_levels IN SELECT id, level_sys_name FROM catalogue_levels WHERE level_type = 'chronostratigraphy' ORDER BY level_order, id LOOP
        select_sql_part := select_sql_part ||
                           '(select subchronos.name
                             from chronostratigraphy as subchronos inner join (select unnest(string_to_array(substring(chronos.path || chronos.id from 2), ' || CHR(39) || CHR(47) || CHR(39) || ')) as id) as chronosids
                             on subchronos.id = chronosids.id::integer
                             where chronosids.id != ' || CHR(39) || CHR(39) || '
                               and subchronos.level_ref = ' || recChronostratigraphic_levels.id || '
                            )::text as "' || recChronostratigraphic_levels.level_sys_name || '" ,';
      END LOOP;
      select_sql_part := substring(select_sql_part for (length(select_sql_part) - 1));
      from_sql_part := 'from chronostratigraphy as chronos left join specimens on chronos.id = specimens.chrono_ref ';
      order_by_sql_part := 'order by (chronos.path || chronos.id), chronos.level_ref ';
      -- Get a limit part only if set
      IF nbr_records IS NOT NULL AND nbr_records != 0 THEN
        limit_sql_part := 'limit ' || nbr_records;
      END IF;
    END IF;
    RETURN QUERY EXECUTE select_sql_part || from_sql_part || where_sql_part || order_by_sql_part || limit_sql_part;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error is %', SQLERRM;
    RETURN;
  END;
$$;


ALTER FUNCTION darwin2.fct_listing_chronostratigraphy(nbr_records integer, VARIADIC chrono_unit_ids integer[]) OWNER TO postgres;

--
-- TOC entry 816 (class 1255 OID 1440157)
-- Name: fct_listing_lithology(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_lithology(nbr_records integer, VARIADIC litholo_unit_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, unit_main_group text, unit_group text, unit_sub_group text, unit_rock text, unit_main_class text, unit_class text, unit_clan text, unit_category text)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    select_sql_part TEXT; -- Variable dedicated to store the select part of sql
    from_sql_part TEXT;
    where_sql_part TEXT;  -- Variable dedicated to store the where part of sql - this part being dynamically constructed
    where_first_list_of_ids TEXT; -- Will store the list of litholo_unit ids as string with comma as separation delimiter
    where_second_sql TEXT; -- Will store the second part of the where clause dynamically constructed
    order_by_sql_part TEXT;
    limit_sql_part TEXT DEFAULT '';
    litholo_unit_id INTEGER;
    reclithologic_levels RECORD;
  BEGIN
    -- First, test that there's at least one litholo_unit to search the hierarchy from
    IF array_length(litholo_unit_ids, 1) > 0 THEN
      -- Compose the list of litholo_unit ids as comma separated string
      where_first_list_of_ids := array_to_string(litholo_unit_ids, ',');
      -- Loop through these litholo_unit ids to compose the second part of the sql where clause
      FOREACH litholo_unit_id IN ARRAY litholo_unit_ids LOOP
        where_second_sql := 'or strpos	(litholos.path, (select ssslitholos.path || ssslitholos.id
                                                    from lithology ssslitholos
                                                    where ssslitholos.id = ' || litholo_unit_id || '
                                                   )
                                        ) != 0 ';
        where_sql_part := COALESCE(where_sql_part, '') || where_second_sql;
      END LOOP;
      where_sql_part := 'where litholos.id in (select sslitholos.id
                                          from lithology sslitholos
                                          where sslitholos.id in (' || where_first_list_of_ids || ')
                                         ) ' ||  where_sql_part;
      select_sql_part := 'select distinct on ((litholos.path || litholos.id), litholos.level_ref)
                          case
                            when specimens.id is null then 0
                            else 1
                          end as "referenced_by_at_least_one_specimen", ';
      -- Browse all lithologic levels and for each of them, include a select clause
      FOR reclithologic_levels IN SELECT id, level_sys_name FROM catalogue_levels WHERE level_type = 'lithology' ORDER BY level_order, id LOOP
        select_sql_part := select_sql_part ||
                           '(select sublitholos.name
                             from lithology as sublitholos inner join (select unnest(string_to_array(substring(litholos.path || litholos.id from 2), ' || CHR(39) || CHR(47) || CHR(39) || ')) as id) as litholosids
                             on sublitholos.id = litholosids.id::integer
                             where litholosids.id != ' || CHR(39) || CHR(39) || '
                               and sublitholos.level_ref = ' || reclithologic_levels.id || '
                            )::text as "' || reclithologic_levels.level_sys_name || '" ,';
      END LOOP;
      select_sql_part := substring(select_sql_part for (length(select_sql_part) - 1));
      from_sql_part := 'from lithology as litholos left join specimens on litholos.id = specimens.lithology_ref ';
      order_by_sql_part := 'order by (litholos.path || litholos.id), litholos.level_ref ';
      -- Get a limit part only if set
      IF nbr_records IS NOT NULL AND nbr_records != 0 THEN
        limit_sql_part := 'limit ' || nbr_records;
      END IF;
    END IF;
    RETURN QUERY EXECUTE select_sql_part || from_sql_part || where_sql_part || order_by_sql_part || limit_sql_part;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error is %', SQLERRM;
    RETURN;
  END;
$$;


ALTER FUNCTION darwin2.fct_listing_lithology(nbr_records integer, VARIADIC litholo_unit_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1870 (class 1255 OID 1440158)
-- Name: fct_listing_lithostratigraphy(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_lithostratigraphy(nbr_records integer, VARIADIC litho_unit_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, supergroup text, "group" text, formation text, member text, layer text, sub_level_1 text, sub_level_2 text)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    select_sql_part TEXT; -- Variable dedicated to store the select part of sql
    from_sql_part TEXT;
    where_sql_part TEXT;  -- Variable dedicated to store the where part of sql - this part being dynamically constructed
    where_first_list_of_ids TEXT; -- Will store the list of litho_unit ids as string with comma as separation delimiter
    where_second_sql TEXT; -- Will store the second part of the where clause dynamically constructed
    order_by_sql_part TEXT;
    limit_sql_part TEXT DEFAULT '';
    litho_unit_id INTEGER;
    reclithostratigraphic_levels RECORD;
  BEGIN
    -- First, test that there's at least one litho_unit to search the hierarchy from
    IF array_length(litho_unit_ids, 1) > 0 THEN
      -- Compose the list of litho_unit ids as comma separated string
      where_first_list_of_ids := array_to_string(litho_unit_ids, ',');
      -- Loop through these litho_unit ids to compose the second part of the sql where clause
      FOREACH litho_unit_id IN ARRAY litho_unit_ids LOOP
        where_second_sql := 'or strpos	(lithos.path, (select ssslithos.path || ssslithos.id
                                                    from lithostratigraphy ssslithos
                                                    where ssslithos.id = ' || litho_unit_id || '
                                                   )
                                        ) != 0 ';
        where_sql_part := COALESCE(where_sql_part, '') || where_second_sql;
      END LOOP;
      where_sql_part := 'where lithos.id in (select sslithos.id
                                          from lithostratigraphy sslithos
                                          where sslithos.id in (' || where_first_list_of_ids || ')
                                         ) ' ||  where_sql_part;
      select_sql_part := 'select distinct on ((lithos.path || lithos.id), lithos.level_ref)
                          case
                            when specimens.id is null then 0
                            else 1
                          end as "referenced_by_at_least_one_specimen", ';
      -- Browse all lithostratigraphic levels and for each of them, include a select clause
      FOR reclithostratigraphic_levels IN SELECT id, level_sys_name FROM catalogue_levels WHERE level_type = 'lithostratigraphy' ORDER BY level_order, id LOOP
        select_sql_part := select_sql_part ||
                           '(select sublithos.name
                             from lithostratigraphy as sublithos inner join (select unnest(string_to_array(substring(lithos.path || lithos.id from 2), ' || CHR(39) || CHR(47) || CHR(39) || ')) as id) as lithosids
                             on sublithos.id = lithosids.id::integer
                             where lithosids.id != ' || CHR(39) || CHR(39) || '
                               and sublithos.level_ref = ' || reclithostratigraphic_levels.id || '
                            )::text as "' || reclithostratigraphic_levels.level_sys_name || '" ,';
      END LOOP;
      select_sql_part := substring(select_sql_part for (length(select_sql_part) - 1));
      from_sql_part := 'from lithostratigraphy as lithos left join specimens on lithos.id = specimens.litho_ref ';
      order_by_sql_part := 'order by (lithos.path || lithos.id), lithos.level_ref ';
      -- Get a limit part only if set
      IF nbr_records IS NOT NULL AND nbr_records != 0 THEN
        limit_sql_part := 'limit ' || nbr_records;
      END IF;
    END IF;
    RETURN QUERY EXECUTE select_sql_part || from_sql_part || where_sql_part || order_by_sql_part || limit_sql_part;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error is %', SQLERRM;
    RETURN;
  END;
$$;


ALTER FUNCTION darwin2.fct_listing_lithostratigraphy(nbr_records integer, VARIADIC litho_unit_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1871 (class 1255 OID 1440159)
-- Name: fct_listing_mineralogy(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_mineralogy(nbr_records integer, VARIADIC mineralo_unit_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, unit_class text, unit_sub_class text, unit_series text, unit_variety text)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    select_sql_part TEXT; -- Variable dedicated to store the select part of sql
    from_sql_part TEXT;
    where_sql_part TEXT;  -- Variable dedicated to store the where part of sql - this part being dynamically constructed
    where_first_list_of_ids TEXT; -- Will store the list of mineralo_unit ids as string with comma as separation delimiter
    where_second_sql TEXT; -- Will store the second part of the where clause dynamically constructed
    order_by_sql_part TEXT;
    limit_sql_part TEXT DEFAULT '';
    mineralo_unit_id INTEGER;
    recmineralogic_levels RECORD;
  BEGIN
    -- First, test that there's at least one mineralo_unit to search the hierarchy from
    IF array_length(mineralo_unit_ids, 1) > 0 THEN
      -- Compose the list of mineralo_unit ids as comma separated string
      where_first_list_of_ids := array_to_string(mineralo_unit_ids, ',');
      -- Loop through these mineralo_unit ids to compose the second part of the sql where clause
      FOREACH mineralo_unit_id IN ARRAY mineralo_unit_ids LOOP
        where_second_sql := 'or strpos	(mineralos.path, (select sssmineralos.path || sssmineralos.id
                                                    from mineralogy sssmineralos
                                                    where sssmineralos.id = ' || mineralo_unit_id || '
                                                   )
                                        ) != 0 ';
        where_sql_part := COALESCE(where_sql_part, '') || where_second_sql;
      END LOOP;
      where_sql_part := 'where mineralos.id in (select ssmineralos.id
                                          from mineralogy ssmineralos
                                          where ssmineralos.id in (' || where_first_list_of_ids || ')
                                         ) ' ||  where_sql_part;
      select_sql_part := 'select distinct on ((mineralos.path || mineralos.id), mineralos.level_ref)
                          case
                            when specimens.id is null then 0
                            else 1
                          end as "referenced_by_at_least_one_specimen", ';
      -- Browse all mineralogic levels and for each of them, include a select clause
      FOR recmineralogic_levels IN SELECT id, level_sys_name FROM catalogue_levels WHERE level_type = 'mineralogy' ORDER BY level_order, id LOOP
        select_sql_part := select_sql_part ||
                           '(select submineralos.name
                             from mineralogy as submineralos inner join (select unnest(string_to_array(substring(mineralos.path || mineralos.id from 2), ' || CHR(39) || CHR(47) || CHR(39) || ')) as id) as mineralosids
                             on submineralos.id = mineralosids.id::integer
                             where mineralosids.id != ' || CHR(39) || CHR(39) || '
                               and submineralos.level_ref = ' || recmineralogic_levels.id || '
                            )::text as "' || recmineralogic_levels.level_sys_name || '" ,';
      END LOOP;
      select_sql_part := substring(select_sql_part for (length(select_sql_part) - 1));
      from_sql_part := 'from mineralogy as mineralos left join specimens on mineralos.id = specimens.mineral_ref ';
      order_by_sql_part := 'order by (mineralos.path || mineralos.id), mineralos.level_ref ';
      -- Get a limit part only if set
      IF nbr_records IS NOT NULL AND nbr_records != 0 THEN
        limit_sql_part := 'limit ' || nbr_records;
      END IF;
    END IF;
    RETURN QUERY EXECUTE select_sql_part || from_sql_part || where_sql_part || order_by_sql_part || limit_sql_part;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error is %', SQLERRM;
    RETURN;
  END;
$$;


ALTER FUNCTION darwin2.fct_listing_mineralogy(nbr_records integer, VARIADIC mineralo_unit_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1872 (class 1255 OID 1440160)
-- Name: fct_listing_taxonomy(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_taxonomy(nbr_records integer, VARIADIC taxon_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, domain text, kingdom text, super_phylum text, phylum text, sub_phylum text, infra_phylum text, super_cohort_botany text, cohort_botany text, sub_cohort_botany text, infra_cohort_botany text, super_class text, class text, sub_class text, infra_class text, super_division text, division text, sub_division text, infra_division text, super_legion text, legion text, sub_legion text, infra_legion text, super_cohort_zoology text, cohort_zoology text, sub_cohort_zoology text, infra_cohort_zoology text, super_order text, "order" text, sub_order text, infra_order text, section_zoology text, sub_section_zoology text, super_family text, family text, sub_family text, infra_family text, super_tribe text, tribe text, sub_tribe text, infra_tribe text, genus text, sub_genus text, section_botany text, sub_section_botany text, serie text, sub_serie text, super_species text, species text, sub_species text, variety text, sub_variety text, form text, sub_form text, abberans text)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    select_sql_part TEXT; -- Variable dedicated to store the select part of sql
    from_sql_part TEXT;
    where_sql_part TEXT;  -- Variable dedicated to store the where part of sql - this part being dynamically constructed
    where_first_list_of_ids TEXT; -- Will store the list of taxon ids as string with comma as separation delimiter
    where_second_sql TEXT; -- Will store the second part of the where clause dynamically constructed
    order_by_sql_part TEXT;
    limit_sql_part TEXT DEFAULT '';
    taxon_id INTEGER;
    recTaxonomic_levels RECORD;
  BEGIN
    -- First, test that there's at least one taxon to search the hierarchy from
    IF array_length(taxon_ids, 1) > 0 THEN
      -- Compose the list of taxon ids as comma separated string
      where_first_list_of_ids := array_to_string(taxon_ids, ',');
      -- Loop through these taxon ids to compose the second part of the sql where clause
      FOREACH taxon_id IN ARRAY taxon_ids LOOP
        where_second_sql := 'or strpos	(tax.path, (select ssstax.path || ssstax.id
                                                    from taxonomy ssstax
                                                    where ssstax.id = ' || taxon_id || '
                                                   )
                                        ) != 0 ';
        where_sql_part := COALESCE(where_sql_part, '') || where_second_sql;
      END LOOP;
      where_sql_part := 'where tax.id in (select sstax.id
                                          from taxonomy sstax
                                          where sstax.id in (' || where_first_list_of_ids || ')
                                         ) ' ||  where_sql_part;
      select_sql_part := 'select distinct on ((tax.path || tax.id), tax.level_ref)
                          case
                            when specimens.id is null then 0
                            else 1
                          end as "referenced_by_at_least_one_specimen", ';
      -- Browse all taxonomic levels and for each of them, include a select clause
      FOR recTaxonomic_levels IN SELECT id, level_sys_name FROM catalogue_levels WHERE level_type = 'taxonomy' ORDER BY level_order, id LOOP
        select_sql_part := select_sql_part ||
                           '(select subtax.name
                             from taxonomy as subtax inner join (select unnest(string_to_array(substring(tax.path || tax.id from 2), ' || CHR(39) || CHR(47) || CHR(39) || ')) as id) as taxids
                             on subtax.id = taxids.id::integer
                             where taxids.id != ' || CHR(39) || CHR(39) || '
                               and subtax.level_ref = ' || recTaxonomic_levels.id || '
                            )::text as "' || recTaxonomic_levels.level_sys_name || '" ,';
      END LOOP;
      select_sql_part := substring(select_sql_part for (length(select_sql_part) - 1));
      from_sql_part := 'from taxonomy as tax left join specimens on tax.id = specimens.taxon_ref ';
      order_by_sql_part := 'order by (tax.path || tax.id), tax.level_ref ';
      -- Get a limit part only if set
      IF nbr_records IS NOT NULL AND nbr_records != 0 THEN
        limit_sql_part := 'limit ' || nbr_records;
      END IF;
    END IF;
    RETURN QUERY EXECUTE select_sql_part || from_sql_part || where_sql_part || order_by_sql_part || limit_sql_part;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error is %', SQLERRM;
    RETURN;
  END;
$$;


ALTER FUNCTION darwin2.fct_listing_taxonomy(nbr_records integer, VARIADIC taxon_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1875 (class 1255 OID 1440162)
-- Name: fct_listing_zoology(integer, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_listing_zoology(nbr_records integer, VARIADIC taxon_ids integer[]) RETURNS TABLE(referenced_by_at_least_one_specimen integer, domain text, kingdom text, super_phylum text, phylum text, sub_phylum text, infra_phylum text, super_class text, class text, sub_class text, infra_class text, super_division text, division text, sub_division text, infra_division text, super_legion text, legion text, sub_legion text, infra_legion text, super_cohort_zoology text, cohort_zoology text, sub_cohort_zoology text, infra_cohort_zoology text, super_order text, "order" text, sub_order text, infra_order text, section_zoology text, sub_section_zoology text, super_family text, family text, sub_family text, infra_family text, super_tribe text, tribe text, sub_tribe text, infra_tribe text, genus text, sub_genus text, serie text, sub_serie text, super_species text, species text, sub_species text, variety text, sub_variety text, form text, sub_form text, abberans text)
    LANGUAGE sql
    AS $_$
  SELECT "referenced_by_at_least_one_specimen","domain","kingdom","super_phylum","phylum","sub_phylum","infra_phylum","super_class","class","sub_class","infra_class","super_division","division","sub_division","infra_division","super_legion","legion","sub_legion","infra_legion","super_cohort_zoology","cohort_zoology","sub_cohort_zoology","infra_cohort_zoology","super_order","order","sub_order","infra_order","section_zoology","sub_section_zoology","super_family","family","sub_family","infra_family","super_tribe","tribe","sub_tribe","infra_tribe","genus","sub_genus","serie","sub_serie","super_species","species","sub_species","variety","sub_variety","form","sub_form","abberans" from fct_listing_taxonomy($1, variadic $2);
$_$;


ALTER FUNCTION darwin2.fct_listing_zoology(nbr_records integer, VARIADIC taxon_ids integer[]) OWNER TO postgres;

--
-- TOC entry 1874 (class 1255 OID 1440163)
-- Name: fct_look_for_institution(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_look_for_institution(fullname text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_record integer :=0;
  result_nbr integer;

BEGIN
    result_nbr := 0;
    FOR ref_record IN SELECT id from people p
      WHERE is_physical = false  AND
      ( formated_name_indexed like fulltoindex(fullname) || '%' OR fulltoindex(additional_names) =  fulltoindex(fullname) )
      LIMIT 2
    LOOP
      result_nbr := result_nbr +1;
    END LOOP;

    IF result_nbr = 1 THEN -- It's Ok!
      return ref_record;
    END IF;

    IF result_nbr >= 2 THEN
      return -1 ;-- To Much
      --continue;
    END IF;
  RETURN 0;
END;
$$;


ALTER FUNCTION darwin2.fct_look_for_institution(fullname text) OWNER TO darwin2;

--
-- TOC entry 1876 (class 1255 OID 1440164)
-- Name: fct_look_for_people(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_look_for_people(fullname text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  ref_record integer :=0;
  result_nbr integer;
  searched_name text;
BEGIN
    result_nbr := 0;
    searched_name := fulltoindex(fullname); --|| '%'  ;
    FOR ref_record IN SELECT id from people p
      WHERE
        formated_name_indexed LIKE  searched_name
        OR  name_formated_indexed LIKE searched_name 
		OR LOWER(family_name) LIKE LOWER(fullname)
		LIMIT 2
    LOOP
      result_nbr := result_nbr +1;
    END LOOP;


    IF 	result_nbr  = 0 THEN
	FOR ref_record IN SELECT id from people p
	      WHERE
		(formated_name_indexed LIKE  searched_name|| '%' 
		OR  name_formated_indexed LIKE searched_name|| '%' )
		AND  fulltoindex(family_name) LIKE fulltoindex(TRIM(regexp_replace(fullname, '([A-Z]\.)','','g')))
			
			LIMIT 2
	    LOOP
	      result_nbr := result_nbr +1;
	    END LOOP;
    END IF;

	
    IF result_nbr = 1 THEN -- It's Ok!
      return ref_record;
    END IF;

    IF result_nbr >= 2 THEN
      return -1 ;-- To Much
     --ftheeten continue shouldn'y be there
      -- continue;
    END IF;
  RETURN 0;
END;
$$;


ALTER FUNCTION darwin2.fct_look_for_people(fullname text) OWNER TO darwin2;

--
-- TOC entry 1877 (class 1255 OID 1440165)
-- Name: fct_mask_date(timestamp without time zone, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_mask_date(date_fld timestamp without time zone, mask_fld integer) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$

  SELECT
CASE WHEN ($2 & 32)!=0 THEN date_part('year',$1)::text ELSE 'xxxx' END || '-' ||
CASE WHEN ($2 & 16)!=0 THEN lpad(date_part('month',$1)::text, 2, '0') ELSE 'xx' END || '-' ||
CASE WHEN ($2 & 8)!=0 THEN lpad(date_part('day',$1)::text, 2, '0') ELSE 'xx' END;
$_$;


ALTER FUNCTION darwin2.fct_mask_date(date_fld timestamp without time zone, mask_fld integer) OWNER TO darwin2;

--
-- TOC entry 1873 (class 1255 OID 1440166)
-- Name: fct_mask_date_dmy(timestamp without time zone, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_mask_date_dmy(date_fld timestamp without time zone, mask_fld integer) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$

  SELECT
  CASE WHEN ($2 & 8)!=0 THEN date_part('day',$1)::text ELSE 'xx' END|| '-'||
CASE WHEN ($2 & 16)!=0 THEN date_part('month',$1)::text ELSE 'xx' END || '-' ||
CASE WHEN ($2 & 32)!=0 THEN date_part('year',$1)::text ELSE 'xxxx'
END;
$_$;


ALTER FUNCTION darwin2.fct_mask_date_dmy(date_fld timestamp without time zone, mask_fld integer) OWNER TO darwin2;

--
-- TOC entry 1839 (class 1255 OID 1440167)
-- Name: fct_nbr_in_relation(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_nbr_in_relation() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  nbr integer = 0 ;
BEGIN
  SELECT count(record_id_2) INTO nbr FROM catalogue_relationships WHERE
      relationship_type = NEW.relationship_type
      AND record_id_1 = NEW.record_id_1
      AND referenced_relation = NEW.referenced_relation;

  IF NEW.relationship_type = 'current_name' THEN
    IF TG_OP = 'INSERT' THEN
      IF nbr > 0 THEN
	RAISE EXCEPTION 'Maximum number of renamed item reach';
      END IF;
    ELSE
      IF nbr > 1 THEN
	RAISE EXCEPTION 'Maximum number of renamed item reach';
      END IF;
    END IF;
  ELSEIF NEW.relationship_type = 'recombined from' THEN
    IF TG_OP = 'INSERT' THEN
      IF nbr > 1 THEN
	RAISE EXCEPTION 'Maximum number of recombined item reach';
      END IF;
    ELSE
      IF nbr > 2 THEN
	RAISE EXCEPTION 'Maximum number of recombined item reach';
      END IF;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_nbr_in_relation() OWNER TO darwin2;

--
-- TOC entry 1840 (class 1255 OID 1440168)
-- Name: fct_nbr_in_synonym(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_nbr_in_synonym() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  nbr integer = 0 ;
BEGIN

  SELECT count(id) INTO nbr FROM classification_synonymies WHERE
      referenced_relation = NEW.referenced_relation
      AND record_id = NEW.record_id
      AND group_name = NEW.group_name;

  IF TG_OP = 'INSERT' THEN
    IF nbr > 1 THEN
      RAISE EXCEPTION 'You can ''t set this synonym twice!';
    END IF;
  ELSE
--     RAISE info 'nbr %', nbr;
    IF nbr > 2 THEN
      RAISE EXCEPTION 'You can ''t set this synonym twice!';
    END IF;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_nbr_in_synonym() OWNER TO darwin2;

--
-- TOC entry 1841 (class 1255 OID 1440169)
-- Name: fct_rcma_sort_letter_before_numbers(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rcma_sort_letter_before_numbers(character varying) RETURNS character varying
    LANGUAGE sql
    AS $_$
  SELECT regexp_replace($1,'^([0-9])','zzz \1')  
$_$;


ALTER FUNCTION darwin2.fct_rcma_sort_letter_before_numbers(character varying) OWNER TO darwin2;

--
-- TOC entry 1844 (class 1255 OID 1440170)
-- Name: fct_reinit_sequences_synonyms(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_reinit_sequences_synonyms() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec_exists integer;
BEGIN
	  IF NEW.record_id != -1 THEN --ftheeten 2019 01 18
		  PERFORM SETVAL('classification_synonymies_group_id_seq', (SELECT MAX(group_id)+1 FROM classification_synonymies));
	  END IF;	
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_reinit_sequences_synonyms() OWNER TO darwin2;

--
-- TOC entry 1842 (class 1255 OID 1440171)
-- Name: fct_remove_array_elem(anyarray, anyarray); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyarray, OUT out_array anyarray) RETURNS anyarray
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
	SELECT array(select s FROM fct_explode_array (in_array)  as s WHERE NOT elem @> ARRAY[s]) INTO out_array;
END;
$$;


ALTER FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyarray, OUT out_array anyarray) OWNER TO darwin2;

--
-- TOC entry 1847 (class 1255 OID 1440172)
-- Name: fct_remove_array_elem(anyarray, anyelement); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyelement, OUT out_array anyarray) RETURNS anyarray
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
	SELECT array(select s FROM fct_explode_array (in_array)  as s WHERE s != elem) INTO out_array;
END;
$$;


ALTER FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyelement, OUT out_array anyarray) OWNER TO darwin2;

--
-- TOC entry 1848 (class 1255 OID 1440173)
-- Name: fct_remove_last_flag(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_remove_last_flag() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE informative_workflow
    SET is_last = false
    WHERE referenced_relation = NEW.referenced_relation
      AND record_id = NEW.record_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_remove_last_flag() OWNER TO darwin2;

--
-- TOC entry 1843 (class 1255 OID 1440174)
-- Name: fct_remove_last_flag_loan(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_remove_last_flag_loan() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE loan_status
    SET is_last = false
    WHERE loan_ref = NEW.loan_ref;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_remove_last_flag_loan() OWNER TO darwin2;

--
-- TOC entry 1845 (class 1255 OID 1440175)
-- Name: fct_remove_null_array_elem(anyarray); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_remove_null_array_elem(in_array anyarray, OUT out_array anyarray) RETURNS anyarray
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
	SELECT array(select s FROM fct_explode_array (in_array)  as s WHERE  s is not null) INTO out_array;
END;
$$;


ALTER FUNCTION darwin2.fct_remove_null_array_elem(in_array anyarray, OUT out_array anyarray) OWNER TO darwin2;

--
-- TOC entry 817 (class 1255 OID 1440176)
-- Name: fct_report_loans_addresses(integer, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_report_loans_addresses(loan_id integer, target_copy text) RETURNS TABLE(people_name text, institution_name text, address text)
    LANGUAGE sql
    AS $_$
  with
  people_infos as
  (
    select regexp_replace(p.formated_name, '\s+', ' ', 'g') as formated_name,
          regexp_replace(pp.formated_name, '\s+', ' ', 'g') as institution_name,
          case
          when (ppa.entry is not null
                AND trim(ppa.entry) != ''
                AND ppa.locality is not null
                AND trim(ppa.locality) != ''
                AND ppa.country is not null
                AND trim(ppa.country) != ''
          ) then
            ppa.entry ||
            case when (ppa.po_box is not null AND trim(ppa.po_box) != '') then
              ', ' || ppa.po_box
            else
              ''
            end ||
            case when (ppa.extended_address is not null AND trim(ppa.extended_address) != '') then
              E'\n' || ppa.extended_address
            else
              ''
            end ||
            case when (ppa.zip_code is not null AND trim(ppa.zip_code) != '') then
              E'\n' || ppa.zip_code || ' ' || ppa.locality ||
              case when (ppa.region is not null and trim(ppa.region) != '') then
                ' - ' || ppa.region
              else
                ''
              end
            else
              E'\n' || ppa.locality ||
              case when (ppa.region is not null and trim(ppa.region) != '') then
                ' - ' || ppa.region
              else
                ''
              end
            end ||
            E'\n' || ppa.country
          when (pa.entry is not null
                     AND trim(pa.entry) != ''
                     AND pa.locality is not null
                     AND trim(pa.locality) != ''
                     AND pa.country is not null
                     AND trim(pa.country) != ''
          ) then
            pa.entry ||
            case when (pa.po_box is not null AND trim(pa.po_box) != '') then
              ', ' || pa.po_box
            else
              ''
            end ||
            case when (pa.extended_address is not null AND trim(pa.extended_address) != '') then
              E'\n' || pa.extended_address
            else
              ''
            end ||
            case when (pa.zip_code is not null AND trim(pa.zip_code) != '') then
              E'\n' || pa.zip_code || ' ' || pa.locality ||
              case when (pa.region is not null and trim(pa.region) != '') then
                ' - ' || pa.region
              else
                ''
              end
            else
              E'\n' || pa.locality ||
              case when (pa.region is not null and trim(pa.region) != '') then
                ' - ' || pa.region
              else
                ''
              end
            end ||
            E'\n' || pa.country
          else
            null
          end::text as address
    from catalogue_people cp inner join people p on cp.people_ref = p.id
                             left join people_addresses pa on p.id = pa.person_user_ref and strpos(pa.tag, 'work') > 0
                             left join (
                                        people_relationships pr
                                        inner join
                                        people pp on pr.person_1_ref = pp.id and NOT pp.is_physical
                                        inner join people_addresses ppa on pp.id = ppa.person_user_ref
                                       ) on pr.person_2_ref = p.id and pr.relationship_type IN ('works for', 'belongs to')
    where referenced_relation = 'loans'
      and record_id = $1
      and people_type = 'receiver'
      and case when $2 IN ('Responsible copy', 'Copie responsable', 'Verantwoordelijk copie') then
            people_sub_type::integer&2 != 0
          else
            people_sub_type::integer&4 != 0
          end
      and p.is_physical
    order by order_by,(strpos(pa.tag, 'work') > 0),pr.activity_date_from desc
  ),
  institution_address as
  (
    select p.formated_name::text as name,
          case when (pa.entry is not null
                     AND trim(pa.entry) != ''
                     AND pa.locality is not null
                     AND trim(pa.locality) != ''
                     AND pa.country is not null
                     AND trim(pa.country) != ''
                    ) then
              pa.entry ||
              case when (pa.po_box is not null AND trim(pa.po_box) != '') then
                  ', ' || pa.po_box
              else
                  ''
              end ||
              case when (pa.extended_address is not null AND trim(pa.extended_address) != '') then
                  E'\n' || pa.extended_address
              else
                  ''
              end ||
              case when (pa.zip_code is not null AND trim(pa.zip_code) != '') then
                  E'\n' || pa.zip_code || ' ' || pa.locality ||
                  case when (pa.region is not null and trim(pa.region) != '') then
                    ' - ' || pa.region
                  else
                    ''
                  end
              else
                  E'\n' || pa.locality ||
                  case when (pa.region is not null and trim(pa.region) != '') then
                  ' - ' || pa.region
                  else
                  ''
                  end
              end ||
              E'\n' || pa.country
          else
              null
          end as address
    from catalogue_people cp inner join people p on cp.people_ref = p.id
                             left join people_addresses pa on p.id = pa.person_user_ref
    where referenced_relation = 'loans'
      and record_id = $1
      and people_type = 'receiver'
      and case when $2 IN ('Responsible copy', 'Copie responsable', 'Verantwoordelijk copie') then
            people_sub_type::integer&2 != 0
          else
            people_sub_type::integer&4 != 0
          end
      and NOT p.is_physical
    order by order_by
    limit 1
  )
  select
    array_to_string(array(select distinct on (formated_name) formated_name from people_infos),', ') as people_name,
    coalesce(
        (select name from institution_address),
        (select institution_name from people_infos where institution_name is not null limit 1)
    ) as institution_name,
    coalesce(
        (select address from institution_address),
        (select address from people_infos where address is not null limit 1)
    ) as address
$_$;


ALTER FUNCTION darwin2.fct_report_loans_addresses(loan_id integer, target_copy text) OWNER TO postgres;

--
-- TOC entry 1878 (class 1255 OID 1440177)
-- Name: fct_report_loans_forms(integer, text, text, text, text, boolean, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_report_loans_forms(loan_id integer, full_target_list text, short_target_list text, selected_target_list text, targeted_catalogues text, with_addr boolean DEFAULT false, lang text DEFAULT 'en'::text) RETURNS TABLE(target_copy text, loan_id integer, loan_name character varying, loan_description character varying, loan_purposes text, loan_conditions text, loan_reception_conditions text, loan_return_conditions text, loan_from_date text, loan_to_date text, loan_extended_to_date text, loan_receiver_name text, loan_receiver_institution_name text, loan_receiver_address text, loan_items_id text, loan_items_name character varying, loan_items_description text, loan_items_value numeric, loan_phantom_id text, loan_rbins_phantom_id text)
    LANGUAGE sql
    AS $_$
select vals.val as target_copy,
       loans.id,
       loans.name,
       loans.description,
       (select array_to_string(array_agg(comment), E'\n') from comments where referenced_relation = 'loans' and record_id = $1 and notion_concerned = 'usage') as loan_purposes,
       (select array_to_string(array_agg(comment), E'\n') from comments where referenced_relation = 'loans' and record_id = $1 and notion_concerned = 'state_observation') as loan_conditions,
       (select array_to_string(array_agg(comment), E'\n') from comments where referenced_relation = 'loans' and record_id = $1 and notion_concerned = 'reception_state_observation') as loan_reception_conditions,
       (select array_to_string(array_agg(comment), E'\n') from comments where referenced_relation = 'loans' and record_id = $1 and notion_concerned = 'return_state_observation') as loan_return_conditions,
       to_char(loans.from_date,'DD/MM/YYYY'),
       to_char(loans.to_date,'DD/MM/YYYY'),
       to_char(loans.extended_to_date,'DD/MM/YYYY'),
       case
        when $6 then
          (select people_name from fct_report_loans_addresses($1,vals.val))::text
        else
          ''::text
       end as loan_receiver_name,
       case
        when $6 then
          (select institution_name from fct_report_loans_addresses($1,vals.val))
        else
          ''::text
       end as loan_receiver_institution_name,
       case
        when $6 then
          (select address from fct_report_loans_addresses($1,vals.val))
        else
          ''::text
       end as loan_receiver_address,
       case
        when specimen_ref is null then
          coalesce (
              (
                select
                  case
                    when $7 = 'fr' then
                      'Codes temporaires: '
                    when $7 = 'nl' then
                      'Tijdelijke codes: '
                    else
                      'Temporary codes: '
                  end
                  ||
                  trim(
                       array_to_string(
                           array_agg(
                                       case
                                       when coalesce(code_prefix,'') != '' then
                                         code_prefix || coalesce(code_prefix_separator,'')
                                       else
                                         ''
                                       end ||
                                       coalesce(code,'') ||
                                       case
                                       when coalesce(code_suffix,'') != '' then
                                         coalesce(code_suffix_separator,'') || code_suffix
                                       else
                                         ''
                                       end
                                     ),
                           ', '
                       ),
                       ', '
                  )
                from codes
                where referenced_relation = 'loan_items'
                      and record_id = loan_items.id
                      and code_category = 'main'
                limit 3
              ), '')
        else
          'RBINS ID: ' || specimens.id  ||
          coalesce (
          (
            select E'\nCodes: ' || trim(array_to_string(array_agg(
              case
                when coalesce(code_prefix,'') != '' then
                  code_prefix || coalesce(code_prefix_separator,'')
                else
                  ''
              end ||
              coalesce(code,'') ||
              case
              when coalesce(code_suffix,'') != '' then
                coalesce(code_suffix_separator,'') || code_suffix
              else
                ''
              end
            ), ', '), ', ')
            from codes
            where referenced_relation = 'specimens'
              and record_id = specimens.id
              and code_category = 'main'
            limit 3
          ), '')
       end as loan_items_id,
       case
        when loan_items.specimen_ref is null then
          loan_items.details
        else
           trim(
             CASE
             WHEN 'taxonomy' = ANY (string_to_array(trim($5, '[]'), ', ')) AND coalesce(taxon_name, '') != ''
               THEN
                 taxon_name || E'\n'
             ELSE
               E'\n'
             END ||
             CASE
             WHEN 'chronostratigraphy' = ANY (string_to_array(trim($5, '[]'), ', ')) AND coalesce(chrono_name, '') != ''
               THEN
                 chrono_name || E'\n'
             ELSE
               E'\n'
             END ||
             CASE
             WHEN 'lithostratigraphy' = ANY (string_to_array(trim($5, '[]'), ', ')) AND coalesce(litho_name, '') != ''
               THEN
                 litho_name || E'\n'
             ELSE
               E'\n'
             END ||
             CASE
             WHEN 'lithology' = ANY (string_to_array(trim($5, '[]'), ', ')) AND coalesce(lithology_name, '') != ''
               THEN
                 lithology_name || E'\n'
             ELSE
               E'\n'
             END ||
             CASE
             WHEN 'mineralogy' = ANY (string_to_array(trim($5, '[]'), ', ')) AND coalesce(mineral_name, '') != ''
               THEN
                 mineral_name || E'\n'
             ELSE
               E'\n'
             END
           ,E'\n')
        end::text as loan_items_name,
        coalesce
        (
           (
             select trim(array_to_string(array_agg(comment), E'\n'), E'\n')
             from comments
             where referenced_relation = 'loan_items'
               and record_id = loan_items.id
               and notion_concerned = 'description'
             limit 3
           )
          ,
           (
             select trim(array_to_string(array_agg(comment), E'\n'), E'\n')
             from comments
             where referenced_relation = 'specimens'
                   and record_id = loan_items.specimen_ref
                   and notion_concerned = 'description'
             limit 3
           )
        ) as loan_items_description,
        coalesce
       (
            (
              select insurance_value
              from insurances
              where referenced_relation = 'loan_items'
                and record_id = loan_items.id
                and insurance_currency = '€'
                order by date_to desc
              limit 1
            )
          ,
            (
              select insurance_value
              from insurances
              where referenced_relation = 'specimens'
                    and record_id = loan_items.specimen_ref
                    and insurance_currency = '€'
              order by date_to desc
              limit 1
            )
        ) as loan_items_value,
       case
        when vals.val IN ('RBINS copy', 'Copie RBINS', 'RBINS copie') then
         loan_items.id::text
        else
         trim(coalesce(to_char(loans.from_date,'YY/MM-'),'') || loans.name || '-' || row_number() over (PARTITION BY vals.val ORDER BY vals.val_index, loans.id, loan_items.id))
       end as loan_phantom_id,
       case
        when vals.val IN ('RBINS copy', 'Copie RBINS', 'RBINS copie') then
          case
            when $7 = 'fr' then
              'ID item prêté: '
            when $7 = 'nl' then
              'ID geleend item: '
            else
              'Loan item ID: '
          end
          ||  loan_items.id || E'\n' ||
          case
            when $7 = 'fr' then
              'ID Fantôme: '
            else
              'Phantom ID: '
          end
          || trim(coalesce(to_char(loans.from_date,'YY/MM-'),'') || loans.name || '-' || row_number() over (PARTITION BY vals.val ORDER BY vals.val_index, loans.id, loan_items.id))
        else
          null::text
       end as loan_rbins_phantom_id
from ( select unnest(array_vals.val) as val, generate_series(1,array_vals.val_index) as val_index
       from (select case when exists ( select 1
                                       from catalogue_people
                                       where referenced_relation = 'loans'
                                         and record_id = $1
                                         and people_type = 'receiver'
                                         and people_sub_type::integer&2 != 0
                                       limit 1
                                     ) then
                      string_to_array(trim($2,'[]'), ', ')
                    else
                      string_to_array(trim($3,'[]'), ', ')
                    end as val,
                    case when exists ( select 1
                                       from catalogue_people
                                       where referenced_relation = 'loans'
                                         and record_id = $1
                                         and people_type = 'receiver'
                                         and people_sub_type::integer&2 != 0
                                       limit 1
                                     ) then
                      array_length(string_to_array(trim($2,'[]'), ', '),1)
                    else
                      array_length(string_to_array(trim($3,'[]'), ', '),1)
                    end as val_index
            ) as array_vals
     ) as vals,
loans
inner join loan_items on loans.id = loan_items.loan_ref
left join specimens on loan_items.specimen_ref = specimens.id
where loans.id = $1
  and exists(select 1
             from catalogue_people
             where referenced_relation = 'loans'
               and record_id = $1
               and people_type = 'receiver'
               and people_sub_type::integer&4 != 0
             limit 1
            )
  and vals.val IN ( select unnest(string_to_array(trim($4,'[]'), ', ')) )
order by vals.val_index,loans.id,row_number() over (PARTITION BY vals.val ORDER BY vals.val_index, loans.id, loan_items.id);
$_$;


ALTER FUNCTION darwin2.fct_report_loans_forms(loan_id integer, full_target_list text, short_target_list text, selected_target_list text, targeted_catalogues text, with_addr boolean, lang text) OWNER TO postgres;

--
-- TOC entry 1879 (class 1255 OID 1440179)
-- Name: fct_report_loans_maintenances(integer, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_report_loans_maintenances(loan_id integer, maintenance_type text) RETURNS TABLE(maintenance_date text, maintenance_people text, maintenance_people_functions text)
    LANGUAGE sql
    AS $_$
    with maintenance_people as (
        SELECT
          DISTINCT ON (maintenance_date, formated_name)
          CASE
          WHEN modification_date_time IN ('0001-01-01' :: TIMESTAMP, '2038-12-31' :: TIMESTAMP)
            THEN
              NULL
          ELSE
            TO_CHAR(modification_date_time, 'DD/MM/YYYY')
          END::TEXT                                      AS maintenance_date,
          regexp_replace(formated_name, '\s+', ' ', 'g') AS formated_name,
          case
            when person_user_role = '' then
              '*'
            else
              person_user_role
          end::text AS people_function
        FROM
          collection_maintenance
          INNER JOIN people
            ON collection_maintenance.people_ref = people.id
          LEFT JOIN people_relationships pr
            ON people.id = pr.person_2_ref
               AND pr.relationship_type IN ('works for', 'belongs to')
        WHERE collection_maintenance.referenced_relation = 'loans'
          AND collection_maintenance.record_id = $1
          AND collection_maintenance.action_observation = $2
        ORDER BY
          maintenance_date DESC,
          formated_name,
          pr.activity_date_to DESC,
          pr.activity_date_from DESC,
          case when person_user_role = '' then 'zzz' else person_user_role end::TEXT
    )
    select distinct on (maintenance_date)
      maintenance_date,
      trim(array_to_string(array_agg(formated_name) OVER (PARTITION BY maintenance_date), ', '), ', ') as maintenance_people,
      case
        when trim(array_to_string(array_agg(people_function) OVER (PARTITION BY maintenance_date), ', '), ', ') = '*' then
          null
        else
          trim(array_to_string(array_agg(people_function) OVER (PARTITION BY maintenance_date), ', '), ', ')
      end as maintenance_people
    from maintenance_people
    order by maintenance_date desc;
  $_$;


ALTER FUNCTION darwin2.fct_report_loans_maintenances(loan_id integer, maintenance_type text) OWNER TO postgres;

--
-- TOC entry 1880 (class 1255 OID 1440180)
-- Name: fct_report_loans_return_to(integer, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_report_loans_return_to(loan_id integer, lang text DEFAULT 'en'::text) RETURNS TABLE(return_message text)
    LANGUAGE sql
    AS $_$
  with communications as
  (
      select entry, comm_type, tag
      from collection_maintenance
        inner join people on collection_maintenance.people_ref = people.id
        inner join people_comm on people.id = people_comm.person_user_ref
      where referenced_relation = 'loans'
            and record_id = $1
            and action_observation = 'approval'
            and strpos(tag, 'work') > 0
  )
  select
    case
      when $2 = 'fr' then
        'Veuillez retourner une copie de ce formulaire par FAX au '
      when $2 = 'nl' then
        'Stuur een kopie van dit formulier per fax naar '
      else
        'Return a copy of this form by FAX at '
    end ||
    coalesce((select trim(array_to_string(array_agg(entry), ', '), ', ') from communications where comm_type = 'phone/fax' and strpos(tag, 'fax') > 0), '+32(0)2.627.41.13.') ||
    coalesce((select
                case
                  when $2 = 'fr' then
                    E'\nou par email à '
                  when $2 = 'nl' then
                    E'\nof bij email naar '
                  else
                    E'\nor by email at '
                end
                || trim(array_to_string(array_agg(entry), ', '), ', ') from communications where comm_type = 'e-mail'
             ), ''
            ) as return_message
  $_$;


ALTER FUNCTION darwin2.fct_report_loans_return_to(loan_id integer, lang text) OWNER TO postgres;

--
-- TOC entry 818 (class 1255 OID 1440181)
-- Name: fct_report_loans_transporters(integer, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_report_loans_transporters(loan_id integer, transporter_side text DEFAULT 'sender'::text, lang text DEFAULT 'en'::text) RETURNS TABLE(transport_dispatched_by text, transport_transporter_names text, transport_track_ids text)
    LANGUAGE sql
    AS $_$
    with
    transporters as (
        select
          case
          when cp.people_type = 'sender' then
            case
              when $3 = 'fr' then
                'prêteur'
              when $3 = 'nl' then
                'lener'
              else
                'loaner'
            end
          else
            case
              when $3 = 'fr' then
                'emprunteur'
              when $3 = 'nl' then
                'lener'
              else
                'borrower'
            end
          end as transport_dispatched_by,
          p.formated_name as transport_transporter_name
        from loans inner join catalogue_people cp
                   on cp.referenced_relation = 'loans'
                      and cp.record_id = loans.id
                      and cp.people_type IN ('sender', 'receiver')
                      and people_sub_type::integer&64 != 0
                   inner join people p on cp.people_ref = p.id
        where loans.id = $1
          and case
                when $2 IN ('sender', 'loaner') then
                  cp.people_type = 'sender'
                when $2 IN ('receiver', 'borrower') then
                  cp.people_type = 'receiver'
              else
                  false
              end
        order by cp.people_type, cp.order_by
    )
    select distinct on (transport_dispatched_by)
      transport_dispatched_by,
      trim(array_to_string(array_agg(transport_transporter_name) OVER (PARTITION BY transport_dispatched_by), ', '), ', ') as transport_transporter_names,
      case
        when transport_dispatched_by = 'loaner' then
          (
            select trim(array_to_string(array_agg(lower_value), ', '), ', ') as tracking_id
            from properties
            where referenced_relation = 'loans'
              and record_id = $1
              and fullToIndex(property_type) = 'trackingid'
              and applies_to_indexed = 'sender'
            group by fullToIndex(property_type)
            limit 1
          )
        else
        (
          select trim(array_to_string(array_agg(lower_value), ', '), ', ') as tracking_id
          from properties
          where referenced_relation = 'loans'
                and record_id = $1
                and fullToIndex(property_type) = 'trackingid'
                and applies_to_indexed = 'receiver'
          group by fullToIndex(property_type)
          limit 1
        )
      end as transport_track_ids
    from transporters;
  $_$;


ALTER FUNCTION darwin2.fct_report_loans_transporters(loan_id integer, transporter_side text, lang text) OWNER TO postgres;

--
-- TOC entry 819 (class 1255 OID 1440182)
-- Name: fct_rmca_abbreviate_names(character varying); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_rmca_abbreviate_names(given_name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 
	returned varchar;
	tmp varchar; --varchar[];
	i integer;
	i2 integer;
	begin_word boolean;
	delimiter_word boolean;
BEGIN
	IF TRIM(COALESCE(given_name,''))='' THEN
		return '';
	END IF;
	
	given_name:=given_name||'.';
	returned:=given_name;
	
	i2:=1;
	begin_word:=true;
	delimiter_word:=false;
	
	IF CHAR_LENGTH(TRIM(given_name)) >0 THEN
		returned:='';
	END IF;
	given_name:=regexp_replace(given_name, '\W?(\s)(\W)(\s)','\2');
	FOR i IN 1..CHAR_LENGTH(TRIM(given_name)) 
	LOOP
		tmp:=SUBSTRING(given_name FROM i FOR 1);
		
		IF begin_word  AND  tmp ~ '\w'  THEN
			returned:=returned||tmp;
			begin_word:=FALSE;
			delimiter_word:=FALSE;
		END IF;
		
		IF tmp ~ '\w' = FALSE AND delimiter_word = FALSE THEN
			IF tmp=' ' OR tmp='.' THEN 
				tmp:='. ';
			END IF;
			
			returned:=returned||tmp;
			delimiter_word:=TRUE;
			begin_word:=TRUE;
		END IF;
		
	END LOOP;
	RETURN TRIM(returned);
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_abbreviate_names(given_name character varying) OWNER TO postgres;

--
-- TOC entry 1882 (class 1255 OID 1440183)
-- Name: fct_rmca_check_integrity(character varying); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_rmca_check_integrity(p_schema character varying) RETURNS TABLE(type_constraint character varying, table_name character varying, nb_records bigint, foreign_key character varying, fk_col character varying, fk_table character varying, fk_pk_col character varying, all_fk_val bigint, distinct_fk_val bigint, integrity_problems bigint, debug_query character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
  rc_t record;
  rc_t2 record;
  nb_rec bigint;
BEGIN
	FOR rc_t IN SELECT * FROM pg_tables WHERE schemaname=p_schema
	LOOP
		table_name:=rc_t.tablename;
		EXECUTE 'SELECT count(*)::bigint FROM '||quote_ident(p_schema)||'.'||quote_ident(table_name) into nb_rec;
		type_constraint:='TABLE_COUNT';
		nb_records:=nb_rec;
		foreign_key:=NULL;
		fk_col:=NULL;
		fk_table:=NULL;
		fk_pk_col:=NULL;
		all_fk_val:=NULL;
		distinct_fk_val:=NULL;
		integrity_problems:=NULL;
		debug_query:='SELECT count(*)::bigint FROM '||quote_ident(p_schema)||'.'||quote_ident(table_name);
		RETURN NEXT;
		FOR rc_t2 IN SELECT
			tc.table_schema, 
			tc.constraint_name, 
			tc.table_name, 
			kcu.column_name, 
			ccu.table_schema AS foreign_table_schema,
			ccu.table_name AS foreign_table_name,
			ccu.column_name AS foreign_column_name 
		FROM 
			information_schema.table_constraints AS tc 
			JOIN information_schema.key_column_usage AS kcu
			  ON tc.constraint_name = kcu.constraint_name
			  AND tc.table_schema = kcu.table_schema
			JOIN information_schema.constraint_column_usage AS ccu
			  ON ccu.constraint_name = tc.constraint_name
			  AND ccu.table_schema = tc.table_schema
		WHERE tc.constraint_type = 'FOREIGN KEY' 
		AND tc.table_schema=p_schema AND tc.table_name=rc_t.tablename
		LOOP 
		type_constraint:='FOREIGN_KEY';
		    nb_records:=NULL;
			table_name:=rc_t.tablename;
			foreign_key:=rc_t2.constraint_name;
			fk_col:=rc_t2.column_name;
			fk_table:=rc_t2.foreign_table_name;
			fk_pk_col:=rc_t2.foreign_column_name;
			EXECUTE 'SELECT COUNT(*)::bigint, COUNT(DISTINCT '||quote_ident(fk_col)||')::bigint FROM '||quote_ident(p_schema)||'.'||quote_ident(table_name) into all_fk_val, distinct_fk_val;
			EXECUTE 'SELECT COUNT(*)::bigint FROM '
			||quote_ident(p_schema)||'.'||quote_ident(table_name)
				||' LEFT JOIN '||quote_ident(p_schema)||'.'||quote_ident(rc_t2.foreign_table_name)
				||' as j_jt ON '||quote_ident(table_name)||'.'||quote_ident(rc_t2.column_name)||'='
				||'j_jt.'||quote_ident(fk_pk_col)
				||' WHERE j_jt.'||quote_ident(fk_pk_col)
				||' IS NOT NULL AND '
				|| 'j_jt.'||quote_ident(fk_pk_col)
				||' IS NULL ' into integrity_problems ;
			debug_query:=	 'SELECT COUNT(*)::bigint FROM '
			||quote_ident(p_schema)||'.'||quote_ident(table_name)
				||' LEFT JOIN '||quote_ident(p_schema)||'.'||quote_ident(rc_t2.foreign_table_name)
				||' as j_jt ON '||quote_ident(table_name)||'.'||quote_ident(rc_t2.column_name)||'='
				||'j_jt.'||quote_ident(fk_pk_col)
				||' WHERE '||quote_ident(p_schema)||'.'||quote_ident(rc_t2.foreign_table_name)
				||' IS NOT NULL AND '
				|| 'j_jt.'||quote_ident(fk_pk_col)
				||' IS NULL ';
			RETURN NEXT; 
		END LOOP;
	END LOOP;  

END
$$;


ALTER FUNCTION darwin2.fct_rmca_check_integrity(p_schema character varying) OWNER TO postgres;

--
-- TOC entry 1883 (class 1255 OID 1440184)
-- Name: fct_rmca_chk_is_already_reference_taxo(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_chk_is_already_reference_taxo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	tmp_taxon varchar;
	check_is_reference boolean;
BEGIN
--ftheeten 2017 07 03
raise notice 'test';
 SELECT is_reference_taxonomy INTO check_is_reference FROM taxonomy_metadata WHERE id=NEW.metadata_ref LIMIT 1;
  IF check_is_reference=TRUE THEN
	IF (TG_OP = 'INSERT') THEN
	   PERFORM * FROM taxonomy 
	   LEFT JOIN taxonomy_metadata
	   ON taxonomy.metadata_ref=taxonomy_metadata.id

	   WHERE name_indexed=fulltoindex(NEW.name) AND level_ref=NEW.level_ref  AND taxonomy_metadata.is_reference_taxonomy=true;
	    IF FOUND THEN
		RAISE EXCEPTION 'This taxon can be only present once in the reference taxonomy, check %', NEW.name;
	    END IF;
	ELSEIF (TG_OP = 'UPDATE') THEN
		SELECT name INTO tmp_taxon FROM taxonomy
		LEFT JOIN taxonomy_metadata
		ON taxonomy.metadata_ref=taxonomy_metadata.id
		 WHERE name_indexed=fulltoindex(NEW.name) AND level_ref=NEW.level_ref  AND taxonomy_metadata.is_reference_taxonomy=true AND taxonomy.id <>NEW.id AND metadata_Ref=NEW.metadata_ref;
	    IF FOUND THEN
		RAISE EXCEPTION 'This taxon can be only present once in the reference taxonomy, check %', tmp_taxon;
	    END IF;
	END IF;
   --ELSE
   --      IF LENGTH(TRIM(COALESCE(NEW.source,'')))=0 THEN
--		RAISE EXCEPTION 'Please specify a source for alternate taxonomies';
   --      END IF;	    
   END IF;	    
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_chk_is_already_reference_taxo() OWNER TO darwin2;

--
-- TOC entry 1881 (class 1255 OID 1440185)
-- Name: fct_rmca_chk_only_one_reference_taxo(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_chk_only_one_reference_taxo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	
BEGIN
  
	IF (SELECT COUNT(*) FROM taxonomy_metadata where is_reference_taxonomy=TRUE)>=1 THEN
		RAISE EXCEPTION 'A reference taxonomy already exists in this database (only one is supported)';
	END IF;
   
 	    
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_chk_only_one_reference_taxo() OWNER TO darwin2;

--
-- TOC entry 1884 (class 1255 OID 1440186)
-- Name: fct_rmca_chk_uniqueness_reference_taxo(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	cursor_tmp RECORD;
	duplicates  varchar[];
	test_refs int[];
	i INTEGER;	
BEGIN
--ftheeten 2017 07 03

		   IF new.is_reference_taxonomy =TRUE THEN
				IF (SELECT COUNT(*) FROM taxonomy_metadata where is_reference_taxonomy=TRUE AND id !=NEW.id)>=1 THEN
					RAISE EXCEPTION 'A reference taxonomy already exists in this database (only one is supported)';
				END IF;
				IF new.is_reference_taxonomy =TRUE AND TG_OP = 'UPDATE' THEN
			i:=0;
			test_refs:=test_refs||new.id;
			FOR  cursor_tmp IN 
				SELECT count(*), 
					array_to_string(array_agg(name), '; '::varchar) as name
					FROM taxonomy WHERE taxonomy.metadata_Ref=NEW.ID 
					GROUP BY name_indexed , level_ref HAVING count(*) > 1
			LOOP 
				duplicates:=duplicates||cursor_tmp.name;
				i:=i+1;

			END LOOP;
	
	
			IF i>0 THEN
				RAISE EXCEPTION 'Some taxa are present several times in the reference taxonomy, check %', array_to_string(duplicates,',');
			END IF;
		END IF;
   END IF;

	    
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo() OWNER TO darwin2;

--
-- TOC entry 1774 (class 1255 OID 1440187)
-- Name: fct_rmca_collection_access_rights(integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_access_rights(id_user integer, with_writing boolean DEFAULT false) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
declare 
 user_type integer;
 returned integer[];
begin
	SELECT db_user_type INTO user_type FROM users WHERE id=id_user;
	IF user_type = 8 THEN
		 SELECt array_agg(id) INTO returned FROM collections;
	ELSE
		IF with_writing = TRUE THEN
			SELECT array_agg(id) into returned FROM darwin2.collections_rights WHERE user_ref=id_user
			AND db_user_type>=2; 
		ELSE
			SELECT array_agg(id) into returned FROM
			(SELECT id FROM collections_rights WHERE user_ref=id_user
			UNION SELECT id FROM collections WHERE is_public=true) a; 
		
		END IF;
	END IF;
	RETURN returned;
end;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_access_rights(id_user integer, with_writing boolean) OWNER TO darwin2;

--
-- TOC entry 1783 (class 1255 OID 1440188)
-- Name: fct_rmca_collection_access_rights_array(integer, integer[], boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_access_rights_array(id_user integer, searched_cols integer[], with_writing boolean DEFAULT false) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
declare 
 user_type integer;
 returned integer[];
begin
	SELECT db_user_type INTO user_type FROM users WHERE id=id_user;
	IF user_type = 8 THEN
		 SELECt array_agg(id) INTO returned FROM collections;
	ELSE
		IF with_writing = TRUE THEN
			SELECT array_agg(id) into returned FROM darwin2.collections_rights WHERE user_ref=id_user
			AND db_user_type>=2; 
		ELSE
			SELECT array_agg(id) into returned FROM
			(SELECT id FROM collections_rights WHERE user_ref=id_user
			UNION SELECT id FROM collections WHERE is_public=true) a; 
		
		END IF;
	END IF;
	RETURN returned & searched_cols;
end;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_access_rights_array(id_user integer, searched_cols integer[], with_writing boolean) OWNER TO darwin2;

--
-- TOC entry 820 (class 1255 OID 1440189)
-- Name: fct_rmca_collection_calculate_autoincrement_hierarchy(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_calculate_autoincrement_hierarchy(col_id integer) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned BIGINT;
	row_col record;

BEGIN
	returned :=0;
	FOR row_col IN
		SELECT a.*,code_auto_increment, code_ai_inherit , code_last_value ,

		strpos(a.path , '/'||parent||'/')
		FROM

		(SELECT unnest(string_to_array(path||'/'||id::varchar||'/','/')) as parent, id, path  from collections)  a
		LEFT JOIN collections
		ON a.parent=collections.id::varchar
		WHERE parent is not null and length(parent)>0
		AND a.id=col_id
		ORDER BY strpos(a.path , '/'||parent||'/') DESC
		LOOP
			RAISE NOTICE '%', row_col.parent;
			IF  row_col.code_last_value>returned THEN
				SELECT max(code_num) INTO returned
                                   FROM codes inner join specimens
                                     ON codes.referenced_relation = 'specimens'
                                    
                                   WHERE codes.code_category = 'main'
                                     AND specimens.collection_ref = row_col.id
                                     AND codes.code_num IS NOT NULL;
				--returned :=row_col.code_last_value;
			END IF;
			IF  row_col.code_ai_inherit IS NOT TRUE THEN
				EXIT;
			END IF; 
			
		END LOOP;
		
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_calculate_autoincrement_hierarchy(col_id integer) OWNER TO darwin2;

--
-- TOC entry 846 (class 1255 OID 1440190)
-- Name: fct_rmca_collection_check_code_unicity(integer, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_check_code_unicity(col_id integer, code_indexed character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned boolean;
	row_col record;
	indexed_form varchar;

BEGIN
	returned :=false;
	indexed_form= fulltoindex(code_indexed);
	RAISE NOTICE 'call check % % ' , col_id, code_indexed;
	PERFORM codes.id FROM specimens LEFT JOIN codes ON specimens.id=codes.record_id AND referenced_relation='specimens' and code_category='main' WHERE codes.id IS NOT NULL 
			and specimens.collection_ref=col_id AND full_code_indexed=indexed_form ;
			IF FOUND THEN
				RAISE NOTICE 'Duplicate found';
				RETURN	true;
			END IF;
	FOR row_col IN
		SELECT a.*,code_auto_increment, code_ai_inherit , code_last_value ,

		strpos(a.path , '/'||parent||'/')
		FROM

		(SELECT unnest(string_to_array(path||'/'||col_id||'/','/')) as parent, id, path  from collections)  a
		LEFT JOIN collections
		ON a.parent=collections.id::varchar
		WHERE parent is not null and length(parent)>0
		AND a.id=col_id
		ORDER BY strpos(a.path , '/'||parent||'/') DESC
		LOOP
			RAISE notice '%', row_col.parent;
			RAISE notice '%', indexed_form;
			PERFORM codes.id FROM specimens LEFT JOIN codes ON specimens.id=codes.record_id AND referenced_relation='specimens' and code_category='main' WHERE codes.id IS NOT NULL 
			and specimens.collection_ref::varchar=row_col.parent AND full_code_indexed=indexed_form ;
			IF FOUND THEN
				RAISE NOTICE 'Duplicate found';
				RETURN	true;
			END IF;
			--UPDATE collections SET code_last_value= new_code_value WHERE id=row_col.parent;
			--returned :=TRUE;
			IF  row_col.code_ai_inherit IS NOT TRUE THEN
				RAISE NOTICE 'exit';
				EXIT;
			END IF; 
			
		END LOOP;
		
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_check_code_unicity(col_id integer, code_indexed character varying) OWNER TO darwin2;

--
-- TOC entry 1885 (class 1255 OID 1440191)
-- Name: fct_rmca_collection_get_autoincrement_hierarchy(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_get_autoincrement_hierarchy(col_id integer) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned BIGINT;
	row_col record;

BEGIN
	returned :=0;
	FOR row_col IN
		SELECT a.*,code_auto_increment, code_ai_inherit , code_last_value ,

		strpos(a.path , '/'||parent||'/')
		FROM

		(SELECT unnest(string_to_array(path||'/'||id::varchar||'/','/')) as parent, id, path  from collections)  a
		LEFT JOIN collections
		ON a.parent=collections.id::varchar
		WHERE parent is not null and length(parent)>0
		AND a.id=col_id
		ORDER BY strpos(a.path , '/'||parent||'/') DESC
		LOOP
			RAISE NOTICE '%', row_col.parent;
			IF  row_col.code_last_value>returned THEN
				
				returned :=row_col.code_last_value;
			END IF;
			IF  row_col.code_ai_inherit IS NOT TRUE THEN
				EXIT;
			END IF; 
			
		END LOOP;
		
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_get_autoincrement_hierarchy(col_id integer) OWNER TO darwin2;

--
-- TOC entry 1888 (class 1255 OID 1440192)
-- Name: fct_rmca_collection_get_collections_ai_hierarchy(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_get_collections_ai_hierarchy(col_id integer) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned integer[];
	row_col record;

BEGIN
	returned :='{}';
	FOR row_col IN
		SELECT a.*,code_auto_increment, code_ai_inherit , code_last_value ,

		strpos(a.path , '/'||parent||'/')
		FROM

		(SELECT unnest(string_to_array(path||'/'||id::varchar||'/','/')) as parent, id, path  from collections)  a
		LEFT JOIN collections
		ON a.id=collections.id
		WHERE parent is not null and length(parent)>0
		AND a.id=col_id
		ORDER BY strpos(a.path , '/'||parent||'/') DESC
		LOOP
			RAISE NOTICE 'SEARCH %',col_id ;
			IF row_col.code_auto_increment is TRUE THEN
				col_id=row_col.parent::integer;
				returned :=returned||col_id;
				IF  row_col.code_ai_inherit IS NOT TRUE THEN
					RAISE NOTICE 'EXIT %',col_id ;
					EXIT;
				END IF; 
			END IF;	
		END LOOP;
		
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_get_collections_ai_hierarchy(col_id integer) OWNER TO darwin2;

--
-- TOC entry 1886 (class 1255 OID 1440193)
-- Name: fct_rmca_collection_update_autoincrements_hierarchy(integer, bigint); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_collection_update_autoincrements_hierarchy(col_id integer, new_code_value bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned boolean;
	row_col record;

BEGIN
	returned :=false;
	FOR row_col IN
		SELECT a.*,code_auto_increment, code_ai_inherit , code_last_value ,

		strpos(a.path , '/'||parent||'/')
		FROM

		(SELECT unnest(string_to_array(path||'/'||col_id||'/','/')) as parent, id, path  from collections)  a
		LEFT JOIN collections
		ON a.parent=collections.id::varchar
		WHERE parent is not null and length(parent)>0
		AND a.id=col_id
		ORDER BY strpos(a.path , '/'||parent||'/') DESC
		LOOP
			
			UPDATE collections SET code_last_value= new_code_value WHERE id::varchar=row_col.parent;
			returned :=TRUE;
			IF  row_col.code_ai_inherit IS NOT TRUE THEN
				EXIT;
			END IF; 
			
		END LOOP;
		
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_collection_update_autoincrements_hierarchy(col_id integer, new_code_value bigint) OWNER TO darwin2;

--
-- TOC entry 1892 (class 1255 OID 1440194)
-- Name: fct_rmca_compare_taxonomy_staging_darwin(integer, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin(req_import_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false) RETURNS TABLE(id integer, name character varying, staging_catalogue_hierarchy character varying, darwin_hierarchy character varying, level_name character varying, level_ref integer)
    LANGUAGE sql
    AS $_$ SELECT distinct staging_catalogue.id, staging_catalogue.name, fct_rmca_sort_taxon_path_alphabetically_staging(staging_catalogue.id,$2, $3)

as staging_catalogue_hierarchy 

, 
fct_rmca_sort_taxon_path_alphabetically(path||taxonomy.id::varchar

,
1 , true, false
) as darwin_hierarchy, level_name, 
staging_catalogue.level_ref
 from staging_catalogue

LEFT JOIN taxonomy ON fulltoindex(name_indexed, false)= fulltoindex(staging_catalogue.name, false) and staging_catalogue.level_ref=taxonomy.level_ref
LEFT JOIN catalogue_levels
ON staging_catalogue.level_ref=catalogue_levels.id
 WHERE staging_catalogue.import_ref=$1
 AND taxonomy.is_reference_taxonomy=TRUE
 AND path !='/' and

fct_rmca_sort_taxon_path_alphabetically(path||taxonomy.id::varchar

,
1 , $2, $3
)
 !=

 fct_rmca_sort_taxon_path_alphabetically_staging(staging_catalogue.id,$2, $3) order by staging_catalogue.level_ref, staging_catalogue.name;
 $_$;


ALTER FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin(req_import_ref integer, with_rank boolean, is_indexed boolean) OWNER TO darwin2;

--
-- TOC entry 1889 (class 1255 OID 1440195)
-- Name: fct_rmca_compare_taxonomy_staging_darwin_non_reference(integer, integer, boolean, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false, match_invalid_units boolean DEFAULT true) RETURNS TABLE(id integer, name character varying, staging_catalogue_hierarchy character varying, darwin_hierarchy character varying, level_name character varying, level_ref integer, taxonomic_id integer, msg character varying)
    LANGUAGE plpgsql
    AS $$ 
BEGIN
IF match_invalid_units IS FALSE THEN
	RETURN QUERY 
		SELECT * 
		, 
			CASE 
			WHEN 
			taxonomy_id is NULL THEN
			'taxon_to_be_created'::varchar
			when
			POSITION(LOWER(subquery.staging_catalogue_hierarchy) IN LOWER(subquery.darwin_hierarchy)) >0 THEN
			'taxonomic_hierarchy_already_exists'::varchar
			WHEN 
			POSITION(LOWER(subquery.staging_catalogue_hierarchy) IN LOWER(subquery.darwin_hierarchy)) =0 THEN
			'taxonomic_conflict'::varchar

			END


		FROM (SELECT 
		a.base_id as id, 
		a.base_name as name, 
		a.path as staging_catalogue_hierarchy, 
		fct_rmca_sort_taxon_path_alphabetically(b.path||b.id::varchar

			,
			1 , true, false
			)  darwin_hierarchy , 
		c.level_name, 
		c.id level_ref , 
		b.id as taxonomy_id 

		 FROM fct_rmca_taxonomy_get_staging_hierarchy_recursive(req_import_ref) a
		LEFT JOIN taxonomy b ON fulltoindex(name_indexed, false)= fulltoindex(a.base_name, false) and a.base_level_ref=b.level_ref
			 AND b.metadata_ref=var_metadata_ref
			 AND b.status !='invalid'

		LEFT JOIN catalogue_levels c
			ON a.base_level_ref=c.id
			) subquery
		;

ELSE
	RETURN QUERY 
		SELECT * 
		, 
			CASE 
			WHEN 
			taxonomy_id is NULL THEN
			'taxon_to_be_created'::varchar
			when
			POSITION(LOWER(subquery.staging_catalogue_hierarchy) IN LOWER(subquery.darwin_hierarchy)) >0 THEN
			'taxonomic_hierarchy_already_exists'::varchar
			WHEN 
			POSITION(LOWER(subquery.staging_catalogue_hierarchy) IN LOWER(subquery.darwin_hierarchy)) =0 THEN
			'taxonomic_conflict'::varchar

			END


		FROM (SELECT 
		a.base_id as id, 
		a.base_name as name, 
		a.path as staging_catalogue_hierarchy, 
		fct_rmca_sort_taxon_path_alphabetically(b.path||b.id::varchar

			,
			1 , true, false
			)  darwin_hierarchy , 
		c.level_name, 
		c.id level_ref , 
		b.id as taxonomy_id 

		 FROM fct_rmca_taxonomy_get_staging_hierarchy_recursive(req_import_ref) a
		LEFT JOIN taxonomy b ON fulltoindex(name_indexed, false)= fulltoindex(a.base_name, false) and a.base_level_ref=b.level_ref
			 AND b.metadata_ref=var_metadata_ref
		LEFT JOIN catalogue_levels c
			ON a.base_level_ref=c.id
			) subquery
		;

 END IF;
 END 
 $$;


ALTER FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean) OWNER TO darwin2;

--
-- TOC entry 1896 (class 1255 OID 1440196)
-- Name: fct_rmca_compare_taxonomy_staging_darwin_reference(integer, boolean, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false, match_invalid_units boolean DEFAULT true) RETURNS TABLE(id integer, name character varying, staging_catalogue_hierarchy character varying, darwin_hierarchy character varying, level_name character varying, level_ref integer, taxonomic_id integer, msg character varying)
    LANGUAGE plpgsql
    AS $_$ 
BEGIN
IF match_invalid_units IS FALSE THEN
	RETURN QUERY SELECT a.*, 
	CASE 
	WHEN 
	taxonomy_id is NULL THEN
	'taxon_to_be_created'::varchar
	when
	staging_catalogue_hierarchy_db=darwin_hierarchy_db THEN
	'taxonomic_hierarchy_already_exists'::varchar
	WHEN 
	staging_catalogue_hierarchy_db <> darwin_hierarchy_db THEN
	'taxonomic_conflict_in_reference'::varchar

	END

	 FROM (SELECT distinct 

	staging_catalogue.id, staging_catalogue.name, fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(staging_catalogue.id,req_import_ref, $2, $3)

	as staging_catalogue_hierarchy_db 

	, 
	fct_rmca_sort_taxon_path_alphabetically(path||taxonomy.id::varchar

	,
	1 , true, false
	) as darwin_hierarchy_db, catalogue_levels.level_name,

	staging_catalogue.level_ref,
	taxonomy.id  as taxonomy_id
	 from staging_catalogue

	LEFT JOIN taxonomy ON fulltoindex(name_indexed, false)= fulltoindex(staging_catalogue.name, false) and staging_catalogue.level_ref=taxonomy.level_ref
	 AND taxonomy.is_reference_taxonomy=TRUE
	LEFT JOIN catalogue_levels
	ON staging_catalogue.level_ref=catalogue_levels.id
	 WHERE staging_catalogue.import_ref=$1 AND taxonomy.status !='invalid'

	 ORDER BY staging_catalogue.level_ref, staging_catalogue.name) a ;

ELSE

	RETURN QUERY SELECT a.*, 
	CASE 
	WHEN 
	taxonomy_id is NULL THEN
	'taxon_to_be_created'::varchar
	when
	staging_catalogue_hierarchy_db=darwin_hierarchy_db THEN
	'taxonomic_hierarchy_already_exists'::varchar
	WHEN 
	staging_catalogue_hierarchy_db <> darwin_hierarchy_db THEN
	'taxonomic_conflict_in_reference'::varchar

	END

	 FROM (SELECT distinct 

	staging_catalogue.id, staging_catalogue.name, fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(staging_catalogue.id,req_import_ref, $2, $3)

	as staging_catalogue_hierarchy_db 

	, 
	fct_rmca_sort_taxon_path_alphabetically(path||taxonomy.id::varchar

	,
	1 , true, false
	) as darwin_hierarchy_db,  catalogue_levels.level_name,

	staging_catalogue.level_ref,
	taxonomy.id  as taxonomy_id
	 from staging_catalogue

	LEFT JOIN taxonomy ON fulltoindex(name_indexed, false)= fulltoindex(staging_catalogue.name, false) and staging_catalogue.level_ref=taxonomy.level_ref
	 AND taxonomy.is_reference_taxonomy=TRUE
	LEFT JOIN catalogue_levels
	ON staging_catalogue.level_ref=catalogue_levels.id
	 WHERE staging_catalogue.import_ref=$1

	 ORDER BY  staging_catalogue.level_ref, staging_catalogue.name) a ;
   END IF;
 END 
 $_$;


ALTER FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean) OWNER TO darwin2;

--
-- TOC entry 1894 (class 1255 OID 1440197)
-- Name: fct_rmca_compare_taxonomy_staging_darwin_tagging(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_tagging(req_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	check_duplicates_hierarchies RECORD;
	returned  boolean;
BEGIN 

	returned:=TRUE;
	UPDATE staging_catalogue SET hierarchical_conflict = FALSE WHERE import_ref=req_import_ref;
	PERFORM * FROM  fct_rmca_compare_taxonomy_staging_darwin(req_import_ref);
		IF FOUND THEN
			
			FOR check_duplicates_hierarchies IN SELECT * FROM  fct_rmca_compare_taxonomy_staging_darwin(req_import_ref)
			LOOP 			
				UPDATE staging_catalogue SET hierarchical_conflict = TRUE WHERE import_ref=req_import_ref AND staging_catalogue.level_ref=check_duplicates_hierarchies.level_ref AND staging_catalogue.name=check_duplicates_hierarchies.name;
			END LOOP;
			UPDATE imports SET state='error' , errors_in_import= 'taxonomic_conflict' ,working=false WHERE id=req_import_ref;
			returned:=FALSE;
		END IF;
		RETURN returned;
END;


 $$;


ALTER FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_tagging(req_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1897 (class 1255 OID 1440198)
-- Name: fct_rmca_concatenate_comment(integer, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_concatenate_comment(record_ref integer, relation character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
	DECLARE
		returned varchar;
	BEGIN
		SELECT  
		string_agg(DISTINCT btrim((COALESCE(c.notion_concerned, ''::character varying)::text || ' : '::text) || COALESCE(c.comment)), '|'::text 
				   ORDER BY 
				   (btrim((COALESCE(c.notion_concerned, ''::character varying)::text
						   || ' : '::text) || COALESCE(c.comment))), '|'::text)
		INTO returned FROM comments c WHERE 
		record_id=record_ref AND referenced_relation=relation;
		RETURN returned;
	END;
$$;


ALTER FUNCTION darwin2.fct_rmca_concatenate_comment(record_ref integer, relation character varying) OWNER TO darwin2;

--
-- TOC entry 1895 (class 1255 OID 1440199)
-- Name: fct_rmca_concatenate_properties(integer, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_concatenate_properties(record_ref integer, relation character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
	DECLARE
		returned varchar;
	BEGIN
		SELECT  
		 string_agg(DISTINCT btrim(((COALESCE((p.property_type::text || COALESCE(' - '::text || p.applies_to::text, ''::text)) || ' : '::text, ''::text) || COALESCE(p.lower_value, ''::character varying)::text) || COALESCE('-'::text || p.upper_value::text, ''::text)) || COALESCE(' '::text || p.property_unit::text, ''::text)), '|'::text ORDER BY (btrim(((COALESCE((p.property_type::text || COALESCE(' - '::text || p.applies_to::text, ''::text)) || ' : '::text, ''::text) || COALESCE(p.lower_value, ''::character varying)::text) || COALESCE('-'::text || p.upper_value::text, ''::text)) || COALESCE(' '::text || p.property_unit::text, ''::text))), '|'::text) 
		INTO returned FROM properties p WHERE
		record_id=record_ref AND referenced_relation=relation;
		RETURN returned;
	END;
$$;


ALTER FUNCTION darwin2.fct_rmca_concatenate_properties(record_ref integer, relation character varying) OWNER TO darwin2;

--
-- TOC entry 821 (class 1255 OID 1440200)
-- Name: fct_rmca_document_taxonomy_staging_darwin_non_reference(integer, integer, boolean, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false, match_invalid_taxonomies boolean DEFAULT true) RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	curs_taxo  RECORD ; 
	returned boolean;
BEGIN 

	returned = false;
	for curs_taxo IN SELECT *  FROM fct_rmca_compare_taxonomy_staging_darwin_non_reference(req_import_ref, var_metadata_ref, with_rank, is_indexed, match_invalid_taxonomies)
	LOOP
		UPDATE staging_catalogue SET import_exception=curs_taxo.msg, staging_hierarchy=curs_taxo.staging_catalogue_hierarchy, darwin_hierarchy=curs_taxo.darwin_hierarchy WHERE id=curs_taxo.id;
	END LOOP;
	returned:=TRUE;
	return returned;
END
 $$;


ALTER FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean) OWNER TO darwin2;

--
-- TOC entry 1891 (class 1255 OID 1440201)
-- Name: fct_rmca_document_taxonomy_staging_darwin_reference(integer, boolean, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false, match_invalid_taxonomies boolean DEFAULT true) RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	curs_taxo  RECORD ; 
	returned boolean;
BEGIN 

	returned = false;
	for curs_taxo IN SELECT *  FROM fct_rmca_compare_taxonomy_staging_darwin_reference(req_import_ref, with_rank, is_indexed, match_invalid_taxonomies)
	LOOP
		UPDATE staging_catalogue SET import_exception=curs_taxo.msg, staging_hierarchy=curs_taxo.staging_catalogue_hierarchy, darwin_hierarchy=curs_taxo.darwin_hierarchy WHERE id=curs_taxo.id;
	END LOOP;
	returned:=TRUE;
	return returned;
END
 $$;


ALTER FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean) OWNER TO darwin2;

--
-- TOC entry 822 (class 1255 OID 1440202)
-- Name: fct_rmca_dynamic_saved_search(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sql varchar;

	where_part varchar;
	param_part varchar;
	param_part_array varchar[];
	elem varchar;
	subst_where_part varchar[];
	
BEGIN

	SELECT  query_where, query_parameters  into   where_part, param_part FROM my_saved_searches WHERE id=id_query AND user_ref= id_user LIMIT 1;
	select array_agg(i) into subst_where_part
		FROM(
		SELECT (regexp_matches(where_part
		,'(''.*?'')'
		,'g'
		))[1] i
		) t
		;
	
	
	param_part_array=regexp_split_to_array(param_part, ';(?=|)'); 
	
	FOR i in 2..array_length( param_part_array,1)	LOOP
		elem:=regexp_replace(trim(param_part_array[i]), '^(\|)','');
		elem:=regexp_replace(trim(elem), '(\|)$','');
		elem=replace(elem,'''','''''');
		where_part:=regexp_replace(where_part, '(\?)',''''||elem||'''');
		
	END LOOP;
	IF  array_length( subst_where_part,1) IS NOT NULL  THEN
		FOR i in 1..array_length( subst_where_part,1)	LOOP
			where_part:=regexp_replace(where_part, 'DW_WORD_SQL',subst_where_part[i]);
			
		END LOOP;
	END IF;
		

	 RETURN QUERY EXECUTE 'SELECT s.id '||where_part;
END
$_$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer) OWNER TO darwin2;

--
-- TOC entry 1903 (class 1255 OID 1440203)
-- Name: fct_rmca_dynamic_saved_search(integer, integer, integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer, page integer, page_size integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sql varchar;

	where_part varchar;
	param_part varchar;
	param_part_array varchar[];
	elem varchar;
	current_offset integer;
	subst_where_part varchar[];
	
BEGIN

        current_offset=(page-1)*page_size;
	SELECT  query_where, query_parameters  into   where_part, param_part FROM my_saved_searches WHERE id=id_query AND user_ref= id_user LIMIT 1;
		select array_agg(i) into subst_where_part
		FROM(
		SELECT (regexp_matches(where_part
		,'(''.*?'')'
		,'g'
		))[1] i
		) t
		;
	
	param_part_array=regexp_split_to_array(param_part, ';(?=|)'); 
	
	FOR i in 2..array_length( param_part_array,1)	LOOP
		elem:=regexp_replace(trim(param_part_array[i]), '^(\|)','');
		elem:=regexp_replace(trim(elem), '(\|)$','');
		elem=replace(elem,'''','''''');
		where_part:=regexp_replace(where_part, '(\?)',''''||elem||'''');
		
	END LOOP;
	IF  array_length( subst_where_part,1) IS NOT NULL  THEN
		FOR i in 1..array_length( subst_where_part,1)	LOOP
			where_part:=regexp_replace(where_part, 'DW_WORD_SQL',subst_where_part[i]);
			
		END LOOP;
	END IF;
		
	 RETURN QUERY EXECUTE 'SELECT DISTINCT s.id '||where_part||' ORDER BY s.id LIMIT '||page_size::varchar||' OFFSET '||current_offset::varchar ;
END
$_$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer, page integer, page_size integer) OWNER TO darwin2;

--
-- TOC entry 1898 (class 1255 OID 1440204)
-- Name: fct_rmca_dynamic_saved_search_geojson(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_geojson(id_query integer, id_user integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned varchar;
	
BEGIN

	SELECT 
		'{  "type": "FeatureCollection",
		  "features": ['||
		string_agg('{"type" : "Feature", 
			"geometry" : {
				"type" : "Point",
				"coordinates" : ['||longitude||', '||latitude||']
			},
			"properties": {
				"collection_number" : "'||code_display::varchar||'",
				"taxon_name" : "'||taxon_name::varchar||'",
				"type" : "'||coll_type::varchar||'",
				"collecting_date" : "'||date_from_display::varchar||'",
				"collecting_date_end" : "'||NULLIF(date_from_display, 'xxxx-xx-xx')::varchar||'",

				"country" : "'||gtu_country_tag_value::varchar||'",
				"latitude" : "'||latitude::varchar||'",
				"longitude" : "'||longitude::varchar||'"
			}
		}'::varchar,',')||']
		}'INTO returned 
 FROM   v_rmca_public_view WHERE id in (SELECT fct_rmca_dynamic_saved_search(id_query, id_user)) and latitude is not null and longitude is not null LIMIT 1;

 return returned;
END
$$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_geojson(id_query integer, id_user integer) OWNER TO darwin2;

--
-- TOC entry 1908 (class 1255 OID 1440205)
-- Name: fct_rmca_dynamic_saved_search_get_specimen(integer, integer, character varying, integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_get_specimen(query_id integer, user_id integer, url_prefix character varying, page integer DEFAULT 1, page_size integer DEFAULT 10000, is_admin boolean DEFAULT false) RETURNS TABLE(id_specimen integer, collection_code character varying, code character varying, additional_codes character varying, uuid character varying, ig_num character varying, taxon_name character varying, author character varying, full_scientific_name character varying, family character varying, type character varying, specimen_count_min integer, specimen_count_max integer, identifiers character varying, abbreviated_identifiers character varying, identification_year character varying, longitude double precision, latitude double precision, longitude_varchar character varying, latitude_varchar character varying, gtu_country_tag_value character varying, gtu_province_tag_value character varying, municipality character varying, gtu_others_tag_value character varying, gtu_code character varying, gtu_elevation double precision, collecting_year_from double precision, collecting_month_from double precision, collecting_day_from double precision, collecting_year_to double precision, collecting_month_to double precision, collecting_day_to double precision, properties_locality character varying, collectors character varying, abbreviated_collectors character varying, expedition_name character varying, donators character varying, abbreviated_donators character varying, acquisition_category character varying, acquisition_date character varying, sex character varying, stage character varying, state character varying, specimen_count_males_min integer, specimen_count_males_max integer, specimen_count_females_min integer, specimen_count_females_max integer, specimen_count_juveniles_min integer, specimen_count_juveniles_max integer, social_status character varying, specimen_part character varying, complete boolean, object_name character varying, specimen_status character varying, container_storage character varying, method character varying, tool character varying, comment character varying, properties_all character varying, specimen_creation_date timestamp without time zone, building character varying, floor character varying, room character varying, "row" character varying, shelf character varying, container character varying, sub_container character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
--total_val bigint;
--nb_pages integer;
--counter integer;
current_offset integer;
BEGIN 



RETURN QUERY SELECT
	  a.*   from
	(
	WITH
	criteria AS
	(SELECT fct_rmca_dynamic_saved_search as spec_id, gtu_ref FROM  fct_rmca_dynamic_saved_search(
					query_id,user_id, page, page_size)
					 INNER JOIN specimens ON fct_rmca_dynamic_saved_search=specimens.id
	order by fct_rmca_dynamic_saved_search  
					 ),
	municipality as 
	(
	SELECT tags.* FROM
	tags 
	INNER JOIN criteria
	ON criteria.gtu_ref= tags.gtu_ref WHERE LOWER(sub_group_type) LIKE '%municipality%'
				    
	)
	,

	recol as
	(
	SELECT spec_id as recol_spec_id, recol.* FROM
	criteria
	INNER JOIN
	catalogue_people cp2
	 ON cp2.referenced_relation='specimens' AND cp2.people_type='collector' AND spec_id=cp2.record_id 
				    LEFT JOIN people recol
					ON cp2.people_ref = recol.id
	)
	,

	donator as
	(
	SELECT spec_id as donator_spec_id, recol.* FROM
	criteria
	INNER JOIN
	catalogue_people cp2
	 ON cp2.referenced_relation='specimens' AND cp2.people_type='donator' AND spec_id=cp2.record_id 
				    LEFT JOIN people recol
					ON cp2.people_ref = recol.id
	),
	codes2 as
	(select
	c2.*

	FROM
	criteria
	INNER JOIN
	codes c2
					ON  spec_id=c2.record_id
					AND c2.referenced_relation='specimens'
					AND c2.code_category !='main'
	)
	SELECT 
			        a.id as id,
				a.collection_code,
				a.code::varchar,
				a.additional_codes::varchar,
				a.uuid::varchar as uuid,
				a.ig_num,
				string_agg(DISTINCT a.taxon_name,'; ')::varchar as taxon_name,
				string_agg(DISTINCT a.author,'; ')::varchar as author,
				string_agg(DISTINCT a.full_scientific_name,'; ')::varchar as full_scientific_name,
				string_agg(DISTINCT a.family,'; ')::varchar as family,
				--11
				string_agg(DISTINCT a.type,'; ' )::varchar as type,
				a.specimen_count_min,
				a.specimen_count_max,
				string_agg(DISTINCT a.identifiers,'; ' )::varchar as identifiers,
				string_agg(DISTINCT a.abbreviated_identifiers,'; ' )::varchar as abbreviated_identifiers,
				string_agg(DISTINCT a.identification_year::varchar,'; ')::varchar as identification_year, 
				--lat , long 2018 11 05
				a.longitude_deci as longitude,
				a.latitude_deci as latitude,
				a.longitude_varchar,
				a.latitude_varchar,
                                --21
				a.gtu_country_tag_value,
				a.gtu_province_tag_value,
				a.municipality::varchar,
				
				a.gtu_others_tag_value,
				a.gtu_code,
				 a.gtu_elevation,
				a.collecting_year_from,
				--31
				a.collecting_month_from,
				a.collecting_day_from,
				a.collecting_year_to,
				a.collecting_month_to,
				a.collecting_day_to,
				string_agg(DISTINCT a.properties_locality, '; ' )::varchar as  properties_locality,
				string_agg(DISTINCT a.collectors, '; ' )::varchar as collectors,
				string_agg(DISTINCT a.abbreviated_collectors, '; ' )::varchar as  abbreviated_collectors,
				a.expedition_name,
				 string_agg(DISTINCT a.donators, '; ' )::varchar as donators,
				--41
				string_agg(DISTINCT a.abbreviated_donators, '; ' )::varchar as  abbreviated_donators,
				--2018 05 11
				a.acquisition_category,
				a.acquisition_date::varchar,
				a.sex,
				a.stage,
				a.state,
				a.specimen_count_males_min,
				a.specimen_count_males_max,
				a.specimen_count_females_min,
				a.specimen_count_females_max,
				a.specimen_count_juveniles_min,
				a.specimen_count_juveniles_max,
				a.social_status,
				a.specimen_part,
				a.complete,
				a.object_name::varchar,
                               --51
				a.specimen_status,
				a.container_storage,
				string_agg(a.method, '; ')::varchar as method,
				string_agg(a.tool, '; ')::varchar as tool,
				

				string_agg(DISTINCT a.comment, '; ' )::varchar as comment,
				string_agg(DISTINCT a.properties_all, '; ' )::varchar as properties_all,
				a.specimen_creation_date,
				CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.building else 'NOT_APPLICABLE' END as building,


				     CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.floor else 'NOT_APPLICABLE' END as floor,

				    CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.room else 'NOT_APPLICABLE' END as room,

				     CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.row else 'NOT_APPLICABLE' END as row,

				     CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.shelf else 'NOT_APPLICABLE' END as shel,

				    CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.container else 'NOT_APPLICABLE' END as container,

				     CASE WHEN coll_user_type>= 4 OR is_adm is true THEN
				 a.sub_container else 'NOT_APPLICABLE' END as sub_container
							 

	      
				     
				FROM

				    (SELECT 
				    s.id,  
				    s.collection_code,
				    COALESCE(c.code_prefix,'')||COALESCE(c.code_prefix_separator,'')||COALESCE(c.code,'')||COALESCE(c.code_suffix,'')||
				    COALESCE(c.code_suffix_separator,'') as code,
				    string_agg(DISTINCT c2.code,', ') as additional_codes,
				    s.ig_num,
				    s.taxon_name as full_scientific_name,
				   

					(fct_rmca_taxonomy_split_name_author(s.taxon_name,taxon_level_ref ))[1]
				    taxon_name

				    ,
				    
				(fct_rmca_taxonomy_split_name_author(s.taxon_name,taxon_level_ref ))[2]
				    as author,
				    (fct_rmca_sort_taxon_get_parent_level_text(taxon_ref,34)) as family,
				    s.type,
				    s.specimen_count_min,
				    s.specimen_count_max,
				    array_to_string(array_agg(DISTINCT ident.formated_name),'; ') as identifiers,

				  /*2018 11 21 */
				  CASE WHEN ident.given_name IS NULL THEN
					ident.family_name
				    ELSE
					TRIM(ident.family_name)||' '||TRIM(fct_rmca_abbreviate_names(ident.given_name))
				END AS abbreviated_identifiers,
				
				    date_part('year', i.notion_date) as identification_year, 
				    s.gtu_country_tag_value,
								s.gtu_province_tag_value,
				    array_to_string(array_agg(DISTINCT municipality.tag), '; ') as municipality,
				    
				    s.gtu_others_tag_value,
				    s.gtu_code,
				    --coordinates_source,
				    gtu_location[0] as latitude_deci ,
				    gtu_location[1] as longitude_deci,
	rmca_dms_to_text(coordinates_source, latitude_dms_degree,
	latitude_dms_minutes,
	latitude_dms_seconds,
	latitude_dms_direction, gtu.latitude, 'lat'::varchar) as
	latitude_varchar,
	rmca_dms_to_text(coordinates_source, longitude_dms_degree,
	longitude_dms_minutes,
	longitude_dms_seconds,
	longitude_dms_direction, gtu.longitude, 'lon'::varchar) as
	longitude_varchar,
				    s.gtu_elevation,
				    CASE
					WHEN 	s.gtu_from_date_mask>=32 
					THEN	date_part('year', s.gtu_from_date)
					ELSE 	NULL
				    END as collecting_year_from,
				    CASE
					WHEN 	s.gtu_from_date_mask>=48 
					THEN	date_part('month', s.gtu_from_date)
					ELSE 	NULL
				    END as collecting_month_from,
				    CASE
					WHEN 	s.gtu_from_date_mask>=56
					THEN	date_part('day', s.gtu_from_date)
					ELSE 	NULL
				    END as collecting_day_from,
				    CASE
					WHEN 	s.gtu_to_date_mask>=32 
					THEN	date_part('year', s.gtu_to_date)
					ELSE 	NULL
				    END as collecting_year_to,
				    CASE
					WHEN 	s.gtu_to_date_mask>=48 
					THEN	date_part('month', s.gtu_to_date)
					ELSE 	NULL
				    END as collecting_month_to,
				    CASE
					WHEN 	s.gtu_to_date_mask>=56 
					THEN	date_part('day', s.gtu_to_date)
					ELSE 	NULL
				    END as collecting_day_to,
				    array_to_string(array_agg(DISTINCT locp.property_type||': '||locp.lower_value), '; ') as properties_locality,
				    array_to_string(array_agg(DISTINCT recol.formated_name),'; ') as collectors,
				/*2018 11 21 */
				  CASE WHEN recol.given_name IS NULL THEN
					recol.family_name
				    ELSE
					TRIM(recol.family_name)||' '||TRIM(fct_rmca_abbreviate_names(recol.given_name))
				END AS abbreviated_collectors,
				    
				    s.expedition_name,
				    array_to_string(array_agg(DISTINCT donator.formated_name),'; ') as donators,
						  /*2018 11 21 */
				  CASE WHEN donator.given_name IS NULL THEN
					donator.family_name
				    ELSE
					TRIM(donator.family_name)||' '||TRIM(fct_rmca_abbreviate_names(donator.given_name))
				END AS abbreviated_donators,
				    --2018 11 05
				    s.acquisition_category,
				    fct_mask_date(s.acquisition_date, acquisition_date_mask) as acquisition_date,
				    s.sex,
				    s.stage,
					s.state,
					s.specimen_count_males_min,
				s.specimen_count_males_max,
				s.specimen_count_females_min,
				s.specimen_count_females_max,
				s.specimen_count_juveniles_min,
				s.specimen_count_juveniles_max,
					s.social_status,
					s.specimen_part,
					s.complete,
					s.object_name,
					col_meth.method,
					col_tool.tool,

				    s.specimen_status,
								s.container_storage,
				    
				    array_to_string(array_agg(DISTINCT comm.notion_concerned||': '||comm.comment), '| ') as comment,
				     array_to_string(array_agg(
					DISTINCT p.property_type||': '::varchar||p.lower_value||COALESCE('-'::varchar||p.upper_value,'')||COALESCE(' '::varchar||p.property_unit,'')),'| ')
				     as properties_all,
				     s.specimen_creation_date,

				     s.building,
				     s.floor,
				     s.room,
				     s.row, 
				     s.shelf,
				     s.container,
				     s.sub_container,
				     cr.db_user_type as coll_user_type,
								 specimens_stable_ids.uuid
				    ,
				     fct_rmca_dynamic_saved_search_get_specimen.is_admin as IS_ADM
				    FROM specimens s
				    INNER JOIN
				    criteria f
				    ON s.id=f.spec_id
				    LEFT JOIN codes c
					ON s.id=c.record_id
					AND c.referenced_relation='specimens'
					AND c.code_category='main'
				   LEFT JOIN codes c2
					ON  s.id=c2.record_id
					
				    LEFT JOIN identifications i
					ON i.referenced_relation='specimens' AND s.id=i.record_id
				    LEFT JOIN catalogue_people cp1
					ON cp1.referenced_relation='identifications' AND i.id=cp1.record_id 
				    LEFT JOIN people ident
					ON cp1.people_ref = ident.id
				    LEFT JOIN  municipality
				      ON s.gtu_ref= municipality.gtu_ref 
				   
				    LEFT JOIN gtu 
					ON s.gtu_ref =gtu.id
				    LEFT JOIN properties AS locp 
					ON locp.referenced_relation='gtu' AND gtu.id=locp.record_id
				    
				    LEFT JOIN recol
					ON s.id = recol_spec_id
				    LEFT JOIN donator
					ON s.id = donator_spec_id
				  
				    LEFT JOIN comments comm
					ON comm.referenced_relation='specimens' AND s.id=comm.record_id
				    LEFT JOIN properties p
					ON p.referenced_relation='specimens' AND s.id=p.record_id

				     -- 2018 11 05
				     LEFT JOIN specimen_collecting_methods as s_col_meth
					ON s.id= s_col_meth.specimen_ref
				     LEFT JOIN  collecting_methods as col_meth
					ON s_col_meth.collecting_method_ref=col_meth.id
					 -- 2018 11 05
				     LEFT JOIN specimen_collecting_tools as s_col_tool
					ON s.id= s_col_tool.specimen_ref
				     LEFT JOIN  collecting_tools as col_tool
					ON s_col_tool.collecting_tool_ref=col_tool.id
				     LEFT JOIN collections_rights cr
				     ON s.collection_ref =cr.collection_ref
				    AND user_ref=4
								LEFT JOIN specimens_stable_ids
									ON s.id=specimens_stable_ids.specimen_ref
				    GROUP BY s.id, c.code_prefix, c.code_prefix_separator, c.code, c.code_suffix, c.code_suffix_separator, i.id , col_tool.tool, col_meth.method,
				    --2018 11 21
				    ident.given_name, ident.family_name
				   ,recol.given_name, recol.family_name
				   ,donator.given_name, donator.family_name ,
				   coordinates_source, 
				   latitude_dms_degree, latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, gtu.latitude,
				   longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, longitude_dms_direction, gtu.longitude ,
				  
				    s.building,
				     s.floor,
				     s.room,
				     s.row, 
				     s.shelf,
				     s.container,
				     s.sub_container, cr.db_user_type , specimens_stable_ids.uuid
				    ) a


				GROUP BY
							a.id,
				a.collection_code,
				a.code,
			       a.additional_codes,
				a.ig_num,
				a.specimen_count_min,
				a.specimen_count_max, 
				a.gtu_country_tag_value,
							a.gtu_province_tag_value,
				a.municipality,
				
				a.gtu_others_tag_value,
				a.gtu_code,



				a.gtu_elevation,
				a.collecting_year_from,
				a.collecting_month_from,
				a.collecting_day_from,
				a.collecting_year_to,
				a.collecting_month_to,
				a.collecting_day_to,
				--collectors,
				a.expedition_name,
				--donators,
				a.specimen_creation_date,
				--2018 11 05
				a.acquisition_category,
				a.acquisition_date,
				a.sex,
				 a.stage,
				a.state,
				a.specimen_count_males_min,
				a.specimen_count_males_max,
				a.specimen_count_females_min,
				a.specimen_count_females_max,
				a.specimen_count_juveniles_min,
				a.specimen_count_juveniles_max,
				a.social_status,
				a.specimen_part,
				a.complete,
				a.object_name,
				a.specimen_status,
							a.container_storage,
				a.longitude_deci ,
				a.latitude_deci,
				a.latitude_varchar,
				a.longitude_varchar,
				 a.building,
				     a.floor,
				     a.room,
				     a.row, 
				     a.shelf,
				     a.container,
				     a.sub_container,
				     a.coll_user_type, is_adm,
								 a.uuid

				--ORDER BY code 
				) a;
--END LOOP;
raise notice 'end_loop';
RETURN --QUERY SELECT * FROM user_query_tmp
;
END
$$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_get_specimen(query_id integer, user_id integer, url_prefix character varying, page integer, page_size integer, is_admin boolean) OWNER TO darwin2;

--
-- TOC entry 1907 (class 1255 OID 1440208)
-- Name: fct_rmca_dynamic_saved_search_get_specimen_collective_access(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_get_specimen_collective_access(query_id integer, user_id integer) RETURNS TABLE(title character varying, code character varying, description character varying, filename character varying, related_object character varying, media_info character varying, empty_1 character varying, view character varying, empty_2 character varying, view_order character varying, phylum character varying, class character varying, "order" character varying, family character varying, genus character varying, species character varying, subspecies character varying, type character varying, digitisation character varying, "3d" character varying, contributor character varying, uuid uuid, institution character varying, boxid character varying, sex character varying, stage character varying, specimen_count_min integer, country character varying, coordinates character varying, location_detail character varying, empty_3 character varying, empty_4 character varying, date_of_collect character varying, collectors character varying, identifiers character varying, access integer, collection character varying, collection_virtual_collection character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 

BEGIN 
RETURN QUERY 
WITH
	criteria AS
	(SELECT fct_rmca_dynamic_saved_search as spec_id, gtu_ref FROM  fct_rmca_dynamic_saved_search(
					query_id,user_id)
					 INNER JOIN specimens ON fct_rmca_dynamic_saved_search=specimens.id
	order by fct_rmca_dynamic_saved_search  
					 ),
	exact_site as 
	(
	SELECT tags.gtu_ref, string_agg(tag, '; ')::varchar as tag FROM
	tags 
	INNER JOIN criteria
	ON criteria.gtu_ref= tags.gtu_ref WHERE LOWER(sub_group_type) LIKE '%exact_site%' or  LOWER(sub_group_type) LIKE '%municipality%'
	group by tags.gtu_ref			    
	)
	,

	recol as
	(
	SELECT spec_id as recol_spec_id, string_agg(formated_name, '; ')::varchar as recol_name FROM
	criteria
	INNER JOIN
	catalogue_people cp2
	 ON cp2.referenced_relation='specimens' AND cp2.people_type='collector' AND spec_id=cp2.record_id 
				    LEFT JOIN people recol
					ON cp2.people_ref = recol.id
					GROUP BY spec_id
	)
	, 
	ident as (
SELECT spec_id as ident_spec_id, string_agg(formated_name, '; ') as ident_name FROM
	criteria
	
LEFT JOIN identifications i
ON i.referenced_relation='specimens' AND spec_id=i.record_id
 LEFT JOIN catalogue_people cp1
ON cp1.referenced_relation='identifications' AND i.id=cp1.record_id 
   LEFT JOIN people ident
ON cp1.people_ref = ident.id
GROUP BY spec_id
	)
	,

	donator as
	(
	SELECT spec_id as donator_spec_id, recol.* FROM
	criteria
	INNER JOIN
	catalogue_people cp2
	 ON cp2.referenced_relation='specimens' AND cp2.people_type='donator' AND spec_id=cp2.record_id 
				    LEFT JOIN people recol
					ON cp2.people_ref = recol.id
	),
	codes2 as
	(select
	c2.*
,  COALESCE(c2.code_prefix,'')||COALESCE(c2.code_prefix_separator,'')||COALESCE(c2.code,'')||COALESCE(c2.code_suffix,'')||
				    COALESCE(c2.code_suffix_separator,'') as code_full_text
	FROM
	criteria
	INNER JOIN
	codes c2
					ON  spec_id=c2.record_id
					AND c2.referenced_relation='specimens'
					AND c2.code_category ='main'
	)
,

spec AS(
select specimens.id as id2, spec_id, specimens.* , fct_rmca_sort_taxon_path_alphabetically_hstore(taxon_path||taxon_ref::varchar||'/') htaxa from specimens inner join criteria on specimens.id=spec_id)

SELECT distinct (taxon_name||' '||code_full_text)::varchar title,
code_full_text::varchar as code,
NULL::varchar description,
NULL::varchar filename,
NULL::varchar related_object,
NULL::varchar media_info,
NULL::varchar as empty_1,
NULL::varchar as view,
NULL::varchar as empty_2,
NULL::varchar as view_order,
 (htaxa->'phylum')::varchar  as phylum ,
(htaxa->'class')::varchar  as class ,
(htaxa->'order')::varchar  as order ,
(htaxa->'family')::varchar  as family ,
(htaxa->'genus')::varchar  as genus ,
(htaxa->'species')::varchar  as species ,
(htaxa->'sub species')::varchar  as subspecies ,
spec.type,
NULL::varchar as digitisation,
NULL::varchar as" 3d",
NULL::varchar as contributor,
specimens_stable_ids.uuid,
inst.formated_name as institution,
container as boxid,
spec.sex,
spec.stage,
spec.specimen_count_min,
gtu_country_tag_value,
 ('['||latitude::varchar||','||longitude::varchar||']')::varchar as coordinates,
 tag::varchar as location_details,
 NULL::varchar as empty_3,
  NULL::varchar as empty_4,
  case when spec.gtu_to_date_mask>0 then
    (fct_mask_date(spec.gtu_from_date, spec.gtu_from_date_mask)||'-'|| fct_mask_date(spec.gtu_to_date, spec.gtu_to_date_mask))::varchar
  when  spec.gtu_from_date_mask>0 then
  fct_mask_date(spec.gtu_from_date, spec.gtu_from_date_mask)::varchar
  ELSE
  fct_mask_date(spec.gtu_from_date, spec.gtu_from_date_mask)::varchar
end
as date_of_collect_formatted,
recol_name::varchar as collector,
ident_name::varchar as identifiers
,
1 as access,
collection_name as collection,
null::varchar as collection_in_virtual_collection 
FROM spec 
LEFT OUTER JOIN codes2
ON spec_id=codes2.record_id
LEFT JOIN specimens_stable_ids
ON spec.id=specimens_stable_ids.specimen_ref

LEFT JOIN people as inst
ON institution_ref=inst.id
LEFT JOIN gtu
ON spec.gtu_ref=gtu.id
LEFT JOIN exact_site
ON gtu.id=exact_site.gtu_ref
LEFT JOIN recol 
ON spec_id=recol.recol_spec_id
LEFT JOIN ident 
ON spec_id=ident.ident_spec_id;
RETURN --QUERY SELECT * FROM user_query_tmp
;
END
$$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_get_specimen_collective_access(query_id integer, user_id integer) OWNER TO darwin2;

--
-- TOC entry 823 (class 1255 OID 1440211)
-- Name: fct_rmca_dynamic_saved_search_taxonomy(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy(id_query integer, id_user integer) RETURNS SETOF darwin2.rmca_taxon_report
    LANGUAGE plpgsql
    AS $$
DECLARE
 tmp RECORD;
  tmp_ret RECORD;
  tmp_type_details varchar;
  tmp_container varchar;
  tmp_sub_container varchar;
  tmp_storage varchar;
  tmp_sub_storage varchar;
BEGIN

 CREATE TEMP TABLE IF NOT EXISTS criteria_tmp_taxo AS
        SELECT fct_rmca_dynamic_saved_search(
				id_query, id_user
			) as spec_key;
			
   CREATE TEMP TABLE IF NOT EXISTS type_tmp_taxo AS
        SELECT taxon_ref,LOWER(type) as type_group, count(id) as type_detail  FROM specimens INNER JOIN criteria_tmp_taxo ON specimens.id=spec_key GROUP BY taxon_ref, LOWER(type) ;
    CREATE TEMP TABLE IF NOT EXISTS container_type_tmp_taxo AS
        SELECT taxon_ref,LOWER(container_type) as container_type, count(id) as container_details  FROM specimens INNER JOIN criteria_tmp_taxo ON specimens.id=spec_key GROUP BY taxon_ref, LOWER(container_type) ;			
    CREATE TEMP TABLE IF NOT EXISTS sub_container_type_tmp_taxo AS
        SELECT taxon_ref,LOWER(sub_container_type) as sub_container_type, count(id) as sub_container_details  FROM specimens INNER JOIN criteria_tmp_taxo ON specimens.id=spec_key GROUP BY taxon_ref, LOWER(sub_container_type) ;
   CREATE TEMP TABLE IF NOT EXISTS container_storage_tmp_taxo AS
        SELECT taxon_ref,LOWER(container_storage) as container_storage, count(id) as storage_details  FROM specimens INNER JOIN criteria_tmp_taxo ON specimens.id=spec_key GROUP BY taxon_ref, LOWER(container_storage) ;			
    CREATE TEMP TABLE IF NOT EXISTS sub_container_storage_tmp_taxo AS
        SELECT taxon_ref,LOWER(sub_container_storage) as sub_container_storage, count(id) as sub_storage_details  FROM specimens INNER JOIN criteria_tmp_taxo ON specimens.id=spec_key GROUP BY taxon_ref, LOWER(sub_container_storage) ;	

FOR tmp in
		
			SELECT
	 DISTINCT taxon_ref, fct_rmca_sort_taxon_path_alphabetically_hstore(taxon_path||taxon_ref::varchar||'/') as hstore_field ,

	fct_rmca_sort_taxon_path_alphabetically(taxon_path||taxon_ref::varchar||'/') as alpha_path, count(specimens.id) as record_count,
	 SUM(specimen_count_min) as physical_specimen_min, SUM(specimen_count_max) as physical_specimen_max ,
	 COUNT(CASE WHEN type ='specimen' THEN NULL ELSE type END) as nb_types
	 from specimens INNER JOIN criteria_tmp_taxo ON specimens.id =spec_key GROUP BY taxon_path, taxon_ref order by alpha_path
		LOOP
				BEGIN
					
					SELECT hstore(array_agg(type_group ORDER by type_group), array_agg(type_detail::varchar ORDER by type_group))::varchar into tmp_type_details 
FROM type_tmp_taxo where type_tmp_taxo.taxon_ref=tmp.taxon_ref ;
--1
					SELECT hstore(array_agg(container_type ORDER by container_type), array_agg(container_details::varchar ORDER by container_type))::varchar into tmp_container 
FROM container_type_tmp_taxo where container_type_tmp_taxo.taxon_ref=tmp.taxon_ref ;
--2
					SELECT hstore(array_agg(sub_container_type ORDER by sub_container_type), array_agg(sub_container_details::varchar ORDER by sub_container_type))::varchar into tmp_sub_container 
FROM sub_container_type_tmp_taxo where sub_container_type_tmp_taxo.taxon_ref=tmp.taxon_ref ;
--3
					SELECT hstore(array_agg(container_storage ORDER by container_storage), array_agg(storage_details::varchar ORDER by container_storage))::varchar into tmp_storage 
FROM container_storage_tmp_taxo where container_storage_tmp_taxo.taxon_ref=tmp.taxon_ref ;
--4
					SELECT hstore(array_agg(sub_container_storage ORDER by sub_container_storage), array_agg(sub_storage_details::varchar ORDER by sub_container_storage))::varchar into tmp_sub_storage 
FROM sub_container_storage_tmp_taxo where sub_container_storage_tmp_taxo.taxon_ref=tmp.taxon_ref ;
						
				        
					IF  tmp.hstore_field is not null then
					tmp.hstore_field:=tmp.hstore_field
					|| ('nb_records=>'||tmp.record_count::varchar)::hstore
					|| ('physical_specimen_min=>'||tmp.physical_specimen_min::varchar)::hstore
					|| ('physical_specimen_max=>'||tmp.physical_specimen_max::varchar)::hstore
					|| ('nb_types=>'||tmp.nb_types::varchar)::hstore;					
					
					IF tmp_type_details IS NOT NULL THEN
						tmp_type_details:=replace(tmp_type_details,'=>',':');
						tmp_type_details:=replace(tmp_type_details, ',' ,';');
						tmp_type_details:=regexp_replace(tmp_type_details,'\s+','_','g');
						tmp_type_details:=regexp_replace(tmp_type_details,'"','','g');
						
						tmp.hstore_field:=tmp.hstore_field|| ('type_details=>'||quote_literal(tmp_type_details))::hstore;
					END IF;
					IF tmp_container IS NOT NULL THEN
						tmp_container:=replace(tmp_container,'=>',':');
						tmp_container:=replace(tmp_container, ',' ,';');
						tmp_container:=regexp_replace(tmp_container,'\s+','_','g');
						tmp_container:=regexp_replace(tmp_container,'"','','g');
						
						tmp.hstore_field:=tmp.hstore_field|| ('container_details=>'||quote_literal(tmp_container))::hstore;
					END IF;

					IF tmp_sub_container IS NOT NULL THEN
						tmp_sub_container:=replace(tmp_sub_container,'=>',':');
						tmp_sub_container:=replace(tmp_sub_container, ',' ,';');
						tmp_sub_container:=regexp_replace(tmp_sub_container,'\s+','_','g');
						tmp_sub_container:=regexp_replace(tmp_sub_container,'"','','g');
						
						tmp.hstore_field:=tmp.hstore_field|| ('sub_container_details=>'||quote_literal(tmp_sub_container))::hstore;
					END IF;

					IF tmp_storage IS NOT NULL THEN
						tmp_storage:=replace(tmp_storage,'=>',':');
						tmp_storage:=replace(tmp_storage, ',' ,';');
						tmp_storage:=regexp_replace(tmp_storage,'\s+','_','g');
						tmp_storage:=regexp_replace(tmp_storage,'"','','g');
						
						tmp.hstore_field:=tmp.hstore_field|| ('storage_details=>'||quote_literal(tmp_storage))::hstore;
					END IF;

					IF tmp_sub_storage IS NOT NULL THEN
						tmp_sub_storage:=replace(tmp_sub_storage,'=>',':');
						tmp_sub_storage:=replace(tmp_sub_storage, ',' ,';');
						tmp_sub_storage:=regexp_replace(tmp_sub_storage,'\s+','_','g');
						tmp_sub_storage:=regexp_replace(tmp_sub_storage,'"','','g');
						
						tmp.hstore_field:=tmp.hstore_field|| ('sub_storage_details=>'||quote_literal(tmp_sub_storage))::hstore;
					END IF;
					
					tmp_ret:=populate_record(null::rmca_taxon_report,tmp.hstore_field);				
					RETURN NEXT tmp_ret ;
					end if;
				END;
		END LOOP;
DROP TABLE criteria_tmp_taxo;
DROP TABLE type_tmp_taxo;
DROP TABLE container_type_tmp_taxo;
DROP TABLE sub_container_type_tmp_taxo;
DROP TABLE container_storage_tmp_taxo;
DROP TABLE sub_container_storage_tmp_taxo;
END; $$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy(id_query integer, id_user integer) OWNER TO darwin2;

--
-- TOC entry 1915 (class 1255 OID 1440212)
-- Name: fct_rmca_dynamic_saved_search_taxonomy_statistics(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics(id_query integer, id_user integer) RETURNS TABLE(rank character varying, count bigint, sort_id integer)
    LANGUAGE sql
    AS $$ 
WITH criteria as
(
SELECT fct_rmca_dynamic_saved_search(
    id_query,
    id_user
) as spec_key)

select (hstore_field).key as rank , count(distinct (hstore_field).value) as count , catalogue_levels.id as sort_id

from 
(

SELECT
	 each( fct_rmca_sort_taxon_path_alphabetically_hstore(taxon_path||taxon_ref::varchar||'/') ) as hstore_field 
	 from specimens inner join criteria on specimens.id=spec_key

			

			) a
			LEFT JOIN catalogue_levels
			ON (hstore_field).key =catalogue_levels.level_name
			where  level_type='taxonomy' 
			group by (hstore_field).key , catalogue_levels.id
			order by id 

			$$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics(id_query integer, id_user integer) OWNER TO darwin2;

--
-- TOC entry 1916 (class 1255 OID 1440213)
-- Name: fct_rmca_dynamic_saved_search_taxonomy_statistics_detail(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics_detail(id_query integer, id_user integer) RETURNS TABLE(phylum_separator character varying, class_separator character varying, order_separator character varying, family_separator character varying, level_name character varying, taxa_ref_element text, family character varying, "order" character varying, class character varying, phylum character varying, nb_genus bigint, nb_species bigint, nb_records bigint, physical_specimen_min bigint, physical_specimen_max bigint, nb_types bigint, type_details character varying, container_details character varying, sub_container_details character varying, storage_details character varying, sub_storage_details character varying, path_element text, display_order text)
    LANGUAGE plpgsql
    AS $$ 

BEGIN
RETURN
QUERY
SELECT * FROM (
WITH criteria as
(
SELECT fct_rmca_dynamic_saved_search(
    id_query,
    id_user
) as spec_key),
taxa AS
(
SELECT DISTINCT taxon_ref,  
regexp_split_to_table(taxon_path||taxon_ref::varchar||'/','/') as taxa_ref_element
FROM specimens INNER JOIN criteria ON id=spec_key
),
taxa_link AS
(
	SELECT DISTINCT taxon_ref , taxa.taxa_ref_element, name, name_indexed, level_ref, catalogue_levels.level_name, path||taxonomy.id||'/'  as path_element FROM taxa
	INNER JOIN taxonomy ON taxa.taxa_ref_element=taxonomy.id::varchar
	INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
),
specs as
(
SELECT id, type, specimen_count_min, specimen_count_max, taxon_ref,
container_type,
sub_container_type,
container_storage,
sub_container_storage
 FROM specimens INNER JOIN criteria ON id=spec_key

),

species AS
(
SELECT DISTINCT specs.taxon_Ref as src_taxon_ref, taxa_link.taxa_ref_element as species_ref, name FROM specs INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=48
)
,
genus AS
(
SELECT DISTINCT specs.taxon_Ref as src_taxon_ref, taxa_link.taxa_ref_element as genus_ref, name FROM specs INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=41
)
,


----storage info

phylum_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_type)
),

phylum_sub_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_type)
),

phylum_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_storage)
),

phylum_sub_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_storage)
),


-----------


class_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_type)
),

class_sub_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_type)
),

class_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_storage)
),

class_sub_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_storage)
),

-------

order_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_type)
),

order_sub_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_type)
),

order_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_storage)
),

order_sub_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_storage)
),

-----
family_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_type)
),

family_sub_container AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_type) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_type)
),

family_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
GROUP BY taxa_link.taxa_ref_element, name, LOWER(container_storage)
),

family_sub_storage AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(sub_container_storage) as container_group, count(id) as container_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
GROUP BY taxa_link.taxa_ref_element, name, LOWER(sub_container_storage)
),

----types
phylum_type AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(type) as type_group, count(id) as type_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
GROUP BY taxa_link.taxa_ref_element, name, LOWER(type)
),

class_type AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(type) as type_group, count(id) as type_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
GROUP BY taxa_link.taxa_ref_element, name, LOWER(type)
),
order_type AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(type) as type_group, count(id) as type_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
GROUP BY taxa_link.taxa_ref_element, name, LOWER(type)
)
,

family_type AS
(
SELECT taxa_link.taxa_ref_element, taxa_link.name as phylum, LOWER(type) as type_group, count(id) as type_detail FROM specs 

INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
GROUP BY taxa_link.taxa_ref_element, name, LOWER(type)
)
,
--end types

phylum AS
(
SELECT 
NULL::varchar, NULL::varchar,NULL::varchar,NULL::varchar,
taxa_link.level_name, taxa_link.taxa_ref_element,  NULL::varchar as family,  NULL::varchar as "order", NULL::varchar as "class", COALESCE( taxa_link.name, '_NO_PHYLUM') as phylum,
count(distinct genus_ref) as nb_genus,
count(distinct species_ref) as nb_species,

COUNT(specs.id) as nb_records, SUM(specs.specimen_count_min) as physical_specimen_min, SUM(specs.specimen_count_max) as physical_specimen_max ,
COUNT(CASE WHEN specs.type ='specimen' THEN NULL ELSE specs.type END) as nb_types
,
type_desc.type_details::varchar as type_details ,

phylum_container.container_type::varchar as container_details,
phylum_sub_container.sub_container_type::varchar as sub_container_details,
phylum_storage.storage_type::varchar as storage_details,
phylum_sub_storage.sub_storage_type::varchar as sub_storage_details,

taxa_link.path_element
FROM specs 
INNER JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=4
LEFT JOIN species ON taxa_link.taxon_ref=species.src_taxon_ref
LEFT JOIN genus ON taxa_link.taxon_ref=genus.src_taxon_ref
LEFT JOIN (SELECT jsonb_object_agg(type_group,type_detail  ORDER BY type_group ) as type_details, phylum_type.taxa_ref_element FROM phylum_type GROUP BY phylum_type.taxa_ref_element) as type_desc ON taxa_link.taxa_ref_element=type_desc.taxa_ref_element

LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail) as container_type, phylum_container.taxa_ref_element FROM phylum_container GROUP BY phylum_container.taxa_ref_element ) as phylum_container ON taxa_link.taxa_ref_element=phylum_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail) as sub_container_type, phylum_sub_container.taxa_ref_element FROM phylum_sub_container GROUP BY phylum_sub_container.taxa_ref_element ) as phylum_sub_container ON taxa_link.taxa_ref_element=phylum_sub_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail) as storage_type,  phylum_storage.taxa_ref_element FROM  phylum_storage GROUP BY phylum_storage.taxa_ref_element ) as phylum_storage ON taxa_link.taxa_ref_element=phylum_storage.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail) as sub_storage_type, phylum_sub_storage.taxa_ref_element FROM phylum_sub_storage GROUP BY phylum_sub_storage.taxa_ref_element  ) as phylum_sub_storage ON taxa_link.taxa_ref_element=phylum_sub_storage.taxa_ref_element

GROUP BY taxa_link.taxa_ref_element, taxa_link.name, taxa_link.level_name, type_desc.type_details,taxa_link.path_element, 
phylum_container.container_type,phylum_sub_container.sub_container_type, phylum_storage.storage_type, phylum_sub_storage.sub_storage_type
),


class AS
(
SELECT 
NULL::varchar, NULL::varchar,NULL::varchar,NULL::varchar,
taxa_link.level_name,taxa_link.taxa_ref_element,NULL::varchar as family, NULL::varchar as "order",  COALESCE(taxa_link.name, '_NO_CLASS') as class,  
COALESCE(phylum_link.name, '_NO_PHYLUM') as phylum, 
count(distinct genus_ref) as nb_genus,
count(distinct species_ref) as nb_species,

COUNT(specs.id) as nb_records, SUM(specimen_count_min) as physical_specimen_min, SUM(specimen_count_max) as physical_specimen_max ,
COUNT(CASE WHEN specs.type ='specimen' THEN NULL ELSE specs.type END) as nb_types,
type_desc.type_details::varchar as type_details 
,
class_container.container_type::varchar as container_details,
class_sub_container.sub_container_type::varchar as sub_container_details,
class_storage.storage_type::varchar as storage_details,
class_sub_storage.sub_storage_type::varchar as sub_storage_details,
taxa_link.path_element
FROM specs 
LEFT JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=12
LEFT JOIN taxa_link as phylum_link ON specs.taxon_ref=phylum_link.taxon_ref AND phylum_link.level_ref=4
LEFT JOIN species ON taxa_link.taxon_ref=species.src_taxon_ref
LEFT JOIN genus ON taxa_link.taxon_ref=genus.src_taxon_ref
LEFT JOIN (SELECT jsonb_object_agg(type_group,type_detail  ORDER BY type_group) as type_details,  class_type.taxa_ref_element FROM class_type GROUP BY class_type.taxa_ref_element) as type_desc ON taxa_link.taxa_ref_element=type_desc.taxa_ref_element

LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as container_type, class_container.taxa_ref_element FROM class_container GROUP BY class_container.taxa_ref_element ) as class_container ON taxa_link.taxa_ref_element=class_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group ) as sub_container_type, class_sub_container.taxa_ref_element FROM class_sub_container GROUP BY class_sub_container.taxa_ref_element ) as class_sub_container ON taxa_link.taxa_ref_element=class_sub_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as storage_type,  class_storage.taxa_ref_element FROM  class_storage GROUP BY class_storage.taxa_ref_element ) as class_storage ON taxa_link.taxa_ref_element=class_storage.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as sub_storage_type , class_sub_storage.taxa_ref_element FROM class_sub_storage GROUP BY class_sub_storage.taxa_ref_element  ) as class_sub_storage ON taxa_link.taxa_ref_element=class_sub_storage.taxa_ref_element


GROUP BY taxa_link.taxa_ref_element, phylum_link.name, taxa_link.name, taxa_link.level_name, type_desc.type_details,taxa_link.path_element, 
class_container.container_type,class_sub_container.sub_container_type, class_storage.storage_type, class_sub_storage.sub_storage_type
)

,




order_q AS
(
SELECT NULL::varchar, NULL::varchar,NULL::varchar,NULL::varchar,
taxa_link.level_name, taxa_link.taxa_ref_element, NULL::varchar as family, COALESCE(taxa_link.name, '_NO_ORDER') as "order",  COALESCE(class_link.name, '_NO_CLASS') as class,   COALESCE(phylum_link.name, '_NO_PHYLUM')  as phylum,
count(distinct genus_ref) as nb_genus,
count(distinct species_ref) as nb_species,

COUNT(specs.id) as nb_records, SUM(specimen_count_min) as physical_specimen_min, SUM(specimen_count_max) as physical_specimen_max ,
COUNT(CASE WHEN specs.type ='specimen' THEN NULL ELSE specs.type END) as nb_types,
type_desc.type_details::varchar as type_details 
,
order_container.container_type::varchar as container_details,
order_sub_container.sub_container_type::varchar as sub_container_details,
order_storage.storage_type::varchar as storage_details,
order_sub_storage.sub_storage_type::varchar as sub_storage_details,
taxa_link.path_element as path_element
FROM specs 
LEFT JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=28
LEFT JOIN taxa_link as phylum_link ON specs.taxon_ref=phylum_link.taxon_ref AND phylum_link.level_ref=4
LEFT  JOIN taxa_link as class_link ON specs.taxon_ref=class_link.taxon_ref AND class_link.level_ref=12
LEFT JOIN species ON taxa_link.taxon_ref=species.src_taxon_ref
LEFT JOIN genus ON taxa_link.taxon_ref=genus.src_taxon_ref
LEFT JOIN (SELECT jsonb_object_agg(type_group,type_detail  ORDER BY type_group ) as type_details,  order_type.taxa_ref_element FROM order_type GROUP BY order_type.taxa_ref_element) as type_desc ON taxa_link.taxa_ref_element=type_desc.taxa_ref_element


LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as container_type, order_container.taxa_ref_element FROM order_container GROUP BY order_container.taxa_ref_element ) as order_container ON taxa_link.taxa_ref_element=order_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as sub_container_type, order_sub_container.taxa_ref_element FROM order_sub_container GROUP BY order_sub_container.taxa_ref_element ) as order_sub_container ON taxa_link.taxa_ref_element=order_sub_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as storage_type,  order_storage.taxa_ref_element FROM  order_storage GROUP BY order_storage.taxa_ref_element ) as order_storage ON taxa_link.taxa_ref_element=order_storage.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as sub_storage_type , order_sub_storage.taxa_ref_element FROM order_sub_storage GROUP BY order_sub_storage.taxa_ref_element  ) as order_sub_storage ON taxa_link.taxa_ref_element=order_sub_storage.taxa_ref_element


GROUP BY taxa_link.taxa_ref_element, phylum_link.name, class_link.name ,taxa_link.name, taxa_link.level_name, type_desc.type_details,taxa_link.path_element, 
order_container.container_type,order_sub_container.sub_container_type, order_storage.storage_type, order_sub_storage.sub_storage_type
)
,

family_q AS
(
SELECT 
NULL::varchar, NULL::varchar,NULL::varchar,NULL::varchar,
taxa_link.level_name, taxa_link.taxa_ref_element, COALESCE(taxa_link.name, '_NO_FAMILY') as family, COALESCE(order_link.name, '_NO_ORDER') as "order",  COALESCE(class_link.name, '_NO_CLASS') as class,   COALESCE(phylum_link.name, '_NO_PHYLUM')  as phylum,
count(distinct genus_ref) as nb_genus,
count(distinct species_ref) as nb_species,

COUNT(specs.id) as nb_records, SUM(specimen_count_min) as physical_specimen_min, SUM(specimen_count_max) as physical_specimen_max ,
COUNT(CASE WHEN specs.type ='specimen' THEN NULL ELSE specs.type END) as nb_types,
type_desc.type_details::varchar as type_details 
,
family_container.container_type::varchar as container_details,
family_sub_container.sub_container_type::varchar as sub_container_details,
family_storage.storage_type::varchar as storage_details,
family_sub_storage.sub_storage_type::varchar as sub_storage_details,
taxa_link.path_element as path_element
FROM specs 
LEFT JOIN taxa_link ON specs.taxon_ref=taxa_link.taxon_ref AND level_ref=34
LEFT JOIN taxa_link as phylum_link ON specs.taxon_ref=phylum_link.taxon_ref AND phylum_link.level_ref=4
LEFT  JOIN taxa_link as class_link ON specs.taxon_ref=class_link.taxon_ref AND class_link.level_ref=12
LEFT  JOIN taxa_link as order_link ON specs.taxon_ref=order_link.taxon_ref AND order_link.level_ref=28
LEFT JOIN species ON taxa_link.taxon_ref=species.src_taxon_ref
LEFT JOIN genus ON taxa_link.taxon_ref=genus.src_taxon_ref
LEFT JOIN (SELECT jsonb_object_agg(type_group,type_detail ORDER BY type_group) as type_details,  family_type.taxa_ref_element FROM family_type GROUP BY family_type.taxa_ref_element) as type_desc ON taxa_link.taxa_ref_element=type_desc.taxa_ref_element

LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as container_type, family_container.taxa_ref_element FROM family_container GROUP BY family_container.taxa_ref_element ) as family_container ON taxa_link.taxa_ref_element=family_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as sub_container_type, family_sub_container.taxa_ref_element FROM family_sub_container GROUP BY family_sub_container.taxa_ref_element ) as family_sub_container ON taxa_link.taxa_ref_element=family_sub_container.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as storage_type,  family_storage.taxa_ref_element FROM  family_storage GROUP BY family_storage.taxa_ref_element ) as family_storage ON taxa_link.taxa_ref_element=family_storage.taxa_ref_element
LEFT JOIN (SELECT jsonb_object_agg(container_group, container_detail order by container_group) as sub_storage_type , family_sub_storage.taxa_ref_element FROM family_sub_storage GROUP BY family_sub_storage.taxa_ref_element  ) as family_sub_storage ON taxa_link.taxa_ref_element=family_sub_storage.taxa_ref_element

GROUP BY taxa_link.taxa_ref_element, phylum_link.name, class_link.name, order_link.name ,taxa_link.name, taxa_link.level_name, type_desc.type_details,taxa_link.path_element, 
family_container.container_type,family_sub_container.sub_container_type, family_storage.storage_type, family_sub_storage.sub_storage_type
)

select *, '04_'||phylum.phylum||'_' as display_order from phylum


UNION
SELECT DISTINCT   'new_phylum', NULL::varchar, NULL::varchar, NULL::varchar,NULL::varchar,
NULL::varchar, NULL::varchar,  NULL::varchar, NULL::varchar,  NULL::varchar, NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,
NULL::varchar, NULL::varchar, 
NULL::varchar, NULL::varchar,NULL::varchar, NULL::varchar,
'04_'||phylum.phylum as display_order   FROM phylum
UNION
SELECT * ,'04_'||class.phylum||'_b_12_'||class.class||'_b' FROM class


UNION
SELECT DISTINCT NULL::varchar, 'new_class',NULL::varchar,NULL::varchar, NULL::varchar,
NULL::varchar,  NULL::varchar,  NULL::varchar, NULL::varchar, class.phylum, NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,
NULL::varchar, NULL::varchar, 
NULL::varchar, NULL::varchar,NULL::varchar, NULL::varchar,
'04_'||class.phylum||'_b_12_'||class.class||'_a'   FROM class
UNION
SELECT *, '04_'||order_q.phylum||'_b_12_'||order_q.class||'_b_28_'||order_q."order"||'_b' from order_q
UNION
SELECT DISTINCT  NULL::varchar,NULL::varchar, 'new_order', NULL::varchar,NULL::varchar,
NULL::varchar, NULL::varchar, NULL::varchar,order_q.class, order_q.phylum,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,
NULL::varchar, NULL::varchar, 
NULL::varchar, NULL::varchar,NULL::varchar, NULL::varchar,
'04_'||order_q.phylum||'_b_12_'||order_q.class||'_b_28_'||order_q."order"||'_a' FROM order_q
UNION
SELECT *, '04_'||family_q.phylum||'_b_12_'||family_q.class||'_b_28_'||family_q."order"||'_b_34_'||family_q.family||'_b' from family_q
UNION
SELECT DISTINCT  NULL::varchar,NULL::varchar,NULL::varchar, 'new_family',NULL::varchar, 
NULL::varchar, NULL::varchar, family_q."order",family_q.class, family_q.phylum,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,NULL::bigint,
NULL::varchar, NULL::varchar,
NULL::varchar, NULL::varchar,NULL::varchar, NULL::varchar,
 '04_'||family_q.phylum||'_b_12_'||family_q.class||'_b_28_'||family_q."order"||'_b_34_'||family_q.family||'_a' FROM family_q

)


a ORDER BY a.display_order COLLATE "C" ;

END;
$$;


ALTER FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics_detail(id_query integer, id_user integer) OWNER TO darwin2;

--
-- TOC entry 1917 (class 1255 OID 1440216)
-- Name: fct_rmca_get_all_child_direct_synonyms(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_all_child_direct_synonyms(integer) RETURNS SETOF integer
    LANGUAGE sql
    AS $_$
WITH a as
(

select id from taxonomy where parent_ref=$1
),
b as
(select distinct group_id, record_id FROM classification_synonymies, a WHERE 
record_id=a.id 
 and referenced_relation='taxonomy'
)
select taxonomy.id from b inner join classification_synonymies on b.group_id=classification_synonymies.group_id
inner join taxonomy on classification_synonymies.record_id=taxonomy.id;
$_$;


ALTER FUNCTION darwin2.fct_rmca_get_all_child_direct_synonyms(integer) OWNER TO darwin2;

--
-- TOC entry 1912 (class 1255 OID 1440217)
-- Name: fct_rmca_get_all_child_synonyms(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_all_child_synonyms(integer) RETURNS SETOF integer
    LANGUAGE sql
    AS $_$
WITH a as
(

select id from taxonomy where path||'/'||parent_ref||'/' like '%/'||$1||'/%'
),
b as
(select distinct group_id, record_id FROM classification_synonymies, a WHERE 
record_id=a.id 
 and referenced_relation='taxonomy'
)
select taxonomy.id from b inner join classification_synonymies on b.group_id=classification_synonymies.group_id
inner join taxonomy on classification_synonymies.record_id=taxonomy.id;
$_$;


ALTER FUNCTION darwin2.fct_rmca_get_all_child_synonyms(integer) OWNER TO darwin2;

--
-- TOC entry 1900 (class 1255 OID 1440218)
-- Name: fct_rmca_get_all_inverse_relationships(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_all_inverse_relationships(id_spec integer) RETURNS TABLE(id integer, specimen_ref integer, relationship_type character varying, unit_type character varying, specimen_related_ref integer, taxon_ref integer, mineral_ref integer, institution_ref integer, source_name text, source_id text, quantity numeric, unit character varying)
    LANGUAGE sql
    AS $$
with a as
(select * from specimens_relationships where specimen_ref=id_spec
 or specimen_related_ref= id_spec)
select distinct specimens_relationships.* 
from specimens_relationships inner join a 
on specimens_relationships.specimen_ref=a.specimen_related_ref 
or
specimens_relationships.specimen_related_ref=a.specimen_related_ref 
where lower(specimens_relationships.relationship_type) not like '%duplicated%'
$$;


ALTER FUNCTION darwin2.fct_rmca_get_all_inverse_relationships(id_spec integer) OWNER TO darwin2;

--
-- TOC entry 1901 (class 1255 OID 1440219)
-- Name: fct_rmca_get_all_inverse_relationships_specimen_ref(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_all_inverse_relationships_specimen_ref(id_spec integer) RETURNS integer[]
    LANGUAGE sql
    AS $$
with a as
(select * from specimens_relationships where specimen_ref=id_spec
 or specimen_related_ref= id_spec)
select array_agg(DISTINCT specimens_relationships.specimen_ref)
from specimens_relationships inner join a 
on specimens_relationships.specimen_ref=a.specimen_related_ref 
or
specimens_relationships.specimen_related_ref=a.specimen_related_ref 
where lower(specimens_relationships.relationship_type) not like '%duplicated%'
$$;


ALTER FUNCTION darwin2.fct_rmca_get_all_inverse_relationships_specimen_ref(id_spec integer) OWNER TO darwin2;

--
-- TOC entry 1904 (class 1255 OID 1440220)
-- Name: fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, exclude_invalid_entries boolean DEFAULT false) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar[];
 returned_tmp varchar;
 --ftheeten 2019 02 15
 returned_tmp_levels varchar;
 returned_name varchar;
 returned_ids_staging varchar;

 staging_path_name varchar;
 staging_path_level varchar;
 staging_path_level_array int[];
 staging_path_name_array varchar[];
 --ftheeten 2019 02 15
taxonomy_path_level_array int[];
 
 parent integer;
 i integer;
 tmp_id integer;
 tmp_name_path varchar;
 name_tmp varchar;
 level_tmp integer;
  level_tmp_char varchar;
  level_of_parent_staging int;
  level_of_parent_taxonomy int;
  
 id_main_taxon integer;
 --ftheeten 2019 02 15
 id_level_taxon integer;
 staging_path_found boolean;
 array_ids integer[];
 array_ids_string varchar;
 last_id varchar;
 last_id_set boolean;
 catalogue_ref_tmp integer;
 import_ref_tmp integer;
 parent_updated_tmp boolean;
 parent_updated_refs_array integer[];
 --ftheeten 2019 02 15
  parent_updated_levels_array integer[];
 taxon_found_in_staging boolean;
BEGIN
--raise notice 'ENTRY';
	SELECT parent_updated INTO parent_updated_tmp FROM  staging_catalogue WHERE id=tmp_id;
	IF parent_updated_tmp=true THEN
		return NULL;
	END IF;
		tmp_id:= id_staging_taxon;
		i:=0;
		parent:=-1;

		--staging_path_name:='/';
		--staging_path_level:='/';
		
		--array_ids_string:='/'||tmp_id||'/';
		array_ids:=tmp_id||array_ids;
		WHILE parent is not null and i<30 LOOP
			SELECT parent_ref, name, level_ref, catalogue_ref, import_ref  INTO parent, name_tmp, level_of_parent_staging , catalogue_ref_tmp, import_ref_tmp FROM staging_catalogue WHERE id=tmp_id --and catalogue_ref is NULL 
			LIMIT 1;
			
			IF parent is not null THEN
				
				IF catalogue_ref_tmp IS NULL THEN
					tmp_id:=parent;
				ELSE
					--raise notice 'APPEND';
					SELECT id, level_ref into tmp_id, level_tmp  FROM  staging_catalogue WHERE import_ref=import_ref_tmp AND catalogue_ref=parent; --AND parent_updated=TRUE;
					parent_updated_refs_array:=parent||parent_updated_refs_array;
					--ftheeten 2019 02 15
					parent_updated_levels_array:= level_tmp||parent_updated_levels_array;
					--raise notice 'APPENDED';
				END IF;
				IF tmp_id IS NOT NULL THEN
					
					array_ids := tmp_id||array_ids;
					--raise notice '%',array_ids_string;
				END IF;
			END IF;
			
			staging_path_name_array:= name_tmp::varchar||staging_path_name_array;
			--raise notice '%',staging_path_name;
			staging_path_level_array:= level_of_parent_staging||staging_path_level_array;
			
			i:=i+1;
		END LOOP;
		--raise notice '%', staging_path_name_array;
		--raise notice '%', staging_path_level_array;
		--raise notice '%', array_ids;
		--raise notice '%', parent_updated_refs_array;
		/*IF staging_path_name='/' OR
		staging_path_level='/' OR 
		array_ids_string='/' THEN
			RETURN NULL;
		END IF;*/
		
		IF ARRAY_LENGTH(staging_path_name_array,1)=0 OR
		ARRAY_LENGTH(staging_path_level_array,1)=0 OR 
		ARRAY_LENGTH(array_ids,1)=0 THEN
		--RAISE NOTICE 'EXIT 0';
			RETURN NULL;
		END IF;
		--staging_path_level_array:=string_to_array(staging_path_level, '/');
		--staging_path_name_array:=string_to_array(staging_path_name, '/');
		--array_ids=string_to_array(array_ids_string, '/');
		
		returned_tmp:='/';
		returned_tmp_levels:='/';
		returned_name:='/';
		returned_ids_staging='/';
		staging_path_found:=false;
		taxon_found_in_staging:=false;
		last_id_set:=false;
--raise notice 'staging_path_name_array %', staging_path_name_array;
		IF ARRAY_LENGTH(staging_path_level_array, 1)=ARRAY_LENGTH(staging_path_name_array, 1) THEN
			FOR i IN  1..ARRAY_LENGTH(staging_path_name_array,1) LOOP
				--RAISe NOTICE '%d', i;
				--RAISe NOTICE '%d', ARRAY_LENGTH(staging_path_name_array,1);
				--RAISe NOTICE '%d', ARRAY_LENGTH(parent_updated_refs_array,1);
				tmp_name_path:=staging_path_name_array[i];
--raise notice 'tmp_name_path %',tmp_name_path;
				IF LENGTH(tmp_name_path)>0 THEN
				
					--raise notice 'TEST';
					level_tmp_char:=staging_path_level_array[i];
					--taxonomic parent already in staging
					IF ARRAY_LENGTH( parent_updated_refs_array ,1)> 0 AND i < ARRAY_LENGTH( parent_updated_refs_array ,1) THEN
						
						id_main_taxon:=parent_updated_refs_array[i];
						--ftheeten 2019 02 15
						id_level_taxon=parent_updated_levels_array[i];
						--raise notice 'id_main_taxon %', id_main_taxon;
						taxon_found_in_staging:=true;
					--find taxonomuic parent from string
					ELSE
						taxon_found_in_staging:=false;

						IF exclude_invalid_entries=true THEN
							SELECT id, level_ref INTO id_main_taxon, id_level_taxon FROM taxonomy WHERE name_indexed=fulltoindex(tmp_name_path) AND level_ref=level_tmp_char::int AND status !='invalid' LIMIT 1;
							--SELECT id INTO id_main_taxon FROM taxonomy WHERE fulltoindex((fct_rmca_taxonomy_split_name_author(name, level_ref))[1])=fulltoindex((fct_rmca_taxonomy_split_name_author(tmp_name_path, level_tmp_char::int))[1]) AND level_ref=level_tmp_char::int AND status !='invalid' LIMIT 1;
						
						ELSE
							SELECT id, level_ref INTO id_main_taxon, id_level_taxon FROM taxonomy WHERE name_indexed=fulltoindex(tmp_name_path) AND level_ref=level_tmp_char::int LIMIT 1;
							--SELECT id INTO id_main_taxon FROM taxonomy WHERE fulltoindex((fct_rmca_taxonomy_split_name_author(name, level_ref))[1])=fulltoindex((fct_rmca_taxonomy_split_name_author(tmp_name_path, level_tmp_char::int))[1]) AND level_ref=level_tmp_char::int LIMIT 1;
						END IF;
					END IF;
					IF id_main_taxon IS NULL THEN
						--raise notice 'NOT_FOUND';
						returned_tmp:= returned_tmp||'NOT_FOUND/';
						returned_tmp_levels:= returned_tmp_levels||'NOT_FOUND/';
						staging_path_found:=false;
					ELSE						
						--RAISE NOTICE 'FOUND';
						returned_tmp:= returned_tmp||id_main_taxon::varchar||'/';
						--ftheeten 2019 02 15
						returned_tmp_levels:= returned_tmp_levels||id_level_taxon::varchar||'/';
						returned_name:=returned_name||tmp_name_path||'/';
						returned_ids_staging:=returned_ids_staging||array_ids[i]::varchar||'/';
						
						last_id:=array_ids[i];
						staging_path_found:=TRUE;
					END IF;
					IF staging_path_found=TRUE THEN
						IF exclude_invalid_entries=true AND taxon_found_in_staging=false THEN
							
							PERFORM id FROM taxonomy WHERE path||id::varchar||'/'=returned_tmp AND status !='invalid';
						ELSIF taxon_found_in_staging=false THEN
						
						--raise notice 'returned_tmp : %',returned_tmp; 
							PERFORM id FROM taxonomy WHERE path||id::varchar||'/'=returned_tmp;
							IF NOT FOUND THEN
								PERFORM id FROM taxonomy WHERE path||id::varchar||'/'LIKE '%'||returned_tmp;
							END IF;
						--ELSE
						--	RAISE NOTICE 'NO check';
						END IF;
						IF FOUND OR taxon_found_in_staging=true THEN
							--RAISE NOTICE 'DEF';
							--parent path found in taxonomy (longest prefix)

							--eg for complete path in staging /97909/97910/97911/97912/97913/97914/97922/ )
							--eg. /1/5/5953/5954/5955/
							returned[1]:=returned_tmp;
							--string trascription of the path
							--eg. /Eucaryota/Animalia/CHORDATA/ACTINOPTERYGII/PERCIFORMES/
							returned[2]:=returned_name;
							--path corresponding to the longest taxonomical prefix with the staging ids
							--/97909/97910/97911/97912/97913/
							returned[3]:=returned_ids_staging;
							--lowest taxon of the path 
							--eg. 97913
							returned[4]:=last_id;
							--path the parents in staging not found in taxonomy (remainded of the longest prefix)
							--eg. /97914/97922/ 
							IF(i<ARRAY_LENGTH(array_ids,1)) THEN
								returned[5]:='/'||array_to_string(array_ids[i+1:ARRAY_LENGTH(array_ids,1)],'/')||'/';
							ELSE
								
								returned[5]:='/';
							END IF;

							--levels in staging
							returned[6]:='/'||array_to_string(staging_path_level_array,'/')||'/';
							--levels in taxonomy
							returned[7]:=returned_tmp_levels;
							
							--SUBSTRING(array_ids_string FROM  POSITION ('/'||last_id||'/' IN array_ids_string) + LENGTH('/'||last_id));
						ELSE
							--RAISE NOTICE 'EXIT 1';
							RETURN returned;
						END IF;
					ELSE 
						--RAISE NOTICE 'EXIT 2';
						RETURN returned;
					END IF;
				END IF;
				
			END LOOP;
		END IF;
--RAISE NOTICE 'EXIT 3';
	return returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1899 (class 1255 OID 1440223)
-- Name: fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, taxonomy_metadata_id integer, exclude_invalid_entries boolean DEFAULT false) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$
DECLARE
 --new 2019 02 26
 --this function searches a taxon path insde the same taxonomy
 returned varchar[];
 returned_tmp varchar;
 --ftheeten 2019 02 15
 returned_tmp_levels varchar;
 returned_name varchar;
 returned_ids_staging varchar;

 staging_path_name varchar;
 staging_path_level varchar;
 staging_path_level_array int[];
 staging_path_name_array varchar[];
 --ftheeten 2019 02 15
taxonomy_path_level_array int[];
 
 parent integer;
 i integer;
 tmp_id integer;
 tmp_name_path varchar;
 name_tmp varchar;
 level_tmp integer;
  level_tmp_char varchar;
  level_of_parent_staging int;
  level_of_parent_taxonomy int;
  
 id_main_taxon integer;
 --ftheeten 2019 02 15
 id_level_taxon integer;
 staging_path_found boolean;
 array_ids integer[];
 array_ids_string varchar;
 last_id varchar;
 last_id_set boolean;
 catalogue_ref_tmp integer;
 import_ref_tmp integer;
 parent_updated_tmp boolean;
 parent_updated_refs_array integer[];
 --ftheeten 2019 02 15
  parent_updated_levels_array integer[];
 taxon_found_in_staging boolean;
BEGIN
--raise notice 'ENTRY';
	SELECT parent_updated INTO parent_updated_tmp FROM  staging_catalogue WHERE id=tmp_id;
	IF parent_updated_tmp=true THEN
		return NULL;
	END IF;
		tmp_id:= id_staging_taxon;
		i:=0;
		parent:=-1;

		--staging_path_name:='/';
		--staging_path_level:='/';
		
		--array_ids_string:='/'||tmp_id||'/';
		array_ids:=tmp_id||array_ids;
		WHILE parent is not null and i<30 LOOP
			SELECT parent_ref, name, level_ref, catalogue_ref, import_ref  INTO parent, name_tmp, level_of_parent_staging , catalogue_ref_tmp, import_ref_tmp FROM staging_catalogue WHERE id=tmp_id --and catalogue_ref is NULL 
			LIMIT 1;
			
			IF parent is not null THEN
				
				IF catalogue_ref_tmp IS NULL THEN
					tmp_id:=parent;
				ELSE
					--raise notice 'APPEND';
					SELECT id, level_ref into tmp_id, level_tmp  FROM  staging_catalogue WHERE import_ref=import_ref_tmp AND catalogue_ref=parent; --AND parent_updated=TRUE;
					parent_updated_refs_array:=parent||parent_updated_refs_array;
					--ftheeten 2019 02 15
					parent_updated_levels_array:= level_tmp||parent_updated_levels_array;
					--raise notice 'APPENDED';
				END IF;
				IF tmp_id IS NOT NULL THEN
					
					array_ids := tmp_id||array_ids;
					--raise notice '%',array_ids_string;
				END IF;
			END IF;
			
			staging_path_name_array:= name_tmp::varchar||staging_path_name_array;
			--raise notice '%',staging_path_name;
			staging_path_level_array:= level_of_parent_staging||staging_path_level_array;
			
			i:=i+1;
		END LOOP;
		--raise notice '%', staging_path_name_array;
		--raise notice '%', staging_path_level_array;
		--raise notice '%', array_ids;
		--raise notice '%', parent_updated_refs_array;
		/*IF staging_path_name='/' OR
		staging_path_level='/' OR 
		array_ids_string='/' THEN
			RETURN NULL;
		END IF;*/
		
		IF ARRAY_LENGTH(staging_path_name_array,1)=0 OR
		ARRAY_LENGTH(staging_path_level_array,1)=0 OR 
		ARRAY_LENGTH(array_ids,1)=0 THEN
		--RAISE NOTICE 'EXIT 0';
			RETURN NULL;
		END IF;
		--staging_path_level_array:=string_to_array(staging_path_level, '/');
		--staging_path_name_array:=string_to_array(staging_path_name, '/');
		--array_ids=string_to_array(array_ids_string, '/');
		
		returned_tmp:='/';
		returned_tmp_levels:='/';
		returned_name:='/';
		returned_ids_staging='/';
		staging_path_found:=false;
		taxon_found_in_staging:=false;
		last_id_set:=false;
--raise notice 'staging_path_name_array %', staging_path_name_array;
		IF ARRAY_LENGTH(staging_path_level_array, 1)=ARRAY_LENGTH(staging_path_name_array, 1) THEN
			FOR i IN  1..ARRAY_LENGTH(staging_path_name_array,1) LOOP
				--RAISe NOTICE '%d', i;
				--RAISe NOTICE '%d', ARRAY_LENGTH(staging_path_name_array,1);
				--RAISe NOTICE '%d', ARRAY_LENGTH(parent_updated_refs_array,1);
				tmp_name_path:=staging_path_name_array[i];
--raise notice 'tmp_name_path %',tmp_name_path;
				IF LENGTH(tmp_name_path)>0 THEN
				
					raise notice 'TEST tmp_name_path';
					level_tmp_char:=staging_path_level_array[i];
					--taxonomic parent already in staging
					IF ARRAY_LENGTH( parent_updated_refs_array ,1)> 0 AND i < ARRAY_LENGTH( parent_updated_refs_array ,1) THEN
						
						id_main_taxon:=parent_updated_refs_array[i];
						--ftheeten 2019 02 15
						id_level_taxon=parent_updated_levels_array[i];
						--raise notice 'id_main_taxon %', id_main_taxon;
						taxon_found_in_staging:=true;
					--find taxonomuic parent from string
					ELSE
						
						taxon_found_in_staging:=false;

						IF exclude_invalid_entries=true THEN
							SELECT id, level_ref INTO id_main_taxon, id_level_taxon FROM taxonomy WHERE name_indexed=fulltoindex(tmp_name_path) AND level_ref=level_tmp_char::int AND status !='invalid' AND metadata_ref=taxonomy_metadata_id LIMIT 1;

						
						ELSE
							SELECT id, level_ref INTO id_main_taxon, id_level_taxon FROM taxonomy WHERE name_indexed=fulltoindex(tmp_name_path) AND level_ref=level_tmp_char::int AND metadata_ref=taxonomy_metadata_id LIMIT 1;
							
						END IF;
					END IF;
					IF id_main_taxon IS NULL THEN
						--raise notice 'NOT_FOUND';
						returned_tmp:= returned_tmp||'NOT_FOUND/';
						returned_tmp_levels:= returned_tmp_levels||'NOT_FOUND/';
						staging_path_found:=false;
					ELSE						
						--RAISE NOTICE 'FOUND';
						returned_tmp:= returned_tmp||id_main_taxon::varchar||'/';
						--ftheeten 2019 02 15
						returned_tmp_levels:= returned_tmp_levels||id_level_taxon::varchar||'/';
						returned_name:=returned_name||tmp_name_path||'/';
						returned_ids_staging:=returned_ids_staging||array_ids[i]::varchar||'/';
						
						last_id:=array_ids[i];
						staging_path_found:=TRUE;
					END IF;
					IF staging_path_found=TRUE THEN
						IF exclude_invalid_entries=true AND taxon_found_in_staging=false THEN
							
							PERFORM id FROM taxonomy WHERE path||id::varchar||'/'=returned_tmp AND status !='invalid' AND metadata_ref=taxonomy_metadata_id;
						ELSIF taxon_found_in_staging=false THEN
						
						--raise notice 'returned_tmp : %',returned_tmp; 
							PERFORM id FROM taxonomy WHERE path||id::varchar||'/'=returned_tmp AND metadata_ref=taxonomy_metadata_id;
							IF NOT FOUND THEN
								PERFORM id FROM taxonomy WHERE path||id::varchar||'/'LIKE '%'||returned_tmp AND metadata_ref=taxonomy_metadata_id;
							END IF;
						--ELSE
						--	RAISE NOTICE 'NO check';
						END IF;
						IF FOUND OR taxon_found_in_staging=true THEN
							--RAISE NOTICE 'DEF';
							--parent path found in taxonomy (longest prefix)

							--eg for complete path in staging /97909/97910/97911/97912/97913/97914/97922/ )
							--eg. /1/5/5953/5954/5955/
							returned[1]:=returned_tmp;
							--string trascription of the path
							--eg. /Eucaryota/Animalia/CHORDATA/ACTINOPTERYGII/PERCIFORMES/
							returned[2]:=returned_name;
							--path corresponding to the longest taxonomical prefix with the staging ids
							--/97909/97910/97911/97912/97913/
							returned[3]:=returned_ids_staging;
							--lowest taxon of the path 
							--eg. 97913
							returned[4]:=last_id;
							--path the parents in staging not found in taxonomy (remainded of the longest prefix)
							--eg. /97914/97922/ 
							IF(i<ARRAY_LENGTH(array_ids,1)) THEN
								returned[5]:='/'||array_to_string(array_ids[i+1:ARRAY_LENGTH(array_ids,1)],'/')||'/';
							ELSE
								
								returned[5]:='/';
							END IF;

							--levels in staging
							returned[6]:='/'||array_to_string(staging_path_level_array,'/')||'/';
							--levels in taxonomy
							returned[7]:=returned_tmp_levels;
							
							--SUBSTRING(array_ids_string FROM  POSITION ('/'||last_id||'/' IN array_ids_string) + LENGTH('/'||last_id));
						ELSE
							--RAISE NOTICE 'EXIT 1';
							RETURN returned;
						END IF;
					ELSE 
						RAISE NOTICE 'EXIT 2';
						RETURN returned;
					END IF;
				END IF;
				
			END LOOP;
		END IF;
--RAISE NOTICE 'EXIT 3';
	return returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, taxonomy_metadata_id integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1902 (class 1255 OID 1440226)
-- Name: fct_rmca_gtu_linetotagarray_pattern(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_gtu_linetotagarray_pattern(pattern text) RETURNS TABLE(gtu_id integer)
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
--select array_agg(tags_list) FROM (SELECT lineToTagRows($1) AS tags_list ) as x;
BEGIN
pattern := LOWER('(^|\W)'||pattern||'($|\W)') ;
RETURN QUERY SELECT gtu.id as gtu_id  FROM (SELECT gtu.id, UNNEST(tag_values_indexed) as tag FROM gtu) gtu  WHERE LOWER(tag) ~ pattern;
END;

$_$;


ALTER FUNCTION darwin2.fct_rmca_gtu_linetotagarray_pattern(pattern text) OWNER TO darwin2;

--
-- TOC entry 1905 (class 1255 OID 1440227)
-- Name: fct_rmca_gtu_orderby_pattern(character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_gtu_orderby_pattern(character varying, character varying) RETURNS integer
    LANGUAGE sql
    AS $_$ SELECT array_position(regexp_split_to_array(fulltoindex($1, true), '\s+'), fulltoindex($2, true)::text) $_$;


ALTER FUNCTION darwin2.fct_rmca_gtu_orderby_pattern(character varying, character varying) OWNER TO darwin2;

--
-- TOC entry 824 (class 1255 OID 1440228)
-- Name: fct_rmca_handle_lithostratigraphy_import(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_handle_lithostratigraphy_import(req_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	DECLARE
		returned boolean;
		staging_catalogue_line staging_catalogue;
		id_litho integer;
		parent_updated_flag boolean;
		imported boolean;
		new_parent integer;
		_c text;
	BEGIN
		returned := false;
		FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue
			LEFT JOIN imports ON
			staging_catalogue.import_ref=imports.id 
			WHERE 
			staging_catalogue.import_ref= req_import_ref 
			AND imports.format = 'lithostratigraphy' AND staging_catalogue.imported=false ORDER BY staging_catalogue.id
			LOOP
				BEGIN
					imported:=false;
					SELECT id INTO id_litho FROM lithostratigraphy WHERE fulltoindex(lithostratigraphy.name)=fulltoindex(staging_catalogue_line.name) AND lithostratigraphy.level_ref =staging_catalogue_line.level_ref;
					IF FOUND THEN
						UPDATE staging_catalogue SET import_exception = 'already_existing', catalogue_ref=id_litho WHERE staging_catalogue.id=staging_catalogue_line.id; 
						--update parent ref in children
						UPDATE staging_catalogue SET parent_ref = id_litho, parent_updated=TRUE WHERE import_ref=req_import_ref AND parent_ref=staging_catalogue_line.id;
					ELSE
						IF staging_catalogue_line.parent_ref IS NULL THEN
							INSERT INTO lithostratigraphy (name, level_ref, import_ref ) VALUES (staging_catalogue_line.name, staging_catalogue_line.level_ref, req_import_ref) RETURNING id INTO id_litho;
							imported:=true;
						ELSE 
							SELECT parent_updated , parent_ref INTO parent_updated_flag, new_parent FROM staging_catalogue WHERE id=staging_catalogue_line.id;
							IF parent_updated_flag IS TRUE THEN
								INSERT INTO lithostratigraphy (name, level_ref, parent_ref, import_ref) VALUES (staging_catalogue_line.name, staging_catalogue_line.level_ref, new_parent, req_import_ref) RETURNING id INTO id_litho;
								imported:=true;
							ELSE 
								UPDATE staging_catalogue SET import_exception = 'could_not_find_parent_in_db', catalogue_ref=id_litho WHERE staging_catalogue.id=staging_catalogue_line.id; 
							END IF;
						END IF;
						IF imported IS TRUE THEN
							UPDATE staging_catalogue SET import_exception = 'imported', imported=true, catalogue_ref=id_litho WHERE staging_catalogue.id=staging_catalogue_line.id; 
							UPDATE staging_catalogue SET parent_ref=id_litho , parent_updated=true 
							 WHERE import_ref=req_import_ref AND parent_ref=staging_catalogue_line.id;
						END IF;
					END IF;
				EXCEPTION WHEN OTHERS THEN
					--RAISE NOTICE 'EXCEPTION';
					--RAISE NOTICE '% %', SQLERRM, SQLSTATE;
					GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
					UPDATE staging_catalogue SET import_exception = 'Exception : ' ||SQLERRM || ' ' || _c WHERE staging_catalogue.id=staging_catalogue_line.id; 
					
					RAISE NOTICE 'context: >>%<<', _c;
				END;
			END LOOP;
			UPDATE staging_catalogue SET import_exception='could_not_import' WHERE import_ref=req_import_ref AND staging_catalogue.imported=false and import_exception is null;
		returned :=true;
		return returned;
	END;
	$$;


ALTER FUNCTION darwin2.fct_rmca_handle_lithostratigraphy_import(req_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1906 (class 1255 OID 1440229)
-- Name: fct_rmca_handle_non_reference_taxonomies(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	DECLARE
		staging_catalogue_line staging_catalogue;
		test_taxo  varchar[];
		higher_found_taxon varchar;
		existing_longest_path varchar;
		existing_longest_path_staging varchar;
		existing_longest_path_array varchar[];
		--marielle adam 2019 02 28
		existing_longest_path_array_no_null varchar[];
		existing_longest_path_staging_array varchar[];
		tmp_staging_id VARCHAR;
		tmp_taxonomy_id VARCHAR;
		is_parent boolean;
		i INTEGER;
		previous_staging_id_as_parent varchar;
		previous_taxonomy_id_as_parent varchar;
		staging_path_to_create_in_taxonomy varchar;
		staging_path_to_create_in_taxonomy_array varchar[];
		tmp_new_parent varchar;
		catalogue_ref_var integer;
		parent_ref_var integer; 
		staging_ref integer;
		parent_updated_var boolean;
		source_text varchar;
		tmp_name varchar;
		tmp_level_ref integer;
		last_id integer;
		parent_ref_var_staging integer;
		--ftheeten 2019 02 15
		staging_levels varchar;
		--ftheeten 2019 02 15
		taxonomy_levels varchar;
		--hierarchy_name varchar;
		 _c text;
		 kingdom_id integer;
		 staging_kingdom_id integer;
		 kingdom_name varchar;
		 --kingdom_name varchar;
		 existing_id integer;
		
		
	BEGIN
				--FTHEETEN 2019 02 14
		UPDATE staging_catalogue SET  import_exception=NULL WHERE import_ref=req_import_ref; 
		UPDATE staging_catalogue SET import_exception='taxon_already_exists_in_taxonomy' FROM taxonomy WHERE staging_catalogue.import_ref=req_import_ref AND fulltoindex(staging_catalogue.name)=taxonomy.name_indexed AND taxonomy.metadata_ref=var_metadata_ref ;
		--raise notice 'enter handle';
		--2019 02 26 create kingdom if not exists
		PERFORM id FROM staging_catalogue WHERE import_ref= req_import_ref AND level_ref=2 ;
		--raise notice '1';
		IF NOT FOUND THEN
raise notice '2';
			SELECT name INTO kingdom_name FROM taxonomy LEFT JOIN imports on taxonomy.id::varchar=imports.taxonomy_kingdom WHERE imports.id=req_import_ref;
			--raise notice '2a';
			SELECT id INTO kingdom_id  FROM taxonomy WHERE metadata_ref=var_metadata_ref AND level_ref=2 AND fulltoindex(name)=fulltoindex(kingdom_name);
			--raise notice '2b';
			IF NOT FOUND THEN
			--raise notice '%', kingdom_name;
				--ATTENTION aT RBINS EUCAROTYA IS -1 INSTEAD oF 1
				INSERT INTO taxonomy (name, level_ref, metadata_ref, parent_ref) VALUES (kingdom_name, 2, var_metadata_ref, 1) RETURNING id INTO kingdom_id;
				raise notice '2c';
			END IF;
			INSERT INTO staging_catalogue (import_ref, name, level_ref, name_cluster, imported) VALUES
				(req_import_ref, kingdom_name, 2, (SELECT MAX(name_cluster::integer)+1 FROM staging_catalogue WHERE import_ref= req_import_ref ), FALSE) RETURNING id INTO staging_kingdom_id;
			RAISE NOTICE 'ADDED KINGDOM';
			UPDATE staging_catalogue SET parent_ref= staging_kingdom_id WHERe parent_ref IS NULL and level_ref>2 AND import_ref=req_import_ref;
		END IF;
		raise notice '3';
		FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue
			LEFT JOIN imports ON
			staging_catalogue.import_ref=imports.id
			LEFT JOIN taxonomy_metadata
			ON 
			imports.specimen_taxonomy_ref=taxonomy_metadata.id  
			WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE
			AND level_ref=2 and taxonomy_metadata.id=var_metadata_ref
			LOOP
				PERFORM id FROM taxonomy WHERE level_ref=2 AND fulltoindex(taxonomy.name)=fulltoindex(staging_catalogue_line.name) AND metadata_ref= var_metadata_ref;
				IF NOT FOUND THEN
					INSERT INTO taxonomy (name, level_ref, metadata_ref, import_ref, parent_ref) VALUES(staging_catalogue_line.name,2,var_metadata_ref, req_import_ref, (SELECT taxonomy_kingdom::integer FROM imports where id= req_import_ref));
				END IF;
			END LOOP;
		--create phylum beforehand if not exists
		i:=0;
		--ftheeten 2018 12 14
		/*FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue
			LEFT JOIN imports ON
			staging_catalogue.import_ref=imports.id
			LEFT JOIN taxonomy_metadata
			ON 
			imports.specimen_taxonomy_ref=taxonomy_metadata.id  
			WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE
			AND level_ref=4 and taxonomy_metadata.id=var_metadata_ref
			LOOP
				PERFORM id FROM taxonomy WHERE level_ref=4 AND fulltoindex(taxonomy.name)=fulltoindex(staging_catalogue_line.name) AND metadata_ref= var_metadata_ref;
				IF NOT FOUND THEN
					INSERT INTO taxonomy (name, level_ref, metadata_ref, import_ref, parent_ref) VALUES(staging_catalogue_line.name,4,var_metadata_ref, req_import_ref, (SELECT taxonomy_kingdom::integer FROM imports where id= req_import_ref));
				END IF;
			END LOOP;

                */
		
		
		FOR staging_catalogue_line IN SELECT staging_catalogue.*, taxonomy_metadata.id as metadata_id FROM staging_catalogue 
		LEFT JOIN imports ON
		staging_catalogue.import_ref=imports.id
		LEFT JOIN taxonomy_metadata
		ON 
		imports.specimen_taxonomy_ref=taxonomy_metadata.id 
		WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE 
		AND 
		--new 2019 02 26
		taxonomy_metadata.id=var_metadata_ref  
		ORDER BY staging_catalogue.level_ref 
		DESC
		, fulltoindex(staging_catalogue.name) ASC
		--LOOP 1			
		LOOP
				raise notice 'in loop';
				raise notice '------------------------------%',(i::varchar);
				raise notice '------------------------------%',(staging_catalogue_line.id::varchar);
				--raise notice 'id %', staging_catalogue_line.id;
				--raise notice 'catalogue_ref %', staging_catalogue_line.catalogue_ref;
				raise notice 'name %', staging_catalogue_line.name;
				--take only not yet updated lines into considerations 
				--(attention this field can bbe updated from within the cursor) !

				--IF ONE
				IF staging_catalogue_line.catalogue_ref IS NULL AND staging_catalogue_line.parent_updated = FALSE THEN

					--FTHEETEN 2019 02 14


					
 					RAISE NOTICE 'try import';
					raise notice 'line id=%',staging_catalogue_line.id ;
					raise notice 'test %',staging_catalogue_line.id;
					SELECT fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy INTO test_taxo FROM fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(staging_catalogue_line.id);
					existing_longest_path=test_taxo[1];
					existing_longest_path_staging=test_taxo[3];
					higher_found_taxon=test_taxo[4];
					staging_levels=test_taxo[6];
					taxonomy_levels=test_taxo[7];
					existing_longest_path_array=string_to_array( existing_longest_path, '/');
					existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');

					RAISE NOTICE 'Existing longest path %', existing_longest_path; 
					RAISE NOTICE 'Existing longest path staging %', existing_longest_path_staging;
					RAISE NOTICE 'Higher found taxon %', higher_found_taxon;
					RAISE NOTICE 'Staging level path %', staging_levels;
					RAISE NOTICE 'Taxonomy level path %', taxonomy_levels;
					--IF TWO 
					IF higher_found_taxon::varchar= staging_catalogue_line.id::varchar THEN
						RAISE notice 'taxon found !';
						--whole taxonomic path already in taxonomy
						--update parent_ref and catalogue_ref for the whole path
						--IF THIRD
						existing_longest_path_array_no_null:=fct_remove_null_array_elem(existing_longest_path_array);
						--SELECT taxonomy_name INTO hierarchy_name FROM taxonomy_metadata WHERE taxonomy_metadata.id=(SELECT taxonomy.metadata_ref FROM taxonomy WHERE taxonomy.id::varchar= existing_longest_path_array_no_null[ARRAY_LENGTH(existing_longest_path_array_no_null,1)]) LIMIT 1;
						RAISE NOTICE 'taxonomy of taxon %',  fct_remove_null_array_elem(existing_longest_path_array); 
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
							is_parent:=TRUE;
							--LOOP 2
							FOR i IN  1..ARRAY_LENGTH(existing_longest_path_staging_array,1) LOOP
								tmp_taxonomy_id:=existing_longest_path_array[i];
								tmp_staging_id:=existing_longest_path_staging_array[i];
								--IF FOUR
								If LENGTH(TRIM(tmp_taxonomy_id))>0 AND LENGTH(trim(tmp_staging_id))>0 THEN
									--IF FIVE
									IF is_parent=TRUE THEN
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer WHERE id= staging_catalogue_line.id;								
									--ELSE FIVE	
									ELSE
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer, parent_updated=true, parent_ref=previous_taxonomy_id_as_parent::integer WHERE id= staging_catalogue_line.id;
									--END IF FIVE		
									END IF;
									--MENTION source in the original taxonomy
									--UPDATE taxonomy SET source=TRIM(COALESCE(source,'')||'; '||staging_catalogue_line.source_taxonomy) WHERE id=tmp_taxonomy_id::integer;
									is_parent:=FALSE;
									previous_staging_id_as_parent:=staging_catalogue_line.id;
									previous_taxonomy_id_as_parent:=tmp_taxonomy_id;
								--END IF FOUR
								END IF;
							--END LOOP 2	
							END LOOP;
						--END IF THIRD	
						--ftheeten 2019 02 18
						--RAISE notice 'TRY 1 % %',  staging_catalogue_line.id, hierarchy_name;
							--UPDATE staging_catalogue SET import_exception = 'taxon_already_exists (check '||hierarchy_name||')' WHERE id= staging_catalogue_line.id;
						--ELSE
						--RAISE notice 'TRY 2';
							--ftheeten 2019 02 18
							--UPDATE staging_catalogue SET import_exception = 'taxon_already_exists (check '||hierarchy_name||')' WHERE id= staging_catalogue_line.id;
						END IF;
						--lowest taxon is not in taxonomy
					--END IF TWO
					ELSE
						RAISE notice 'taxon to be created %', staging_catalogue_line.name;
						--take part of path which is already in taxonomy
						--(longest prefix)
						--existing_longest_path=test_taxo[1];
						--existing_longest_path_staging=test_taxo[3];
						--higher_found_taxon=test_taxo[4];
						staging_path_to_create_in_taxonomy=test_taxo[5];
						--RAISE NOTICE 'staging path to create in taxonomy (all) %' , test_taxo;  
						--RAISE NOTICE 'staging path to create in taxonomy %' , test_taxo[5];  
						--first create exisint hierarchy 
						--create taxon in taxonomy and keep id
						--update parent_ref and catalogue_ref

						existing_longest_path_array=string_to_array( existing_longest_path, '/');
						existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');
						staging_path_to_create_in_taxonomy_array=string_to_array(staging_path_to_create_in_taxonomy, '/');	
						--IF THIRD B	
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
						
						parent_updated_var:=false;
						--existing taxa
							--LOOP 3
							FOR i IN   1 .. ARRAY_LENGTH( existing_longest_path_array,1) LOOP
								--IF FOUR B
								IF LENGTH(TRIM(existing_longest_path_array[i]))>0 AND LENGTH(TRIM(existing_longest_path_staging_array[i]))>0 THEN
									--RAISE NOTICE 'IN IF';
									catalogue_ref_var:=existing_longest_path_array[i]::int;
									staging_ref:=existing_longest_path_staging_array[i]::int;
									RAISE NOTICE 'catalogue_ref_var %', catalogue_ref_var;
									RAISE NOTICE 'staging_ref %', staging_ref;
									--IF FIVE B
									IF parent_updated_var=false THEN
										--RAISE NOTICE 'UPDATE NO PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var
										WHERE id=staging_ref AND parent_updated=false AND parent_ref IS NULL;
									--ELSE FIVE B
									ELSE
										--RAISE NOTICE 'UPDATE  PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var,
										parent_ref=parent_ref_var, parent_updated=true
										WHERE id=staging_ref and parent_updated=false;
									--END IF FIVE B
									END IF;
									parent_updated_var:=true;
									parent_ref_var:=catalogue_ref_var;
									--update source in taxonomy
									--UPDATe taxonomy SET source=COALESCE(source||', '||source_text) WHERE id=catalogue_ref_var;
									--RAISE notice 'parent_ref_var %', parent_ref_var;
								--END IF FOUR B
								END IF;
							--END LOOP 3	
							END LOOP;
						--create new taxa
						raise notice 'To create array %', staging_path_to_create_in_taxonomy_array; 
						raise notice 'length array %' , ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1);
						--RAISE notice 'parent_ref_var between loops %', parent_ref_var;
							--LOOP 3 B
							FOR i IN  1..ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1) LOOP
							
								RAISE NOTICE 'IN LOOP NEW TAXA';
								--IF FOUR C
								IF LENGTH(TRIM(staging_path_to_create_in_taxonomy_array[i]))>0 THEN

								--raise notice 'new taxa id %', staging_path_to_create_in_taxonomy_array[i];
									SELECT name , level_ref, parent_ref INTO tmp_name, tmp_level_ref, parent_ref_var_staging FROM staging_catalogue WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
									SELECT catalogue_ref INTO parent_ref_var FROM staging_catalogue WHERe id=parent_ref_var_staging;
									RAISE NOTICE 'TEST %', tmp_name;
									--IF FIVE C
									IF parent_updated_var=false AND parent_ref_var IS NULL THEN 
									BEGIN
										RAISE NOTICE 'AA';	
										--raise notice 'tmp_name %', tmp_name;
										SELECT id INTO existing_id FROM taxonomy WHERe name=tmp_name AND  level_ref=tmp_level_ref  AND metadata_ref=var_metadata_ref;
										IF NOT FOUND THEN
											RAISE NOTICE 'CREATE %', tmp_name;

											INSERT INTO taxonomy (id, name, level_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
											tmp_name, tmp_level_ref, var_metadata_ref, req_import_ref) 
											RETURNING id INTO last_id;
											RAISE NOTICE 'INSERTED_ID=%', last_id;
											UPDATE staging_catalogue SET catalogue_ref=last_id, imported=true
											FROM inserted WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										--raise notice 'last_id A %', last_id;
											parent_ref_var:=last_id;
										ELSE
											RAISE NOTICE 'HIERARCHY EXISTS !!!!!!!!!!!!!!!!!!!!!';
											UPDATE staging_catalogue SET imported=FALSE,
											import_exception='path_already_exists (Hierarchy)'
											||(SELECT taxonomy_metadata.taxonomy_name FROM taxonomy_metadata WHERE taxonomy_metadata.id = (SELECT metadata_ref FROM taxonomy WHERE taxonomy.name=tmp_name AND  taxonomy.level_ref=tmp_level_ref ) LIMIT 1)||')', catalogue_ref= existing_id
											WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										END IF;
									EXCEPTION WHEN OTHERS THEN
										UPDATE staging_catalogue SET import_exception= SQLERRM WHERE staging_catalogue.id=staging_path_to_create_in_taxonomy_array[i]::int;
									END;
									--ELSIF FIVE C
									ELSE --IF parent_ref_var IS NOT NULL THEN
									BEGIN
										RAISE NOTICE 'BB';	
										SELECT id INTO existing_id FROM taxonomy WHERe name=tmp_name AND  level_ref=tmp_level_ref --AND parent_ref=parent_ref_var 
AND metadata_ref=var_metadata_ref;
										IF NOT FOUND THEN
											--raise notice 'tmp_name %', tmp_name;
											--raise notice 'tmp_level_ref %', tmp_level_ref;
											--raise notice 'parent_ref_var %', parent_ref_var;
											--raise notice 'source_text %', source_text;
											RAISE NOTICE 'INSERT %' , tmp_name;
											INSERT INTO taxonomy (id, name, level_ref, parent_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
											tmp_name, tmp_level_ref, parent_ref_var,  var_metadata_ref, req_import_ref) RETURNING id INTO last_id;
											RAISE NOTICE 'INSERTED_ID=%', last_id;
											/*IF staging_levels != taxonomy_levels THEN
												UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true , import_exception = 'taxon_already_exists_with_another_hierarchy' WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											ELSE
											
												UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											END IF;*/
											UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true , import_exception = 'taxon_imported' WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											--raise notice 'last_id B %', last_id;
											 parent_ref_var:=last_id; 
										ELSE
											UPDATE staging_catalogue SET imported=FALSE,
											import_exception='path_already_exists', catalogue_ref=existing_id WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											--raise notice 'last_id B %', last_id;
											 
										END IF;
									--END IF FIVE C
									EXCEPTION WHEN OTHERS THEN
										UPDATE staging_catalogue SET import_exception= SQLERRM WHERE staging_catalogue.id=staging_path_to_create_in_taxonomy_array[i]::int;
									END;
									--ELSE
									--RAISE NOTICE 'CC';
									END IF;
								--END IF FOUR C	
								END IF;
							--END LOOP 3 B	
							END LOOP;
						--END IF THIRD B
						END IF;
					--END IF TWO 	
					END IF;
				ELSE --IF ONE	
				--ELSIF staging_catalogue_line.catalogue_ref IS NOT NULL AND staging_catalogue_line.parent_updated = FALSE THEN
				--partially updated
					raise notice 'else 2';
				--END IF ONE
				END IF;
		--END LOOP ONE
		i:=i+1;
		END LOOP;
		--RAISE NOTICE 'exit';

		UPDATE staging_catalogue
		SET import_exception='taxon_already_exists (check '||taxonomy_name||')'
			FROM taxonomy
			LEFT JOIN taxonomy_metadata
			ON taxonomy.metadata_ref=taxonomy_metadata.id
			 WHERE  
			staging_catalogue.catalogue_ref=taxonomy.id AND staging_catalogue.import_ref=req_import_ref AND imported=FALSE AND catalogue_ref IS NOT NULL
			--new 2019 02 26
			AND taxonomy.metadata_ref=var_metadata_ref;
		UPDATE staging_catalogue
		SET import_exception='could_not_link_taxon_check_upper_ranks'			
			WHERE staging_catalogue.import_ref=req_import_ref AND imported=FALSE AND import_exception IS NULL;
					
		RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION';
		RAISE NOTICE '% %', SQLERRM, SQLSTATE;
	        GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
		RAISE NOTICE 'context: >>%<<', _c;
		UPDATE imports SET state='error', errors_in_import=SQLERRM||' NAME ('||staging_catalogue_line.name||')'  WHERE id=req_import_ref;
		RETURN FALSE;
	END;
	$$;


ALTER FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1909 (class 1255 OID 1440232)
-- Name: fct_rmca_handle_non_reference_taxonomies_bck(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_bck(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	DECLARE
		staging_catalogue_line staging_catalogue;
		test_taxo  varchar[];
		higher_found_taxon varchar;
		existing_longest_path varchar;
		existing_longest_path_staging varchar;
		existing_longest_path_array varchar[];
		existing_longest_path_staging_array varchar[];
		tmp_staging_id VARCHAR;
		tmp_taxonomy_id VARCHAR;
		is_parent boolean;
		i INTEGER;
		previous_staging_id_as_parent varchar;
		previous_taxonomy_id_as_parent varchar;
		staging_path_to_create_in_taxonomy varchar;
		staging_path_to_create_in_taxonomy_array varchar[];
		tmp_new_parent varchar;
		catalogue_ref_var integer;
		parent_ref_var integer; 
		staging_ref integer;
		parent_updated_var boolean;
		source_text varchar;
		tmp_name varchar;
		tmp_level_ref integer;
		last_id integer;
		parent_ref_var_staging integer;
		
		
	BEGIN
		--raise notice 'enter handle';

		--create phylum beforehand if not exists
		--ftheeten 2018 12 14
		FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue
			LEFT JOIN imports ON
			staging_catalogue.import_ref=imports.id
			LEFT JOIN taxonomy_metadata
			ON 
			imports.specimen_taxonomy_ref=taxonomy_metadata.id  
			WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE
			AND level_ref=4
			LOOP
				PERFORM id FROM taxonomy WHERE level_ref=4 AND fulltoindex(taxonomy.name)=fulltoindex(staging_catalogue_line.name);
				IF NOT FOUND THEN
					INSERT INTO taxonomy (name, level_ref, metadata_ref, import_ref, parent_ref) VALUES(staging_catalogue_line.name,4,var_metadata_ref, req_import_ref, (SELECT taxonomy_kingdom::integer FROM imports where id= req_import_ref));
					--2019 02 10
					UPDATE staging_catalogue set imported =true WHERE id=staging_catalogue_line.id;
				ELSE
					UPDATE staging_catalogue set import_exception ='taxon_already_exists' WHERE id=staging_catalogue_line.id;
				END IF;
			END LOOP;
		
		FOR staging_catalogue_line IN SELECT staging_catalogue.*, taxonomy_metadata.id as metadata_id FROM staging_catalogue 
		LEFT JOIN imports ON
		staging_catalogue.import_ref=imports.id
		LEFT JOIN taxonomy_metadata
		ON 
		imports.specimen_taxonomy_ref=taxonomy_metadata.id 
		WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE ORDER BY staging_catalogue.level_ref DESC
		, fulltoindex(staging_catalogue.name) ASC
		--LOOP 1	
		LOOP
				raise notice 'in loop';
				raise notice '------------------------------';
				--raise notice 'id %', staging_catalogue_line.id;
				--raise notice 'catalogue_ref %', staging_catalogue_line.catalogue_ref;
				raise notice 'name %', staging_catalogue_line.name;
				--take only not yet updated lines into considerations 
				--(attention this field can bbe updated from within the cursor) !

				--IF ONE
				IF staging_catalogue_line.catalogue_ref IS NULL AND staging_catalogue_line.parent_updated = FALSE THEN

					--FTHEETEN 2019 02 14
					/*PERFORM FROM taxonomy WHERE taxonomy.name_indexed=fulltoindex(name)
 AND taxonomy.level_ref=staging_catalogue.level_ref AND taxonomy.metadata_ref=metadata_id;
					IF FOUND THEN
						UPDATE staging_catalogue SET import_exception='taxon_already_exists' WHERE id=staging_catalogue_line.id;
					END IF;*/

					
 					--RAISE NOTICE 'try import';
					--raise notice 'line id=%',staging_catalogue_line.id ;
					--raise notice 'test %',staging_catalogue_line.id;
					SELECT fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy INTO test_taxo FROM fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(staging_catalogue_line.id);
					existing_longest_path=test_taxo[1];
					existing_longest_path_staging=test_taxo[3];
					higher_found_taxon=test_taxo[4];
					existing_longest_path_array=string_to_array( existing_longest_path, '/');
					existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');
					raise notice '1';
					RAISE NOTICE 'Existing longest path %', existing_longest_path; 
					RAISE NOTICE 'Existing longest path staging %', existing_longest_path_staging;
					RAISE NOTICE 'Higher found taxon %', higher_found_taxon;
					--IF TWO 
					IF higher_found_taxon::varchar= staging_catalogue_line.id::varchar THEN
						RAISE notice 'taxon found';
						--whole taxonomic path already in taxonomy
						--update parent_ref and catalogue_ref for the whole path
						--IF THIRD
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
							is_parent:=TRUE;
							--LOOP 2
							FOR i IN  1..ARRAY_LENGTH(existing_longest_path_staging_array,1) LOOP
								tmp_taxonomy_id:=existing_longest_path_array[i];
								tmp_staging_id:=existing_longest_path_staging_array[i];
								--IF FOUR
								If LENGTH(TRIM(tmp_taxonomy_id))>0 AND LENGTH(trim(tmp_staging_id))>0 THEN
									--IF FIVE
									IF is_parent=TRUE THEN
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer WHERE id= staging_catalogue_line.id;								
									--ELSE FIVE	
									ELSE
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer, parent_updated=true, parent_ref=previous_taxonomy_id_as_parent::integer WHERE id= staging_catalogue_line.id;
									--END IF FIVE		
									END IF;
									--MENTION source in the original taxonomy
									--UPDATE taxonomy SET source=TRIM(COALESCE(source,'')||'; '||staging_catalogue_line.source_taxonomy) WHERE id=tmp_taxonomy_id::integer;
									is_parent:=FALSE;
									previous_staging_id_as_parent:=staging_catalogue_line.id;
									previous_taxonomy_id_as_parent:=tmp_taxonomy_id;
								--END IF FOUR
								END IF;
							--END LOOP 2	
							END LOOP;
						--END IF THIRD	
						END IF;
						--lowest taxon is not in taxonomy
					--END IF TWO
					ELSE
						RAISE notice 'taxon to be created %', staging_catalogue_line.name;
						--take part of path which is already in taxonomy
						--(longest prefix)
						--existing_longest_path=test_taxo[1];
						--existing_longest_path_staging=test_taxo[3];
						--higher_found_taxon=test_taxo[4];
						staging_path_to_create_in_taxonomy=test_taxo[5];
						--RAISE NOTICE 'staging path to create in taxonomy (all) %' , test_taxo;  
						--RAISE NOTICE 'staging path to create in taxonomy %' , test_taxo[5];  
						--first create exisint hierarchy 
						--create taxon in taxonomy and keep id
						--update parent_ref and catalogue_ref

						existing_longest_path_array=string_to_array( existing_longest_path, '/');
						existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');
						staging_path_to_create_in_taxonomy_array=string_to_array(staging_path_to_create_in_taxonomy, '/');	
						--IF THIRD B	
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
						
						parent_updated_var:=false;
						--existing taxa
							--LOOP 3
							FOR i IN   1 .. ARRAY_LENGTH( existing_longest_path_array,1) LOOP
								--IF FOUR B
								IF LENGTH(TRIM(existing_longest_path_array[i]))>0 AND LENGTH(TRIM(existing_longest_path_staging_array[i]))>0 THEN
									--RAISE NOTICE 'IN IF';
									catalogue_ref_var:=existing_longest_path_array[i]::int;
									staging_ref:=existing_longest_path_staging_array[i]::int;
									--RAISE NOTICE 'catalogue_ref_var %', catalogue_ref_var;
									--RAISE NOTICE 'staging_ref %', staging_ref;
									--IF FIVE B
									IF parent_updated_var=false THEN
										--RAISE NOTICE 'UPDATE NO PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var
										WHERE id=staging_ref AND parent_updated=false AND parent_ref IS NULL;
									--ELSE FIVE B
									ELSE
										--RAISE NOTICE 'UPDATE  PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var,
										parent_ref=parent_ref_var, parent_updated=true
										WHERE id=staging_ref and parent_updated=false;
									--END IF FIVE B
									END IF;
									parent_updated_var:=true;
									parent_ref_var:=catalogue_ref_var;
									--update source in taxonomy
									--UPDATe taxonomy SET source=COALESCE(source||', '||source_text) WHERE id=catalogue_ref_var;
									--RAISE notice 'parent_ref_var %', parent_ref_var;
								--END IF FOUR B
								END IF;
							--END LOOP 3	
							END LOOP;
						--create new taxa
						--raise notice 'To create array %', staging_path_to_create_in_taxonomy_array; 
						--raise notice 'length array %' , ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1);
						--RAISE notice 'parent_ref_var between loops %', parent_ref_var;
							--LOOP 3 B
							FOR i IN  1..ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1) LOOP
							
								--RAISE NOTICE 'IN LOOP NEW TAXA';
								--IF FOUR C
								IF LENGTH(TRIM(staging_path_to_create_in_taxonomy_array[i]))>0 THEN

								--raise notice 'new taxa id %', staging_path_to_create_in_taxonomy_array[i];
									SELECT name , level_ref, parent_ref INTO tmp_name, tmp_level_ref, parent_ref_var_staging FROM staging_catalogue WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
									SELECT catalogue_ref INTO parent_ref_var FROM staging_catalogue WHERe id=parent_ref_var_staging;
									--IF FIVE C
									IF parent_updated_var=false AND parent_ref_var IS NULL THEN 
										--raise notice 'tmp_name %', tmp_name;
										INSERT INTO taxonomy (id, name, level_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
										tmp_name, tmp_level_ref, var_metadata_ref, req_import_ref) 
										RETURNING id INTO last_id;
										UPDATE staging_catalogue SET catalogue_ref=last_id, imported=true
										FROM inserted WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										--raise notice 'last_id A %', last_id;
										 parent_ref_var:=last_id;
									--ELSIF FIVE C
									ELSIF parent_ref_var IS NOT NULL THEN
										--raise notice 'tmp_name %', tmp_name;
										--raise notice 'tmp_level_ref %', tmp_level_ref;
										--raise notice 'parent_ref_var %', parent_ref_var;
										--raise notice 'source_text %', source_text;
										INSERT INTO taxonomy (id, name, level_ref, parent_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
										tmp_name, tmp_level_ref, parent_ref_var,  var_metadata_ref, req_import_ref) RETURNING id INTO last_id;
										UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										--raise notice 'last_id B %', last_id;
										 parent_ref_var:=last_id; 
									--END IF FIVE C
									END IF;
								--END IF FOUR C	
								END IF;
							--END LOOP 3 B	
							END LOOP;
						--END IF THIRD B
						END IF;
					--END IF TWO 	
					END IF;
				--ELSE IF ONE	
				--ELSIF staging_catalogue_line.catalogue_ref IS NOT NULL AND staging_catalogue_line.parent_updated = FALSE THEN
				--partially updated
					--raise notice 'Catalogue_updated';
				--END IF ONE
				END IF;
		--END LOOP ONE
		END LOOP;
		--RAISE NOTICE 'exit';

		--FTHEETEN 2019 02 14
		UPDATE staging_catalogue SET import_exception='taxon_already_exists_in_taxonomy' FROM taxonomy WHERE staging_catalogue.import_ref=req_import_ref AND fulltoindex(staging_catalogue.name)=taxonomy.name_indexed AND taxonomy.metadata_ref=var_metadata_ref;
		RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
		UPDATE imports SET errors_in_import=SQLERRM  WHERE id=req_import_ref;
		RETURN FALSE;
	END;
	$$;


ALTER FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_bck(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1910 (class 1255 OID 1440235)
-- Name: fct_rmca_handle_non_reference_taxonomies_same_taxo(integer, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_same_taxo(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	DECLARE
		staging_catalogue_line staging_catalogue;
		test_taxo  varchar[];
		higher_found_taxon varchar;
		existing_longest_path varchar;
		existing_longest_path_staging varchar;
		existing_longest_path_array varchar[];
		--marielle adam 2019 02 28
		existing_longest_path_array_no_null varchar[];
		existing_longest_path_staging_array varchar[];
		tmp_staging_id VARCHAR;
		tmp_taxonomy_id VARCHAR;
		is_parent boolean;
		i INTEGER;
		previous_staging_id_as_parent varchar;
		previous_taxonomy_id_as_parent varchar;
		staging_path_to_create_in_taxonomy varchar;
		staging_path_to_create_in_taxonomy_array varchar[];
		tmp_new_parent varchar;
		catalogue_ref_var integer;
		parent_ref_var integer; 
		staging_ref integer;
		parent_updated_var boolean;
		source_text varchar;
		tmp_name varchar;
		tmp_level_ref integer;
		last_id integer;
		parent_ref_var_staging integer;
		--ftheeten 2019 02 15
		staging_levels varchar;
		--ftheeten 2019 02 15
		taxonomy_levels varchar;
		--hierarchy_name varchar;
		 _c text;
		 kingdom_id integer;
		 --kingdom_name varchar;
		
		
	BEGIN
				--FTHEETEN 2019 02 14
		UPDATE staging_catalogue SET import_exception='taxon_already_exists_in_taxonomy' FROM taxonomy WHERE staging_catalogue.import_ref=req_import_ref AND fulltoindex(staging_catalogue.name)=taxonomy.name_indexed AND taxonomy.metadata_ref=var_metadata_ref;
		--raise notice 'enter handle';

		--create phylum beforehand if not exists
		i:=0;
		--ftheeten 2018 12 14
		FOR staging_catalogue_line IN SELECT staging_catalogue.* FROM staging_catalogue
			LEFT JOIN imports ON
			staging_catalogue.import_ref=imports.id
			LEFT JOIN taxonomy_metadata
			ON 
			imports.specimen_taxonomy_ref=taxonomy_metadata.id  
			WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE
			AND level_ref=4
			LOOP
				PERFORM id FROM taxonomy WHERE level_ref=4 AND fulltoindex(taxonomy.name)=fulltoindex(staging_catalogue_line.name) AND metadata_ref=var_metadata_ref;
				IF NOT FOUND THEN
					INSERT INTO taxonomy (name, level_ref, metadata_ref, import_ref, parent_ref) VALUES(staging_catalogue_line.name,4,var_metadata_ref, req_import_ref, (SELECT taxonomy_kingdom::integer FROM imports where id= req_import_ref));
				END IF;
			END LOOP;

                
		
		
		FOR staging_catalogue_line IN SELECT staging_catalogue.*, taxonomy_metadata.id as metadata_id FROM staging_catalogue 
		LEFT JOIN imports ON
		staging_catalogue.import_ref=imports.id
		LEFT JOIN taxonomy_metadata
		ON 
		imports.specimen_taxonomy_ref=taxonomy_metadata.id 
		WHERE staging_catalogue.import_ref= req_import_ref AND taxonomy_metadata.is_reference_taxonomy= FALSE ORDER BY staging_catalogue.level_ref DESC
		, fulltoindex(staging_catalogue.name) ASC
		--LOOP 1			
		LOOP
				raise notice 'in loop';
				raise notice '------------------------------%',(i::varchar);
				raise notice '------------------------------%',(staging_catalogue_line.id::varchar);
				--raise notice 'id %', staging_catalogue_line.id;
				--raise notice 'catalogue_ref %', staging_catalogue_line.catalogue_ref;
				raise notice 'name %', staging_catalogue_line.name;
				--take only not yet updated lines into considerations 
				--(attention this field can bbe updated from within the cursor) !

				--IF ONE
				IF staging_catalogue_line.catalogue_ref IS NULL AND staging_catalogue_line.parent_updated = FALSE THEN

					--FTHEETEN 2019 02 14
					/*PERFORM FROM taxonomy WHERE taxonomy.name_indexed=fulltoindex(name)
 AND taxonomy.level_ref=staging_catalogue.level_ref AND taxonomy.metadata_ref=metadata_id;
					IF FOUND THEN
						UPDATE staging_catalogue SET import_exception='taxon_already_exists' WHERE id=staging_catalogue_line.id;
					END IF;*/

					
 					--RAISE NOTICE 'try import';
					--raise notice 'line id=%',staging_catalogue_line.id ;
					--raise notice 'test %',staging_catalogue_line.id;
					SELECT fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy INTO test_taxo FROM fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(staging_catalogue_line.id
					--new 2019 02 26 stay in the same taxo
					,var_metadata_ref
					);
					existing_longest_path=test_taxo[1];
					existing_longest_path_staging=test_taxo[3];
					higher_found_taxon=test_taxo[4];
					staging_levels=test_taxo[6];
					taxonomy_levels=test_taxo[7];
					existing_longest_path_array=string_to_array( existing_longest_path, '/');
					existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');

					RAISE NOTICE 'Existing longest path %', existing_longest_path; 
					RAISE NOTICE 'Existing longest path staging %', existing_longest_path_staging;
					RAISE NOTICE 'Higher found taxon %', higher_found_taxon;
					RAISE NOTICE 'Staging level path %', staging_levels;
					RAISE NOTICE 'Taxonomy level path %', taxonomy_levels;
					--IF TWO 
					IF higher_found_taxon::varchar= staging_catalogue_line.id::varchar THEN
						RAISE notice 'taxon found !';
						--whole taxonomic path already in taxonomy
						--update parent_ref and catalogue_ref for the whole path
						--IF THIRD
						existing_longest_path_array_no_null:=array_remove(existing_longest_path_array,'');

						RAISE NOTICE 'taxonomy of taxon %',  array_remove(existing_longest_path_array,''); 
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
							is_parent:=TRUE;
							--LOOP 2
							FOR i IN  1..ARRAY_LENGTH(existing_longest_path_staging_array,1) LOOP
								tmp_taxonomy_id:=existing_longest_path_array[i];
								tmp_staging_id:=existing_longest_path_staging_array[i];
								--IF FOUR
								If LENGTH(TRIM(tmp_taxonomy_id))>0 AND LENGTH(trim(tmp_staging_id))>0 THEN
									--IF FIVE
									IF is_parent=TRUE THEN
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer WHERE id= staging_catalogue_line.id;								
									--ELSE FIVE	
									ELSE
										UPDATE staging_catalogue SET catalogue_ref=tmp_taxonomy_id::integer, parent_updated=true, parent_ref=previous_taxonomy_id_as_parent::integer WHERE id= staging_catalogue_line.id;
									--END IF FIVE		
									END IF;
									--MENTION source in the original taxonomy
									--UPDATE taxonomy SET source=TRIM(COALESCE(source,'')||'; '||staging_catalogue_line.source_taxonomy) WHERE id=tmp_taxonomy_id::integer;
									is_parent:=FALSE;
									previous_staging_id_as_parent:=staging_catalogue_line.id;
									previous_taxonomy_id_as_parent:=tmp_taxonomy_id;
								--END IF FOUR
								END IF;
							--END LOOP 2	
							END LOOP;
						
						END IF;
						--lowest taxon is not in taxonomy
					--END IF TWO
					ELSE
						RAISE notice 'taxon to be created %', staging_catalogue_line.name;
						--take part of path which is already in taxonomy
						--(longest prefix)
						--existing_longest_path=test_taxo[1];
						--existing_longest_path_staging=test_taxo[3];
						--higher_found_taxon=test_taxo[4];
						staging_path_to_create_in_taxonomy=test_taxo[5];
						--RAISE NOTICE 'staging path to create in taxonomy (all) %' , test_taxo;  
						--RAISE NOTICE 'staging path to create in taxonomy %' , test_taxo[5];  
						--first create exisint hierarchy 
						--create taxon in taxonomy and keep id
						--update parent_ref and catalogue_ref

						existing_longest_path_array=string_to_array( existing_longest_path, '/');
						existing_longest_path_staging_array=string_to_array( existing_longest_path_staging, '/');
						staging_path_to_create_in_taxonomy_array=string_to_array(staging_path_to_create_in_taxonomy, '/');	
						--IF THIRD B	
						IF(ARRAY_LENGTH(existing_longest_path_array,1)=ARRAY_LENGTH(existing_longest_path_staging_array,1)) THEN
						
						parent_updated_var:=false;
						--existing taxa
							--LOOP 3
							FOR i IN   1 .. ARRAY_LENGTH( existing_longest_path_array,1) LOOP
								--IF FOUR B
								IF LENGTH(TRIM(existing_longest_path_array[i]))>0 AND LENGTH(TRIM(existing_longest_path_staging_array[i]))>0 THEN
									--RAISE NOTICE 'IN IF';
									catalogue_ref_var:=existing_longest_path_array[i]::int;
									staging_ref:=existing_longest_path_staging_array[i]::int;
									--RAISE NOTICE 'catalogue_ref_var %', catalogue_ref_var;
									--RAISE NOTICE 'staging_ref %', staging_ref;
									--IF FIVE B
									IF parent_updated_var=false THEN
										--RAISE NOTICE 'UPDATE NO PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var
										WHERE id=staging_ref AND parent_updated=false AND parent_ref IS NULL;
									--ELSE FIVE B
									ELSE
										--RAISE NOTICE 'UPDATE  PARENT';
										UPDATE staging_catalogue SET catalogue_ref=catalogue_ref_var,
										parent_ref=parent_ref_var, parent_updated=true
										WHERE id=staging_ref and parent_updated=false;
									--END IF FIVE B
									END IF;
									parent_updated_var:=true;
									parent_ref_var:=catalogue_ref_var;
									--update source in taxonomy
									--UPDATe taxonomy SET source=COALESCE(source||', '||source_text) WHERE id=catalogue_ref_var;
									--RAISE notice 'parent_ref_var %', parent_ref_var;
								--END IF FOUR B
								END IF;
							--END LOOP 3	
							END LOOP;
						--create new taxa
						--raise notice 'To create array %', staging_path_to_create_in_taxonomy_array; 
						--raise notice 'length array %' , ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1);
						--RAISE notice 'parent_ref_var between loops %', parent_ref_var;
							--LOOP 3 B
							FOR i IN  1..ARRAY_LENGTH( staging_path_to_create_in_taxonomy_array,1) LOOP
							
								--RAISE NOTICE 'IN LOOP NEW TAXA';
								--IF FOUR C
								IF LENGTH(TRIM(staging_path_to_create_in_taxonomy_array[i]))>0 THEN

								--raise notice 'new taxa id %', staging_path_to_create_in_taxonomy_array[i];
									SELECT name , level_ref, parent_ref INTO tmp_name, tmp_level_ref, parent_ref_var_staging FROM staging_catalogue WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
									SELECT catalogue_ref INTO parent_ref_var FROM staging_catalogue WHERe id=parent_ref_var_staging;
									--IF FIVE C
									IF parent_updated_var=false AND parent_ref_var IS NULL THEN 
									BEGIN
										--raise notice 'tmp_name %', tmp_name;
										PERFORM FROM taxonomy WHERe name=tmp_name AND  level_ref=tmp_level_ref;
										IF NOT FOUND THEN

											INSERT INTO taxonomy (id, name, level_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
											tmp_name, tmp_level_ref, var_metadata_ref, req_import_ref) 
											RETURNING id INTO last_id;
											UPDATE staging_catalogue SET catalogue_ref=last_id, imported=true
											FROM inserted WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										--raise notice 'last_id A %', last_id;
											parent_ref_var:=last_id;
										ELSE
											RAISE NOTICE 'HIERARCHY EXISTS !!!!!!!!!!!!!!!!!!!!!';
											UPDATE staging_catalogue SET imported=FALSE,
											import_exception='path_already_exists (Hierarchy)'
											||(SELECT taxonomy_metadata.taxonomy_name FROM taxonomy_metadata WHERE taxonomy_metadata.id = (SELECT metadata_ref FROM taxonomy WHERE taxonomy.name=tmp_name AND  taxonomy.level_ref=tmp_level_ref ) LIMIT 1)||')' 
											WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
										END IF;
									EXCEPTION WHEN OTHERS THEN
										UPDATE staging_catalogue SET import_exception= SQLERRM WHERE staging_catalogue.id=staging_path_to_create_in_taxonomy_array[i]::int;
									END;
									--ELSIF FIVE C
									ELSIF parent_ref_var IS NOT NULL THEN
									BEGIN
										PERFORM FROM taxonomy WHERe name=tmp_name AND  level_ref=tmp_level_ref AND parent_ref=parent_ref_var AND metadata_ref=var_metadata_ref;
										IF NOT FOUND THEN
											--raise notice 'tmp_name %', tmp_name;
											--raise notice 'tmp_level_ref %', tmp_level_ref;
											--raise notice 'parent_ref_var %', parent_ref_var;
											--raise notice 'source_text %', source_text;
											INSERT INTO taxonomy (id, name, level_ref, parent_ref,  metadata_ref, import_ref) VALUES (DEFAULT,
											tmp_name, tmp_level_ref, parent_ref_var,  var_metadata_ref, req_import_ref) RETURNING id INTO last_id;
											/*IF staging_levels != taxonomy_levels THEN
												UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true , import_exception = 'taxon_already_exists_with_another_hierarchy' WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											ELSE
											
												UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											END IF;*/
											UPDATE staging_catalogue SET catalogue_ref=last_id, parent_ref=parent_ref_var, parent_updated=TRUE, imported=true , import_exception = 'taxon_imported' WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											--raise notice 'last_id B %', last_id;
											 parent_ref_var:=last_id; 
										ELSE
											UPDATE staging_catalogue SET imported=FALSE,
											import_exception='path_already_exists' WHERE id=staging_path_to_create_in_taxonomy_array[i]::int;
											--raise notice 'last_id B %', last_id;
											 
										END IF;
									--END IF FIVE C
									EXCEPTION WHEN OTHERS THEN
										UPDATE staging_catalogue SET import_exception= SQLERRM WHERE staging_catalogue.id=staging_path_to_create_in_taxonomy_array[i]::int;
									END;
									END IF;
								--END IF FOUR C	
								END IF;
							--END LOOP 3 B	
							END LOOP;
						--END IF THIRD B
						END IF;
					--END IF TWO 	
					END IF;
				--ELSE IF ONE	
				--ELSIF staging_catalogue_line.catalogue_ref IS NOT NULL AND staging_catalogue_line.parent_updated = FALSE THEN
				--partially updated
					--raise notice 'Catalogue_updated';
				--END IF ONE
				END IF;
		--END LOOP ONE
		i:=i+1;
		END LOOP;
		--RAISE NOTICE 'exit';

		UPDATE staging_catalogue
		SET import_exception='taxon_already_exists (check '||taxonomy_name||')'
			FROM taxonomy
			LEFT JOIN taxonomy_metadata
			ON taxonomy.metadata_ref=taxonomy_metadata.id
			 WHERE  
			staging_catalogue.catalogue_ref=taxonomy.id AND staging_catalogue.import_ref=req_import_ref AND imported=FALSE AND catalogue_ref IS NOT NULL;
		UPDATE staging_catalogue
		SET import_exception='could_not_link_taxon_check_upper_ranks'			
			WHERE staging_catalogue.import_ref=req_import_ref AND imported=FALSE AND import_exception IS NULL;
					
		RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION';
		RAISE NOTICE '% %', SQLERRM, SQLSTATE;
	        GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
		RAISE NOTICE 'context: >>%<<', _c;
		UPDATE imports SET state='error', errors_in_import=SQLERRM||' NAME ('||staging_catalogue_line.name||')'  WHERE id=req_import_ref;
		RETURN FALSE;
	END;
	$$;


ALTER FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_same_taxo(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) OWNER TO darwin2;

--
-- TOC entry 1911 (class 1255 OID 1440238)
-- Name: fct_rmca_imp_checker_gtu_search_code(darwin2.staging, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code(line darwin2.staging, collection_ref_for_gtu_var integer, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	counter integer;
	gtu_ids integer[];
BEGIN


IF line.gtu_code IS NOT NULL AND line.gtu_ref IS NULL THEN
	  IF collection_ref_for_gtu_var  IS NOT NULL THEN
		SELECT count(gtu.id), array_agg(gtu.id) INTO counter, gtu_ids FROM gtu WHERE TRIM(LOWER(gtu.code))=TRIM(LOWER(line.gtu_code))
		AND collection_ref= collection_ref_for_gtu_var ;	
	  ELSE
		SELECT count(gtu.id), array_agg(gtu.id) INTO counter, gtu_ids FROM gtu WHERE TRIM(LOWER(gtu.code))=TRIM(LOWER(line.gtu_code));
	  END IF;
	  IF counter = 0 THEN
		UPDATE staging SET status = (status || hstore('gtu' , 'not_found')) where staging.id= line.id; 
	  ELSEIF counter=1 THEN
		UPDATE staging SET gtu_ref=gtu_ids[1] where staging.id= line.id; 
	  ELSEIF counter>1 THEN
		UPDATE staging SET status = (status || hstore('gtu' , 'too_much')) where staging.id= line.id; 
	  END IF;
END IF;
  

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code(line darwin2.staging, collection_ref_for_gtu_var integer, import boolean) OWNER TO darwin2;

--
-- TOC entry 1918 (class 1255 OID 1440239)
-- Name: fct_rmca_imp_checker_gtu_search_code_2(darwin2.staging, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code_2(line darwin2.staging, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	counter integer;
	--collection_ref_for_gtu_var integer;
	gtu_ids integer[];
BEGIN
raise notice 'in function';
raise notice 'staging gtu code %', line.gtu_code;
  --SELECT collection_ref_for_gtu INTO collection_ref_for_gtu_var FROM imports where imports.id =line.import_ref;
  --IF collection_ref_for_gtu_var  IS NOT NULL THEN
--	SELECT count(gtu.id), array_agg(gtu.id) INTO counter, gtu_ids FROM gtu WHERE TRIM(LOWER(gtu.code))=TRIM(LOWER(line.gtu_code))
--	AND collection_ref= collection_ref_for_gtu_var ;	
 -- ELSE
	SELECT count(gtu.id), array_agg(gtu.id) INTO counter, gtu_ids FROM gtu WHERE TRIM(LOWER(gtu.code))=TRIM(LOWER(line.gtu_code));
  --END IF;
  IF counter = 0 THEN
	UPDATE staging SET status = (status || hstore('gtu' , 'not_found')) where staging.id= line.id; 
  ELSEIF counter=1 THEN
	UPDATE staging SET gtu_ref=gtu_ids[1] where staging.id= line.id; 
  ELSEIF counter>1 THEN
	UPDATE staging SET status = (status || hstore('gtu' , 'too_much')) where staging.id= line.id; 
  END IF;

  

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code_2(line darwin2.staging, import boolean) OWNER TO darwin2;

--
-- TOC entry 847 (class 1255 OID 1440240)
-- Name: fct_rmca_imp_checker_specimen_code(darwin2.staging, integer, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_imp_checker_specimen_code(line darwin2.staging, collection_ref integer, import boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	code_main varchar;
	returned BOOLEAN;

BEGIN
	

	SELECT full_code_indexed INTO code_main FROM codes WHERe referenced_relation='staging' and code_category='main' AND record_id=line.id;
raise notice 'test %', code_main;
	IF code_main IS NOT NULL THEN
	raise notice 'go';
		returned:= fct_rmca_collection_check_code_unicity(collection_ref, code_main)  ;
		If returned THEN
			raise notice 'set false';
			UPDATE staging SET status = (status || hstore('code' , 'too_much')) where staging.id= line.id; 
			RETURN FALSE;
		END IF;
	END IF;
  

  RETURN true;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_imp_checker_specimen_code(line darwin2.staging, collection_ref integer, import boolean) OWNER TO darwin2;

--
-- TOC entry 1920 (class 1255 OID 1440241)
-- Name: fct_rmca_keep_staging_catalogue_parent(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_keep_staging_catalogue_parent() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP ='INSERT' THEN
    NEW.parent_ref_internal=NEW.parent_ref;
  
  ELSIF TG_OP ='UPDATE' AND NEW.parent_updated=FALSE  THEN
    NEW.parent_ref_internal=NEW.parent_ref;  
    
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_keep_staging_catalogue_parent() OWNER TO darwin2;

--
-- TOC entry 825 (class 1255 OID 1440242)
-- Name: fct_rmca_log_original_specimens_id_uuid(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_log_original_specimens_id_uuid() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
       
        with updated AS
        (
	SELECT DISTINCT
		old_value->'id' old_id, new_value->'id' new_id,  specimen_ref
		FROM 
		(select new_value, old_value from users_tracking where referenced_relation='specimens' and action='update' --AND new_value->'id'!=old_value->'id'
		 ) a
		LEFT JOIN specimens on  (new_value->'id')::int=specimens.id
		LEFT JOIN specimens_stable_ids ON  (old_value->'id')::int=original_id 
		WHERE (old_value->'id'  <>  new_value->'id') 
				
	)
	UPDATE specimens_stable_ids SET specimen_ref=new_id::bigint FROM updated WHERE original_id=old_id::bigint;


	 with old_inserted AS
        (
	SELECT 
		 new_value->'id' new_id,  specimen_ref
		FROM 
		(select new_value, old_value from users_tracking where referenced_relation='specimens' and ( action='update' OR action='insert')
		 ) a
		LEFT JOIN specimens on  (new_value->'id')::int=specimens.id
		LEFT JOIN specimens_stable_ids ON  (new_value->'id')::int=original_id 
		WHERE  specimens.id IS NULL AND original_id IS NULL
				
	)
	INSERT INTO specimens_stable_ids (specimen_ref) SELECT DISTINCT new_id::bigint FROM old_inserted;

	/*WITH non_logged_uuid
	AS
	(
		SELECT DISTINCT specimens.id, specimens.uuid FROM specimens INNER JOIN
		specimens_stable_ids ON specimens.id=specimen_ref WHERE specimens_stable_ids.uuid IS NULL
	)
	UPDATE specimens_stable_ids SET uuid=non_logged_uuid.uuid FROM non_logged_uuid WHERE non_logged_uuid.id=specimen_ref ;
	*/

	WITH new_specimens
	AS
	(
		SELECT DISTINCT specimens.id FROM specimens LEFT JOIN
		specimens_stable_ids ON specimens.id=specimen_ref WHERE specimen_ref IS NULL
	)
	INSERT INTO specimens_stable_ids (specimen_ref, specimen_fk) SELECT DISTINCT id, id FROM new_specimens;
	RETURN true;

END

$$;


ALTER FUNCTION darwin2.fct_rmca_log_original_specimens_id_uuid() OWNER TO darwin2;

--
-- TOC entry 1919 (class 1255 OID 1440243)
-- Name: fct_rmca_look_related_specimens(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_look_related_specimens(p_specimen_ref integer) RETURNS TABLE(id integer)
    LANGUAGE plpgsql
    AS $$
declare

current_Ref integer;
counter integer;
counter_2 integer;

int_list integer[];
i integer;
begin
	i=0;
	
	counter:=-1;
	counter_2:=0;
	current_ref=p_specimen_ref;
	DROP   table if  exists tmp_list_related;
	DROP   table if  exists tmp_list_related;
	 CREATE  temporary table if not exists tmp_list_related(id integer );
	 CREATE  temporary table if not exists tmp_list_related_2(id integer );
	 insert into tmp_list_related_2 VALUES(p_specimen_ref);
	WHILE (counter_2!=counter AND i<200)
	LOOP
		counter:=counter_2;
		 INSERT INTO tmp_list_related(id)  SELECT DISTINCT tmp_id FROM (select specimen_ref as tmp_id FROM specimens_relationships 

		 INNER JOIN  tmp_list_related_2 ON specimen_related_ref=tmp_list_related_2.id
		union 
		select specimen_related_ref FROM specimens_relationships 
		INNER JOIN  tmp_list_related_2 ON specimen_ref=tmp_list_related_2.id
		) a WHERE tmp_id NOT IN (SELECT tmp_list_related.id FROM tmp_list_related ) ;
		i:=i+1;
		INSERT INTO tmp_list_related SELECT * FROM tmp_list_related_2;
		DELETE FROM tmp_list_related_2;
		SELECT COUNT(DISTINCT tmp_list_related.id) into counter_2 FROM tmp_list_related;
	END LOOP;
	
	--DROP TABLE tmp_list_related;
	--DROP TABLE tmp_list_related_2;
	
	RETURN QUERY  SELECT distinct tmp_list_related.id FROM tmp_list_related;
end

$$;


ALTER FUNCTION darwin2.fct_rmca_look_related_specimens(p_specimen_ref integer) OWNER TO darwin2;

--
-- TOC entry 1913 (class 1255 OID 1440244)
-- Name: fct_rmca_people_array_to_name(integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_people_array_to_name(int_array integer[]) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE returned varchar;
BEGIN
returned = NULL;
If array_length(int_array,1) >=1 THEN

SELECT  formated_name into returned FROM people where id= int_array[1] limit 1;
end if;
return returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_people_array_to_name(int_array integer[]) OWNER TO darwin2;

--
-- TOC entry 826 (class 1255 OID 1440245)
-- Name: fct_rmca_py_webservice(text, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_rmca_py_webservice(uri text, body text DEFAULT NULL::text, content_type text DEFAULT 'application/json ; charset=utf-8'::text) RETURNS text
    LANGUAGE plpython3u
    AS $$
    import urllib
    import json
    from urllib import request,  error
    req = request.Request(uri)
    if body:
        req.add_data(body)
    if content_type:
        req.add_header('Content-Type', content_type)
    try:
        data = request.urlopen(req)
    except error.HTTPError as e:
        return None
    except error.URLError as e:
        if hasattr(e, 'reason'):
            return None
        elif hasattr(e, 'code'):
            return None
        else:
            return None
    else:
        ret = data.read().decode('utf-8')
        #plpy.notice(ret)
        if len(ret)==0:
            return None
        #plpy.notice(type(ret))
        tmp = json.loads(ret)
        if isinstance(tmp, int):
            return ret                   
        else:
            for k,v in tmp.items():
                #plpy.notice(v)
                #plpy.notice(type(v))
                if v:
                    if isinstance(v, str):
                        #plpy.notice("REPLACE")
                        tmp[k]=v.replace('"','\\"')
                        
        return json.dumps(tmp)
$$;


ALTER FUNCTION darwin2.fct_rmca_py_webservice(uri text, body text, content_type text) OWNER TO postgres;

--
-- TOC entry 1914 (class 1255 OID 1440246)
-- Name: fct_rmca_redo_taxonomic_import(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_redo_taxonomic_import(req_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	--2019 02 19
	returned boolean;
BEGIN
	returned=false;
	 UPDATE  darwin2.staging_catalogue set catalogue_ref=NULL ,parent_updated=FALSE where import_ref=req_import_Ref;
	UPDATE imports set state='loaded' wHERE id=req_import_Ref;
	--PERFORM fct_importer_catalogue(req_import_Ref, 'taxonomy', TRUE);
	returned:=true;
	return returned;
	
END
$$;


ALTER FUNCTION darwin2.fct_rmca_redo_taxonomic_import(req_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1763 (class 1255 OID 1440247)
-- Name: fct_rmca_refresh_ipt_views(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_refresh_ipt_views() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 


refresh materialized view ipt.mv_properties;
refresh materialized view ipt.mv_darwin_ipt_rbins_mof;
refresh materialized view naturalheritage.mv_darwin_ipt_rbins_nh;
refresh materialized view ipt.mv_darwin_ipt_rbins;
refresh materialized view ipt.mv_eml;
RETURN true;

END
$$;


ALTER FUNCTION darwin2.fct_rmca_refresh_ipt_views() OWNER TO darwin2;

--
-- TOC entry 1887 (class 1255 OID 1440248)
-- Name: fct_rmca_reporting_refresh_views(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_reporting_refresh_views() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW v_reporting_count_all_specimens;
		REFRESH MATERIALIZED VIEW v_reporting_count_all_specimens_by_collection_year_ig;
		REFRESH MATERIALIZED VIEW  v_reporting_count_all_specimens_by_year;
		REFRESH MATERIALIZED VIEW v_reporting_count_all_specimens_type;
		REFRESH MATERIALIZED VIEW v_reporting_count_all_specimens_type_by_collection_ref_year_ig;
		REFRESH MATERIALIZED VIEW v_reporting_count_all_specimens_type_by_year;
		REFRESH MATERIALIZED VIEW v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig;
		REFRESH MATERIALIZED VIEW v_reporting_taxa_in_specimen_per_rank_collection_ref_year_igall;
		REFRESH MATERIALIZED VIEW v_reporting_taxa_in_specimen_per_year;
		REFRESH MATERIALIZED VIEW v_reporting_taxonomy_general;
		REFRESH MATERIALIZED VIEW v_reporting_taxonomy_in_specimen;
$$;


ALTER FUNCTION darwin2.fct_rmca_reporting_refresh_views() OWNER TO darwin2;

--
-- TOC entry 1890 (class 1255 OID 1440249)
-- Name: fct_rmca_retrieve_taxa_in_collection_fastly(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly(integer) RETURNS TABLE(id integer)
    LANGUAGE sql
    AS $_$
SELECT DISTINCT id FROM taxonomy 
                 INNER JOIN
                (
                       SELECT distinct unnest(string_to_array(taxon_path||'/'||taxon_ref::varchar, '/'))  as key_taxon from specimens where  collection_ref =$1 OR collection_path LIKE '%/'||$1||'/%'
                       
                      
                        AND taxon_path is not null 
                ) AS specimens
                        ON
                        taxonomy.id::text = specimens.key_taxon
$_$;


ALTER FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly(integer) OWNER TO darwin2;

--
-- TOC entry 1893 (class 1255 OID 1440250)
-- Name: fct_rmca_retrieve_taxa_in_collection_fastly_array(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly_array(integer) RETURNS SETOF integer[]
    LANGUAGE sql
    AS $_$
SELECT DISTINCT array_agg(id) FROM taxonomy 
                 INNER JOIN
                (
                       SELECT distinct unnest(string_to_array(taxon_path||'/'||taxon_ref::varchar, '/'))  as key_taxon from specimens where  collection_ref =$1 OR collection_path LIKE '%/'||$1||'/%'
                       
                      
                        AND taxon_path is not null 
                ) AS specimens
                        ON
                        taxonomy.id::text = specimens.key_taxon
                        $_$;


ALTER FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly_array(integer) OWNER TO darwin2;

--
-- TOC entry 1922 (class 1255 OID 1440251)
-- Name: fct_rmca_search_compare_date_array(integer[], timestamp without time zone[], integer[], timestamp without time zone[], character varying, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_search_compare_date_array(array_from_date_mask integer[], array_from_date timestamp without time zone[], array_to_date_mask integer[], array_to_date timestamp without time zone[], query_mode character varying, val_from timestamp without time zone, val_to timestamp without time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
returned BOOLEAN;
i integer;
BEGIN
	returned :=FALSE;
	IF ARRAY_LENGTH(array_from_date,1)=
 	ARRAY_LENGTH(array_from_date_mask,1)
 	AND
 	ARRAY_LENGTH(array_to_date,1) = 
 	ARRAY_LENGTH(array_to_date_mask,1)
 	THEN 
 		FOR i  IN 1..ARRAY_LENGTH( array_from_date,1) 
		LOOP
			IF LOWER(query_mode)='from_to_between' 
		 	AND ARRAY_LENGTH(array_to_date,1)>=i 
		 	THEN
				IF (array_from_date[i] BETWEEN val_from 
					AND val_to)
					OR 
					(array_to_date[i] BETWEEN val_from 
					AND val_to)
				THEN
					return true;
				END IF;
			ELSIF LOWER(query_mode) = 'from_between' THEN
				IF array_from_date[i] 
			   	BETWEEN val_from AND 
			   	val_to THEN
					return true;
				END IF;
			ELSIF LOWER(query_mode) = 'after_from' THEN
				IF (array_from_date[i] >= val_from
				AND array_from_date_mask[i]>0) 
				OR (array_to_date[i] >= val_from
				AND array_to_date_mask[i]>0)
				THEN
					RETURN true;
				END IF;
			ELSIF lower(query_mode)='before_to' THEN
				IF (array_from_date[i] <= val_from
				AND array_from_date_mask[i]>0) 
				OR (array_to_date[i] <= val_from
				AND array_to_date_mask[i]>0)
				THEN
					RETURN true;
				END IF;
			END IF;
 		END LOOP;
 	END IF;

	return returned;
END
$$;


ALTER FUNCTION darwin2.fct_rmca_search_compare_date_array(array_from_date_mask integer[], array_from_date timestamp without time zone[], array_to_date_mask integer[], array_to_date timestamp without time zone[], query_mode character varying, val_from timestamp without time zone, val_to timestamp without time zone) OWNER TO darwin2;

--
-- TOC entry 1923 (class 1255 OID 1440252)
-- Name: fct_rmca_sort_taxon_get_parent_level(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level(id_taxon integer, id_level integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned int;
 arr varchar[];
 path_elem varchar;
 tmp_level int;
BEGIN
	returned:=-1;
	arr:= regexp_split_to_array((SELECt path||id::varchar||'/' FROM taxonomy where id=id_taxon),'/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		SELECT level_ref INTO tmp_level FROM taxonomy WHERE id= COALESCE(NULLIF(path_elem,''),'-1')::int;
		IF tmp_level=id_level THEN
			RETURN path_elem::int;
		END if;
      END LOOP;

	return returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level(id_taxon integer, id_level integer) OWNER TO darwin2;

--
-- TOC entry 827 (class 1255 OID 1440253)
-- Name: fct_rmca_sort_taxon_get_parent_level_text(integer, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level_text(id_taxon integer, id_level integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar;
 arr varchar[];
 path_elem varchar;
 tmp_level int;
 tmp_name varchar;
BEGIN
	returned:=NULL;
	arr:= regexp_split_to_array((SELECt path||id::varchar||'/' FROM taxonomy where id=id_taxon),'/');
	--added if lower taxon known is family
	SELECT level_ref,name INTO tmp_level,tmp_name FROM taxonomy WHERE id= COALESCE(NULLIF(id_taxon::text,''),'-1')::int;
	IF tmp_level=id_level THEN
			RETURN tmp_name;
	END if;
	--end added
	FOR path_elem IN SELECT unnest(arr)
	LOOP
		SELECT level_ref,name INTO tmp_level,tmp_name FROM taxonomy WHERE id= COALESCE(NULLIF(path_elem,''),'-1')::int;
		IF tmp_level=id_level THEN
			RETURN tmp_name;
		END if;
	END LOOP;

	return returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level_text(id_taxon integer, id_level integer) OWNER TO darwin2;

--
-- TOC entry 1925 (class 1255 OID 1440254)
-- Name: fct_rmca_sort_taxon_path_all_json(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_all_json(src_path character varying) RETURNS TABLE(jsonb_taxon_id jsonb, jsonb_name jsonb, jsonb_name_indexed jsonb, jsonb_levels jsonb, jsonb_rank_names jsonb)
    LANGUAGE plpgsql
    AS $$
DECLARE 
arr varchar[];
 path_elem varchar;
 jsonb_taxon_id jsonb;
  jsonb_name jsonb; 
  jsonb_name_indexed jsonb; 
  jsonb_levels jsonb;
  jsonb_rank_names jsonb;
  id_tmp integer;
  level_tmp integer;
  name_tmp varchar;
  name_indexed_tmp varchar;
  level_name_tmp varchar;
  level_ref_tmp integer;
BEGIN


      
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	 jsonb_taxon_id :='{}';
  jsonb_name :='{}'; 
  jsonb_name_indexed :='{}'; 
  jsonb_levels :='{}';
  jsonb_rank_names:='{}';
	arr:=regexp_split_to_array(src_path, '/');
	
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		
		IF isnumeric(path_elem) THEN
		
			SELECT taxonomy.id, name_indexed ,name , level_ref, level_name into id_tmp, name_indexed_tmp, name_tmp, level_ref_tmp,level_name_tmp  FROM taxonomy 
			INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
			where taxonomy.id=path_elem::int;
			IF id_tmp IS NOT NULL THEN
				jsonb_taxon_id :=jsonb_taxon_id||jsonb_build_object(level_ref_tmp, id_tmp);
				 jsonb_name :=jsonb_name||jsonb_build_object(level_ref_tmp, name_tmp); 
				 jsonb_name_indexed :=jsonb_name_indexed||jsonb_build_object(level_ref_tmp, name_indexed_tmp); 
				 jsonb_levels :=jsonb_levels ||jsonb_build_object(level_ref_tmp, level_name_tmp);
				   jsonb_rank_names:=  jsonb_rank_names||jsonb_build_object( level_name_tmp, name_tmp);
			END IF;
		END IF;
      END LOOP;
      RETURN QUERY SELECT jsonb_taxon_id, jsonb_name , jsonb_name_indexed,jsonb_levels, jsonb_rank_names ;
       end;
       $$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_all_json(src_path character varying) OWNER TO darwin2;

--
-- TOC entry 1926 (class 1255 OID 1440255)
-- Name: fct_rmca_sort_taxon_path_alphabetically(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
BEGIN
	returned ='';
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			SELECT name_indexed INTO tmp FROM taxonomy where id=path_elem::int;
			returned=returned||'/'||tmp;
		END IF;
      END LOOP;

	return returned||'/';
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying) OWNER TO darwin2;

--
-- TOC entry 1921 (class 1255 OID 1440256)
-- Name: fct_rmca_sort_taxon_path_alphabetically(character varying, integer, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying, last_level integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
 level integer;
 name_rank varchar;
 full_name varchar;
BEGIN
	returned ='';
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			IF with_rank = FALSE THEN
				SELECT name_indexed, level_ref, name INTO tmp, level, full_name FROM taxonomy where taxonomy.id=path_elem::int;
				IF level>= last_level then
					IF is_indexed=FALSE THEN
						tmp:=full_name;
					END IF;
					returned=returned||'/'||tmp;
				END IF;
			ELSE
				SELECT name_indexed, level_ref, level_name, name INTO tmp, level, name_rank , full_name FROM taxonomy INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id where taxonomy.id=path_elem::int;
				IF level>= last_level then
					IF is_indexed=FALSE THEN
						tmp:=full_name;
					END IF;
					returned=returned||'/'||tmp||' ('||name_rank||')';
				END IF;
			END IF;
		END IF;
      END LOOP;

	return returned||'/';
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying, last_level integer, with_rank boolean, is_indexed boolean) OWNER TO darwin2;

--
-- TOC entry 844 (class 1255 OID 1440257)
-- Name: fct_rmca_sort_taxon_path_alphabetically_hstore(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore(path character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned hstore;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
 level integer;
 name_rank varchar;
 full_name varchar;
BEGIN
	returned =''::hstore;
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			
				SELECT name_indexed, level_ref, level_name, name INTO tmp, level, name_rank , full_name FROM taxonomy INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id where taxonomy.id=path_elem::int;
					
				returned:=returned||hstore(name_rank,full_name );
				
			
		END IF;
      END LOOP;

	return returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore(path character varying) OWNER TO darwin2;

--
-- TOC entry 1924 (class 1255 OID 1440258)
-- Name: fct_rmca_sort_taxon_path_alphabetically_hstore_key(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_key(path character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned hstore;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
 level integer;
 name_rank varchar;
 full_name varchar;
BEGIN
	returned =''::hstore;
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			
				SELECT name_indexed, level_ref, level_name, name INTO tmp, level, name_rank , full_name FROM taxonomy INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id where taxonomy.id=path_elem::int;
					
				returned=returned||hstore(level::varchar ,full_name );
				
			
		END IF;
      END LOOP;

	return returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_key(path character varying) OWNER TO darwin2;

--
-- TOC entry 1792 (class 1255 OID 1440259)
-- Name: fct_rmca_sort_taxon_path_alphabetically_hstore_tech(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_tech(path character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned hstore;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
 level integer;
 name_rank varchar;
 full_name varchar;
BEGIN
	returned =''::hstore;
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			
				SELECT name_indexed, level_ref, level_name, name INTO tmp, level, name_rank , full_name FROM taxonomy INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id where taxonomy.id=path_elem::int;
					
				returned:=returned||hstore(replace(name_rank,' ','_'),full_name );
				
			
		END IF;
      END LOOP;

	return returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_tech(path character varying) OWNER TO darwin2;

--
-- TOC entry 1815 (class 1255 OID 1440260)
-- Name: fct_rmca_sort_taxon_path_alphabetically_not_indexed(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_not_indexed(path character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar;
 arr varchar[];
 path_elem varchar;
 tmp varchar;
BEGIN
	returned ='';
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	arr:=regexp_split_to_array(path, '/');
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		IF isnumeric(path_elem) THEN
			SELECT name INTO tmp FROM taxonomy where id=path_elem::int;
			returned=returned||'/'||tmp;
		END IF;
      END LOOP;

	return returned||'/';
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_not_indexed(path character varying) OWNER TO darwin2;

--
-- TOC entry 1812 (class 1255 OID 1440261)
-- Name: fct_rmca_sort_taxon_path_alphabetically_staging(integer, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging(taxon_id integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned varchar;

 tmp varchar;
 tmp_id integer;
 tmp_level integer;
 kingdom_given boolean;
 kingdom_id integer;
 kingdom_name varchar;

  domain_given boolean;
   domain_name varchar;
    name_rank varchar;
BEGIN
	returned ='';
	
	tmp_id:=taxon_id;
	kingdom_given :=FALSE;
	domain_given :=FALSE;
	while tmp_id is not null
	LOOP 
		SELECT name, parent_ref_internal, level_ref, level_name INTO tmp, tmp_id, tmp_level, name_rank FROM staging_catalogue 
			INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
			WHERE staging_catalogue.id=tmp_id;
		IF tmp_level=2 THEN
			kingdom_given = true;
		END IF;
		IF tmp_level=1 THEN
			domain_given = true;
		END IF;
		--raise notice '%', returned;
		--raise notice '%', tmp_id;
		IF is_indexed=TRUE THEN
			tmp:=fulltoindex(tmp, false);
		END IF;
		IF with_rank = FALSE THEN
			returned := tmp||'/'||returned;
		ELSE
			returned := tmp||' ('||name_rank||')'||'/'||returned;
		END IF;
	END LOOP;
	IF kingdom_given = FALSE THEN
		-- 2019 02 19
		IF is_indexed =TRUE THEN
			SELECT fulltoindex(taxonomy.name, false), taxonomy.id INTO kingdom_name, kingdom_id FROM taxonomy INNER JOIN imports ON taxonomy.id=imports.taxonomy_kingdom::int INNER JOIN staging_catalogue ON imports.id=staging_catalogue.import_ref WHERE staging_catalogue.id=taxon_id;
		ELSE
			SELECT taxonomy.name, taxonomy.id INTO kingdom_name, kingdom_id FROM taxonomy INNER JOIN imports ON taxonomy.id=imports.taxonomy_kingdom::int INNER JOIN staging_catalogue ON imports.id=staging_catalogue.import_ref WHERE staging_catalogue.id=taxon_id;
		END IF;
		IF with_rank = TRUE THEN
			kingdom_name:= kingdom_name||' (kingdom)';
		END If;
		returned :=  kingdom_name||'/'||returned;
		
		IF domain_given = FALSE THEN
				-- 2019 02 19
			IF is_indexed =TRUE THEN
				SELECT fulltoindex(taxonomy.name, false) INTO domain_name FROM taxonomy where id = (select parent_ref from taxonomy as b where b.id = kingdom_id);
			ELSE
				SELECT taxonomy.name INTO domain_name FROM taxonomy where id = (select parent_ref from taxonomy as b where b.id = kingdom_id);
			END IF;
			IF with_rank = TRUE THEN
				domain_name:= domain_name||' (domain)';
			END If;
			returned :=  domain_name||'/'||returned;
		END IF;
	END IF;


	return '/'||returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging(taxon_id integer, with_rank boolean, is_indexed boolean) OWNER TO darwin2;

--
-- TOC entry 1927 (class 1255 OID 1440262)
-- Name: fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(integer, integer, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(taxon_id integer, req_import_ref integer, with_rank boolean DEFAULT true, is_indexed boolean DEFAULT false) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  --ftheeten 2019 02 21
 returned varchar;

 tmp varchar;
 tmp_id integer;
 tmp_level integer;
 kingdom_given boolean;
 kingdom_id integer;
 kingdom_name varchar;

  domain_given boolean;
  domain_name varchar;
  name_rank varchar;
  in_taxonomy boolean;
  taxonomy_id integer; 
  is_reference boolean; 
BEGIN

	in_taxonomy :=false;
	SELECT COALESCE(taxonomy_metadata.is_reference_taxonomy,FALSE) INTO is_reference FROM taxonomy_metadata LEFT JOIN imports ON taxonomy_metadata.id=imports.specimen_taxonomy_ref AND imports.id=req_import_ref LIMIT 1;
	returned ='';
	IF is_reference = FALSE THEN
		RAISE EXCEPTION 'Not a reference taxonomy';
	END IF ;
	tmp_id:=taxon_id;
	kingdom_given :=FALSE;
	domain_given :=FALSE;
	
	while tmp_id is not null
	LOOP 
		taxonomy_id := NULL;
		IF in_taxonomy THEN
			SELECT name, parent_ref, level_ref, level_name INTO tmp, tmp_id, tmp_level, name_rank  FROM taxonomy INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
			WHERE taxonomy.id=tmp_id;
		ELSE
			SELECT name, parent_ref_internal, level_ref, level_name INTO tmp, tmp_id, tmp_level, name_rank FROM staging_catalogue 
			INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
			WHERE staging_catalogue.id=tmp_id;
		END IF;
		IF tmp_level=2 THEN
			kingdom_given = true;
		END IF;
		IF tmp_level=1 THEN
			domain_given = true;
		END IF;
		--raise notice '%', returned;
		--raise notice '%', tmp_id;
		IF is_indexed=TRUE THEN
			tmp:=fulltoindex(tmp, false);
		END IF;
		IF with_rank = FALSE THEN
			returned := tmp||'/'||returned;
		ELSE
			returned := tmp||' ('||name_rank||')'||'/'||returned;
		END IF;
		IF in_taxonomy = FALSE THEN
			SELECT taxonomy.parent_ref INTO taxonomy_id FROM taxonomy LEFT JOIN taxonomy_metadata ON taxonomy.metadata_ref= taxonomy_metadata.id WHERE taxonomy.level_ref=tmp_level AND taxonomy.name=tmp AND taxonomy_metadata.is_reference_taxonomy=TRUE;
			IF taxonomy_id IS NOT NULL THEN
				--merge
				tmp_id:=taxonomy_id;
				in_taxonomy:=TRUE;
			END IF;
		END IF;
	END LOOP;
	IF kingdom_given = FALSE THEN
		-- 2019 02 19
		IF is_indexed =TRUE THEN
			SELECT fulltoindex(taxonomy.name, false), taxonomy.id INTO kingdom_name, kingdom_id FROM taxonomy INNER JOIN imports ON taxonomy.id=imports.taxonomy_kingdom::int INNER JOIN staging_catalogue ON imports.id=staging_catalogue.import_ref WHERE staging_catalogue.id=taxon_id;
		ELSE
			SELECT taxonomy.name, taxonomy.id INTO kingdom_name, kingdom_id FROM taxonomy INNER JOIN imports ON taxonomy.id=imports.taxonomy_kingdom::int INNER JOIN staging_catalogue ON imports.id=staging_catalogue.import_ref WHERE staging_catalogue.id=taxon_id;
		END IF;
		IF with_rank = TRUE THEN
			kingdom_name:= kingdom_name||' (kingdom)';
		END If;
		returned :=  kingdom_name||'/'||returned;
		
		IF domain_given = FALSE THEN
				-- 2019 02 19
			IF is_indexed =TRUE THEN
				SELECT fulltoindex(taxonomy.name, false) INTO domain_name FROM taxonomy where id = (select parent_ref from taxonomy as b where b.id = kingdom_id);
			ELSE
				SELECT taxonomy.name INTO domain_name FROM taxonomy where id = (select parent_ref from taxonomy as b where b.id = kingdom_id);
			END IF;
			IF with_rank = TRUE THEN
				domain_name:= domain_name||' (domain)';
			END If;
			returned :=  domain_name||'/'||returned;
		END IF;
	END IF;


	return '/'||returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(taxon_id integer, req_import_ref integer, with_rank boolean, is_indexed boolean) OWNER TO darwin2;

--
-- TOC entry 1928 (class 1255 OID 1440263)
-- Name: fct_rmca_sort_taxon_path_get_max_level_in_staging(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_sort_taxon_path_get_max_level_in_staging(taxon_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
 returned integer;


 tmp_id integer;
BEGIN
	returned =NULL;
	
	tmp_id:=taxon_id;
	while tmp_id is not null
	LOOP 
		SELECT level_ref, parent_ref INTO returned, tmp_id FROM staging_catalogue where id=tmp_id;

		
	END LOOP;

     

	return returned;
END;

$$;


ALTER FUNCTION darwin2.fct_rmca_sort_taxon_path_get_max_level_in_staging(taxon_id integer) OWNER TO darwin2;

--
-- TOC entry 1931 (class 1255 OID 1440264)
-- Name: fct_rmca_taxonomy_get_old_synonyms(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_get_old_synonyms(integer) RETURNS TABLE(taxon_id integer, id_log integer, referenced_relation character varying, old_record_id integer, user_name character varying, action character varying, modification_date_time timestamp without time zone, taxon_name character varying)
    LANGUAGE sql
    AS $_$ 
    
with a as (

select * from classification_synonymies_history where record_id=$1),
b as 
(select classification_synonymies_history.id as id_log,  classification_synonymies_history.record_id,
 classification_synonymies_history.group_id, 
 name, classification_synonymies_history.referenced_relation, 
 classification_synonymies_history.user_name,
 classification_synonymies_history.action,
  classification_synonymies_history.modification_date_time
 from classification_synonymies_history 
 inner join a on classification_synonymies_history.group_id=a.group_id
 and classification_synonymies_history.referenced_relation=a.referenced_relation 
inner join taxonomy on classification_synonymies_history.record_id=taxonomy.id
UNION
select classification_synonymies.id, classification_synonymies.record_id, classification_synonymies.group_id,
 name, classification_synonymies.referenced_relation, null, null,
 modification_date_time
 from classification_synonymies 
 inner join a on classification_synonymies.group_id=a.group_id and classification_synonymies.referenced_relation=a.referenced_relation 
inner join taxonomy on classification_synonymies.record_id=taxonomy.id
),

interm as (select classification_synonymies.record_id from classification_synonymies 
		   inner join a on classification_synonymies.group_id=a.group_id )


select distinct b.record_id as taxon_id,  id_log, b.referenced_relation, b.record_id, user_name, action, 
modification_date_time, name taxon_name  from b
where not exists (SELECT 1 FROM interm where interm.record_id=b.record_id) ;
 $_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_get_old_synonyms(integer) OWNER TO darwin2;

--
-- TOC entry 1932 (class 1255 OID 1440265)
-- Name: fct_rmca_taxonomy_get_other_synonyms(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_get_other_synonyms(integer) RETURNS TABLE(referenced_relation character varying, record_id integer, id integer, group_id integer, group_name character varying, is_basionym boolean, order_by integer, synonymy_record_id integer, original_synonym boolean)
    LANGUAGE sql
    AS $_$ 

with a as (

select * from classification_synonymies where record_id=$1),
b AS (
select * from classification_synonymies where group_id IN (SELECT DISTINCT group_id FROM a))
,
c as (select *  FROM classification_synonymies 
	WHERE record_id IN (SELECT distinct b.record_id FROM b)
	  AND classification_synonymies.group_id NOT IN (SELECT DISTINCT a.group_id FROM a)
	  AND record_id !=$1
	),
d as (select * from classification_synonymies where group_id in (SELECT distinct c.group_id FROM c) AND record_id !=$1)   
SELECT * FROM  d

 $_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_get_other_synonyms(integer) OWNER TO darwin2;

--
-- TOC entry 828 (class 1255 OID 1440266)
-- Name: fct_rmca_taxonomy_get_staging_hierarchy_recursive(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_get_staging_hierarchy_recursive(integer) RETURNS TABLE(base_id integer, base_level_ref integer, base_name character varying, path character varying)
    LANGUAGE sql
    AS $_$
WITH RECURSIVE  staging_catalogue_tmp
AS

(
SELECT staging_catalogue.id as base_id,staging_catalogue.level_ref as base_level_ref, staging_catalogue.name as base_name, staging_catalogue.id, staging_catalogue.name, 
parent_ref_internal, staging_catalogue.import_ref
, staging_catalogue.level_Ref




 FROM staging_catalogue
LEFT JOIN imports
ON staging_catalogue.import_ref=imports.id


WHERE staging_catalogue.import_ref=$1
UNION
SELECT staging_catalogue_tmp.base_id,  staging_catalogue_tmp.base_level_ref, staging_catalogue_tmp.base_name,  s.id,s.name, s.parent_ref_internal, s.import_Ref
,s.level_Ref
 FROM staging_catalogue s
INNER JOIN staging_catalogue_tmp  
ON  s.id=staging_catalogue_tmp.parent_ref_internal




)


SELECT 
staging_catalogue_tmp.base_id::integer,staging_catalogue_tmp.base_level_ref::integer, staging_catalogue_tmp.base_name::varchar, '/'||string_agg(COALESCE(name||' ('||level_name||')',''), '/' ORDER BY level_ref)||'/'::varchar as path
FROM staging_catalogue_tmp 
LEFT JOIN catalogue_levels
ON level_ref=catalogue_levels.id
GROUP BY staging_catalogue_tmp.base_id,staging_catalogue_tmp.base_level_ref,
staging_catalogue_tmp.base_name

$_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_get_staging_hierarchy_recursive(integer) OWNER TO darwin2;

--
-- TOC entry 1930 (class 1255 OID 1440267)
-- Name: fct_rmca_taxonomy_get_syonymy_status(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_get_syonymy_status(integer) RETURNS character varying
    LANGUAGE sql
    AS $_$

SELECT distinct string_agg(group_name , ', ' order by group_name) FROM darwin2.classification_synonymies where record_id=$1;

$_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_get_syonymy_status(integer) OWNER TO darwin2;

--
-- TOC entry 1929 (class 1255 OID 1440268)
-- Name: fct_rmca_taxonomy_split_name_author(character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_split_name_author(name character varying, rank_id integer) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$

DECLARE 
--tmp varchar[];
returned varchar[];
name_tmp varchar;
author_tmp varchar;
pos_author int;
BEGIN

	

	IF rank_id <= 41 THEN
		pos_author:=1;
	ELSEIF rank_id>41 and rank_id<=48 THEN
		pos_author:=2;
	ELSEIF rank_id >48 and rank_id <50 THEN
	        -- ftheeten 2018 11 22
		If rank_id=50 THEN
		name:=replace(name,' (L.) ', ' ');
		name:=replace(name,' L. ', ' ');
		name:=replace(name,' var. ', ' ');
		END IF;
		pos_author:=3;
	ELSEIF  rank_id =50 THEN
		returned[1]:=TRIM(regexp_replace(name, '(var\.\s\w+)(.*)', '\1'));
		returned[2]:=TRIM(replace(name, returned[1],''));
		return returned;
	ELSEIF  rank_id >50 THEN
		pos_author:=4;
	END IF;

	
	
	SELECT array_to_string((array_agg(elem))[1:pos_author], ' ') ,  array_to_string((array_agg(elem))[pos_author+1:500],' ') INTO name_tmp, author_tmp FROM 
(SELECT 1 as id, (regexp_matches(trim(name), '([^\s]+(\s\([^0-9]+\)){0,1})','g'))[1] as elem)
a group by id; 
	returned[1]:=name_tmp;
	returned[2]:= author_tmp;

RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_split_name_author(name character varying, rank_id integer) OWNER TO darwin2;

--
-- TOC entry 829 (class 1255 OID 1440269)
-- Name: fct_rmca_taxonomy_taxon_path_all_json(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_taxon_path_all_json(src_path character varying) RETURNS TABLE(jsonb_taxon_id jsonb, jsonb_name jsonb, jsonb_name_indexed jsonb, jsonb_levels jsonb, jsonb_rank_names jsonb)
    LANGUAGE plpgsql
    AS $$
DECLARE 
arr varchar[];
 path_elem varchar;
 jsonb_taxon_id jsonb;
  jsonb_name jsonb; 
  jsonb_name_indexed jsonb; 
  jsonb_levels jsonb;
  jsonb_rank_names jsonb;
  id_tmp integer;
  level_tmp integer;
  name_tmp varchar;
  name_indexed_tmp varchar;
  level_name_tmp varchar;
  level_ref_tmp integer;
BEGIN


      
	--arr:=	 regexp_matches(trim(path), '([^/]+)' , 'g');
	 jsonb_taxon_id :='{}';
  jsonb_name :='{}'; 
  jsonb_name_indexed :='{}'; 
  jsonb_levels :='{}';
  jsonb_rank_names:='{}';
	arr:=regexp_split_to_array(src_path, '/');
	
      FOR path_elem IN SELECT unnest(arr)
      LOOP
		
		IF isnumeric(path_elem) THEN
		
			SELECT taxonomy.id, name_indexed ,name , level_ref, level_name into id_tmp, name_indexed_tmp, name_tmp, level_ref_tmp,level_name_tmp  FROM taxonomy 
			INNER JOIN catalogue_levels ON level_ref=catalogue_levels.id
			where taxonomy.id=path_elem::int;
			IF id_tmp IS NOT NULL THEN
				jsonb_taxon_id :=jsonb_taxon_id||jsonb_build_object(level_ref_tmp, id_tmp);
				 jsonb_name :=jsonb_name||jsonb_build_object(level_ref_tmp, name_tmp); 
				 jsonb_name_indexed :=jsonb_name_indexed||jsonb_build_object(level_ref_tmp, name_indexed_tmp); 
				 jsonb_levels :=jsonb_levels ||jsonb_build_object(level_ref_tmp, level_name_tmp);
				   jsonb_rank_names:=  jsonb_rank_names||jsonb_build_object( level_name_tmp, name_tmp);
			END IF;
		END IF;
      END LOOP;
      RETURN QUERY SELECT jsonb_taxon_id, jsonb_name , jsonb_name_indexed,jsonb_levels, jsonb_rank_names ;
       end;
       $$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_taxon_path_all_json(src_path character varying) OWNER TO darwin2;

--
-- TOC entry 1937 (class 1255 OID 1440270)
-- Name: fct_rmca_taxonomy_try_to_isolate_from_author(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ /*SELECT 
regexp_replace(
trim(

regexp_replace(

	regexp_replace($1,'\([^\(]*\)$','')

,'(\s[A-Z]).*$','')),

E' (von|van|de|l\')$',''
)

;*/
DECLARE 
	returned varchar;
 BEGIN 
	IF LOWER(name) LIKE '% var. %' THEN
		returned:=TRIM(regexp_replace(name, '(var\.\s\w+)(.*)', '\1'));
	ELSE
		returned:=regexp_replace(
				trim(

				regexp_replace(

					regexp_replace(name,'\([^\(]*\)$','')

				,'(\s[A-Z]).*$','')),

				E' (von|van|de|l\')$',''
				)

				;
	END IF;
	 
	RETURN returned;
 END;

 $_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(name character varying) OWNER TO darwin2;

--
-- TOC entry 1939 (class 1255 OID 1440271)
-- Name: fct_rmca_taxonomy_try_to_isolate_from_author_old(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author_old(character varying) RETURNS character varying
    LANGUAGE sql
    AS $_$ SELECT 
regexp_replace(
trim(

regexp_replace(

	regexp_replace($1,'\([^\(]*\)$','')

,'(\s[A-Z]).*$','')),

E' (von|van|de|l\')$',''
)

; $_$;


ALTER FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author_old(character varying) OWNER TO darwin2;

--
-- TOC entry 1940 (class 1255 OID 1440272)
-- Name: fct_rmca_update_child_of_taxon_protected(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_update_child_of_taxon_protected() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	text_path varchar;
	text_to_replace varchar;
BEGIN
    IF TG_OP = 'UPDATE'  THEN

		IF NEW.sensitive_info_withheld <> OLD.sensitive_info_withheld THEN
			   
			UPDATE taxonomy SET sensitive_info_withheld=NEW.sensitive_info_withheld WHERE parent_ref=NEW.ID OR path LIKE '%/'||NEW.id::varchar||'/%' ;
		END IF;
        END IF;

 
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_update_child_of_taxon_protected() OWNER TO darwin2;

--
-- TOC entry 1941 (class 1255 OID 1440273)
-- Name: fct_rmca_update_reference_taxo(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_rmca_update_reference_taxo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN
--ftheeten 2017 07 03
	ALTER TABLE taxonomy DISABLE TRIGGER user;
     IF NEW.is_reference_taxonomy  != OLD.is_reference_taxonomy AND TG_OP = 'UPDATE' THEN
	UPDATE taxonomy SET is_reference_taxonomy= new.is_reference_taxonomy WHERE metadata_ref=NEW.id;
    END IF;
   	 	ALTER TABLE taxonomy ENABLE TRIGGER user;   
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_rmca_update_reference_taxo() OWNER TO darwin2;

--
-- TOC entry 1933 (class 1255 OID 1440274)
-- Name: fct_search_authorized_encoding_collections(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_search_authorized_encoding_collections(user_id integer) RETURNS SETOF integer
    LANGUAGE sql STABLE
    AS $_$
    select collection_ref from collections_rights where user_ref = $1 and db_user_type >= 2;
$_$;


ALTER FUNCTION darwin2.fct_search_authorized_encoding_collections(user_id integer) OWNER TO darwin2;

--
-- TOC entry 1934 (class 1255 OID 1440275)
-- Name: fct_search_authorized_view_collections(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_search_authorized_view_collections(user_id integer) RETURNS SETOF integer
    LANGUAGE sql STABLE
    AS $_$
    select collection_ref from collections_rights where user_ref = $1

    UNION

    select id as collection_ref from collections where is_public = true;
$_$;


ALTER FUNCTION darwin2.fct_search_authorized_view_collections(user_id integer) OWNER TO darwin2;

--
-- TOC entry 1935 (class 1255 OID 1440276)
-- Name: fct_search_methods(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_search_methods(str_ids character varying) RETURNS SETOF integer
    LANGUAGE sql STABLE
    AS $_$
    select distinct(specimen_ref) from specimen_collecting_methods where collecting_method_ref in (select X::int from regexp_split_to_table($1,',') as X);
$_$;


ALTER FUNCTION darwin2.fct_search_methods(str_ids character varying) OWNER TO darwin2;

--
-- TOC entry 1936 (class 1255 OID 1440277)
-- Name: fct_search_tools(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_search_tools(str_ids character varying) RETURNS SETOF integer
    LANGUAGE sql STABLE
    AS $_$
    select distinct(specimen_ref) from specimen_collecting_tools where collecting_tool_ref in (select X::int from regexp_split_to_table($1,',') as X);
$_$;


ALTER FUNCTION darwin2.fct_search_tools(str_ids character varying) OWNER TO darwin2;

--
-- TOC entry 830 (class 1255 OID 1440278)
-- Name: fct_searchcodes(character varying[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_searchcodes(VARIADIC character varying[]) RETURNS SETOF integer
    LANGUAGE plpgsql STABLE
    AS $_$
DECLARE
  sqlString varchar := E'select record_id from codes';
  sqlWhere varchar := '';
  code_part varchar;
  code_from varchar;
  code_to varchar;
  code_category varchar;
  relation varchar;
  word varchar;
BEGIN
  FOR i in 1 .. array_upper( $1, 1 ) BY 5 LOOP
    code_category := $1[i];
    code_part := $1[i+1];
    code_from := $1[i+2];
    code_to := $1[i+3];
    relation := $1[i+4] ;

    IF relation IS DISTINCT FROM '' AND i = 1 THEN
      sqlString := sqlString || ' where referenced_relation=' || quote_literal(relation) ;
    ELSIF i = 1 THEN
      sqlString := sqlString || E' where referenced_relation=\'specimens\''  ;
    END IF ;

    sqlWhere := sqlWhere || ' (code_category = ' || quote_literal(code_category) ;

    IF code_from ~ '^[0-9]+$' and code_to ~ '^[0-9]+$' THEN
      sqlWhere := sqlWhere || ' AND code_num BETWEEN ' || quote_literal(code_from) || ' AND ' || quote_literal(code_to) ;
    END IF;

    IF code_part != '' THEN
      sqlWhere := sqlWhere || ' AND (';
      FOR word IN (SELECT words FROM regexp_split_to_table(code_part, E'\\s+') as words) LOOP
        sqlWhere := sqlWhere || E' full_code_indexed like \'%\' || fullToIndex(' || quote_literal(word) || E') || \'%\' OR';
      END LOOP;
      sqlWhere := substr(sqlWhere,0,length(sqlWhere)-2) || ')';
    END IF;

    sqlWhere := sqlWhere || ') OR ';

  END LOOP;

  sqlString := sqlString || ' AND (' || substr(sqlWhere,0, length(sqlWhere)-2) || ')';
  RAISE INFO 'Sql : %',sqlString ;
  RETURN QUERY EXECUTE sqlString;
END;
$_$;


ALTER FUNCTION darwin2.fct_searchcodes(VARIADIC character varying[]) OWNER TO darwin2;

--
-- TOC entry 1945 (class 1255 OID 1440279)
-- Name: fct_set_user(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_set_user(userid integer) RETURNS void
    LANGUAGE sql
    AS $_$
  select set_config('darwin.userid', $1::varchar, false) ;
  select CASE WHEN get_setting('application_name') ~ ' uid:\d+'
    THEN set_config('application_name', regexp_replace(get_setting('application_name') ,'uid:\d+',  'uid:' || $1::varchar), false)
    ELSE set_config('application_name', get_setting('application_name')  || ' uid:' || $1::varchar, false)
    END;
  update users_login_infos set last_seen = now() where user_ref = $1  and login_type='local';
$_$;


ALTER FUNCTION darwin2.fct_set_user(userid integer) OWNER TO darwin2;

--
-- TOC entry 1946 (class 1255 OID 1440280)
-- Name: fct_trg_chk_possible_upper_level(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trg_chk_possible_upper_level() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
   --ftheeten 2017 07 10
   IF TG_OP ='INSERT' OR (TG_OP ='UPDATE' AND (OLD.parent_ref !=NEW.parent_ref OR OLD.level_ref !=NEW.level_ref )) THEN		
	IF fct_chk_possible_upper_level_rmca_allow_upper(TG_TABLE_NAME::text, NEW.parent_ref, NEW.level_ref, NEW.id) = false THEN
	RAISE EXCEPTION 'This record does not follow the level hierarchy (NAME is %)', NEW.name;
	END IF;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_trg_chk_possible_upper_level() OWNER TO darwin2;

--
-- TOC entry 1947 (class 1255 OID 1440281)
-- Name: fct_trg_rmca_codes_log_id(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trg_rmca_codes_log_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
		IF NEW.original_record_id IS NULL AND TG_OP = 'INSERT' THEN
			NEW.original_record_id = NEW.record_id;
			
		ELSE 
			NEW.original_record_id = OLD.record_id;
			
		END IF;	
		RETURN NEW;
	END;
$$;


ALTER FUNCTION darwin2.fct_trg_rmca_codes_log_id() OWNER TO darwin2;

--
-- TOC entry 1948 (class 1255 OID 1440282)
-- Name: fct_trg_rmca_log_specimens_stable_ids(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trg_rmca_log_specimens_stable_ids() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
		IF NEW.original_id IS NULL AND TG_OP = 'INSERT' THEN
			NEW.original_id = NEW.specimen_ref;
			UPDATE specimens SET uuid=NEW.uuid WHERE id= NEW.specimen_ref;
			
		ELSE 
			NEW.original_id = OLD.original_id;
			NEW.uuid = OLD.uuid;
		END IF;	
		RETURN NEW;
	END;
$$;


ALTER FUNCTION darwin2.fct_trg_rmca_log_specimens_stable_ids() OWNER TO darwin2;

--
-- TOC entry 1949 (class 1255 OID 1440283)
-- Name: fct_trg_rmca_specimens_log_id_uuid(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trg_rmca_specimens_log_id_uuid() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
		IF NEW.original_id IS NULL AND TG_OP = 'INSERT' THEN
			NEW.original_id = NEW.id;
			NEW.uuid=uuid_generate_v4();
		ELSE 
			NEW.original_id = OLD.original_id;
			NEW.uuid=OLD.uuid;
		END IF;	
		RETURN NEW;
	END;
$$;


ALTER FUNCTION darwin2.fct_trg_rmca_specimens_log_id_uuid() OWNER TO darwin2;

--
-- TOC entry 1943 (class 1255 OID 1440284)
-- Name: fct_trk_log_old_synonyms(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trk_log_old_synonyms() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id integer;
  user_name varchar;
  taxon_name varchar;
  go_upd boolean;
BEGIN
--RAISE NOTICE '1';

   	  SELECT COALESCE(get_setting('darwin.userid'),'0')::integer INTO user_id;
	  /*IF user_id = 0 OR  user_id = -1 THEN
	  RAISE NOTICE '4';
	    RETURN NEW;
	  END IF;*/
	  SELECT formated_name INTO user_name FROM users where id=user_id;
	  SELECT name INTO taxon_name FROM taxonomy where id=OLD.record_id;
	  INSERT  into classification_synonymies_history(
            referenced_relation, record_id, id, group_id, group_name, is_basionym, 
            order_by,  modification_date_time, user_name, 
            taxon_name, action)
           SELECT
            OLD.referenced_relation,
            OLD.record_id,
            OLD.id,
            OLD.group_id,
	    OLD.group_name,
	    OLD.is_basionym,
	    OLD.order_by,
	    now(),
	     user_name,
	     taxon_name,
		 TG_OP;
	     --RAISE NOTICE '5';
  

    --RAISE NOTICE '7';
	RETURN NULL;
	
END;
$$;


ALTER FUNCTION darwin2.fct_trk_log_old_synonyms() OWNER TO darwin2;

--
-- TOC entry 1944 (class 1255 OID 1440285)
-- Name: fct_trk_log_table(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_trk_log_table() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id integer;
  track_level integer;
  track_fields integer;
  trk_id bigint;
  tbl_row RECORD;
  new_val varchar;
  old_val varchar;
  returnedRow RECORD;
BEGIN
  IF TG_OP IN ('INSERT', 'UPDATE') THEN
    returnedRow := NEW;
  ELSE
    returnedRow := OLD;
  END IF;
  SELECT COALESCE(CASE WHEN get_setting('darwin.track_level') = '' THEN NULL ELSE get_setting('darwin.track_level') END,'10')::integer INTO track_level;
  IF track_level = 0 THEN --NO Tracking
    RETURN returnedRow;
  ELSIF track_level = 1 THEN -- Track Only Main tables
    IF TG_TABLE_NAME::text NOT IN ('specimens', 'taxonomy', 'chronostratigraphy', 'lithostratigraphy',
      'mineralogy', 'lithology', 'people', 'loans', 'loan_items') THEN
      RETURN returnedRow;
    END IF;
  END IF;

  SELECT COALESCE(CASE WHEN get_setting('darwin.userid') = '' THEN NULL ELSE get_setting('darwin.userid') END,'0')::integer INTO user_id;
  IF user_id = 0 OR  user_id = -1 THEN
    RETURN returnedRow;
  END IF;

  IF TG_OP = 'INSERT' THEN
    INSERT INTO users_tracking (referenced_relation, record_id, user_ref, action, modification_date_time, new_value)
        VALUES (TG_TABLE_NAME::text, NEW.id, user_id, 'insert', now(), hstore(NEW)) RETURNING id into trk_id;
  ELSEIF TG_OP = 'UPDATE' THEN

    IF ROW(NEW.*) IS DISTINCT FROM ROW(OLD.*) THEN
    INSERT INTO users_tracking (referenced_relation, record_id, user_ref, action, modification_date_time, new_value, old_value)
        VALUES (TG_TABLE_NAME::text, NEW.id, user_id, 'update', now(), hstore(NEW), hstore(OLD)) RETURNING id into trk_id;
    ELSE
      RAISE info 'unnecessary update on table "%" and id "%"', TG_TABLE_NAME::text, NEW.id;
    END IF;

  ELSEIF TG_OP = 'DELETE' THEN
    INSERT INTO users_tracking (referenced_relation, record_id, user_ref, action, modification_date_time, old_value)
      VALUES (TG_TABLE_NAME::text, OLD.id, user_id, 'delete', now(), hstore(OLD));
  END IF;

  RETURN NULL;
END;
$$;


ALTER FUNCTION darwin2.fct_trk_log_table() OWNER TO darwin2;

--
-- TOC entry 1942 (class 1255 OID 1440286)
-- Name: fct_unpromotion_impact_prefs(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_unpromotion_impact_prefs() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  saved_search_row RECORD;
BEGIN
  IF NEW.db_user_type IS DISTINCT FROM OLD.db_user_type AND NEW.db_user_type = 1 THEN
    UPDATE preferences
    SET pref_value = subq.fields_available
    FROM (select array_to_string(array(select fields_list
                                       from regexp_split_to_table((SELECT pref_value
                                                                   FROM preferences
                                                                   WHERE user_ref = NEW.id
                                                                     AND pref_key = 'search_cols_specimen'
                                                                   LIMIT 1
                                                                  ), E'\\|') as fields_list
                                       where fields_list not in ('institution_ref', 'building', 'floor', 'room', 'row', 'shelf', 'col', 'container', 'container_type', 'container_storage', 'sub_container', 'sub_container_type', 'sub_container_storage')
                                      ),'|'
                                ) as fields_available
         ) subq
    WHERE user_ref = NEW.id
      AND pref_key = 'search_cols_specimen';
    FOR saved_search_row IN SELECT id, visible_fields_in_result FROM my_saved_searches WHERE user_ref = NEW.id LOOP
      UPDATE my_saved_searches
      SET visible_fields_in_result = subq.fields_available
      FROM (select array_to_string(array(select fields_list
                                         from regexp_split_to_table(saved_search_row.visible_fields_in_result, E'\\|') as fields_list
                                         where fields_list not in ('institution_ref','building', 'floor', 'room', 'row', 'shelf', 'col', 'container', 'container_type', 'container_storage', 'sub_container', 'sub_container_type', 'sub_container_storage')
                                        ),'|'
                                  ) as fields_available
          ) subq
      WHERE id = saved_search_row.id;
    END LOOP;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_unpromotion_impact_prefs() OWNER TO darwin2;

--
-- TOC entry 1954 (class 1255 OID 1440287)
-- Name: fct_upd_institution_staging_relationship(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_upd_institution_staging_relationship() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  import_id integer;
  line RECORD ;
BEGIN
 IF get_setting('darwin.upd_people_ref') is null OR  get_setting('darwin.upd_people_ref') = '' THEN
    PERFORM set_config('darwin.upd_people_ref', 'ok', true);
    select s.import_ref INTO import_id FROM staging s, staging_relationship sr WHERE sr.id=OLD.id AND sr.record_id = s.id ;
    UPDATE staging_relationship SET institution_ref = NEW.institution_ref WHERE id IN (
      SELECT sr.id from staging_relationship sr, staging s WHERE sr.institution_name = OLD.institution_name AND s.import_ref = import_id AND
      sr.record_id = s.id
    );
    FOR line IN SELECT s.* FROM staging s, staging_relationship sr WHERE s.id=sr.record_id AND sr.institution_ref = NEW.institution_ref
    LOOP
      UPDATE staging SET status = delete(status,'institution_relationship') where id=line.id;
    END LOOP ;
    PERFORM set_config('darwin.upd_imp_ref', NULL, true);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_upd_institution_staging_relationship() OWNER TO postgres;

--
-- TOC entry 1953 (class 1255 OID 1440288)
-- Name: fct_upd_people_in_flat(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_upd_people_in_flat() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  spec_row RECORD;
  ident RECORD;
  tmp_user text;
BEGIN
 SELECT COALESCE(get_setting('darwin.userid'),'0') INTO tmp_user;
  PERFORM set_config('darwin.userid', '-1', false) ;


  IF TG_OP = 'DELETE' THEN
    IF OLD.people_type = 'collector' THEN
      UPDATE specimens s SET spec_coll_ids = fct_remove_array_elem(spec_coll_ids,ARRAY[OLD.people_ref])
        WHERE id  = OLD.record_id;
    ELSIF OLD.people_type = 'donator' THEN
      UPDATE specimens s SET spec_don_sel_ids = fct_remove_array_elem(spec_don_sel_ids,ARRAY[OLD.people_ref])
        WHERE id  = OLD.record_id;
    ELSIF OLD.people_type = 'identifier' THEN
      SELECT * into ident FROM identifications where id = OLD.record_id;
      IF NOT FOUND Then
        PERFORM set_config('darwin.userid', tmp_user, false) ;
        RETURN OLD;
      END IF;

      UPDATE specimens s SET spec_ident_ids = fct_remove_array_elem(spec_ident_ids,ARRAY[OLD.people_ref])
        WHERE id  = ident.record_id
            AND NOT exists (
              SELECT true FROM catalogue_people cp INNER JOIN identifications i ON cp.record_id = i.id AND cp.referenced_relation = 'identifications'
                WHERE i.record_id = ident.id AND people_ref = OLD.people_ref AND i.referenced_relation = 'specimens'
            );
    END IF;

  ELSIF TG_OP = 'INSERT' THEN --- INSERT

    IF NEW.people_type = 'collector' THEN
      UPDATE specimens s SET spec_coll_ids = array_append(spec_coll_ids,NEW.people_ref)
        WHERE id  = NEW.record_id and NOT (spec_coll_ids && ARRAY[ NEW.people_ref::integer ]);
    ELSIF NEW.people_type = 'donator' THEN
      UPDATE specimens s SET spec_don_sel_ids = array_append(spec_don_sel_ids,NEW.people_ref)
        WHERE id  = NEW.record_id  and NOT (spec_don_sel_ids && ARRAY[ NEW.people_ref::integer ]);
    ELSIF NEW.people_type = 'identifier' THEN
      SELECT * into ident FROM identifications where id = NEW.record_id;

      UPDATE specimens s SET spec_ident_ids = array_append(spec_ident_ids,NEW.people_ref)
          WHERE id  = ident.record_id and NOT (spec_ident_ids && ARRAY[ NEW.people_ref::integer ]);
    END IF;

  ELSIF OLD.people_ref != NEW.people_ref THEN --UPDATE

    IF NEW.people_type = 'collector' THEN
      UPDATE specimens s SET spec_coll_ids = array_append(fct_remove_array_elem(spec_coll_ids ,ARRAY[OLD.people_ref]),NEW.people_ref::integer)
        WHERE id  = NEW.record_id;
    ELSIF NEW.people_type = 'donator' THEN
      UPDATE specimens s SET spec_don_sel_ids = array_append(fct_remove_array_elem(spec_don_sel_ids ,ARRAY[OLD.people_ref]),NEW.people_ref::integer)
        WHERE id  = NEW.record_id;

    ELSIF NEW.people_type = 'identifier' THEN
      SELECT * into ident FROM identifications where id = NEW.record_id;

        SELECT id, spec_ident_ids INTO spec_row FROM specimens WHERE id = ident.record_id;

        IF NOT exists (SELECT 1 from identifications i INNER JOIN catalogue_people c ON c.record_id = i.id AND c.referenced_relation = 'identifications'
          WHERE i.record_id = spec_row.id AND people_ref = OLD.people_ref AND i.referenced_relation = 'specimens' AND c.id != OLD.id
        ) THEN
          spec_row.spec_ident_ids := fct_remove_array_elem(spec_row.spec_ident_ids ,ARRAY[OLD.people_ref]);
        END IF;

        IF NOT spec_row.spec_ident_ids && ARRAY[ NEW.people_ref::integer ] THEN
          spec_row.spec_ident_ids := array_append(spec_row.spec_ident_ids ,NEW.people_ref);
        END IF;

        UPDATE specimens SET spec_ident_ids = spec_row.spec_ident_ids WHERE id = spec_row.id;
    END IF;
    --else  raise info 'ooh';
  END IF;

  PERFORM set_config('darwin.userid', tmp_user, false) ;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_upd_people_in_flat() OWNER TO darwin2;

--
-- TOC entry 1955 (class 1255 OID 1440289)
-- Name: fct_upd_people_staging_fields(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_upd_people_staging_fields() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  import_id integer;
BEGIN
 IF get_setting('darwin.upd_people_ref') is null OR  get_setting('darwin.upd_people_ref') = '' THEN
    PERFORM set_config('darwin.upd_people_ref', 'ok', true);
    IF OLD.referenced_relation = 'staging' THEN
      select s.import_ref INTO import_id FROM staging s, staging_people sp WHERE sp.id=OLD.id AND sp.record_id = s.id ;
    ELSEIF OLD.referenced_relation = 'identifications' THEN
      select s.import_ref INTO import_id FROM staging s, staging_people sp, identifications i WHERE sp.id=OLD.id
      AND sp.record_id = i.id AND i.record_id = s.id ;
    ELSE
      select s.import_ref INTO import_id FROM staging s, staging_people sp, collection_maintenance c WHERE sp.id=OLD.id
      AND sp.record_id = c.id AND c.record_id = s.id ;
    END IF;


	    UPDATE staging_people SET people_ref = NEW.people_ref FROM identifications i, staging s WHERE formated_name = OLD.formated_name AND s.import_ref = import_id
	      AND i.record_id = s.id AND staging_people.referenced_relation = 'identifications' AND staging_people.record_id = i.id ;

	    PERFORM fct_imp_checker_people(s.*) FROM identifications i, staging s, staging_people sp WHERE formated_name = OLD.formated_name AND s.import_ref = import_id
	      AND i.record_id = s.id AND sp.referenced_relation = 'identifications' AND sp.record_id = i.id AND (status::hstore ? 'people' OR status::hstore ? 'identifiers'  OR status::hstore ? 'operator') ;

	    UPDATE staging_people SET people_ref = NEW.people_ref FROM   staging s WHERE formated_name = OLD.formated_name AND s.import_ref = import_id AND
	      staging_people.record_id = s.id AND staging_people.referenced_relation = 'staging' ;
	    PERFORM fct_imp_checker_people(s.*) FROM   staging s, staging_people sp WHERE formated_name = OLD.formated_name AND s.import_ref = import_id AND
	      sp.record_id = s.id AND sp.referenced_relation = 'staging' AND (status::hstore ? 'people' OR status::hstore ? 'identifiers'  OR status::hstore ? 'operator');

	    UPDATE staging_people SET people_ref = NEW.people_ref  FROM collection_maintenance c, staging s WHERE formated_name = OLD.formated_name AND s.import_ref = import_id
	      AND c.record_id = s.id AND staging_people.referenced_relation = 'collection_maintenance' AND staging_people.record_id = c.id;
	       PERFORM fct_imp_checker_people(s.*) FROM collection_maintenance c, staging s, staging_people sp WHERE formated_name = OLD.formated_name AND s.import_ref = import_id
	      AND c.record_id = s.id AND sp.referenced_relation = 'collection_maintenance' AND sp.record_id = c.id AND (status::hstore ? 'people' OR status::hstore ? 'identifiers'  OR status::hstore ? 'operator');
   
    PERFORM set_config('darwin.upd_imp_ref', NULL, true);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_upd_people_staging_fields() OWNER TO darwin2;

--
-- TOC entry 1950 (class 1255 OID 1440290)
-- Name: fct_upd_staging_fields(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_upd_staging_fields() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF get_setting('darwin.upd_imp_ref') is null OR  get_setting('darwin.upd_imp_ref') = '' THEN
    PERFORM set_config('darwin.upd_imp_ref', 'ok', true);
    IF OLD.taxon_ref IS DISTINCT FROM NEW.taxon_ref AND  NEW.taxon_ref is not null THEN
        SELECT t.id ,t.name, t.level_ref , cl.level_sys_name, t.status, t.extinct
        INTO NEW.taxon_ref,NEW.taxon_name, NEW.taxon_level_ref, NEW.taxon_level_name, NEW.taxon_status, NEW.taxon_extinct
        FROM taxonomy t, catalogue_levels cl
        WHERE cl.id=t.level_ref AND t.id = NEW.taxon_ref;

        UPDATE staging set taxon_ref=NEW.taxon_ref, taxon_name = new.taxon_name, taxon_level_ref=new.taxon_level_ref,
          taxon_level_name=new.taxon_level_name, taxon_status=new.taxon_status, taxon_extinct=new.taxon_extinct,
          status = delete(status,'taxon')

        WHERE
          taxon_name  IS NOT DISTINCT FROM  old.taxon_name AND  taxon_level_ref IS NOT DISTINCT FROM old.taxon_level_ref AND
          taxon_level_name IS NOT DISTINCT FROM old.taxon_level_name AND  taxon_status IS NOT DISTINCT FROM old.taxon_status
          AND  taxon_extinct IS NOT DISTINCT FROM old.taxon_extinct
          AND import_ref = NEW.import_ref;
        NEW.status = delete(NEW.status,'taxon');
    END IF;

    IF OLD.chrono_ref IS DISTINCT FROM NEW.chrono_ref  AND  NEW.chrono_ref is not null THEN
      SELECT c.id, c.name, c.level_ref, cl.level_name, c.status, c.local_naming, c.color, c.upper_bound, c.lower_bound
        INTO NEW.chrono_ref, NEW.chrono_name, NEW.chrono_level_ref, NEW.chrono_level_name, NEW.chrono_status, NEW.chrono_local, NEW.chrono_color, NEW.chrono_upper_bound, NEW.chrono_lower_bound
        FROM chronostratigraphy c, catalogue_levels cl
        WHERE cl.id=c.level_ref AND c.id = NEW.chrono_ref ;

        UPDATE staging set chrono_ref=NEW.chrono_ref, chrono_name = NEW.chrono_name, chrono_level_ref=NEW.chrono_level_ref, chrono_level_name=NEW.chrono_level_name, chrono_status=NEW.chrono_status,
        chrono_local=NEW.chrono_local, chrono_color=NEW.chrono_color, chrono_upper_bound=NEW.chrono_upper_bound, chrono_lower_bound=NEW.chrono_lower_bound,
        status = delete(status,'chrono')

        WHERE
        chrono_name  IS NOT DISTINCT FROM  OLD.chrono_name AND  chrono_level_ref IS NOT DISTINCT FROM OLD.chrono_level_ref AND
        chrono_level_name IS NOT DISTINCT FROM OLD.chrono_level_name AND  chrono_status IS NOT DISTINCT FROM OLD.chrono_status AND
        chrono_local IS NOT DISTINCT FROM OLD.chrono_local AND  chrono_color IS NOT DISTINCT FROM OLD.chrono_color AND
        chrono_upper_bound IS NOT DISTINCT FROM OLD.chrono_upper_bound AND  chrono_lower_bound IS NOT DISTINCT FROM OLD.chrono_lower_bound
        AND import_ref = NEW.import_ref;
        NEW.status = delete(NEW.status,'chrono');

    END IF;

    IF OLD.litho_ref IS DISTINCT FROM NEW.litho_ref  AND  NEW.litho_ref is not null  THEN
      SELECT l.id,l.name, l.level_ref, cl.level_name, l.status, l.local_naming, l.color
      INTO NEW.litho_ref, NEW.litho_name, NEW.litho_level_ref, NEW.litho_level_name, NEW.litho_status, NEW.litho_local, NEW.litho_color
      FROM lithostratigraphy l, catalogue_levels cl
      WHERE cl.id=l.level_ref AND l.id = NEW.litho_ref ;

      UPDATE staging set
        litho_ref=NEW.litho_ref, litho_name=NEW.litho_name, litho_level_ref=NEW.litho_level_ref, litho_level_name=NEW.litho_level_name,
        litho_status=NEW.litho_status, litho_local=NEW.litho_local, litho_color=NEW.litho_color,
        status = delete(status,'litho')

      WHERE
        litho_name IS NOT DISTINCT FROM  OLD.litho_name AND litho_level_ref IS NOT DISTINCT FROM  OLD.litho_level_ref AND
        litho_level_name IS NOT DISTINCT FROM  OLD.litho_level_name AND
        litho_status IS NOT DISTINCT FROM  OLD.litho_status AND litho_local IS NOT DISTINCT FROM  OLD.litho_local AND litho_color IS NOT DISTINCT FROM OLD.litho_color
        AND import_ref = NEW.import_ref;
        NEW.status = delete(NEW.status,'litho');

    END IF;

    IF OLD.lithology_ref IS DISTINCT FROM NEW.lithology_ref  AND  NEW.lithology_ref is not null THEN
      SELECT l.id, l.name, l.level_ref, cl.level_name, l.status, l.local_naming, l.color
      INTO NEW.lithology_ref, NEW.lithology_name, NEW.lithology_level_ref, NEW.lithology_level_name, NEW.lithology_status, NEW.lithology_local, NEW.lithology_color
      FROM lithology l, catalogue_levels cl
      WHERE cl.id=l.level_ref AND l.id = NEW.lithology_ref ;

      UPDATE staging set
        lithology_ref=NEW.lithology_ref, lithology_name=NEW.lithology_name, lithology_level_ref=NEW.lithology_level_ref,
        lithology_level_name=NEW.lithology_level_name, lithology_status=NEW.lithology_status, lithology_local=NEW.lithology_local,
        lithology_color=NEW.lithology_color,
        status = delete(status,'lithology')

      WHERE
        lithology_name IS NOT DISTINCT FROM OLD.lithology_name AND  lithology_level_ref IS NOT DISTINCT FROM OLD.lithology_level_ref AND
        lithology_level_name IS NOT DISTINCT FROM OLD.lithology_level_name AND  lithology_status IS NOT DISTINCT FROM OLD.lithology_status AND  lithology_local IS NOT DISTINCT FROM OLD.lithology_local AND
        lithology_color IS NOT DISTINCT FROM OLD.lithology_color
        AND import_ref = NEW.import_ref;
        NEW.status = delete(NEW.status,'lithology');

    END IF;

    IF OLD.mineral_ref IS DISTINCT FROM NEW.mineral_ref  AND  NEW.mineral_ref is not null THEN
      SELECT m.id, m.name, m.level_ref, cl.level_name, m.status, m.local_naming, m.color, m.path
      INTO NEW.mineral_ref, NEW.mineral_name, NEW.mineral_level_ref, NEW.mineral_level_name, NEW.mineral_status, NEW.mineral_local, NEW.mineral_color, NEW.mineral_path
      FROM mineralogy m, catalogue_levels cl
      WHERE cl.id=m.level_ref AND m.id = NEW.mineral_ref ;

      UPDATE staging set
        mineral_ref=NEW.mineral_ref, mineral_name=NEW.mineral_name, mineral_level_ref=NEW.mineral_level_ref,
        mineral_level_name=NEW.mineral_level_name, mineral_status=NEW.mineral_status, mineral_local=NEW.mineral_local,
        mineral_color=NEW.mineral_color, mineral_path=NEW.mineral_path,
        status = delete(status,'mineral')

      WHERE
        mineral_name IS NOT DISTINCT FROM OLD.mineral_name AND  mineral_level_ref IS NOT DISTINCT FROM OLD.mineral_level_ref AND
        mineral_level_name IS NOT DISTINCT FROM OLD.mineral_level_name AND  mineral_status IS NOT DISTINCT FROM OLD.mineral_status AND  mineral_local IS NOT DISTINCT FROM OLD.mineral_local AND
        mineral_color IS NOT DISTINCT FROM OLD.mineral_color AND  mineral_path IS NOT DISTINCT FROM OLD.mineral_path
        AND import_ref = NEW.import_ref;

        NEW.status = delete(NEW.status,'mineral');

    END IF;

    IF OLD.expedition_ref IS DISTINCT FROM NEW.expedition_ref  AND  NEW.expedition_ref is not null THEN
      SELECT id, "name", expedition_from_date, expedition_to_date, expedition_from_date_mask , expedition_to_date_mask
      INTO NEW.expedition_ref, NEW.expedition_name, NEW.expedition_from_date, NEW.expedition_to_date, NEW.expedition_from_date_mask , NEW.expedition_to_date_mask
      FROM expeditions
      WHERE id = NEW.expedition_ref ;

      UPDATE staging set
        expedition_ref=NEW.expedition_ref, expedition_name=NEW.expedition_name, expedition_from_date=NEW.expedition_from_date,
        expedition_to_date=NEW.expedition_to_date, expedition_from_date_mask=NEW.expedition_from_date_mask , expedition_to_date_mask=NEW.expedition_to_date_mask,
        status = delete(status,'expedition')
      WHERE
        expedition_name IS NOT DISTINCT FROM OLD.expedition_name AND  expedition_from_date IS NOT DISTINCT FROM OLD.expedition_from_date AND
        expedition_to_date IS NOT DISTINCT FROM OLD.expedition_to_date AND  expedition_from_date_mask IS NOT DISTINCT FROM OLD.expedition_from_date_mask  AND
        expedition_to_date_mask IS NOT DISTINCT FROM OLD.expedition_to_date_mask
        AND import_ref = NEW.import_ref;
  NEW.status = delete(NEW.status,'expedition');
    END IF;

    IF OLD.institution_ref IS DISTINCT FROM NEW.institution_ref  AND  NEW.institution_ref is not null THEN
      SELECT formated_name INTO NEW.institution_name FROM people WHERE id = NEW.institution_ref ;

      UPDATE staging set institution_ref = NEW.institution_ref, institution_name=NEW.institution_name,
        status = delete(status,'institution')
        WHERE
        institution_name IS NOT DISTINCT FROM OLD.institution_name
        AND import_ref = NEW.import_ref;

        NEW.status = delete(NEW.status,'institution');

    END IF;

    --ftheeten 2019 03 14
    /*IF OLD.gtu_ref != NEW.gtu_ref THEN
	NEW.status = delete(NEW.status,'gtu');
    END IF;*/
   /* IF OLD.category IS DISTINCT FROM NEW.category    THEN
	 	NEW.status = delete(NEW.status,'category');
	END IF;*/

    PERFORM set_config('darwin.upd_imp_ref', NULL, true);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_upd_staging_fields() OWNER TO darwin2;

--
-- TOC entry 1956 (class 1255 OID 1440293)
-- Name: fct_update_import(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fct_update_import() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  if OLD.state IS DISTINCT FROM NEW.state THEN
  UPDATE imports set updated_at= now() where id=NEW.id ;
  END IF ;
  return new ;
END;
$$;


ALTER FUNCTION darwin2.fct_update_import() OWNER TO postgres;

--
-- TOC entry 831 (class 1255 OID 1440294)
-- Name: fct_update_specimen_flat(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_update_specimen_flat() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cnt integer;
  old_val specimens%ROWTYPE;
  new_val specimens%ROWTYPE;
BEGIN

    IF TG_OP = 'UPDATE' THEN
      old_val = OLD;
      new_val = NEW;
    ELSE --INSERT
      new_val = NEW;
    END IF;

    IF old_val.taxon_ref IS DISTINCT FROM new_val.taxon_ref THEN
      SELECT  name, name_indexed, level_ref, level_name, status, path, parent_ref, extinct
        INTO NEW.taxon_name, NEW.taxon_name_indexed, NEW.taxon_level_ref, NEW.taxon_level_name, NEW.taxon_status,
          NEW.taxon_path, NEW.taxon_parent_ref, NEW.taxon_extinct
        FROM taxonomy c
        INNER JOIN catalogue_levels l on c.level_ref = l.id
        WHERE c.id = new_val.taxon_ref;
    END IF;

    IF old_val.chrono_ref IS DISTINCT FROM new_val.chrono_ref THEN
      SELECT  name, name_indexed, level_ref, level_name, status, local_naming, color, path, parent_ref
      INTO NEW.chrono_name, NEW.chrono_name_indexed, NEW.chrono_level_ref, NEW.chrono_level_name, NEW.chrono_status,
          NEW.chrono_local, NEW.chrono_color, NEW.chrono_path, NEW.chrono_parent_ref
        FROM chronostratigraphy c
        INNER JOIN catalogue_levels l on c.level_ref = l.id
        WHERE c.id = new_val.chrono_ref;
    END IF;

    IF old_val.litho_ref IS DISTINCT FROM new_val.litho_ref THEN
      SELECT  name, name_indexed, level_ref, level_name, status, local_naming, color, path, parent_ref
        INTO NEW.litho_name, NEW.litho_name_indexed, NEW.litho_level_ref, NEW.litho_level_name, NEW.litho_status,
          NEW.litho_local, NEW.litho_color, NEW.litho_path, NEW.litho_parent_ref
        FROM lithostratigraphy c
        INNER JOIN catalogue_levels l on c.level_ref = l.id
        WHERE c.id = new_val.litho_ref;
    END IF;

    IF old_val.lithology_ref IS DISTINCT FROM new_val.lithology_ref THEN
      SELECT  name, name_indexed, level_ref, level_name, status, local_naming, color, path, parent_ref
        INTO NEW.lithology_name, NEW.lithology_name_indexed, NEW.lithology_level_ref, NEW.lithology_level_name, NEW.lithology_status,
          NEW.lithology_local, NEW.lithology_color, NEW.lithology_path, NEW.lithology_parent_ref
        FROM lithology c
        INNER JOIN catalogue_levels l on c.level_ref = l.id
        WHERE c.id = new_val.lithology_ref;
    END IF;

    IF old_val.mineral_ref IS DISTINCT FROM new_val.mineral_ref THEN
      SELECT  name, name_indexed, level_ref, level_name, status, local_naming, color, path, parent_ref
        INTO NEW.mineral_name, NEW.mineral_name_indexed, NEW.mineral_level_ref, NEW.mineral_level_name, NEW.mineral_status,
          NEW.mineral_local, NEW.mineral_color, NEW.mineral_path, NEW.mineral_parent_ref
        FROM mineralogy c
        INNER JOIN catalogue_levels l on c.level_ref = l.id
        WHERE c.id = new_val.mineral_ref;
    END IF;


    IF old_val.expedition_ref IS DISTINCT FROM new_val.expedition_ref THEN
      SELECT  name, name_indexed
        INTO NEW.expedition_name, NEW.expedition_name_indexed
        FROM expeditions c
        WHERE c.id = new_val.expedition_ref;
    END IF;

    IF old_val.collection_ref IS DISTINCT FROM new_val.collection_ref THEN
      SELECT collection_type, code, name, is_public, parent_ref, path
        INTO NEW.collection_type, NEW.collection_code, NEW.collection_name, NEW.collection_is_public,
          NEW.collection_parent_ref, NEW.collection_path
        FROM collections c
        WHERE c.id = new_val.collection_ref;
    END IF;

    IF old_val.ig_ref IS DISTINCT FROM new_val.ig_ref THEN
      SELECT  ig_num, ig_num_indexed, ig_date, ig_date_mask
        INTO NEW.ig_num, NEW.ig_num_indexed, NEW.ig_date, NEW.ig_date_mask
        FROM igs c
        WHERE c.id = new_val.ig_ref;
    END IF;

    IF old_val.gtu_ref IS DISTINCT FROM new_val.gtu_ref THEN
      SELECT  code,/* ftheeten 2018 11 30*/

       /*gtu_from_date, gtu_from_date_mask,
         gtu_to_date, gtu_to_date_mask,*/
         elevation, elevation_accuracy,
         tag_values_indexed, location,

         taggr_countries.tag_value, lineToTagArray(taggr_countries.tag_value),
         taggr_provinces.tag_value, lineToTagArray(taggr_provinces.tag_value),
         (select array_to_string(array(select tag from tags where gtu_ref = c.id and sub_group_type not in ('country', 'province')), ';')) as other_gtu_values,
         (select array(select distinct fullToIndex(tag) from tags where gtu_ref = c.id and sub_group_type not in ('country', 'province'))) as other_gtu_values_array

        INTO NEW.gtu_code,

         --NEW.gtu_from_date, NEW.gtu_from_date_mask, NEW.gtu_to_date, NEW.gtu_to_date_mask,
     
         NEW.gtu_elevation, NEW.gtu_elevation_accuracy, NEW.gtu_tag_values_indexed, NEW.gtu_location,
         NEW.gtu_country_tag_value, NEW.gtu_country_tag_indexed, NEW.gtu_province_tag_value,
         NEW.gtu_province_tag_indexed, NEW.gtu_others_tag_value, NEW.gtu_others_tag_indexed
        FROM gtu c
          LEFT JOIN tag_groups taggr_countries ON c.id = taggr_countries.gtu_ref AND taggr_countries.group_name_indexed = 'administrativearea' AND taggr_countries.sub_group_name_indexed = 'country'
          LEFT JOIN tag_groups taggr_provinces ON c.id = taggr_provinces.gtu_ref AND taggr_provinces.group_name_indexed = 'administrativearea' AND taggr_provinces.sub_group_name_indexed = 'province'
        WHERE c.id = new_val.gtu_ref;
    END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_update_specimen_flat() OWNER TO darwin2;

--
-- TOC entry 1951 (class 1255 OID 1440295)
-- Name: fct_update_specimens_flat_related(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fct_update_specimens_flat_related() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  indCount INTEGER := 0;
  indType BOOLEAN := false;
  tmp_user text;
BEGIN
 SELECT COALESCE(get_setting('darwin.userid'),'0') INTO tmp_user;
  PERFORM set_config('darwin.userid', '-1', false) ;

  IF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'expeditions' THEN
    IF NEW.name_indexed IS DISTINCT FROM OLD.name_indexed THEN
      UPDATE specimens
      SET (expedition_name, expedition_name_indexed) =
          (NEW.name, NEW.name_indexed)
      WHERE expedition_ref = NEW.id;
    END IF;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'collections' THEN
    IF OLD.collection_type IS DISTINCT FROM NEW.collection_type
    OR OLD.code IS DISTINCT FROM NEW.code
    OR OLD.name IS DISTINCT FROM NEW.name
    OR OLD.is_public IS DISTINCT FROM NEW.is_public
    OR OLD.path IS DISTINCT FROM NEW.path
    THEN
      UPDATE specimens
      SET (collection_type, collection_code, collection_name, collection_is_public,
          collection_parent_ref, collection_path
          ) =
          (NEW.collection_type, NEW.code, NEW.name, NEW.is_public,
           NEW.parent_ref, NEW.path
          )
      WHERE collection_ref = NEW.id;
    END IF;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'gtu' THEN
    UPDATE specimens
    SET (gtu_code, 
         /*
	 gtu_from_date, gtu_from_date_mask,
         gtu_to_date, gtu_to_date_mask,*/
         gtu_elevation, gtu_elevation_accuracy,
         gtu_tag_values_indexed, gtu_location
        ) =
        (NEW.code,
         -- ftheeten 2018 11 30 
         /*
         NEW.gtu_from_date, NEW.gtu_from_date_mask,
         NEW.gtu_to_date, NEW.gtu_to_date_mask,*/
         NEW.elevation, NEW.elevation_accuracy,
         NEW.tag_values_indexed, NEW.location
        )
    WHERE gtu_ref = NEW.id;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'igs' THEN
    IF NEW.ig_num_indexed IS DISTINCT FROM OLD.ig_num_indexed OR NEW.ig_date IS DISTINCT FROM OLD.ig_date THEN
      UPDATE specimens
      SET (ig_num, ig_num_indexed, ig_date, ig_date_mask) =
          (NEW.ig_num, NEW.ig_num_indexed, NEW.ig_date, NEW.ig_date_mask)
      WHERE ig_ref = NEW.id;
    END IF;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'taxonomy' THEN
    UPDATE specimens
    SET (taxon_name, taxon_name_indexed,
         taxon_level_ref, taxon_level_name,
         taxon_status, taxon_path, taxon_parent_ref, taxon_extinct
        ) =
        (NEW.name, NEW.name_indexed,
         NEW.level_ref, subq.level_name,
         NEW.status, NEW.path, NEW.parent_ref, NEW.extinct
        )
        FROM
        (SELECT level_name
         FROM catalogue_levels
         WHERE id = NEW.level_ref
        ) subq
    WHERE taxon_ref = NEW.id;

  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'chronostratigraphy' THEN
    UPDATE specimens
    SET (chrono_name, chrono_name_indexed,
         chrono_level_ref, chrono_level_name,
         chrono_status,
         chrono_local, chrono_color,
         chrono_path, chrono_parent_ref
        ) =
        (NEW.name, NEW.name_indexed,
         NEW.level_ref, subq.level_name,
         NEW.status,
         NEW.local_naming, NEW.color,
         NEW.path, NEW.parent_ref
        )
        FROM
        (SELECT level_name
         FROM catalogue_levels
         WHERE id = NEW.level_ref
        ) subq
    WHERE chrono_ref = NEW.id;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'lithostratigraphy' THEN
    UPDATE specimens
    SET (litho_name, litho_name_indexed,
         litho_level_ref, litho_level_name,
         litho_status,
         litho_local, litho_color,
         litho_path, litho_parent_ref
        ) =
        (NEW.name, NEW.name_indexed,
         NEW.level_ref, subq.level_name,
         NEW.status,
         NEW.local_naming, NEW.color,
         NEW.path, NEW.parent_ref
        )
        FROM
        (SELECT level_name
         FROM catalogue_levels
         WHERE id = NEW.level_ref
        ) subq
    WHERE litho_ref = NEW.id;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'lithology' THEN
    UPDATE specimens
    SET (lithology_name, lithology_name_indexed,
         lithology_level_ref, lithology_level_name,
         lithology_status,
         lithology_local, lithology_color,
         lithology_path, lithology_parent_ref
        ) =
        (NEW.name, NEW.name_indexed,
         NEW.level_ref, subq.level_name,
         NEW.status,
         NEW.local_naming, NEW.color,
         NEW.path, NEW.parent_ref
        )
        FROM
        (SELECT level_name
         FROM catalogue_levels
         WHERE id = NEW.level_ref
        ) subq
    WHERE lithology_ref = NEW.id;
  ELSIF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'mineralogy' THEN
    UPDATE specimens
    SET (mineral_name, mineral_name_indexed,
         mineral_level_ref, mineral_level_name,
         mineral_status,
         mineral_local, mineral_color,
         mineral_path, mineral_parent_ref
        ) =
        (NEW.name, NEW.name_indexed,
         NEW.level_ref, subq.level_name,
         NEW.status,
         NEW.local_naming, NEW.color,
         NEW.path, NEW.parent_ref
        )
        FROM
        (SELECT level_name
         FROM catalogue_levels
         WHERE id = NEW.level_ref
        ) subq
    WHERE mineral_ref = NEW.id;

  ELSIF TG_TABLE_NAME = 'tag_groups' THEN
    IF TG_OP = 'INSERT' THEN
      IF NEW.group_name_indexed = 'administrativearea' AND NEW.sub_group_name_indexed = 'country' THEN
        UPDATE specimens
        SET gtu_country_tag_value = case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value,
            gtu_country_tag_indexed = lineToTagArray(case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value)
        WHERE gtu_ref = NEW.gtu_ref;
      ELSIF NEW.group_name_indexed = 'administrativearea' AND NEW.sub_group_name_indexed = 'province' THEN
        UPDATE specimens
        SET gtu_province_tag_value = case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value,
            gtu_province_tag_indexed = lineToTagArray(case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value)
        WHERE gtu_ref = NEW.gtu_ref;
      ELSIF NEW.sub_group_name_indexed NOT IN ('country','province') THEN
      /*Trigger trg_cpy_gtutags_taggroups has already occured and values from tags table should be correct... but really need a check !*/
        UPDATE specimens
        SET gtu_others_tag_value = (select array_to_string(array(select tag from tags where gtu_ref = NEW.gtu_ref and sub_group_type not in ('country', 'province')), ';')),
  --ftheeten 2020 02 11
            gtu_others_tag_indexed = (select array(select distinct fullToIndex(tag, '\s(\.\*)', '{\\,/}'::varchar[]) from tags where gtu_ref = NEW.gtu_ref and sub_group_type not in ('country', 'province')))
        WHERE gtu_ref = NEW.gtu_ref;
      END IF;
    ELSIF TG_OP = 'UPDATE' THEN
	--RAISE NOTICE 'UPD % % ', OLD.group_name_indexed,  NEW.group_name_indexed;
      IF OLD.group_name_indexed = 'administrativearea' AND OLD.sub_group_name_indexed = 'country' AND NEW.sub_group_name_indexed != 'country' THEN
       --RAISE NOTICE 'UPD2';
	   UPDATE specimens
        SET gtu_country_tag_value = NULL,
            gtu_country_tag_indexed = NULL
        WHERE gtu_ref = NEW.gtu_ref;
      ELSIF OLD.group_name_indexed = 'administrativearea' AND OLD.sub_group_name_indexed = 'province' AND NEW.sub_group_name_indexed != 'province' THEN
        --RAISE NOTICE 'UPD3';
		UPDATE specimens
        SET gtu_province_tag_value = NULL,
            gtu_province_tag_indexed = NULL
        WHERE gtu_ref = NEW.gtu_ref;
      END IF;
      IF NEW.group_name_indexed = 'administrativearea' AND NEW.sub_group_name_indexed = 'country' THEN
        --RAISE NOTICE 'UPD4';
		UPDATE specimens
        SET gtu_country_tag_value = case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value,
            gtu_country_tag_indexed = lineToTagArray(case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END ||NEW.tag_value)
        WHERE gtu_ref = NEW.gtu_ref;
      ELSIF NEW.group_name_indexed = 'administrativearea' AND NEW.sub_group_name_indexed = 'province' THEN
        UPDATE specimens
        SET gtu_province_tag_value = case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value,
            gtu_province_tag_indexed = lineToTagArray(case when NEW.international_name != '' THEN NEW.international_name || ';' ELSE '' END || NEW.tag_value)
        WHERE gtu_ref = NEW.gtu_ref;
      END IF;
      IF NEW.sub_group_name_indexed NOT IN ('country','province') THEN
      /*Trigger trg_cpy_gtutags_taggroups has already occured and values from tags table should be correct... but really need a check !*/
        UPDATE specimens
          --ftheeten 2020 02 11
        SET gtu_others_tag_value = (select array_to_string(array(select tag from tags where gtu_ref = NEW.gtu_ref and sub_group_type not in ('country', 'province')), ';')),
            gtu_others_tag_indexed = (select array(select distinct fullToIndex(tag , '\s(\.\*)', '{\\,/}'::varchar[]) from tags where gtu_ref = NEW.gtu_ref and sub_group_type not in ('country', 'province')))
        WHERE gtu_ref = NEW.gtu_ref;
      END IF;
    ELSIF TG_OP = 'DELETE' THEN
      IF OLD.group_name_indexed = 'administrativearea' AND OLD.sub_group_name_indexed = 'country' THEN
        UPDATE specimens
        SET gtu_country_tag_value = NULL,
            gtu_country_tag_indexed = NULL
        WHERE gtu_ref = OLD.gtu_ref;
      ELSIF OLD.group_name_indexed = 'administrativearea' AND OLD.sub_group_name_indexed = 'province' THEN
        UPDATE specimens
        SET gtu_province_tag_value = NULL,
            gtu_province_tag_indexed = NULL
        WHERE gtu_ref = OLD.gtu_ref;
      ELSE
        /*Trigger trg_cpy_gtutags_taggroups has already occured and values from tags table should be correct... but really need a check !*/
        UPDATE specimens
        SET gtu_others_tag_value = (select array_to_string(array(select tag from tags where gtu_ref = OLD.gtu_ref and sub_group_type not in ('country', 'province')), ';')),
        --ftheeten 2020 02 11
            gtu_others_tag_indexed = (select array(select distinct fullToIndex(tag,  '\s(\.\*)', '{\\,/}'::varchar[]) from tags where gtu_ref = OLD.gtu_ref and sub_group_type not in ('country', 'province')))
        WHERE gtu_ref = OLD.gtu_ref;
      END IF;
    END IF;
  END IF;
  PERFORM set_config('darwin.userid', tmp_user, false) ;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.fct_update_specimens_flat_related() OWNER TO darwin2;

--
-- TOC entry 1952 (class 1255 OID 1440298)
-- Name: fulltoindex(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fulltoindex(to_indexed character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
BEGIN
   return fulltoindex(to_indexed, false);
END;
$$;


ALTER FUNCTION darwin2.fulltoindex(to_indexed character varying) OWNER TO darwin2;

--
-- TOC entry 832 (class 1255 OID 1440299)
-- Name: fulltoindex(character varying, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    temp_string varchar;
BEGIN
    -- Investigate https://launchpad.net/postgresql-unaccent
    temp_string := to_indexed;
    temp_string := translate(temp_string, 'âãäåāăąÁÂÃÄÅĀĂĄ', 'aaaaaaaaaaaaaaa');
    temp_string := translate(temp_string, 'èééêëēĕėęěĒĔĖĘĚ', 'eeeeeeeeeeeeeee');
    temp_string := translate(temp_string, 'ìíîïìĩīĭÌÍÎÏÌĨĪĬ', 'iiiiiiiiiiiiiiii');
    temp_string := translate(temp_string, 'óôõöōŏőÒÓÔÕÖŌŎŐ', 'ooooooooooooooo');
    temp_string := translate(temp_string, 'ùúûüũūŭůÙÚÛÜŨŪŬŮ', 'uuuuuuuuuuuuuuuu');
    temp_string := REPLACE(temp_string, 'Œ', 'oe');
    temp_string := REPLACE(temp_string, 'Ӕ', 'ae');
    temp_string := REPLACE(temp_string, 'œ', 'oe');
    temp_string := REPLACE(temp_string, 'æ', 'ae');
    temp_string := REPLACE(temp_string, 'ë', 'e');
    temp_string := REPLACE(temp_string, 'ï', 'i');
    temp_string := REPLACE(temp_string, 'ö', 'o');
    temp_string := REPLACE(temp_string, 'ü', 'u');
--     temp_string := REPLACE(temp_string, E'\'', '');
--     temp_string := REPLACE(temp_string, '"', '');
    temp_string := REPLACE(temp_string, 'ñ', 'n');
    temp_string := REPLACE(temp_string,chr(946),'b');
    temp_string := TRANSLATE(temp_string,'Ð','d');
    temp_string := TRANSLATE(temp_string,'ó','o');
    temp_string := TRANSLATE(temp_string,'ę','e');
    temp_string := TRANSLATE(temp_string,'ā','a');
    temp_string := TRANSLATE(temp_string,'ē','e');
    temp_string := TRANSLATE(temp_string,'ī','i');
    temp_string := TRANSLATE(temp_string,'ō','o');
    temp_string := TRANSLATE(temp_string,'ū','u');
    temp_string := TRANSLATE(temp_string,'ş','s');
    temp_string := TRANSLATE(temp_string,'Ş','s');
--     temp_string := TRANSLATE(temp_string,'†','');
--     temp_string := TRANSLATE(temp_string,chr(52914),'');
--ftheeten 2015 02 15

--ftheeten 2017 01 22
temp_string := TRANSLATE(temp_string,'-',' ');
temp_string := TRANSLATE(temp_string,'''',' ');
    -- FROM 160 to 255 ASCII
    temp_string := TRANSLATE(temp_string, ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
      '  cL YS sCa  -R     Zu .z   EeY?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty');
    --Remove ALL none alphanumerical char
    if keep_space= false then
    temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]]','', 'g'));
    else
        temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]\s]','', 'g'));
	temp_string :=regexp_replace(temp_string,'(\s{2,})',' ', 'g');
	
    end if;
    return temp_string;
END;
$$;


ALTER FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean) OWNER TO darwin2;

--
-- TOC entry 1959 (class 1255 OID 1440300)
-- Name: fulltoindex(character varying, boolean, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean, keep_star boolean) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    temp_string varchar;
BEGIN
    -- Investigate https://launchpad.net/postgresql-unaccent
    temp_string := to_indexed;
    temp_string := translate(temp_string, 'âãäåāăąÁÂÃÄÅĀĂĄ', 'aaaaaaaaaaaaaaa');
    temp_string := translate(temp_string, 'èééêëēĕėęěĒĔĖĘĚ', 'eeeeeeeeeeeeeee');
    temp_string := translate(temp_string, 'ìíîïìĩīĭÌÍÎÏÌĨĪĬ', 'iiiiiiiiiiiiiiii');
    temp_string := translate(temp_string, 'óôõöōŏőÒÓÔÕÖŌŎŐ', 'ooooooooooooooo');
    temp_string := translate(temp_string, 'ùúûüũūŭůÙÚÛÜŨŪŬŮ', 'uuuuuuuuuuuuuuuu');
    temp_string := REPLACE(temp_string, 'Œ', 'oe');
    temp_string := REPLACE(temp_string, 'Ӕ', 'ae');
    temp_string := REPLACE(temp_string, 'œ', 'oe');
    temp_string := REPLACE(temp_string, 'æ', 'ae');
    temp_string := REPLACE(temp_string, 'ë', 'e');
    temp_string := REPLACE(temp_string, 'ï', 'i');
    temp_string := REPLACE(temp_string, 'ö', 'o');
    temp_string := REPLACE(temp_string, 'ü', 'u');
--     temp_string := REPLACE(temp_string, E'\'', '');
--     temp_string := REPLACE(temp_string, '"', '');
    temp_string := REPLACE(temp_string, 'ñ', 'n');
    temp_string := REPLACE(temp_string,chr(946),'b');
    temp_string := TRANSLATE(temp_string,'Ð','d');
    temp_string := TRANSLATE(temp_string,'ó','o');
    temp_string := TRANSLATE(temp_string,'ę','e');
    temp_string := TRANSLATE(temp_string,'ā','a');
    temp_string := TRANSLATE(temp_string,'ē','e');
    temp_string := TRANSLATE(temp_string,'ī','i');
    temp_string := TRANSLATE(temp_string,'ō','o');
    temp_string := TRANSLATE(temp_string,'ū','u');
    temp_string := TRANSLATE(temp_string,'ş','s');
    temp_string := TRANSLATE(temp_string,'Ş','s');
--     temp_string := TRANSLATE(temp_string,'†','');
--     temp_string := TRANSLATE(temp_string,chr(52914),'');
--ftheeten 2015 02 15

--ftheeten 2017 01 22
temp_string := TRANSLATE(temp_string,'-',' ');
temp_string := TRANSLATE(temp_string,'''',' ');
    -- FROM 160 to 255 ASCII
    temp_string := TRANSLATE(temp_string, ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
      '  cL YS sCa  -R     Zu .z   EeY?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty');
    --Remove ALL none alphanumerical char
    if keep_space= false then
	if keep_star = FALSE THEN
		temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]]','', 'g'));
	ELSE
		temp_string := lower(regexp_replace(temp_string,'[^[:alnum:](\.\*)]','', 'g'));
	END IF;
    else
	if keep_star = FALSE THEN
		temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]\s]','', 'g'));
	ELSE
		temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]\s(\.\*)]','', 'g'));
	END IF;
	temp_string :=regexp_replace(temp_string,'(\s{2,})',' ', 'g');
	
    end if;
    return temp_string;
END;
$$;


ALTER FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean, keep_star boolean) OWNER TO darwin2;

--
-- TOC entry 833 (class 1255 OID 1440301)
-- Name: fulltoindex(character varying, character varying, character varying[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_chars character varying, to_spaces character varying[]) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    temp_string varchar;
	i  integer;
BEGIN
	
    -- Investigate https://launchpad.net/postgresql-unaccent
    temp_string := to_indexed;
	FOR i IN  1..ARRAY_LENGTH(to_spaces, 1) LOOP
		temp_string=REPLACE(temp_string,to_spaces[i], ' ');
	END LOOP;
    temp_string := translate(temp_string, 'âãäåāăąÁÂÃÄÅĀĂĄ', 'aaaaaaaaaaaaaaa');
    temp_string := translate(temp_string, 'èééêëēĕėęěĒĔĖĘĚ', 'eeeeeeeeeeeeeee');
    temp_string := translate(temp_string, 'ìíîïìĩīĭÌÍÎÏÌĨĪĬ', 'iiiiiiiiiiiiiiii');
    temp_string := translate(temp_string, 'óôõöōŏőÒÓÔÕÖŌŎŐ', 'ooooooooooooooo');
    temp_string := translate(temp_string, 'ùúûüũūŭůÙÚÛÜŨŪŬŮ', 'uuuuuuuuuuuuuuuu');
    temp_string := REPLACE(temp_string, 'Œ', 'oe');
    temp_string := REPLACE(temp_string, 'Ӕ', 'ae');
    temp_string := REPLACE(temp_string, 'œ', 'oe');
    temp_string := REPLACE(temp_string, 'æ', 'ae');
    temp_string := REPLACE(temp_string, 'ë', 'e');
    temp_string := REPLACE(temp_string, 'ï', 'i');
    temp_string := REPLACE(temp_string, 'ö', 'o');
    temp_string := REPLACE(temp_string, 'ü', 'u');
--     temp_string := REPLACE(temp_string, E'\'', '');
--     temp_string := REPLACE(temp_string, '"', '');
    temp_string := REPLACE(temp_string, 'ñ', 'n');
    temp_string := REPLACE(temp_string,chr(946),'b');
    temp_string := TRANSLATE(temp_string,'Ð','d');
    temp_string := TRANSLATE(temp_string,'ó','o');
    temp_string := TRANSLATE(temp_string,'ę','e');
    temp_string := TRANSLATE(temp_string,'ā','a');
    temp_string := TRANSLATE(temp_string,'ē','e');
    temp_string := TRANSLATE(temp_string,'ī','i');
    temp_string := TRANSLATE(temp_string,'ō','o');
    temp_string := TRANSLATE(temp_string,'ū','u');
    temp_string := TRANSLATE(temp_string,'ş','s');
    temp_string := TRANSLATE(temp_string,'Ş','s');
--     temp_string := TRANSLATE(temp_string,'†','');
--     temp_string := TRANSLATE(temp_string,chr(52914),'');
--ftheeten 2015 02 15

--ftheeten 2017 01 22
temp_string := TRANSLATE(temp_string,'-',' ');
temp_string := TRANSLATE(temp_string,'''',' ');
    -- FROM 160 to 255 ASCII
    temp_string := TRANSLATE(temp_string, ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
      '  cL YS sCa  -R     Zu .z   EeY?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty');
    --Remove ALL none alphanumerical char
    
  temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]'||keep_chars||']','', 'g'));
	
	temp_string :=regexp_replace(temp_string,'(\s{2,})',' ', 'g');
	

    return temp_string;
END;
$$;


ALTER FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_chars character varying, to_spaces character varying[]) OWNER TO postgres;

--
-- TOC entry 1957 (class 1255 OID 1440302)
-- Name: fulltoindex_add_prefix_suffix(character varying, character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.fulltoindex_add_prefix_suffix(pattern character varying, prefix character varying DEFAULT ''::character varying, suffix character varying DEFAULT ''::character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
BEGIN
   return prefix||pattern||suffix;
END;
$$;


ALTER FUNCTION darwin2.fulltoindex_add_prefix_suffix(pattern character varying, prefix character varying, suffix character varying) OWNER TO darwin2;

--
-- TOC entry 1960 (class 1255 OID 1440303)
-- Name: get_import_row(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.get_import_row() RETURNS integer
    LANGUAGE sql SECURITY DEFINER
    AS $$

UPDATE imports SET state = 'aloaded' FROM (
  SELECT * FROM (
    SELECT  * FROM imports i1 WHERE i1.state = 'to_be_loaded' ORDER BY i1.created_at asc, id asc OFFSET 0 --thats important
  ) i2
  WHERE pg_try_advisory_lock('imports'::regclass::integer, i2.id)
  LIMIT 1
) i3
WHERE imports.id = i3.id RETURNING i3.id;
$$;


ALTER FUNCTION darwin2.get_import_row() OWNER TO darwin2;

--
-- TOC entry 1961 (class 1255 OID 1440304)
-- Name: get_setting(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.get_setting(param text, OUT value text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $$BEGIN
  SELECT current_setting(param) INTO value;
  EXCEPTION
  WHEN UNDEFINED_OBJECT THEN
    value := NULL;
END;$$;


ALTER FUNCTION darwin2.get_setting(param text, OUT value text) OWNER TO darwin2;

--
-- TOC entry 834 (class 1255 OID 1440305)
-- Name: getspecificparentforlevel(character varying, character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.getspecificparentforlevel(referenced_relation character varying, path character varying, level_searched character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  response darwin2.template_classifications.name%TYPE := '';
BEGIN
  EXECUTE
  'SELECT name ' ||
  ' FROM '
  || quote_ident(lower(referenced_relation)) || ' cat '
  ' INNER JOIN catalogue_levels ON cat.level_ref = catalogue_levels.id '
  ' WHERE level_name = '
  || quote_literal(lower(level_searched)) ||
  '   AND cat.id IN (SELECT i_id::integer FROM regexp_split_to_table(' || quote_literal(path) || E', E''\/'') as i_id WHERE i_id != '''')'
  INTO response;
  RETURN response;
EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Error in getSpecificParentForLevel: %', SQLERRM;
    RETURN response;
END;
$$;


ALTER FUNCTION darwin2.getspecificparentforlevel(referenced_relation character varying, path character varying, level_searched character varying) OWNER TO darwin2;

--
-- TOC entry 1958 (class 1255 OID 1440306)
-- Name: gettagsindexedasarray(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.gettagsindexedasarray(taglist character varying) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE
    AS $_$
  SELECT array_agg(tags) FROM (SELECT lineToTagRows($1) as tags) as subQuery;
$_$;


ALTER FUNCTION darwin2.gettagsindexedasarray(taglist character varying) OWNER TO darwin2;

--
-- TOC entry 835 (class 1255 OID 1440307)
-- Name: is_property_unit_in_group(text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.is_property_unit_in_group(searched_unit text, property_unit text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$

  SELECT CASE
  WHEN $1 IN ('Kt', 'Beaufort', 'm/s')
    AND  $2  IN ('Kt', 'Beaufort', 'm/s')
    THEN TRUE
  WHEN $1 IN ( 'g', 'hg', 'kg', 'ton', 'dg', 'cg', 'mg', 'lb', 'lbs', 'pound' , 'ounce' , 'grain')
    AND  $2  IN ( 'g', 'hg', 'kg', 'ton', 'dg', 'cg', 'mg', 'lb', 'lbs', 'pound' , 'ounce' , 'grain')
    THEN TRUE

  WHEN $1 IN ('m³', 'l', 'cm³', 'ml', 'mm³' ,'µl' , 'µm³' , 'km³', 'Ml' , 'hl')
    AND  $2  IN ( 'g', 'hg', 'kg', 'ton', 'dg', 'cg', 'mg', 'lb', 'lbs', 'pound' , 'ounce' , 'grain')
    THEN TRUE

  WHEN $1 IN ('K', '°C', '°F', '°Ra', '°Re', '°r', '°N', '°Rø', '°De')
    AND  $2  IN ('K', '°C', '°F', '°Ra', '°Re', '°r', '°N', '°Rø', '°De')
    THEN TRUE

  WHEN $1 IN ('m', 'dm', 'cm', 'mm', 'µm', 'nm', 'pm', 'fm', 'am', 'zm', 'ym', 'am', 'dam', 'hm', 'km', 'Mm', 'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym', 'mam', 'mom', 'Å', 'ua', 'ch', 'fathom', 'fermi', 'ft', 'in', 'K', 'l.y.', 'ly', 'µ', 'mil', 'mi', 'nautical mi', 'pc', 'point', 'pt', 'pica', 'rd', 'yd', 'arp', 'lieue', 'league', 'cal', 'twp', 'p', 'P', 'fur', 'brasse', 'vadem', 'fms')
    AND  $2  IN ('m', 'dm', 'cm', 'mm', 'µm', 'nm', 'pm', 'fm', 'am', 'zm', 'ym', 'am', 'dam', 'hm', 'km', 'Mm', 'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym', 'mam', 'mom', 'Å', 'ua', 'ch', 'fathom', 'fermi', 'ft', 'in', 'K', 'l.y.', 'ly', 'µ', 'mil', 'mi', 'nautical mi', 'pc', 'point', 'pt', 'pica', 'rd', 'yd', 'arp', 'lieue', 'league', 'cal', 'twp', 'p', 'P', 'fur', 'brasse', 'vadem', 'fms')
    THEN TRUE
  ELSE FALSE END;
$_$;


ALTER FUNCTION darwin2.is_property_unit_in_group(searched_unit text, property_unit text) OWNER TO postgres;

--
-- TOC entry 1966 (class 1255 OID 1440308)
-- Name: isinteger(text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.isinteger(text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE x integer;
BEGIN
    x = $1::integer;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;
$_$;


ALTER FUNCTION darwin2.isinteger(text) OWNER TO postgres;

--
-- TOC entry 1967 (class 1255 OID 1440309)
-- Name: isnumeric(text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.isnumeric(text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;
$_$;


ALTER FUNCTION darwin2.isnumeric(text) OWNER TO postgres;

--
-- TOC entry 1969 (class 1255 OID 1440310)
-- Name: labeling_code_for_indexation(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.labeling_code_for_indexation(part_ref integer) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE
    AS $_$
select array_agg(coding)
from (select trim(coalesce(code_prefix, '') || coalesce(code_prefix_separator, '') || coalesce(code, '') || coalesce(code_suffix_separator, '') || coalesce(code_suffix, ''))::varchar as coding
      from codes
      where referenced_relation = 'specimens'
        and record_id = $1
        and code_category = 'main'
        and coalesce(upper(code_prefix),'') != 'RBINS'
     ) as x;
$_$;


ALTER FUNCTION darwin2.labeling_code_for_indexation(part_ref integer) OWNER TO darwin2;

--
-- TOC entry 1965 (class 1255 OID 1440311)
-- Name: labeling_individual_type_for_indexation(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.labeling_individual_type_for_indexation(individual_type character varying) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE
    AS $_$
SELECT array[coalesce(fullToIndex($1),'-')];
$_$;


ALTER FUNCTION darwin2.labeling_individual_type_for_indexation(individual_type character varying) OWNER TO darwin2;

--
-- TOC entry 1968 (class 1255 OID 1440312)
-- Name: labeling_part_for_indexation(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.labeling_part_for_indexation(part character varying) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE
    AS $_$
SELECT array[coalesce(fullToIndex($1),'-')];
$_$;


ALTER FUNCTION darwin2.labeling_part_for_indexation(part character varying) OWNER TO darwin2;

--
-- TOC entry 1970 (class 1255 OID 1440313)
-- Name: labeling_type_for_indexation(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.labeling_type_for_indexation(individual_type character varying) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE
    AS $_$
SELECT array[coalesce(fullToIndex($1),'-')];
$_$;


ALTER FUNCTION darwin2.labeling_type_for_indexation(individual_type character varying) OWNER TO darwin2;

--
-- TOC entry 1971 (class 1255 OID 1440314)
-- Name: linetotagarray(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.linetotagarray(line text) RETURNS character varying[]
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
select array_agg(tags_list) FROM (SELECT lineToTagRows($1) AS tags_list ) as x;
$_$;


ALTER FUNCTION darwin2.linetotagarray(line text) OWNER TO darwin2;

--
-- TOC entry 1972 (class 1255 OID 1440315)
-- Name: linetotagrows(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.linetotagrows(line text) RETURNS SETOF character varying
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
--ftheeten 2020 02 11
SELECT distinct(fulltoIndex(tags, '\s(\.\*)', '{\\,/}'::varchar[])) FROM regexp_split_to_table($1, ';') as tags WHERE fulltoIndex(tags) != '' ;
$_$;


ALTER FUNCTION darwin2.linetotagrows(line text) OWNER TO darwin2;

--
-- TOC entry 1962 (class 1255 OID 1440316)
-- Name: point_equal(point, point); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.point_equal(point, point) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT
CASE WHEN $1[0] = $2[0] AND $1[1] = $2[1] THEN true
ELSE false END;$_$;


ALTER FUNCTION darwin2.point_equal(point, point) OWNER TO postgres;

--
-- TOC entry 1963 (class 1255 OID 1440317)
-- Name: rmca_cast_staging_gtu_date_to_mask(timestamp without time zone, time without time zone, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_cast_staging_gtu_date_to_mask(p_date timestamp without time zone, p_time time without time zone, date_resolution character varying) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$
DECLARE
	date_returned timestamp;
	mask_returned varchar;
	returned varchar[];
BEGIN

	SELECT 
	CASE WHEN p_time is not null then 63
		WHEN LOWER(date_resolution)='day' THEN 56
		WHEN LOWER(date_resolution)='month' THEN 48
		WHEN LOWER(date_resolution)='year' THEN 32
		ELSE
		NULL
		END into mask_returned;
	
	SELECT CASE WHEN p_time is not null then  p_date+ p_time
		WHEN LOWER(date_resolution)='day' THEN p_date
		WHEN LOWER(date_resolution)='month' THEN date_trunc('month', p_date)
		WHEN LOWER(date_resolution)='year' THEN date_trunc('year', p_date)
		ELSE
		NULL
		END into date_returned
		;
			
	returned :=ARRAY[date_returned::varchar, mask_returned::varchar];
	return returned;
END;
$$;


ALTER FUNCTION darwin2.rmca_cast_staging_gtu_date_to_mask(p_date timestamp without time zone, p_time time without time zone, date_resolution character varying) OWNER TO darwin2;

--
-- TOC entry 1964 (class 1255 OID 1440318)
-- Name: rmca_clean_gtu_imports(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_clean_gtu_imports(p_import_ref integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
	returned boolean;
begin
	DELETE FROM staging_gtu_tag_groups WHERE staging_gtu_tag_groups.staging_gtu_ref
	IN
		(SELECT id FROM staging_gtu WHERE import_ref= p_import_ref AND gtu_ref IS NOT NULL AND imported=true AND (import_exception='imported' OR import_exception LIKE '%.imported' OR import_exception LIKE 'imported.%'))
	;
	DELETE FROM staging_gtu WHERE import_ref= p_import_ref AND gtu_ref IS NOT NULL AND imported=true AND (import_exception='imported' OR import_exception LIKE '%.imported' OR import_exception LIKE 'imported.%' );
	return true;
end;

$$;


ALTER FUNCTION darwin2.rmca_clean_gtu_imports(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1973 (class 1255 OID 1440319)
-- Name: rmca_create_missing_people_in_staging(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_create_missing_people_in_staging(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	curs1 record;
	tmpid int;
	
BEGIN 
	DROP TABLE if EXISTs tmp_people_import_rmca;
	CREATE TEMPORARY TABLE tmp_people_import_rmca(pk int, name varchar);
	
	FOR curs1 IN SELECT DISTINCT formated_name from staging a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging'
		where a.to_import='f' 
		and people_ref is null
		and a.import_ref=p_import_ref 
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            INSERT INTO people (family_name, import_ref) VALUES (curs1.formated_name, p_import_ref) RETURNING id INTO tmpid;
            INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE
           INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
	DELETE FROM tmp_people_import_rmca;

	RAISE NOTICE  'GO identifications';
	UPDATE staging_people SET people_ref=tmp_people_import_rmca.pk FROM (SELECT pk, name FROM tmp_people_import_rmca ) AS tmp_people_import_rmca WHERE staging_people.formated_name=tmp_people_import_rmca.name 
	and referenced_relation='staging'
		
		and people_ref is null
		and record_id IN (SELECT id FROM staging WHERE staging.import_ref=p_import_ref AND to_import='f' )
		
		;




		FOR curs1 IN 
		SELECT distinct formated_name from staging a
		--inner join codes b
		--on b.referenced_relation='staging'
		--and a.id=b.record_id
		INNER JOIN identifications c
		ON c.record_id=a.id
		AND c.referenced_relation='staging'
		INNER JOIN
		staging_people d
		ON d.referenced_relation='identifications'
		AND c.id=d.record_id
		and people_ref is null
		where a.to_import='f' 

		and a.import_ref=p_import_ref
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people ident with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people ident split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            RAISE NOTICE 'INSERT %', curs1.formated_name;
                INSERT INTO people (family_name, import_ref) VALUES (curs1.formated_name, p_import_ref) RETURNING id INTO tmpid;
                INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE    
            INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
		UPDATE staging_people SET people_ref=tmp_people_import_rmca_alias.id FROM (SELECT id, family_name FROM people) AS tmp_people_import_rmca_alias 
		WHERE formated_name=tmp_people_import_rmca_alias.family_name 
		--and referenced_relation='identifications'
		
		and people_ref is null
		
		
		;
	DROP TABLE  tmp_people_import_rmca;

	--clean staging status for identifications (2018 09 05)
		UPDATE staging SET status=status - 'identifiers'::varchar  WHERE id IN
		(
		SELECT identifications.record_id from staging_people 
		INNER JOIN
		identifications

		ON staging_people.referenced_relation='identifications' 
		AND staging_people.record_id = identifications.id
		WHERE identifications.referenced_relation='staging'
		AND identifications.record_id IN  (select id FROM staging WHERE staging.import_ref=p_import_ref)
		AND staging_people.people_ref IS NOT NULL 

		)
		;
	-- clean staging status for other peoples (2018 09 05)
			UPDATE staging SET status=status - 'people'::varchar  WHERE id IN (SELECT record_id from staging_people WHERE referenced_relation='staging'  AND staging_people.people_ref IS NOT NULL AND record_id IN (SELECT id FROM staging WHERe staging.import_ref = p_import_ref)
		);



	-- TO DO : clean staging status for operators


END;
$$;


ALTER FUNCTION darwin2.rmca_create_missing_people_in_staging(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1974 (class 1255 OID 1440320)
-- Name: rmca_delete_specimens_from_import_all(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_delete_specimens_from_import_all(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
 auto_increment BOOLEAN;
 last_value INTEGER;
 last_true_value INTEGER;
BEGIN 

DELETE FROM staging_people WHERE  referenced_relation ='identifications' AND record_id NOT IN (SELECT id FROM identifications)
;
DELETE FROM staging_people WHERE referenced_relation ='staging' AND record_id NOT IN (SELECT id FROM staging);

ALTER table properties disable trigger user; 
ALTER table comments disable trigger user; 
RAISE NOTICE 'before delete properties %', (SELECT count(*) FROM properties);
DELETE FROM properties WHERE record_id IN (SELECT id FROM specimens WHERE import_ref=p_import_ref) AND referenced_relation= 'specimens';
RAISE NOTICE 'after delete properties (specimens) %', (SELECT count(*) FROM properties);


RAISE NOTICE 'before delete comments %', (SELECT count(*) FROM comments);
DELETE FROM comments WHERE record_id IN (SELECT id FROM specimens WHERE import_ref=p_import_ref) AND referenced_relation='specimens';
RAISE NOTICE 'afet delete comments (specimens) %', (SELECT count(*) FROM comments);


RAISE NOTICE 'before delete properties %', (SELECT count(*) FROM properties);
DELETE FROM properties WHERE record_id IN (SELECT id FROM staging WHERE import_ref=p_import_ref) AND referenced_relation= 'staging';
RAISE NOTICE 'after delete properties (staging) %', (SELECT count(*) FROM properties);

RAISE NOTICE 'before delete comments %', (SELECT count(*) FROM comments);
DELETE FROM comments WHERE record_id IN (SELECT id FROM staging WHERE import_ref =p_import_ref) AND referenced_relation= 'staging';
RAISE NOTICE 'after delete comments (staging) %', (SELECT count(*) FROM comments);

RAISE NOTICE 'before delete properties %', (SELECT count(*) FROM comments);
DELETE
  FROM properties where referenced_relation ='staging_info' and record_id in (SELECT id FROM staging_info WHERE staging_ref IN (SELECT id FROM staging WHERE import_ref = p_import_ref) )  AND referenced_relation= 'staging_info';
RAISE NOTICE 'after delete properties (staging_info) %', (SELECT count(*) FROM properties);

RAISE NOTICE 'before delete comments %', (SELECT count(*) FROM comments);
DELETE
  FROM comments where referenced_relation ='staging_info' and record_id in (SELECT id FROM staging_info WHERE staging_ref IN (SELECT id FROM staging WHERE import_ref = p_import_ref) )  AND referenced_relation= 'staging_info';
RAISE NOTICE 'after  delete comments (staging_info) %', (SELECT count(*) FROM comments);

ALTER table properties enable trigger user; 
ALTER table comments enable trigger user; 

RAISE NOTICE 'before delete tags %', (SELECT count(*) FROM tags);
DELETE FROM tags WHERE gtu_ref IN (SELECT id FROM gtu WHERE id in (SELECT gtu_ref FROM specimens WHERE import_ref = p_import_ref) );
RAISE NOTICE 'after delete tags %', (SELECT count(*) FROM tags);


RAISE NOTICE 'before delete staging_info %', (SELECT count(*) FROM staging_info);
DELETE FROM staging_info WHERE staging_ref IN (SELECT distinct gtu_ref FROM staging   WHERE import_ref = p_import_ref);
RAISE NOTICE 'after delete staging_info %', (SELECT count(*) FROM staging_info);

ALTER TABLE identifications DISABLE TRIGGER user ;

RAISE NOTICE 'before delete identifications (specimens) %', (SELECT count(*) FROM identifications);
DELETE FROM identifications WHERE referenced_relation='specimens' AND record_id IN (SELECT id FROM specimens WHERE import_ref = p_import_ref);

RAISE NOTICE 'after delete identifications (specimens) %', (SELECT count(*) FROM identifications);

ALTER TABLE identifications ENABLE  TRIGGER user;

RAISE NOTICE 'before delete identifications (staging) %', (SELECT count(*) FROM identifications);



DELETE FROM identifications WHERE referenced_relation='staging' AND record_id IN (SELECT id FROM staging WHERE import_ref  = p_import_ref);
RAISE NOTICE 'atfer delete identifications (staging) %', (SELECT count(*) FROM identifications);



ALTER TABLE specimens DISABLE TRIGGER trg_chk_specimencollectionallowed;

RAISE NOTICE 'update specimens nullify FKs';
UPDATE specimens SET gtu_ref=NULL, taxon_ref=NULL, ig_ref=NULL WHERE import_ref=p_import_ref;

ALTER TABLE specimens ENABLE TRIGGER trg_chk_specimencollectionallowed;

RAISE NOTICE 'update staging nullify FKs';
UPDATE staging SET gtu_ref=NULL, taxon_ref=NULL, ig_ref=NULL WHERE id IN (SELECT id FROM staging WHERE import_ref = p_import_ref) ;


RAISE NOTICE 'before delete gtu %', (SELECT count(*) FROM gtu);
--DELETE FROM gtu WHERE id NOT in (SELECT gtu_ref FROM specimens) AND id NOT in (SELECT gtu_ref FROM staging);
RAISE NOTICE 'ater delete gtu %', (SELECT count(*) FROM gtu);


RAISE NOTICE 'before delete igs %', (SELECT count(*) FROM igs);

DELETE FROM igs WHERE id  in (SELECT ig_ref FROM specimens where import_ref=p_import_ref) AND id  in (SELECT ig_ref FROM staging where import_ref  =p_import_ref);

RAISE NOTICE 'after delete igs %', (SELECT count(*) FROM igs);

RAISE NOTICE 'before delete specimens_relationshipes %', (SELECT count(*) FROM specimens_relationships);
DELETE FROM specimens_relationships WHERE unit_type='specimens' AND (specimen_ref IN (SELECT id FROM specimens WHERE import_ref=p_import_ref) OR specimen_related_ref IN (SELECT id FROM specimens WHERE import_ref=p_import_ref));
RAISE NOTICE 'after delete specimens_relationshipes %', (SELECT count(*) FROM specimens_relationships);

RAISE NOTICE 'before delete staging %', (SELECT count(*) FROM staging);
DELETE FROM staging WHERE import_ref =p_import_ref;
RAISE NOTICE 'after  delete staging %', (SELECT count(*) FROM staging);

/*
ALTER TABLE storage_parts DISABLE TRIGGER user;
RAISE NOTICE 'before delete storage_parts %', (SELECT count(*) FROM storage_parts);
DELETE FROM storage_parts where specimen_ref in (select id from specimens WHERE import_ref=p_import_ref);
RAISE NOTICE 'after delete storage_parts %', (SELECT count(*) FROM storage_parts);
--DELETE FROM collections WHERE id=p_coll_ref;
ALTER TABLE storage_parts ENABLE TRIGGER user;
*/

ALTER TABLE temporal_information DISABLE TRIGGER user;
RAISE NOTICE 'before delete temporal_information %', (SELECT count(*) FROM temporal_information);
DELETE FROM temporal_information WHERE specimen_ref IN (SELECT id FROM specimens WHERe import_ref = p_import_ref) ;
RAISE NOTICE 'after delete temporal_information %', (SELECT count(*) FROM temporal_information);
ALTER TABLE temporal_information ENABLE TRIGGER user;

ALTER TABLE specimens DISABLE TRIGGER user;
RAISE NOTICE 'before delete specimens %', (SELECT count(*) FROM specimens);
DELETE FROM specimens WHERE import_ref=p_import_ref;
RAISE NOTICE 'after delete specimens %', (SELECT count(*) FROM specimens);
--DELETE FROM collections WHERE id=p_coll_ref;
ALTER TABLE specimens ENABLE TRIGGER user;


END;
$$;


ALTER FUNCTION darwin2.rmca_delete_specimens_from_import_all(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1975 (class 1255 OID 1440321)
-- Name: rmca_delete_staging_from_import_all(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_delete_staging_from_import_all(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
 auto_increment BOOLEAN;
 last_value INTEGER;
 last_true_value INTEGER;
BEGIN 

DELETE FROM staging_people WHERE  referenced_relation ='identifications' AND record_id NOT IN (SELECT id FROM identifications)
;
DELETE FROM staging_people WHERE referenced_relation ='staging' AND record_id NOT IN (SELECT id FROM staging);

ALTER table properties disable trigger user; 
ALTER table comments disable trigger user; 

RAISE NOTICE 'before delete properties %', (SELECT count(*) FROM properties);
DELETE FROM properties WHERE record_id IN (SELECT id FROM staging WHERE import_ref=p_import_ref) 
AND referenced_relation= 'staging';
RAISE NOTICE 'after delete properties (staging) %', (SELECT count(*) FROM properties);

RAISE NOTICE 'before delete comments %', (SELECT count(*) FROM comments);
DELETE FROM comments WHERE record_id IN (SELECT id FROM staging WHERE import_ref =p_import_ref) 
AND referenced_relation= 'staging';
RAISE NOTICE 'after delete comments (staging) %', (SELECT count(*) FROM comments);

RAISE NOTICE 'before delete properties %', (SELECT count(*) FROM comments);
DELETE
  FROM properties where referenced_relation ='staging_info' and record_id 
  in (SELECT id FROM staging_info WHERE staging_ref 
	  IN (SELECT id FROM staging WHERE import_ref = p_import_ref) ) 
	  AND referenced_relation= 'staging_info';
RAISE NOTICE 'after delete properties (staging_info) %', (SELECT count(*) FROM properties);

RAISE NOTICE 'before delete comments %', (SELECT count(*) FROM comments);
DELETE
  FROM comments where referenced_relation ='staging_info' 
  and record_id in (SELECT id FROM staging_info 
					WHERE staging_ref IN (SELECT id FROM staging WHERE import_ref = p_import_ref) ) 
					AND referenced_relation= 'staging_info';
RAISE NOTICE 'after  delete comments (staging_info) %', (SELECT count(*) FROM comments);

ALTER table properties enable trigger user; 
ALTER table comments enable trigger user; 

RAISE NOTICE 'before delete identifications (staging) %', (SELECT count(*) FROM identifications);
ALTER TABLE identifications DISABLE TRIGGER user ;
DELETE FROM identifications WHERE referenced_relation='staging' AND record_id IN (SELECT id FROM staging WHERE import_ref  = p_import_ref);
RAISE NOTICE 'atfer delete identifications (staging) %', (SELECT count(*) FROM identifications);
ALTER TABLE identifications ENABLE TRIGGER user ;
ALTER TABLE staging DISABLE TRIGGER user ;
RAISE NOTICE 'update staging nullify FKs';
UPDATE staging SET gtu_ref=NULL, taxon_ref=NULL, ig_ref=NULL WHERE id IN
(SELECT id FROM staging WHERE import_ref = p_import_ref) ;

RAISE NOTICE 'before delete staging %', (SELECT count(*) FROM staging);
DELETE FROM staging WHERE import_ref =p_import_ref;
RAISE NOTICE 'after  delete staging %', (SELECT count(*) FROM staging);

ALTER TABLE staging ENABLE TRIGGER user ;

END;
$$;


ALTER FUNCTION darwin2.rmca_delete_staging_from_import_all(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1978 (class 1255 OID 1440322)
-- Name: rmca_dms_to_dd(character varying, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_dms_to_dd(coord_dms character varying, direction character varying) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
DECLARE
	deg_path integer;
	decimal_part double precision;
	sign integer;
	returned double precision;
	go boolean;
	acc varchar[];
BEGIN

	
	coord_dms:=replace(coord_dms, ',','.');
	
	go:=false;
	acc :=regexp_matches(UPPER(coord_dms), '(-?\s*[^\d]*[\d]+\.\d+)\s*°?\s*(N|S|W|E)');
        if ARRAY_LENGTH(acc,1)>0 THEN
		returned:=fct_cast_to_real(acc[1]);
		
		IF LOWER(direction)='latitude' THEN
			IF POSITION('S' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		ELSEIF LOWER(direction)='longitude' THEN
			IF POSITION('W' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		END IF;
		return returned;
        END IF;
	acc :=regexp_matches(coord_dms, '[^\d]*(\d+\.\d+)°$');
	IF ARRAY_LENGTH(acc,1)>0 THEN

		RETURN acc[1]::double precision; 
	END IF;
	returned:=fct_cast_to_real(coord_dms);
	IF returned IS NOT NULL THEN
		IF LOWER(direction)='latitude' THEN
			IF POSITION('S' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		ELSEIF LOWER(direction)='longitude' THEN
			IF POSITION('W' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		END IF;
		RETURN returned;
	END IF;
	acc :=regexp_matches(coord_dms, '[^\d]*(\d+)°');
	--raise notice '%', acc;
	if ARRAY_LENGTH(acc,1)>0 THEN
		go:=true;
		returned:=acc[1]::double precision;
		acc :=regexp_matches(coord_dms, '°\s*([\.\d]+)\s*''');
		if ARRAY_LENGTH(acc,1)>0 THEN
			IF acc[1]::double precision > 60 THEN
				RAISE EXCEPTION 'ERROR IN COORDINATES : MINUTES BIGGER THAN 60 : % ', coord_dms;
			END IF;
			decimal_part=acc[1]::double precision/60;
			returned:=returned+decimal_part;
			acc :=regexp_matches(coord_dms, '''\s*([\.\d]+)\s*"');
			if ARRAY_LENGTH(acc,1)>0 THEN
				IF acc[1]::double precision > 60 THEN
					RAISE EXCEPTION 'ERROR IN COORDINATES : SECONDS BIGGER THAN 60 : % ', coord_dms;
				END IF;
				decimal_part=acc[1]::double precision/3600;
				returned:=returned+decimal_part;
			END IF;
		END IF;
		IF LOWER(direction)='latitude' THEN
			IF POSITION('S' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		ELSEIF LOWER(direction)='longitude' THEN
			IF POSITION('W' IN  UPPER(coord_dms))>0 THEN
				returned=returned*-1;
			END IF;
		END IF;
		
	END IF;

	IF direction= 'latitude' AND ABS(returned) > 90 THEN
		RAISE EXCEPTION 'ERROR IN COORDINATES : latitude > 90 or < -90  : % ', coord_dms;
	ELSEIF direction= 'longitude' AND ABS(returned) > 180 THEN
		RAISE EXCEPTION 'ERROR IN COORDINATES : latitude > 180  or < -180  : % ', coord_dms;
	END IF;
	return returned;
END;
$_$;


ALTER FUNCTION darwin2.rmca_dms_to_dd(coord_dms character varying, direction character varying) OWNER TO darwin2;

--
-- TOC entry 8374 (class 0 OID 0)
-- Dependencies: 1978
-- Name: FUNCTION rmca_dms_to_dd(coord_dms character varying, direction character varying); Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON FUNCTION darwin2.rmca_dms_to_dd(coord_dms character varying, direction character varying) IS 'Two parameters ;
coordinates : already in decimal form (14.16) or dms (eg. 14° 14'' 45" S)
direction : "latitude" or "longitude " (recognizes the N,S,W,E sign in DMS

Note : "," ad decimal separators are converted into "."';


--
-- TOC entry 1979 (class 1255 OID 1440323)
-- Name: rmca_dms_to_text(character varying, integer, double precision, double precision, integer, double precision, character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_dms_to_text(coordinates_format character varying, degrees integer, minutes double precision, seconds double precision, direction integer, coord_decimal double precision, lat_lon character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
	returned varchar;
BEGIN
	returned='';
	IF LOWER(coordinates_format) = 'dms' THEN
		IF degrees is not null THEN
			returned:=returned||TRIM(degrees::varchar)||'° ';
			IF minutes is not null THEN
				returned:=returned||TRIM(minutes::varchar)||''' ';
				IF seconds is not null THEN
					returned:=returned||TRIM(seconds::varchar)||'" ';
				END IF;
			END IF;
			IF LOWER(lat_lon)='lat' THEN
				IF direction<0 THEN
					returned:=returned||'S';
				ELSE
					returned:=returned||'N';
				END IF;
			ELSIF LOWER(lat_lon)='lon' THEN
				IF direction<0 THEN
					returned:=returned||'W';
				ELSE
					returned:=returned||'E';
				END IF;
			END IF;
		END IF;
	ELSE 
		--implicitely DD
		IF LOWER(lat_lon)='lat' THEN
				IF direction<0 THEN
					returned:=coord_decimal::varchar||' S';
				ELSE
					returned:=coord_decimal::varchar||' N';
				END IF;
		ELSIF LOWER(lat_lon)='lon' THEN
				IF direction<0 THEN
					returned:=coord_decimal::varchar||' W';
				ELSE
					returned:=coord_decimal::varchar||' E';
				END IF;
			END IF;
	END IF;
	return TRIM(returned);
END;
$$;


ALTER FUNCTION darwin2.rmca_dms_to_text(coordinates_format character varying, degrees integer, minutes double precision, seconds double precision, direction integer, coord_decimal double precision, lat_lon character varying) OWNER TO darwin2;

--
-- TOC entry 836 (class 1255 OID 1440324)
-- Name: rmca_dmscheck_syntax(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_dmscheck_syntax(coord_dms character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	acc varchar[];
       returned boolean;
       decimal_conv double precision;
BEGIN
		
       
        IF coord_dms IS NULL THEN
		RETURN NULL;
        END IF;
         returned:=false;
         coord_dms:=replace(coord_dms, ',','.');
        decimal_conv:=fct_cast_to_real(coord_dms);
	IF decimal_conv IS NOT NULL THEN
		RETURN true;
	END IF;

	acc :=regexp_matches(UPPER(coord_dms), '(-?\s*[^\d]*[\d]+\.\d+)\s*°?\s*(N|S|W|E)');
        if ARRAY_LENGTH(acc,1)>0 THEN
		return true;
        END IF;
      
	acc :=regexp_matches(coord_dms, '[^\d]*(\d+)°');
	
	if ARRAY_LENGTH(acc,1)>0 THEN
		
		returned:=true;
		acc :=regexp_matches(coord_dms, '°\s*([\.\d]+\s*)''');
		if ARRAY_LENGTH(acc,1)>0 THEN
			returned:=true;
			acc :=regexp_matches(coord_dms, '''\s*([\.\d]+\s*)"');
			if ARRAY_LENGTH(acc,1)>0 THEN
				returned:=true;
			ELSE
				acc :=regexp_matches(coord_dms, '''\s*([\.\d]+\s*)');
				IF ARRAY_LENGTH(acc,1)>0 THEN
					returned:=false;
				END IF;
			END IF;
		ELSE 
			acc :=regexp_matches(coord_dms, '°\s*([\.\d]+\s*)');
			IF ARRAY_LENGTH(acc,1)>0 THEN
			returned:=false;
			END IF;
		END IF;
		
	END IF;
	
	return returned;
END;
$$;


ALTER FUNCTION darwin2.rmca_dmscheck_syntax(coord_dms character varying) OWNER TO darwin2;

--
-- TOC entry 1976 (class 1255 OID 1440325)
-- Name: rmca_fct_clear_gtu_date(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_fct_clear_gtu_date() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    DELETE FROM temporal_information where gtu_ref = OLD.id;
  END IF;
  RETURN OLD;
 END;
$$;


ALTER FUNCTION darwin2.rmca_fct_clear_gtu_date() OWNER TO darwin2;

--
-- TOC entry 1977 (class 1255 OID 1440326)
-- Name: rmca_fct_clear_specimen_date(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_fct_clear_specimen_date() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    DELETE FROM temporal_information where specimen_ref = OLD.id;
  END IF;
  RETURN OLD;
 END;
$$;


ALTER FUNCTION darwin2.rmca_fct_clear_specimen_date() OWNER TO darwin2;

--
-- TOC entry 1980 (class 1255 OID 1440327)
-- Name: rmca_fct_taxonomy_get_old_synonyms(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_fct_taxonomy_get_old_synonyms(integer) RETURNS TABLE(taxon_id integer, id_log bigint, referenced_relation character varying, old_record_id integer, user_ref integer, action character varying, modification_datetime timestamp without time zone, taxon_name character varying)
    LANGUAGE sql
    AS $_$ 
    
WITH A as(

SELECT group_id, referenced_relation from classification_synonymies
WHERE referenced_relation='taxonomy' 
AND
record_id=$1

),
B AS (SELECT classification_synonymies.* FROM classification_synonymies INNER JOIN a ON classification_synonymies.group_id=A.group_id and classification_synonymies.referenced_relation=A.referenced_relation),
C AS (SELECT classification_synonymies.* FROM classification_synonymies INNER JOIN b ON (classification_synonymies.record_id=b.record_id
) and classification_synonymies.referenced_relation=b.referenced_relation  ),
D AS
(
SELECT  distinct
old_value->'group_id'::varchar as group_id, 

users_tracking.id,
users_tracking.referenced_relation,
users_tracking.record_id,
user_ref,
action,
modification_date_time
  FROM users_tracking 
INNER JOIN C
 ON (old_value->'group_id'=c.group_id::varchar
or new_value->'group_id'=c.group_id::varchar
or
 old_value->'record_id'=c.record_id::varchar
 )
 or (users_tracking.referenced_relation='classification_synonymies'  and users_tracking.record_id=c.id)
  where  users_tracking.referenced_relation='classification_synonymies' 
  and (action='delete' or action='update')
),
E as 
(SELECT taxonomy.id ,


users_tracking.id,
users_tracking.referenced_relation,
users_tracking.record_id,
users_tracking.user_ref,
d.action,
users_tracking.modification_date_time,
taxonomy.name
  FROM users_tracking 
INNER JOIN D
ON 
(old_value->'group_id'=d.group_id::varchar
or new_value->'group_id'=d.group_id::varchar
)
INNER JOIN TAXONOMY 
ON (old_value->'record_id'=taxonomy.id::varchar
	OR 
	new_value->'record_id'=taxonomy.id::varchar  
   )
where  users_tracking.referenced_relation='classification_synonymies' 
 
)

SELECT distinct * FROM e;

 $_$;


ALTER FUNCTION darwin2.rmca_fct_taxonomy_get_old_synonyms(integer) OWNER TO darwin2;

--
-- TOC entry 1983 (class 1255 OID 1440328)
-- Name: rmca_fct_update_specimen_date(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_fct_update_specimen_date() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW.gtu_from_date IS NOT NULL OR NEW.gtu_to_date IS NOT NULL THEN --added ftheeten 2019 01 16 to avoid call by updates on other tables
		PERFORM * FROM temporal_information WHERE specimen_ref=NEW.id;
		IF NOT FOUND THEN
			INSERT INTO temporal_information(gtu_ref, specimen_ref, from_date_mask, from_date, to_date_mask, 
		    to_date) VALUES(NEW.gtu_ref, NEW.id, NEW.gtu_from_date_mask, NEW.gtu_from_date, NEW.gtu_to_date_mask, 
		    NEW.gtu_to_date);
		ELSE
		
			UPDATE temporal_information 
				SET gtu_Ref=NEW.gtu_ref,
					from_date_mask=NEW.gtu_from_date_mask,
					from_date=NEW.gtu_from_date,
					to_date_mask=NEW.gtu_to_date_mask,
					to_date=NEW.gtu_to_date
			WHERE specimen_ref=NEW.id;
		END IF;
	ELSE 
		DELETE FROM temporal_information WHERE specimen_ref=NEW.id;
	END IF;	
  
  RETURN NEW;
 END;
$$;


ALTER FUNCTION darwin2.rmca_fct_update_specimen_date() OWNER TO darwin2;

--
-- TOC entry 1984 (class 1255 OID 1440329)
-- Name: rmca_get_import_row(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_import_row(integer) RETURNS integer
    LANGUAGE sql SECURITY DEFINER
    AS $_$

UPDATE imports SET state = 'loading' FROM (
  SELECT * FROM (
    SELECT  * FROM imports i1 WHERE i1.state = 'to_be_loaded' AND i1.id=$1 ORDER BY i1.created_at asc, id asc OFFSET 0 --thats important
  ) i2
  WHERE pg_try_advisory_lock('imports'::regclass::integer, i2.id)
  LIMIT 1
) i3
WHERE imports.id = i3.id RETURNING i3.id;
$_$;


ALTER FUNCTION darwin2.rmca_get_import_row(integer) OWNER TO darwin2;

--
-- TOC entry 1985 (class 1255 OID 1440330)
-- Name: rmca_get_wfs_geom(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gids integer[]) RETURNS public.geometry
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sys_names varchar[];
	returned geometry;
BEGIN
	returned :=NULL::geometry;
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
			  
		IF FOUND THEN		
		   EXECUTE 'SELECT ST_UNION(ST_TRANSFORM(geom,4326)) as geom FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1);'
	INTO returned USING gids;
		
		
		END IF;
	END IF;
	RETURN returned;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gids integer[]) OWNER TO postgres;

--
-- TOC entry 1981 (class 1255 OID 1440331)
-- Name: rmca_get_wfs_geom(character varying, integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gid integer) RETURNS TABLE(id integer)
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sys_names varchar[];
BEGIN
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] != 'wfs' THEN
		
		RETURN  QUERY EXECUTE 'SELECT NULL::int';
	ELSE
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
			  
		IF FOUND THEN		
			RETURN QUERY EXECUTE 'SELECT id  from specimens where 
	ST_INTERSECTS(ST_SETSRID(ST_Point(gtu_location[1], gtu_location[0]),4326), (SELECT st_union(geom) FROM '|| table_name ||' WHERE '|| table_name ||'.gid = $1)
	)'		USING gid;
		
		ELSE
			RETURN  QUERY EXECUTE 'SELECT NULL::int';
		END IF;
	END IF;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gid integer) OWNER TO darwin2;

--
-- TOC entry 1982 (class 1255 OID 1440332)
-- Name: rmca_get_wfs_geom_subdivide(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom_subdivide(table_name character varying, gids integer[]) RETURNS SETOF public.geometry
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sys_names varchar[];
	
BEGIN
	
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
		raise notice 'SELECT ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "%" ."%" WHERE gid = ANY (%);',sys_names[1], sys_names[2], gids;	  
		IF FOUND THEN		
		  return query EXECUTE
		   'SELECT ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1);'
	 		USING gids;
		
			
		END IF;
	END IF;
	RETURN ;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom_subdivide(table_name character varying, gids integer[]) OWNER TO darwin2;

--
-- TOC entry 1987 (class 1255 OID 1440333)
-- Name: rmca_get_wfs_geom_subdivide_gtu(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu(table_name character varying, gids integer[]) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sys_names varchar[];
	
BEGIN
	
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
		--raise notice 'SELECT ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "%" ."%" WHERE gid = ANY (%);',sys_names[1], sys_names[2], gids;	  
		IF FOUND THEN		
		  return query EXECUTE
		   'with a as (SELECT		   
		   ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1))
		   select DISTINCT gtu.id FROM gtu,a WHERE ST_INTERSECTS(a.geom, gtu.geom)
		   ;'
	 		USING gids;
		
			
		END IF;
	END IF;
	RETURN ;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu(table_name character varying, gids integer[]) OWNER TO darwin2;

--
-- TOC entry 1988 (class 1255 OID 1440334)
-- Name: rmca_get_wfs_geom_subdivide_gtu_flat(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_flat(table_name character varying, gids integer[]) RETURNS integer[]
    LANGUAGE plpgsql
    AS $_$
DECLARE

   returned integer[];
	sys_names varchar[];
	
BEGIN
	
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
		--raise notice 'SELECT ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "%" ."%" WHERE gid = ANY (%);',sys_names[1], sys_names[2], gids;	  
		IF FOUND THEN		
		  EXECUTE
		   'with a as (SELECT		   
		   ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1))
		   select array_agg(DISTINCT gtu.id) FROM gtu,a WHERE ST_INTERSECTS(a.geom, gtu.geom)
		   ;'
	 		USING gids into returned;
		
			
		END IF;
	END IF;
	RETURN returned;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_flat(table_name character varying, gids integer[]) OWNER TO darwin2;

--
-- TOC entry 1989 (class 1255 OID 1440335)
-- Name: rmca_get_wfs_geom_subdivide_gtu_string(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_string(table_name character varying, gids integer[]) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE

   returned text;
	sys_names varchar[];
	
BEGIN
	returned:=NULL;
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
		--raise notice 'SELECT ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "%" ."%" WHERE gid = ANY (%);',sys_names[1], sys_names[2], gids;	  
		IF FOUND THEN		
		  EXECUTE
		   'with a as (SELECT		   
		   ST_subdivide(ST_TRANSFORM(geom,4326)) as geom FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1))
		   select string_agg(DISTINCT gtu.id::varchar,'','') FROM gtu,a WHERE ST_INTERSECTS(a.geom, gtu.geom)
		   ;'
	 		USING gids into returned;
		
			
		END IF;
	END IF;
	RETURN returned;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_string(table_name character varying, gids integer[]) OWNER TO postgres;

--
-- TOC entry 1986 (class 1255 OID 1440336)
-- Name: rmca_get_wfs_names(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_get_wfs_names(table_name character varying, gids integer[]) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $_$
DECLARE
	sys_names varchar[];
	returned varchar[];
BEGIN
	returned :=NULL::varchar[];
	SELECT regexp_split_to_array(table_name, '\.') INTO sys_names ;
	
	IF sys_names[1] = 'wfs' THEN		
		
		PERFORM  FROM pg_catalog.pg_class c
			   JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
			   WHERE  n.nspname = sys_names[1]
			   AND    c.relname = sys_names[2]
			   AND    (c.relkind = 'r'  OR relkind='v' OR relkind='m');
			  
		IF FOUND THEN		
		   EXECUTE 'SELECT array_agg(darwin2.fulltoindex(name,false)) FROM "'||sys_names[1]||'" ."'||sys_names[2]||'" WHERE gid = ANY ($1);'
	INTO returned USING gids;
		
		
		END IF;
	END IF;
	RETURN returned;
END
$_$;


ALTER FUNCTION darwin2.rmca_get_wfs_names(table_name character varying, gids integer[]) OWNER TO darwin2;

--
-- TOC entry 1992 (class 1255 OID 1440337)
-- Name: rmca_import_gtu_create_missing_people_in_staging(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	curs1 record;
	tmpid int;
	
BEGIN 
	DROP TABLE if EXISTs tmp_people_import_rmca;
	CREATE TEMPORARY TABLE tmp_people_import_rmca(pk int, name varchar);
	RAISE NOTICE 'Different peoples %', (SELECT COUNT(DISTINCT formated_name) from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where-- a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref);
	RAISE NOTICE 'linked specimens to be imported %', (SELECT COUNT(formated_name) from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where --a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref);
	FOR curs1 IN SELECT DISTINCT formated_name from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where --a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref 
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            INSERT INTO people (family_name) VALUES (curs1.formated_name) RETURNING id INTO tmpid;
            INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE
           INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
	DELETE FROM tmp_people_import_rmca;

	RAISE NOTICE  'GO identifications';
	UPDATE staging_people SET people_ref=tmp_people_import_rmca.pk FROM (SELECT pk, name FROM tmp_people_import_rmca ) AS tmp_people_import_rmca WHERE staging_people.formated_name=tmp_people_import_rmca.name 
	and referenced_relation='staging_gtu'
		
		and people_ref is null
		and record_id IN (SELECT id FROM staging_gtu WHERE staging_gtu.import_ref=p_import_ref --AND to_import='f'
		 )
		
		;




		FOR curs1 IN 
		SELECT distinct formated_name from staging_gtu a
		--inner join codes b
		--on b.referenced_relation='staging'
		--and a.id=b.record_id
		INNER JOIN identifications c
		ON c.record_id=a.id
		AND c.referenced_relation='staging_gtu'
		INNER JOIN
		staging_people d
		ON d.referenced_relation='identifications'
		AND c.id=d.record_id
		and people_ref is null
		where --a.to_import='f' 

		--and 
		a.import_ref=p_import_ref
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people ident with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people ident split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            RAISE NOTICE 'INSERT %', curs1.formated_name;
                INSERT INTO people (family_name) VALUES (curs1.formated_name) RETURNING id INTO tmpid;
                INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE    
            INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
		UPDATE staging_people SET people_ref=tmp_people_import_rmca_alias.id FROM (SELECT id, family_name FROM people) AS tmp_people_import_rmca_alias 
		WHERE formated_name=tmp_people_import_rmca_alias.family_name 
		--and referenced_relation='identifications'
		
		and people_ref is null
		
		
		;
	DROP TABLE  tmp_people_import_rmca;

END;
$$;


ALTER FUNCTION darwin2.rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1995 (class 1255 OID 1440338)
-- Name: rmca_import_gtu_force(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_import_gtu_force(p_staging_gtu_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
        curs record;
	curs2 record;
        expedition varchar;
        expedition_id integer;

        gtu_id integer;
        collection_id integer;
	returned integer;
	error_msg varchar;

BEGIN
	returned := NULL;
	error_msg :='imported';
    FOR curs IN SELECT staging_gtu.* from staging_gtu WHERE id = p_staging_gtu_id		
    LOOP
    
        raise notice 'test %', curs.sampling_code;
		
					
		SELECT collection_ref INTO collection_id FROM darwin2.imports WHERE id=curs.import_ref;
                expedition :=NULL;
                expedition_id :=NULL;
               
                gtu_id :=NULL;

                raise notice 'go';                
               
                expedition:=curs.expeditions[1];
                raise notice 'expedition : %', expedition;
                expedition_id:=NULL;
                IF expedition IS NOT NULL THEN
                    SELECT id into expedition_id FROM expeditions WHERE fulltoindex(name)= fulltoindex(expedition) ;
                    IF NOT FOUND THEN
                        raise notice 'insert %', expedition;
                        INSERT INTO expeditions (name) VALUES (expedition) RETURNING id INTO expedition_id;
                    END IF;
                END IF;
                --RAISE NOTICE 'exp_id %', expedition_id;
             
                
                INSERT INTO gtu(
                    code,
                    
                    tag_values_indexed, 
                    latitude, 
                    longitude, --lat_long_accuracy, 
					lat_long_accuracy,
                    
                     elevation, elevation_accuracy, import_ref, collection_ref,
                  
                    collector_refs,
					expedition_ref
                     )
                VALUES ( 
                curs.sampling_code, 
                
                (SELECT array_agg(tag_value) FROM staging_gtu_tag_groups WHERE staging_gtu_ref=curs.id),
                
                rmca_dms_to_dd(curs.latitude1, 'latitude'), 
                rmca_dms_to_dd(curs.longitude1, 'longitude'),
                curs.coordinates_accuracy,
                curs.sampling_elevation_start, curs.sampling_elevation_accuracy, curs.import_ref, collection_id,
               
                (SELECT array_agg(people_ref) FROM staging_people WHERE referenced_relation='staging_gtu' AND record_id=curs.id),
					expedition_id
                ) RETURNING id INTO gtu_id;

                IF curs.collectors IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'collectors', curs.collectors,'' );
                END IF;
                IF curs.expeditions IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'expeditions', curs.expeditions,'');
                END IF;
                IF curs.ig_num IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'ig_num', curs.ig_num,'' );
                END IF;
                IF curs.station_type IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'station_type', curs.station_type,'' );
                END IF;
                IF curs.sampling_field_number IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_field_number', curs.sampling_field_number,'' );
                END IF;
                IF curs.event_cluster_code IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'event_cluster_code', curs.event_cluster_code,'' );
                END IF;
                IF curs.event_order IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'event_order', curs.event_order,'' );
                END IF;
                IF curs.iso3166 IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'iso3166', curs.iso3166,'' );
                END IF;
                IF curs.iso3166_subdivision IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'iso3166_subdivision', curs.iso3166_subdivision ,'');
                END IF;
                IF curs.locality_text IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'locality_text', curs.locality_text,'' );
                END IF;
                IF curs.ecology_text IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'ecology_text', curs.ecology_text ,'');
                END IF;
                IF curs.coordinates_format IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'coordinates_format', curs.coordinates_format,'' );
                END IF;
                IF curs.latitude1 IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'latitude1', curs.latitude1,'' );
                END IF;
                IF curs.longitude1 IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'longitude1', curs.longitude1,'' );
                END IF;
                IF curs.latitude2 IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'latitude2', curs.latitude2,'' );
                END IF;
                IF curs.longitude2 IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'longitude2', curs.longitude2 ,'');
                END IF;
                IF curs.gis_type IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'gis_type', curs.gis_type,'' );
                END IF;
                IF curs.coordinates_datum IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'coordinates_datum', curs.coordinates_datum ,'');
                END IF;
                IF curs.coordinates_original IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'coordinates_original', curs.coordinates_original,'' );
                END IF;
                IF curs.coordinates_accuracy_text IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'coordinates_accuracy_text', curs.coordinates_accuracy_text,'' );
                END IF;
                IF curs.station_baseline_elevation IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'station_baseline_elevation', curs.station_baseline_elevation,'' );
                END IF;
                IF curs.station_baseline_accuracy IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'station_baseline_accuracy', curs.station_baseline_accuracy,'' );
                END IF;

                IF curs.sampling_elevation_start IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_elevation_start', curs.sampling_elevation_start,'' );
                END IF;

                IF curs.sampling_elevation_end IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_elevation_end', curs.sampling_elevation_end,'' );
                END IF;

                IF curs.sampling_elevation_accuracy IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_elevation_accuracy', curs.sampling_elevation_accuracy,'' );
                END IF;

                IF curs.original_elevation_data IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'original_elevation_data', curs.original_elevation_data,'' );
                END IF;

                IF curs.sampling_depth_start IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_depth_start', curs.sampling_depth_start,'' );
                END IF;

                IF curs.sampling_depth_end IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_depth_end', curs.sampling_depth_end,'' );
                END IF;

                IF curs.sampling_depth_accuracy IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_depth_accuracy', curs.sampling_depth_accuracy,'' );
                END IF;

                IF curs.original_depth_data IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'original_depth_data', curs.original_depth_data ,'');
                END IF;

                IF curs.sampling_method IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_method', curs.sampling_method,'' );
                END IF;

                IF curs.sampling_fixation IS NOT NULL THEN
                    INSERT INTO properties( referenced_relation, record_id, property_type, lower_value, upper_value) VALUES ('gtu', gtu_id, 'sampling_fixation', curs.sampling_fixation,'' );
                END IF;

                UPDATE properties SET referenced_relation='gtu', record_id=gtu_id WHERE referenced_relation='staging_gtu' AND record_id=curs.id;

                UPDATE comments SET referenced_relation='gtu', record_id=gtu_id WHERE referenced_relation='staging_gtu' AND record_id=curs.id;
		                BEGIN
                    INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name, tag_value) SELECT DISTINCT gtu_id, staging_gtu_tag_groups.group_name, staging_gtu_tag_groups.sub_group_name, STRING_AGG(DISTINCT staging_gtu_tag_groups.tag_value,'.')  FROM staging_gtu_tag_groups WHERE staging_gtu_ref =curs.id AND tag_value IS NOT NULL GROUP BY gtu_id, group_name,sub_group_name; 
                EXCEPTION WHEN unique_violation THEN
                                        UPDATE staging_gtu SET imported=true, import_exception='ERROR : UNICITY problem in locality tag', gtu_ref=gtu_id WHERE  staging_gtu.sampling_code=curs.sampling_code AND staging_gtu.import_ref = curs.import_ref;
                END; 	
                        --ftheeten countries 2018 09 25
                BEGIN
                    INSERT INTO tag_groups (gtu_ref, group_name, sub_group_name,  tag_value) SELECT 
                    DISTINCT gtu_id, 'administrative', 'country', array_to_string(countries, '.') FROM staging_gtu WHERE id =curs.id AND countries IS NOT NULL ;
                EXCEPTION WHEN unique_violation THEN
                    -- Do nothing, and loop to try the UPDATE again.
                    UPDATE staging_gtu SET imported=true, import_exception='ERROR : UNICITY problem in country tag', gtu_ref=gtu_id WHERE  staging_gtu.sampling_code=curs.sampling_code AND staging_gtu.import_ref = curs.import_ref;
                END; 
               UPDATE staging_gtu SET imported=true, import_exception='imported' , gtu_ref=gtu_id WHERE id=p_staging_gtu_id  ;
				
			FOR curs2 IN SELECT id, gtu_ref, collecting_date_begin, collecting_date_begin_mask, collecting_date_end, collecting_date_end_mask, collecting_time_begin, collecting_time_end    FROM staging_gtu 
					WHERE  ( collecting_date_begin IS NOT NULL OR collecting_date_begin_mask IS NOT NULL OR  
				   collecting_date_end IS NOT NULL OR   collecting_date_end_mask IS NOT NULL OR  collecting_time_begin IS NOT NULL OR 
				   collecting_time_end IS NOT NULL)  AND staging_gtu.id = curs.id
					LOOP 
						INSERT INTO temporal_information (
							 gtu_ref, from_date_mask, from_date, to_date_mask, 
							to_date) VALUES (curs2.gtu_ref, 
							CASE WHEN  UPPER(curs2.collecting_date_begin_mask) = 'DAY' THEN
							 56
							 WHEN  UPPER(curs2.collecting_date_begin_mask) = 'MONTH' THEN
							48
							 WHEN  UPPER(curs2.collecting_date_begin_mask) = 'YEAR' THEN
							32
							 WHEN  curs2.collecting_time_begin IS NOT NULL THEN
							 63

					   ELSE  
						0
						   END 
							, 

							COALESCE(curs2.collecting_date_begin,'0001-01-01 00:00:00'::timestamp without time zone) + COALESCE(curs2.collecting_time_begin,'00:00:00') , 

							CASE WHEN  UPPER(curs2.collecting_date_end_mask) = 'DAY' THEN
							 56
							 WHEN  UPPER(curs2.collecting_date_end_mask) = 'MONTH' THEN
							48
							 WHEN  UPPER(curs2.collecting_date_end_mask) = 'YEAR' THEN
							32
							 WHEN  curs2.collecting_time_end IS NOT NULL THEN
							 63

					   ELSE  
						0
						   END 

							, COALESCE(curs2.collecting_date_end, '2038-12-31 00:00:00'::timestamp without time zone) + COALESCE(curs2.collecting_time_end,'00:00:00'));
							error_msg :='imported_with_date';
							
					END LOOP;
					UPDATE staging_gtu SET imported=true, import_exception=COALESCE(import_exception||'.')||error_msg   WHERE id=curs.id ;            
			END LOOP;
		
	
        
			
           
	returned :=gtu_id;
	RETURN returned;
END;
$$;


ALTER FUNCTION darwin2.rmca_import_gtu_force(p_staging_gtu_id integer) OWNER TO darwin2;

--
-- TOC entry 1991 (class 1255 OID 1440341)
-- Name: rmca_import_gtu_in_darwin_fast(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_import_gtu_in_darwin_fast(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    curs record;
    curs2 record;
    expedition varchar;
    expedition_id integer;
    expedition_array integer[];
    gtu_id integer;
    collection_id integer; 
    userid integer;       
BEGIN
--import abcd 
select user_ref into userid from imports where id=p_import_ref ;
  PERFORM set_config('darwin.userid',userid::varchar, false) ;
    UPDATE staging_gtu set status=''::public.hstore, import_exception=NULL WHERE import_ref = p_import_ref AND imported=FALSE;
    DROP TABLE if EXISTs tmp_codes;
    DROP TABLE if EXISTs tmp_coord_errors;
   CREATE TEMPORARY TABLE tmp_codes(
	code varchar
	);
    --ftheeten 2019 01 31
   CREATE TEMPORARY TABLE tmp_coord_errors(
	code varchar
	);
    SELECT collection_ref INTO collection_id FROM darwin2.imports WHERE id=p_import_ref;

       -- ftheeten 2019 01 31
       INSERT INTO tmp_coord_errors (code) SELECT staging_gtu.sampling_code FROM staging_gtu WHERE (darwin2.rmca_dmscheck_syntax(latitude1)=false OR darwin2.rmca_dmscheck_syntax(longitude1)=false
       OR darwin2.rmca_dmscheck_syntax(latitude2)=false OR darwin2.rmca_dmscheck_syntax(longitude2)=false) AND import_ref = p_import_ref;

       UPDATE staging_gtu SET status = status ||hstore('wrong_dms_coordinate_format' , 'check_long1_lat1_long2_lat2') ,
	import_exception=COALESCE(import_exception, 'wrong_dms_coordinate_format')   WHERE darwin2.rmca_dmscheck_syntax(latitude1)=false OR darwin2.rmca_dmscheck_syntax(longitude1)=false
       OR darwin2.rmca_dmscheck_syntax(latitude2)=false OR darwin2.rmca_dmscheck_syntax(longitude2)=false AND import_ref = p_import_ref ;
    
	FOR curs IN SELECT  DISTINCT 
         min(id) as id, array_agg(id ORDER BY id) as group_id,
import_ref,  date_included, tags_merged, sensitive_information_withheld, gtu_ref, station_type, sampling_code, sampling_field_number, event_cluster_code, event_order, ig_num, ig_num_indexed, collections, collectors, expeditions, collection_refs, collector_refs, expedition_refs, iso3166, iso3166_subdivision, countries, tags, tags_indexed, locality_text, locality_text_indexed, ecology_text, ecology_text_indexed, coordinates_format, latitude1, longitude1, latitude2, longitude2, gis_type, coordinates_wkt, coordinates_datum, coordinates_proj_ref, coordinates_original, coordinates_accuracy, coordinates_accuracy_text, station_baseline_elevation, station_baseline_accuracy, sampling_elevation_start, sampling_elevation_end, sampling_elevation_accuracy, original_elevation_data, sampling_depth_start, sampling_depth_end, sampling_depth_accuracy, original_depth_data, sampling_method, sampling_fixation, imported,
MIN(pos_in_file) as pos_in_file,
import_exception,
comments,
properties
FROM
(SELECT DISTINCT staging_gtu.id as id, staging_gtu.import_ref,  staging_gtu.date_included, staging_gtu.tags_merged, staging_gtu.sensitive_information_withheld, staging_gtu.gtu_ref, staging_gtu.station_type, staging_gtu.sampling_code, staging_gtu.sampling_field_number, staging_gtu.event_cluster_code, staging_gtu.event_order, staging_gtu.ig_num, staging_gtu.ig_num_indexed, staging_gtu.collections, staging_gtu.collectors, staging_gtu.expeditions, staging_gtu.collection_refs, staging_gtu.collector_refs, staging_gtu.expedition_refs, staging_gtu.iso3166, staging_gtu.iso3166_subdivision, staging_gtu.countries, staging_gtu.tags, staging_gtu.tags_indexed, staging_gtu.locality_text, staging_gtu.locality_text_indexed, staging_gtu.ecology_text, staging_gtu.ecology_text_indexed, staging_gtu.coordinates_format, staging_gtu.latitude1, staging_gtu.longitude1, staging_gtu.latitude2, staging_gtu.longitude2, staging_gtu.gis_type, staging_gtu.coordinates_wkt, staging_gtu.coordinates_datum, staging_gtu.coordinates_proj_ref, staging_gtu.coordinates_original, staging_gtu.coordinates_accuracy, staging_gtu.coordinates_accuracy_text, staging_gtu.station_baseline_elevation, staging_gtu.station_baseline_accuracy, staging_gtu.sampling_elevation_start, staging_gtu.sampling_elevation_end, staging_gtu.sampling_elevation_accuracy, staging_gtu.original_elevation_data, staging_gtu.sampling_depth_start, staging_gtu.sampling_depth_end, staging_gtu.sampling_depth_accuracy, staging_gtu.original_depth_data, staging_gtu.sampling_method, staging_gtu.sampling_fixation, staging_gtu.imported, 
       MIN(staging_gtu.pos_in_file) as pos_in_file , staging_gtu.import_exception ,
       string_agg(DISTINCT btrim((COALESCE(c.notion_concerned, ''::character varying)::text || ' : '::text) || COALESCE(c.comment)), '|'::text ORDER BY

        btrim((COALESCE(c.notion_concerned, ''::character varying)::text || ' : '::text) || COALESCE(c.comment)), '|'::text 

        ) AS comments,
       string_agg(DISTINCT btrim(((COALESCE((properties.property_type::text || COALESCE(' - '::text || properties.applies_to::text, ''::text)) || ' : '::text, ''::text) || COALESCE(properties.lower_value, ''::character varying)::text) || COALESCE('-'::text || properties.upper_value::text, ''::text)) || COALESCE(' '::text || properties.property_unit::text, ''::text)), '|'::text

        ORDER BY btrim(((COALESCE((properties.property_type::text || COALESCE(' - '::text || properties.applies_to::text, ''::text)) || ' : '::text, ''::text) || COALESCE(properties.lower_value, ''::character varying)::text) || COALESCE('-'::text || properties.upper_value::text, ''::text)) || COALESCE(' '::text || properties.property_unit::text, ''::text)), '|'::text
        ) AS properties
   

       FROM staging_gtu 
		LEFT JOIN gtu
		ON 
			LOWER(staging_gtu.sampling_code)=LOWER(code)
			--ftheeten 2019 01 31 remove date in linking with gtu
			
		LEFT JOIN comments c ON
		 c.referenced_relation = 'staging_gtu' AND c.record_id=staging_gtu.id
		 LEFT JOIN properties ON
		 properties.referenced_relation = 'staging_gtu' AND properties.record_id=staging_gtu.id
		WHERE staging_gtu.import_ref = p_import_ref
		AND gtu.id IS NULL
		AND staging_gtu.imported=FALSE 
        GROUP BY staging_gtu.id, staging_gtu.import_ref, staging_gtu.date_included, staging_gtu.tags_merged, staging_gtu.sensitive_information_withheld, staging_gtu.gtu_ref, staging_gtu.station_type, staging_gtu.sampling_code, staging_gtu.sampling_field_number, staging_gtu.event_cluster_code, staging_gtu.event_order, staging_gtu.ig_num, staging_gtu.ig_num_indexed, staging_gtu.collections, staging_gtu.collectors, staging_gtu.expeditions, staging_gtu.collection_refs, staging_gtu.collector_refs, staging_gtu.expedition_refs, staging_gtu.iso3166, staging_gtu.iso3166_subdivision, staging_gtu.countries, staging_gtu.tags, staging_gtu.tags_indexed, staging_gtu.locality_text, staging_gtu.locality_text_indexed, staging_gtu.ecology_text, staging_gtu.ecology_text_indexed, staging_gtu.coordinates_format, staging_gtu.latitude1, staging_gtu.longitude1, staging_gtu.latitude2, staging_gtu.longitude2, staging_gtu.gis_type, staging_gtu.coordinates_wkt, staging_gtu.coordinates_datum, staging_gtu.coordinates_proj_ref, staging_gtu.coordinates_original, staging_gtu.coordinates_accuracy, staging_gtu.coordinates_accuracy_text, staging_gtu.station_baseline_elevation, staging_gtu.station_baseline_accuracy, staging_gtu.sampling_elevation_start, staging_gtu.sampling_elevation_end, staging_gtu.sampling_elevation_accuracy, staging_gtu.original_elevation_data, staging_gtu.sampling_depth_start, staging_gtu.sampling_depth_end, staging_gtu.sampling_depth_accuracy, staging_gtu.original_depth_data, staging_gtu.sampling_method, staging_gtu.sampling_fixation, staging_gtu.imported, staging_gtu.import_exception)  a 
        GROUP bY
        import_ref, date_included, tags_merged, sensitive_information_withheld, gtu_ref, station_type, sampling_code, sampling_field_number, event_cluster_code, event_order, ig_num, ig_num_indexed, collections, collectors, expeditions, collection_refs, collector_refs, expedition_refs, iso3166, iso3166_subdivision, countries, tags, tags_indexed, locality_text, locality_text_indexed, ecology_text, ecology_text_indexed, coordinates_format, latitude1, longitude1, latitude2, longitude2, gis_type, coordinates_wkt, coordinates_datum, coordinates_proj_ref, coordinates_original, coordinates_accuracy, coordinates_accuracy_text, station_baseline_elevation, station_baseline_accuracy, sampling_elevation_start, sampling_elevation_end, sampling_elevation_accuracy, original_elevation_data, sampling_depth_start, sampling_depth_end, sampling_depth_accuracy, original_depth_data, sampling_method, sampling_fixation, imported,
import_exception,
comments,
properties     
        ORDER BY sampling_code 

       
    LOOP
    
        --raise notice 'test %', curs.sampling_code;
        --raise notice 'count %',  (SELECT COUNT(*) FROM (SELECT * FROM tmp_coord_errors WHERE 
		--	tmp_coord_errors.code=curs.sampling_code) a);
        PERFORM * FROM (SELECT * FROM tmp_codes WHERE 
			tmp_codes.code=curs.sampling_code UNION SELECT * FROM tmp_coord_errors WHERE 
			tmp_coord_errors.code=curs.sampling_code) a;
			
					
        IF NOT FOUND THEN
                   expedition :=NULL;
                   expedition_id :=NULL;
                   expedition_array := ARRAY[]::integer[];
                   gtu_id :=NULL;

                --raise notice 'go';
                
                --INSERT INTO tmp_codes(code) VALUES(curs.sampling_code);
                expedition:=curs.expeditions[1];
                --raise notice 'expedition : %', expedition;
                expedition_id:=NULL;
                IF expedition IS NOT NULL THEN
                    SELECT id into expedition_id FROM expeditions WHERE fullToIndex(expeditions.name)= fullToIndex(expedition) ;
					--RAISE NOTICE 'found exp_id %', expedition_id;
                    IF expedition_id IS NULL THEN
                        --raise notice 'insert %', expedition;
                        INSERT INTO expeditions (name) VALUES (expedition) RETURNING id INTO expedition_id;
                    END IF;
                END IF;
                --RAISE NOTICE 'exp_id %', expedition_id;
                expedition_array=expedition_array|| expedition_id;
                --IMPORTATION
		SELECT rmca_import_gtu_force(curs.id) INTO gtu_id;
		UPDATE staging_gtu SET imported= TRUE, import_exception=COALESCE(import_exception||'. ','')||'duplicate_inside_file' WHERE id=ANY(array_remove(curs.group_id, curs.group_id[1]));

		--ELSE 
		--	UPDATE staging_gtu SET imported= FALSE, import_exception='duplicate_sampling_code_with_differences_in_data' WHERE id=curs.id ;
	    --END IF;
		
		
		FOR curs2 IN SELECT 
		id, gtu_ref, collecting_date_begin, collecting_date_begin_mask, collecting_date_end, collecting_date_end_mask, collecting_time_begin, collecting_time_end    FROM staging_gtu 
		WHERE( collecting_date_begin IS NOT NULL OR collecting_date_begin_mask IS NOT NULL OR  
       collecting_date_end IS NOT NULL OR   collecting_date_end_mask IS NOT NULL OR  collecting_time_begin IS NOT NULL OR 
       collecting_time_end IS NOT NULL)  
       AND 
       staging_gtu.id = ANY(array_remove(curs.group_id, curs.group_id[1]))
		LOOP 
			INSERT INTO temporal_information (
				 gtu_ref, from_date_mask, from_date, to_date_mask, 
				to_date) VALUES (

				gtu_id, 
				CASE WHEN  UPPER(curs2.collecting_date_begin_mask) = 'DAY' THEN
				 56
				 WHEN  UPPER(curs2.collecting_date_begin_mask) = 'MONTH' THEN
				48
				 WHEN  UPPER(curs2.collecting_date_begin_mask) = 'YEAR' THEN
				32
				 WHEN  curs2.collecting_time_begin IS NOT NULL THEN
				 63

		   ELSE  
			0
			   END 
				, 

				COALESCE(curs2.collecting_date_begin,'0001-01-01 00:00:00'::timestamp without time zone) + COALESCE(curs2.collecting_time_begin,'00:00:00') , 

				CASE WHEN  UPPER(curs2.collecting_date_end_mask) = 'DAY' THEN
				 56
				 WHEN  UPPER(curs2.collecting_date_end_mask) = 'MONTH' THEN
				48
				 WHEN  UPPER(curs2.collecting_date_end_mask) = 'YEAR' THEN
				32
				 WHEN  curs2.collecting_time_end IS NOT NULL THEN
				 63

		   ELSE  
			0
			   END 

				, COALESCE(curs2.collecting_date_end, '2038-12-31 00:00:00'::timestamp without time zone) + COALESCE(curs2.collecting_time_end,'00:00:00'));
				UPDATE staging_gtu SET import_exception=COALESCE(import_exception||'. ','')||'date_imported_and_merged',  gtu_ref=gtu_id , status = status ||hstore(ARRAY['duplicate_code', 'gtu_id']::varchar[], ARRAY['duplicate_in_file',gtu_id]::varchar[]) WHERE id=curs2.id;
		END LOOP;
		INSERT INTO tmp_codes(code) VALUES(curs.sampling_code);
	    ELSE
		--UPDATE staging_gtu SET imported=false, import_exception='duplicate_code_inside_file_with_other_data' WHERE id=curs2.id AND id !=ALL(curs.group_id);
	    END IF;
    END LOOP;

	
		FOR curs IN SELECT staging_gtu.id as id,
		gtu.id AS gtu_id 

from staging_gtu 
	
		LEFT JOIN gtu
		ON 
			LOWER(staging_gtu.sampling_code)=LOWER(code)

		WHERE staging_gtu.import_ref = p_import_ref 
		AND gtu.id IS NOT NULL --NOT NULL as we are looking the duplicates in DB
		AND staging_gtu.imported=FALSE 
		AND gtu.import_ref = p_import_ref
		GROUP BY

		staging_gtu.id, staging_gtu.import_ref, status, date_included, tags_merged, sensitive_information_withheld, 
		       gtu_ref, station_type, sampling_code, sampling_field_number, 
		       event_cluster_code, event_order, ig_num, ig_num_indexed, collections, 
		       collectors, expeditions, collection_refs, staging_gtu.collector_refs, staging_gtu.expedition_refs, 
		       iso3166, iso3166_subdivision, countries, tags, tags_indexed, 
		       locality_text, locality_text_indexed, ecology_text, ecology_text_indexed, 
		       coordinates_format, latitude1, longitude1, latitude2, longitude2, 
		       gis_type, coordinates_wkt, coordinates_datum, coordinates_proj_ref, 
		       coordinates_original, coordinates_accuracy, coordinates_accuracy_text, 
		       station_baseline_elevation, station_baseline_accuracy, sampling_elevation_start, 
		       sampling_elevation_end, sampling_elevation_accuracy, original_elevation_data, 
		       sampling_depth_start, sampling_depth_end, sampling_depth_accuracy, 
		       original_depth_data, collecting_date_begin, collecting_date_begin_mask, 
		       collecting_date_end, collecting_date_end_mask, collecting_time_begin, 
		       collecting_time_end, sampling_method, sampling_fixation, imported, 
		       pos_in_file, import_exception, gtu.id
	LOOP 
		UPDATE staging_gtu SET status = status ||hstore(ARRAY['code_already_in_file', 'staging_gtu_id', 'gtu_id']::varchar[], ARRAY['duplicate_with_database',curs.id ,curs.gtu_id]::varchar[]), import_exception=COALESCE(import_exception||'. ','')||'code_already_in_file_with_other_data' WHERE id=curs.id;
	END LOOP;
    
	FOR curs IN SELECT staging_gtu.*, string_agg(gtu.id::varchar,'; '::varchar ORDER BY gtu.id) as gtu_ids 

from staging_gtu 
	
		LEFT JOIN gtu
		ON 
			LOWER(staging_gtu.sampling_code)=LOWER(code)

		WHERE staging_gtu.import_ref = p_import_ref 
		AND gtu.id IS NOT NULL --NOT NULL as we are looking the duplicates in DB
		AND staging_gtu.imported=FALSE 
		AND COALESCE(gtu.import_ref,-1) != p_import_ref
		GROUP BY

		staging_gtu.id, staging_gtu.import_ref, status, date_included, tags_merged, sensitive_information_withheld, 
		       gtu_ref, station_type, sampling_code, sampling_field_number, 
		       event_cluster_code, event_order, ig_num, ig_num_indexed, collections, 
		       collectors, expeditions, collection_refs, staging_gtu.collector_refs, staging_gtu.expedition_refs, 
		       iso3166, iso3166_subdivision, countries, tags, tags_indexed, 
		       locality_text, locality_text_indexed, ecology_text, ecology_text_indexed, 
		       coordinates_format, latitude1, longitude1, latitude2, longitude2, 
		       gis_type, coordinates_wkt, coordinates_datum, coordinates_proj_ref, 
		       coordinates_original, coordinates_accuracy, coordinates_accuracy_text, 
		       station_baseline_elevation, station_baseline_accuracy, sampling_elevation_start, 
		       sampling_elevation_end, sampling_elevation_accuracy, original_elevation_data, 
		       sampling_depth_start, sampling_depth_end, sampling_depth_accuracy, 
		       original_depth_data, collecting_date_begin, collecting_date_begin_mask, 
		       collecting_date_end, collecting_date_end_mask, collecting_time_begin, 
		       collecting_time_end, sampling_method, sampling_fixation, imported, 
		       pos_in_file, import_exception
	LOOP 
		UPDATE staging_gtu SET status = status ||hstore(ARRAY['code_already_in_database', 'gtu_id']::varchar[], ARRAY['duplicate_with_database',curs.gtu_ids]::varchar[]), import_exception=COALESCE(import_exception||'. ','')||'duplicate_code' WHERE id=curs.id;
	END LOOP;

	--2019 02 28 
	UPDATE imports SET state='pending' WHERE id=p_import_ref;
	PERFORM rmca_clean_gtu_imports(p_import_ref);

END;
$$;


ALTER FUNCTION darwin2.rmca_import_gtu_in_darwin_fast(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 1993 (class 1255 OID 1440344)
-- Name: rmca_reinit_statistical_view(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_reinit_statistical_view() RETURNS integer
    LANGUAGE sql
    AS $$

TRUNCATE tv_reporting_count_all_specimens_by_collection_year_ig;
TRUNCATE tv_reporting_count_all_specimens_type_by_collection_ref_year_ig;
TRUNCATE tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig;

INSERT INTO  tv_reporting_count_all_specimens_by_collection_year_ig SELECT * FROM v_reporting_count_all_specimens_by_collection_year_ig;
INSERT INTO  tv_reporting_count_all_specimens_type_by_collection_ref_year_ig SELECT * FROM v_reporting_count_all_specimens_type_by_collection_ref_year_ig;
INSERT INTO  tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig SELECT * FROM v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig;


SELECT 0 as result;

$$;


ALTER FUNCTION darwin2.rmca_reinit_statistical_view() OWNER TO darwin2;

--
-- TOC entry 1994 (class 1255 OID 1440345)
-- Name: rmca_update_parent_code(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_update_parent_code() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN
    IF NEW.code_ai_inherit = TRUE AND NEW.code_last_value > OLD.code_last_value THEN
		PERFORM darwin2.fct_rmca_collection_update_autoincrements_hierarchy(NEW.id, NEW.code_last_value);
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.rmca_update_parent_code() OWNER TO darwin2;

--
-- TOC entry 1990 (class 1255 OID 1440346)
-- Name: rmca_wfs_get_darwin_translations(character varying, integer[]); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_wfs_get_darwin_translations(table_name character varying, gids integer[]) RETURNS TABLE(translated_name character varying, full_name character varying, lang_iso character varying, area double precision)
    LANGUAGE plpgsql
    AS $$
DECLARE
	
	tmp_geom geometry;
	i integer;
	r record;
	rs  refcursor;
BEGIN
	
	SELECT  rmca_get_wfs_geom (table_name,gids ) into tmp_geom;	
	RETURN query SELECT * FROM  rmca_wfs_translation_service(tmp_geom); 
	
	
END
    
$$;


ALTER FUNCTION darwin2.rmca_wfs_get_darwin_translations(table_name character varying, gids integer[]) OWNER TO darwin2;

--
-- TOC entry 1996 (class 1255 OID 1440347)
-- Name: rmca_wfs_translation_service(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying) RETURNS TABLE(gid integer, source_table character varying, wikidata character varying, reference_name character varying, translated_name character varying, lang_iso character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
name_pattern:=LOWER(fulltoindex(name_pattern));
RETURN query
WITH tmp as
(

 SELECT DISTINCT mv_wfs_translation.gid , mv_wfs_translation.source_table FROM wfs.mv_wfs_translation WHERE translated_name_indexed LIKE '%'||name_pattern||'%')

 SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar, mv_wfs_translation.translated_name::varchar, mv_wfs_translation.language::varchar FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table;
END;
$$;


ALTER FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying) OWNER TO darwin2;

--
-- TOC entry 1997 (class 1255 OID 1440348)
-- Name: rmca_wfs_translation_service(public.geometry); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_wfs_translation_service(src_geom public.geometry) RETURNS TABLE(translated_name character varying, full_name character varying, lang_iso character varying, area double precision)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

        
RETURN query

	WITH tmp as (
	SELECT distinct wfs_translation_geom.gid, wfs_translation_geom.source_table, st_area(geom) as area FROM wfs.wfs_translation_geom
		WHERE st_contains(ST_Buffer(src_geom,0.1), wfs_translation_geom.geom ) 

	)

	,
	tmp_2
	AS
	(
	  SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar,mv_wfs_translation.translated_name::varchar as full_name, mv_wfs_translation.translated_name::varchar, mv_wfs_translation.language::varchar , tmp.area FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table
	  
	 
	 UNION
	 SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar,mv_wfs_translation.translated_name, regexp_split_to_table(REPLACE(mv_wfs_translation.translated_name,'-',' ')::varchar,'[^[:alnum:]]') as split_word, mv_wfs_translation.language::varchar, tmp.area FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table

	 ),
tmp_3 As
(
SELECT DISTINCT tmp_2.translated_name , tmp_2.full_name, language, tmp_2.area
	FROM tmp_2
	WHERe exists (SELECT 1 FROM tags where tag_indexed=fulltoindex( tmp_2.translated_name,true)) ORDER BY area desc
)

SELECT tmp_3.translated_name , string_agg(DISTINCT tmp_3.full_name,';' ORDER BY tmp_3.full_name)::varchar as full_name , string_agg(DISTINCT tmp_3.language, ';')::varchar, max(tmp_3.area) from tmp_3 WHERE LENGTH(tmp_3.translated_name)>1
--AND INITCAP(TRIM(tmp_3.translated_name))=TRIM(tmp_3.translated_name)

 GROUP BY tmp_3.translated_name ORDER BY max(tmp_3.area) dESC;
END;
$$;


ALTER FUNCTION darwin2.rmca_wfs_translation_service(src_geom public.geometry) OWNER TO darwin2;

--
-- TOC entry 1998 (class 1255 OID 1440349)
-- Name: rmca_wfs_translation_service(character varying, public.geometry); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying, src_geom public.geometry) RETURNS TABLE(gid integer, source_table character varying, wikidata character varying, reference_name character varying, translated_name_full character varying, translated_name character varying, lang_iso character varying, count_tags bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
curs1 REFCURSOR;
rec1 RECORD;
cpt bigint;
tmp_indexed varchar;
BEGIN
CREATE TEMPORARY TABLE tmp_match_wfs(gid integer, source_table character varying, wikidata character varying, reference_name character varying, translated_name_full varchar, translated_name character varying, lang_iso character varying, count_tags  bigint);
name_pattern:=LOWER(fulltoindex(name_pattern));
IF TRIM(COALESCE(fulltoindex(name_pattern, false),''))!='' THEN
        


	WITH tmp as (
	SELECT distinct wfs_translation_geom.gid, wfs_translation_geom.source_table, wfs_translation_geom.name , st_area(		wfs_translation_geom.geom), wfs.wfs_translation_geom.geom FROM wfs.wfs_translation_geom
		inner join tmp ON st_intersects(src_geom, wfs_translation_geom.geom ) 

	)


	 /*tmp as
	(

	 SELECT DISTINCT mv_wfs_translation.gid , mv_wfs_translation.source_table FROM wfs.mv_wfs_translation WHERE translated_name_indexed LIKE '%'||name_pattern||'%')*/
	,
	tmp_2
	AS
	(
	  SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar, mv_wfs_translation.translated_name::varchar,mv_wfs_translation.translated_name::varchar, mv_wfs_translation.language::varchar FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table
	  
	 
	 UNION
	 SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar,mv_wfs_translation.translated_name, regexp_split_to_table(REPLACE(mv_wfs_translation.translated_name,'-',' ')::varchar,'[^[:alnum:]]') as split_word, mv_wfs_translation.language::varchar FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table)



	 INSERT INTO tmp_match_wfs SELECT *, NULL::bigint FROM tmp_2;


	OPEN curs1 FOR SELECT DISTINCT tmp_match_wfs.translated_name FROM tmp_match_wfs wHERE TRIM(COALESCE(tmp_match_wfs.translated_name,''))!='';
	LOOP
	    -- fetch row into the film
	      FETCH curs1 INTO rec1;
	    -- exit when no more row to fetch
	      EXIT WHEN NOT FOUND;
		--RAISE NOTICE '%', rec1.translated_name;
		tmp_indexed:=fulltoindex(rec1.translated_name);
		--RAISE NOTICE '%', '%'||tmp_indexed||'%';
		IF TRIM(COALESCE(tmp_indexed,''))!='' AND LENGTH(TRIM(COALESCE(tmp_indexed,'')))>1 THEN
			SELECT COUNT(distinct gtu_ref) INTO cpt FROM tags WHERE tag_indexed LIKE '%'||tmp_indexed||'%';
			UPDATE tmp_match_wfs SET count_tags=cpt WHERE tmp_match_wfs.translated_name=rec1.translated_name;
		END IF;
	END LOOP; 
	CLOSE curs1;
END IF;
RETURN query
SELECT * FROM tmp_match_wfs WHERE tmp_match_wfs.count_tags>0;
DROP  TABLE tmp_match_wfs;
END;
$$;


ALTER FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying, src_geom public.geometry) OWNER TO darwin2;

--
-- TOC entry 2002 (class 1255 OID 1440350)
-- Name: rmca_wfs_translation_service_2(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.rmca_wfs_translation_service_2(name_pattern character varying) RETURNS TABLE(gid integer, source_table character varying, wikidata character varying, reference_name character varying, translated_name_full character varying, translated_name character varying, lang_iso character varying, count_tags bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
curs1 REFCURSOR;
rec1 RECORD;
cpt bigint;
tmp_indexed varchar;
BEGIN
CREATE TEMPORARY TABLE tmp_match_wfs(gid integer, source_table character varying, wikidata character varying, reference_name character varying, translated_name_full varchar, translated_name character varying, lang_iso character varying, count_tags  bigint);
name_pattern:=LOWER(fulltoindex(name_pattern,true));
raise notice '%', name_pattern;
IF TRIM(COALESCE(fulltoindex(name_pattern, false),''))!='' THEN

	WITH tmp as
	(

	 SELECT DISTINCT mv_wfs_translation.gid , mv_wfs_translation.source_table FROM wfs.mv_wfs_translation WHERE translated_name_indexed LIKE '%'||name_pattern||'%')
	,
	tmp_2
	AS
	(
	  SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar, mv_wfs_translation.translated_name::varchar,mv_wfs_translation.translated_name::varchar, mv_wfs_translation.language::varchar FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table
	  
	 
	 UNION
	 SELECT DISTINCT mv_wfs_translation.gid, mv_wfs_translation.source_table::varchar, mv_wfs_translation.wikidataid::varchar, mv_wfs_translation.name::varchar,mv_wfs_translation.translated_name, regexp_split_to_table(REPLACE(mv_wfs_translation.translated_name,'-',' ')::varchar,'[^[:alnum:]]') as split_word, mv_wfs_translation.language::varchar FROM wfs.mv_wfs_translation INNER JOIN tmp ON mv_wfs_translation.gid=tmp.gid AND mv_wfs_translation.source_table=tmp.source_table)



	 INSERT INTO tmp_match_wfs SELECT *, NULL::bigint FROM tmp_2;


	OPEN curs1 FOR SELECT DISTINCT tmp_match_wfs.translated_name FROM tmp_match_wfs wHERE TRIM(COALESCE(tmp_match_wfs.translated_name,''))!='';
	LOOP
	    -- fetch row into the film
	      FETCH curs1 INTO rec1;
	    -- exit when no more row to fetch
	      EXIT WHEN NOT FOUND;
		--RAISE NOTICE '%', rec1.translated_name;
		tmp_indexed:=fulltoindex(rec1.translated_name);
		--RAISE NOTICE '%', '%'||tmp_indexed||'%';
		IF TRIM(COALESCE(tmp_indexed,''))!='' AND LENGTH(TRIM(COALESCE(tmp_indexed,'')))>1 THEN
			SELECT COUNT(distinct gtu_ref) INTO cpt FROM tags WHERE tag_indexed LIKE '%'||tmp_indexed||'%';
			UPDATE tmp_match_wfs SET count_tags=cpt WHERE tmp_match_wfs.translated_name=rec1.translated_name;
		END IF;
	END LOOP; 
	CLOSE curs1;
END IF;
RETURN query
SELECT * FROM tmp_match_wfs; -- WHERE tmp_match_wfs.count_tags>0;
DROP  TABLE tmp_match_wfs;
END;
$$;


ALTER FUNCTION darwin2.rmca_wfs_translation_service_2(name_pattern character varying) OWNER TO darwin2;

--
-- TOC entry 2003 (class 1255 OID 1440351)
-- Name: set_path(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.set_path() RETURNS integer
    LANGUAGE plpgsql
    AS $_$
BEGIN
	SET search_path TO darwin2,darwin1,public;
	RETURN 1;
	EXCEPTION WHEN invalid_schema_name THEN
			SET search_path TO oracle,"$user",public;
	RETURN NULL;
END;
$_$;


ALTER FUNCTION darwin2.set_path() OWNER TO darwin2;

--
-- TOC entry 1999 (class 1255 OID 1440352)
-- Name: sha1(bytea); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.sha1(bytea) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$
BEGIN
        RETURN ENCODE(DIGEST($1, 'sha1'), 'hex');
END;
$_$;


ALTER FUNCTION darwin2.sha1(bytea) OWNER TO darwin2;

--
-- TOC entry 2000 (class 1255 OID 1440353)
-- Name: specimens_log_id(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.specimens_log_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
		IF NEW.original_id IS NULL AND TG_OP = 'INSERT' THEN
			NEW.original_id = NEW.id;
		ELSE 
			NEW.original_id = OLD.id;
		END IF;	
		RETURN NEW;
	END;
$$;


ALTER FUNCTION darwin2.specimens_log_id() OWNER TO darwin2;

--
-- TOC entry 2005 (class 1255 OID 1440354)
-- Name: stats_collections_encoding(integer, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_collections_encoding(integer, text, text) RETURNS SETOF darwin2.stats_collections
    LANGUAGE sql IMMUTABLE
    AS $_$
select * from stats_collections_encoding($1, $2::timestamp, $3::timestamp);
$_$;


ALTER FUNCTION darwin2.stats_collections_encoding(integer, text, text) OWNER TO postgres;

--
-- TOC entry 8403 (class 0 OID 0)
-- Dependencies: 2005
-- Name: FUNCTION stats_collections_encoding(integer, text, text); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_collections_encoding(integer, text, text) IS 'Gives, by collections, from a top collection given, the encoding stats';


--
-- TOC entry 837 (class 1255 OID 1440355)
-- Name: stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone) RETURNS SETOF darwin2.stats_collections
    LANGUAGE sql IMMUTABLE
    AS $_$
WITH users_statistics AS
(
  WITH users_stats AS
  (
      SELECT DISTINCT
        collection_ref AS "Collection ID",
        (
          SELECT
        '/'
        ||
        array_to_string(
            array_agg(
                sc.name),
            '/')
        ||
        '/'
        ||
        collection_name
          FROM
            collections AS sc
            INNER JOIN
            (SELECT
               unnest(
                   string_to_array(
                       trim(
                           collection_path,
                           '/'),
                       '/')) :: BIGINT AS id) AS scc
              ON
                sc.id = scc.id
        ) AS "Collection Path",
        main_ut.action AS "Action",
        CASE WHEN
          main_s.type
          =
          'specimen'
          THEN 'non type'
        ELSE 'type' END AS "Type",
        main_s.id
      FROM users_tracking AS main_ut
        INNER JOIN specimens AS main_s
          ON main_ut.record_id = main_s.id
             AND main_ut.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
             AND main_ut.referenced_relation = 'specimens'
      WHERE
        CASE
        WHEN 0 != $1
          THEN
            collection_ref IN (SELECT id
                               FROM collections
                               WHERE id = $1 OR path LIKE '%/' || $1 || '/%')
        ELSE
          TRUE
        END
        AND main_ut.action != 'delete'
      ORDER BY "Collection Path", "Action", "Type"
  )
  SELECT DISTINCT
    users_stats."Collection Path",
    users_stats."Action",
    users_stats."Type",
    coalesce(count(*) over (partition by "Collection ID", "Action"),0) as "Action Count",
    coalesce(count(*) over (partition by "Collection ID", "Action", "Type"),0) as "Type Count",
    coalesce(new_species."New species",0) as "New species"
  FROM users_stats
    LEFT JOIN
    (
      SELECT
        s.collection_ref,
        count(DISTINCT tax.id) AS "New species"
      FROM
        (users_tracking AS ut INNER JOIN taxonomy AS tax
            ON ut.referenced_relation = 'taxonomy'
               AND ut.action = 'insert'
               AND ut.record_id = tax.id
               AND tax.level_ref > 47
               AND ut.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
          ) INNER JOIN
        (specimens AS s INNER JOIN users_tracking AS ust
            ON ust.referenced_relation = 'specimens'
               AND ust.action = 'insert'
               AND ust.record_id = s.id
               AND ust.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
          ) ON s.taxon_ref = tax.id
      GROUP BY s.collection_ref
    ) AS new_species
      ON users_stats."Collection ID" = new_species.collection_ref
)
SELECT DISTINCT
  us."Collection Path",
  coalesce (
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
      ),
      0
  ) as "Insertion count",
  coalesce(
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
      ),
      0
  ) as "Update count",
  coalesce(
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
              AND sus."Type" = 'type'
      ),
      0
  ) as "Inserted Type count",
  coalesce(
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
              AND sus."Type" = 'type'
      ),
      0
  ) as "Updated Type count",
  coalesce(us."New species", 0) as "New species"
FROM users_statistics as us
ORDER BY us."Collection Path"
$_$;


ALTER FUNCTION darwin2.stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 8405 (class 0 OID 0)
-- Dependencies: 837
-- Name: FUNCTION stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone) IS 'Gives, by collections, from a top collection given, the encoding stats';


--
-- TOC entry 2004 (class 1255 OID 1440356)
-- Name: stats_collections_encoding_optimistics(integer, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) RETURNS SETOF darwin2.stats_collections
    LANGUAGE sql IMMUTABLE
    AS $_$
select * from stats_collections_encoding_optimistics($1, $2::timestamp, $3::timestamp);
$_$;


ALTER FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) OWNER TO postgres;

--
-- TOC entry 8407 (class 0 OID 0)
-- Dependencies: 2004
-- Name: FUNCTION stats_collections_encoding_optimistics(integer, text, text); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) IS 'Gives, by collections, from a top collection given, the encoding stats - this one counts all updates that occured even if several times for the same specimen';


--
-- TOC entry 838 (class 1255 OID 1440357)
-- Name: stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) RETURNS SETOF darwin2.stats_collections
    LANGUAGE sql IMMUTABLE
    AS $_$
WITH users_statistics AS
(
  WITH users_stats AS
  (
      SELECT DISTINCT
        collection_ref      AS "Collection ID",
        (
          SELECT
        '/'
        ||
        array_to_string(
            array_agg(
                sc.name),
            '/')
        ||
        '/'
        ||
        collection_name
          FROM
            collections AS sc
            INNER JOIN
            (SELECT
               unnest(
                   string_to_array(
                       trim(
                           collection_path,
                           '/'),
                       '/')) :: BIGINT AS id) AS scc
              ON
                sc.id = scc.id
        )                   AS "Collection Path",
        main_ut.action      AS "Action",
        CASE WHEN
          main_s.type
          =
          'specimen'
          THEN 'non type'
        ELSE 'type' END     AS "Type",
        count(*)
        OVER (
          PARTITION BY
            collection_ref,
            action
        )                   AS "Action Count",
        count(*)
        OVER (
          PARTITION BY
            collection_ref,
            action,
            CASE WHEN
              main_s.type = 'specimen'
              THEN 'non type'
            ELSE 'type' END
        )                   AS "Type Count"
      FROM users_tracking AS main_ut
        INNER JOIN specimens AS main_s
          ON main_ut.record_id = main_s.id
             AND main_ut.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
             AND main_ut.referenced_relation = 'specimens'
      WHERE
        CASE
        WHEN 0 != $1
          THEN
            collection_ref IN (SELECT id
                               FROM collections
                               WHERE id = $1 OR path LIKE '%/' || $1 || '/%')
        ELSE
          TRUE
        END
        AND main_ut.action != 'delete'
      ORDER BY "Collection Path", "Action", "Type"
  )
  SELECT
    users_stats."Collection Path",
    users_stats."Action",
    users_stats."Type",
    users_stats."Action Count",
    users_stats."Type Count",
    new_species."New species"
  FROM users_stats
    LEFT JOIN
    (
      SELECT
        s.collection_ref,
        count(DISTINCT tax.id) AS "New species"
      FROM
        (users_tracking AS ut INNER JOIN taxonomy AS tax
            ON ut.referenced_relation = 'taxonomy'
               AND ut.action = 'insert'
               AND ut.record_id = tax.id
               AND tax.level_ref > 47
               AND ut.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
          ) INNER JOIN
        (specimens AS s INNER JOIN users_tracking AS ust
            ON ust.referenced_relation = 'specimens'
               AND ust.action = 'insert'
               AND ust.record_id = s.id
               AND ust.modification_date_time BETWEEN $2 :: TIMESTAMP AND $3 :: TIMESTAMP
          ) ON s.taxon_ref = tax.id
      GROUP BY s.collection_ref
    ) AS new_species
      ON users_stats."Collection ID" = new_species.collection_ref
)
SELECT DISTINCT
  us."Collection Path",
  coalesce (
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
      ),
      0
  ) as "Insertion count",
  coalesce(
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
      ),
      0
  ) as "Update count",
  coalesce(
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
              AND sus."Type" = 'type'
      ),
      0
  ) as "Inserted Type count",
  coalesce(
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
              AND sus."Type" = 'type'
      ),
      0
  ) as "Updated Type count",
  coalesce(us."New species", 0) as "New species"
FROM users_statistics as us
ORDER BY us."Collection Path"
$_$;


ALTER FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 8409 (class 0 OID 0)
-- Dependencies: 838
-- Name: FUNCTION stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) IS 'Gives, by collections, from a top collection given, the encoding stats - this one counts all updates that occured even if several times for the same specimen';


--
-- TOC entry 2008 (class 1255 OID 1440358)
-- Name: stats_encoders_encoding(integer, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) RETURNS SETOF darwin2.encoders_stats_collections
    LANGUAGE sql
    AS $_$
SELECT * FROM stats_encoders_encoding ($1, $2, $3::timestamp, $4::timestamp);
$_$;


ALTER FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) OWNER TO postgres;

--
-- TOC entry 8411 (class 0 OID 0)
-- Dependencies: 2008
-- Name: FUNCTION stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) IS 'Gives, by collections (from a top collection given) and by users (from an array of users id passed), the encoding stats';


--
-- TOC entry 839 (class 1255 OID 1440359)
-- Name: stats_encoders_encoding(integer, text, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) RETURNS SETOF darwin2.encoders_stats_collections
    LANGUAGE sql
    AS $_$
WITH users_statistics AS
(
  WITH users_stats AS
  (
      SELECT DISTINCT
        users.id            AS "User ID",
        users.formated_name AS "User",
        collection_ref      AS "Collection ID",
        (
          SELECT
        '/'
        ||
        array_to_string(
            array_agg(
                sc.name),
            '/')
        ||
        '/'
        ||
        collection_name
          FROM
            collections AS sc
            INNER JOIN
            (SELECT
               unnest(
                   string_to_array(
                       trim(
                           collection_path,
                           '/'),
                       '/')) :: BIGINT AS id) AS scc
              ON
                sc.id = scc.id
        )                   AS "Collection Path",
        main_ut.action      AS "Action",
        CASE WHEN
          main_s.type
          =
          'specimen'
          THEN 'non type'
        ELSE 'type' END     AS "Type",
        main_s.id
      FROM users
        INNER JOIN users_tracking AS main_ut
          ON users.id = main_ut.user_ref
             AND main_ut.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
             AND main_ut.referenced_relation = 'specimens'
        INNER JOIN specimens AS main_s
          ON main_ut.record_id = main_s.id
      WHERE CASE
            WHEN '0' = ( select unnest(string_to_array(trim($2,'[]'), ', ')) limit 1 )
              THEN
                TRUE
            ELSE
              users.id::text IN ( select unnest(string_to_array(trim($2,'[]'), ', ')) )
            END
            AND
            CASE
            WHEN 0 != $1
              THEN
                collection_ref IN (SELECT id
                                   FROM collections
                                   WHERE id = $1 OR path LIKE '%/' || $1 || '/%')
            ELSE
              TRUE
            END
            AND main_ut.action != 'delete'
      ORDER BY "User", "Collection Path", "Action", "Type"
  )
  SELECT DISTINCT
    users_stats."User",
    users_stats."Collection Path",
    users_stats."Action",
    users_stats."Type",
    coalesce(count(*) over (partition by users_stats."User ID", "Collection ID", "Action"),0) as "Action Count",
    coalesce(count(*) over (partition by users_stats."User ID", "Collection ID", "Action", "Type"),0) as "Type Count",
    coalesce(new_species."New species encoded by the encoder used in this collection",0) as "New species encoded by the encoder used in this collection"
  FROM users_stats
    LEFT JOIN
    (
      SELECT
        s.collection_ref,
        ut.user_ref            AS "User ID",
        count(DISTINCT tax.id) AS "New species encoded by the encoder used in this collection"
      FROM
        (users_tracking AS ut INNER JOIN taxonomy AS tax
            ON ut.referenced_relation = 'taxonomy'
               AND ut.action = 'insert'
               AND ut.record_id = tax.id
               AND tax.level_ref > 47
               AND ut.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
          ) INNER JOIN
        (specimens AS s INNER JOIN users_tracking AS ust
            ON ust.referenced_relation = 'specimens'
               AND ust.action = 'insert'
               AND ust.record_id = s.id
               AND ust.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
          ) ON s.taxon_ref = tax.id
      GROUP BY s.collection_ref, ut.user_ref
    ) AS new_species
      ON users_stats."Collection ID" = new_species.collection_ref
         AND users_stats."User ID" = new_species."User ID"
)
SELECT DISTINCT
  us."User", us."Collection Path",
  coalesce (
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
      ),0
  ) as "Insertion count",
  coalesce (
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
      ),0
  ) as "Update count",
  coalesce (
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
              AND sus."Type" = 'type'
      ),0
  ) as "Inserted Type count",
  coalesce (
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
              AND sus."Type" = 'type'
      ),0
  ) as "Update Type count",
  coalesce(us."New species encoded by the encoder used in this collection",0) as "New species encoded by the encoder used in this collection"
FROM users_statistics as us
ORDER BY us."User", us."Collection Path"
$_$;


ALTER FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 8413 (class 0 OID 0)
-- Dependencies: 839
-- Name: FUNCTION stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) IS 'Gives, by collections (from a top collection given) and by users (from an array of users id passed), the encoding stats';


--
-- TOC entry 2009 (class 1255 OID 1440360)
-- Name: stats_encoders_encoding_optimistics(integer, text, text, text); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) RETURNS SETOF darwin2.encoders_stats_collections
    LANGUAGE sql
    AS $_$
SELECT * FROM stats_encoders_encoding_optimistics ($1, $2, $3::timestamp, $4::timestamp);
$_$;


ALTER FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) OWNER TO postgres;

--
-- TOC entry 8415 (class 0 OID 0)
-- Dependencies: 2009
-- Name: FUNCTION stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) IS 'Gives, by collections (from a top collection given) and by users (from an array of users id passed), the encoding stats - this one counts all updates that occured even if several times for the same specimen';


--
-- TOC entry 840 (class 1255 OID 1440361)
-- Name: stats_encoders_encoding_optimistics(integer, text, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) RETURNS SETOF darwin2.encoders_stats_collections
    LANGUAGE sql
    AS $_$
WITH users_statistics AS
(
  WITH users_stats AS
  (
      SELECT DISTINCT
        users.id            AS "User ID",
        users.formated_name AS "User",
        collection_ref      AS "Collection ID",
        (
          SELECT
        '/'
        ||
        array_to_string(
            array_agg(
                sc.name),
            '/')
        ||
        '/'
        ||
        collection_name
          FROM
            collections AS sc
            INNER JOIN
            (SELECT
               unnest(
                   string_to_array(
                       trim(
                           collection_path,
                           '/'),
                       '/')) :: BIGINT AS id) AS scc
              ON
                sc.id = scc.id
        )                   AS "Collection Path",
        main_ut.action      AS "Action",
        CASE WHEN
          main_s.type
          =
          'specimen'
          THEN 'non type'
        ELSE 'type' END     AS "Type",
        count(*)
        OVER (
          PARTITION BY
            users.id,
            collection_ref,
            action
        )                   AS "Action Count",
        count(*)
        OVER (
          PARTITION BY
            users.id,
            collection_ref,
            action,
            CASE WHEN
              main_s.type = 'specimen'
              THEN 'non type'
            ELSE 'type' END
        )                   AS "Type Count"
      FROM users
        INNER JOIN users_tracking AS main_ut
          ON users.id = main_ut.user_ref
             AND main_ut.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
             AND main_ut.referenced_relation = 'specimens'
        INNER JOIN specimens AS main_s
          ON main_ut.record_id = main_s.id
      WHERE CASE
            WHEN '0' = ( select unnest(string_to_array(trim($2,'[]'), ', ')) limit 1 )
              THEN
                TRUE
            ELSE
              users.id::text IN ( select unnest(string_to_array(trim($2,'[]'), ', ')) )
            END
            AND
            CASE
            WHEN 0 != $1
              THEN
                collection_ref IN (SELECT id
                                   FROM collections
                                   WHERE id = $1 OR path LIKE '%/' || $1 || '/%')
            ELSE
              TRUE
            END
            AND main_ut.action != 'delete'
      ORDER BY "User", "Collection Path", "Action", "Type"
  )
  SELECT
    users_stats."User",
    users_stats."Collection Path",
    users_stats."Action",
    users_stats."Type",
    users_stats."Action Count",
    users_stats."Type Count",
    new_species."New species encoded by the encoder used in this collection"
  FROM users_stats
    LEFT JOIN
    (
      SELECT
        s.collection_ref,
        ut.user_ref            AS "User ID",
        count(DISTINCT tax.id) AS "New species encoded by the encoder used in this collection"
      FROM
        (users_tracking AS ut INNER JOIN taxonomy AS tax
            ON ut.referenced_relation = 'taxonomy'
               AND ut.action = 'insert'
               AND ut.record_id = tax.id
               AND tax.level_ref > 47
               AND ut.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
          ) INNER JOIN
        (specimens AS s INNER JOIN users_tracking AS ust
            ON ust.referenced_relation = 'specimens'
               AND ust.action = 'insert'
               AND ust.record_id = s.id
               AND ust.modification_date_time BETWEEN $3 :: TIMESTAMP AND $4 :: TIMESTAMP
          ) ON s.taxon_ref = tax.id
      GROUP BY s.collection_ref, ut.user_ref
    ) AS new_species
      ON users_stats."Collection ID" = new_species.collection_ref
         AND users_stats."User ID" = new_species."User ID"
)
SELECT DISTINCT
  us."User", us."Collection Path",
  coalesce (
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
      ),0
  ) as "Insertion count",
  coalesce(
      (
        SELECT DISTINCT "Action Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
      ),0
  ) as "Update count",
  coalesce (
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'insert'
              AND sus."Type" = 'type'
      ),0
  ) as "Inserted Type count",
  coalesce(
      (
        SELECT DISTINCT "Type Count"
        FROM users_statistics as sus
        WHERE sus."User" = us."User"
              AND sus."Collection Path" = us."Collection Path"
              AND sus."Action" = 'update'
              AND sus."Type" = 'type'
      ),0
  ) as "Update Type count",
  coalesce(us."New species encoded by the encoder used in this collection",0) as "New species encoded by the encoder used in this collection"
FROM users_statistics as us
ORDER BY us."User", us."Collection Path"
$_$;


ALTER FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 8417 (class 0 OID 0)
-- Dependencies: 840
-- Name: FUNCTION stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone); Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) IS 'Gives, by collections (from a top collection given) and by users (from an array of users id passed), the encoding stats - this one counts all updates that occured even if several times for the same specimen';


--
-- TOC entry 2006 (class 1255 OID 1440362)
-- Name: taxo_collections_count(integer); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.taxo_collections_count(integer) RETURNS TABLE(family character varying, family_cnt bigint, genus character varying, genus_cnt bigint, species character varying, species_cnt bigint)
    LANGUAGE plpgsql
    AS $_$
BEGIN
RETURN QUERY
SELECT DISTINCT r.family_name as family, cnt_fam.number_family as family_cnt, 
r.genus_name as genus, cnt_gen.number_genus as genus_cnt, 
r.species_name as species, cnt_spec.number_species as species_cnt 
FROM 
  (SELECT f.family_name, g.genus_name, s.species_name 
  FROM 
    (SELECT taxon_name, (taxon_path || taxon_ref || '/') as taxon_full_path
    FROM specimens s
    WHERE collection_ref = ANY((SELECT (array(SELECT c.id FROM collections c 
                WHERE c.id = $1
                OR c.path LIKE ('%/' || $1 || '/%'))) as collections)::int[])
    /*LIMIT 100*/) AS spec
    LEFT JOIN
      (SELECT id as id_family, name as family_name FROM taxonomy WHERE level_ref=34) AS f
      ON spec.taxon_full_path LIKE '%/' || f.id_family || '/%'
    LEFT JOIN
      (SELECT id as id_genus, name as genus_name FROM taxonomy WHERE level_ref=41) AS g
      ON spec.taxon_full_path LIKE '%/' || g.id_genus || '/%'
    LEFT JOIN
      (SELECT id as id_species, name as species_name FROM taxonomy WHERE level_ref=48) AS s
      ON spec.taxon_full_path LIKE '%/' || s.id_species || '/%') AS r
LEFT JOIN
        (SELECT count(family_name) as number_family, family_name
        FROM 
          (SELECT f.family_name, g.genus_name, s.species_name 
          FROM 
            (SELECT taxon_name, (taxon_path || taxon_ref || '/') as taxon_full_path
            FROM specimens s
            WHERE collection_ref = ANY((SELECT (array(SELECT c.id FROM collections c 
                WHERE c.id =$1
                OR c.path LIKE ('%/' || $1|| '/%'))) as collections)::int[])
            /*LIMIT 100*/) AS spec
          LEFT JOIN
            (SELECT id as id_family, name as family_name FROM taxonomy WHERE level_ref=34) AS f
          ON spec.taxon_full_path LIKE '%/' || f.id_family || '/%'
          LEFT JOIN
            (SELECT id as id_genus, name as genus_name FROM taxonomy WHERE level_ref=41) AS g
          ON spec.taxon_full_path LIKE '%/' || g.id_genus || '/%'
          LEFT JOIN
            (SELECT id as id_species, name as species_name FROM taxonomy WHERE level_ref=48) AS s
          ON spec.taxon_full_path LIKE '%/' || s.id_species || '/%') as r
        GROUP BY family_name) AS cnt_fam
ON cnt_fam.family_name = r.family_name
LEFT JOIN
        (SELECT count(genus_name) as number_genus, genus_name
        FROM 
          (SELECT f.family_name, g.genus_name, s.species_name 
          FROM 
            (SELECT taxon_name, (taxon_path || taxon_ref || '/') as taxon_full_path
            FROM specimens s
            WHERE collection_ref = ANY((SELECT (array(SELECT c.id FROM collections c 
                WHERE c.id = $1
                OR c.path LIKE ('%/' || $1 || '/%'))) as collections)::int[])
            /*LIMIT 100*/) AS spec
          LEFT JOIN
            (SELECT id as id_family, name as family_name FROM taxonomy WHERE level_ref=34) AS f
          ON spec.taxon_full_path LIKE '%/' || f.id_family || '/%'
          LEFT JOIN
            (SELECT id as id_genus, name as genus_name FROM taxonomy WHERE level_ref=41) AS g
          ON spec.taxon_full_path LIKE '%/' || g.id_genus || '/%'
          LEFT JOIN
            (SELECT id as id_species, name as species_name FROM taxonomy WHERE level_ref=48) AS s
          ON spec.taxon_full_path LIKE '%/' || s.id_species || '/%') as r
        GROUP BY genus_name) AS cnt_gen
ON cnt_gen.genus_name = r.genus_name
LEFT JOIN
        (SELECT count(species_name) as number_species, species_name
        FROM 
          (SELECT f.family_name, g.genus_name, s.species_name 
          FROM 
            (SELECT taxon_name, (taxon_path || taxon_ref || '/') as taxon_full_path
            FROM specimens s
            WHERE collection_ref = ANY((SELECT (array(SELECT c.id FROM collections c 
                WHERE c.id = $1
                OR c.path LIKE ('%/' || $1 || '/%'))) as collections)::int[])
            /*LIMIT 100*/) AS spec
          LEFT JOIN
            (SELECT id as id_family, name as family_name FROM taxonomy WHERE level_ref=34) AS f
          ON spec.taxon_full_path LIKE '%/' || f.id_family || '/%'
          LEFT JOIN
            (SELECT id as id_genus, name as genus_name FROM taxonomy WHERE level_ref=41) AS g
          ON spec.taxon_full_path LIKE '%/' || g.id_genus || '/%'
          LEFT JOIN
            (SELECT id as id_species, name as species_name FROM taxonomy WHERE level_ref=48) AS s
          ON spec.taxon_full_path LIKE '%/' || s.id_species || '/%') as r
        GROUP BY species_name) AS cnt_spec
ON cnt_spec.species_name = r.species_name
ORDER BY r.family_name, r.genus_name, r.species_name;
END
$_$;


ALTER FUNCTION darwin2.taxo_collections_count(integer) OWNER TO darwin2;

--
-- TOC entry 2007 (class 1255 OID 1440363)
-- Name: touniquestr(character varying); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.touniquestr(to_indexed character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    temp_string varchar;
BEGIN
    
    return darwin2.touniquestr(to_indexed , FALSE);
END;
$$;


ALTER FUNCTION darwin2.touniquestr(to_indexed character varying) OWNER TO darwin2;

--
-- TOC entry 2001 (class 1255 OID 1440364)
-- Name: touniquestr(character varying, boolean); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.touniquestr(to_indexed character varying, keep_space boolean) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
    temp_string varchar;
BEGIN
    -- Investigate https://launchpad.net/postgresql-unaccent
    temp_string := to_indexed;
	IF keep_space=FALSE THEN
		--first space is UTF-8 160 and second UTF-8 32
    	temp_string := TRANSLATE(temp_string, E'  ¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿×&|@"\'#(§^!{})°$*][£µ`%+=~/.,?;:\\<>ł€¶ŧ←↓→«»¢“”_-','');
    ELSE
	    --here this is the replacment of UTF8 160 (unsecable space) by UTF8 32 (normal space) 
	    temp_string := REPLACE(temp_string,E' ',E' ');
		--do not take space into account for replacment 
		temp_string := TRANSLATE(temp_string, E'¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿×&|@"\'#(§^!{})°$*][£µ`%+=~/.,?;:\\<>ł€¶ŧ←↓→«»¢“”_-','');
	END IF;
	--Remove ALL none alphanumerical char like # or '
    temp_string := lower(temp_string);
    return substring(temp_string from 0 for 40);
END;
$_$;


ALTER FUNCTION darwin2.touniquestr(to_indexed character varying, keep_space boolean) OWNER TO darwin2;

--
-- TOC entry 841 (class 1255 OID 1440365)
-- Name: trg_del_dict(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.trg_del_dict() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  oldfield RECORD;
  newfield RECORD;
BEGIN

    IF TG_OP = 'UPDATE' THEN
      oldfield = OLD;
      newfield = NEW;
    ELSE --DELETE
      oldfield = OLD;
      execute 'select * from ' || TG_TABLE_NAME::text || ' where id = -15 ' into newfield;
    END IF;
    IF TG_TABLE_NAME = 'codes' THEN
      PERFORM fct_del_in_dict('codes','code_prefix_separator', oldfield.code_prefix_separator, newfield.code_prefix_separator);
      PERFORM fct_del_in_dict('codes','code_suffix_separator', oldfield.code_suffix_separator, newfield.code_suffix_separator);
    ELSIF TG_TABLE_NAME = 'collection_maintenance' THEN
      PERFORM fct_del_in_dict('collection_maintenance','action_observation', oldfield.action_observation, newfield.action_observation);
    ELSIF TG_TABLE_NAME = 'identifications' THEN
      PERFORM fct_del_in_dict('identifications','determination_status', oldfield.determination_status, newfield.determination_status);
    ELSIF TG_TABLE_NAME = 'people' THEN
      PERFORM fct_del_in_dict('people','sub_type', oldfield.sub_type, newfield.sub_type);
      PERFORM fct_del_in_dict('people','title', oldfield.title, newfield.title);
    ELSIF TG_TABLE_NAME = 'people_addresses' THEN
      PERFORM fct_del_in_dict('people_addresses','country', oldfield.country, newfield.country);
    ELSIF TG_TABLE_NAME = 'insurances' THEN
      PERFORM fct_del_in_dict('insurances','insurance_currency', oldfield.insurance_currency, newfield.insurance_currency);
    ELSIF TG_TABLE_NAME = 'mineralogy' THEN
      PERFORM fct_del_in_dict('mineralogy','cristal_system', oldfield.cristal_system, newfield.cristal_system);
    ELSIF TG_TABLE_NAME = 'specimens' THEN
      PERFORM fct_del_in_dict('specimens','type', oldfield.type, newfield.type);
      PERFORM fct_del_in_dict('specimens','type_group', oldfield.type_group, newfield.type_group);
      PERFORM fct_del_in_dict('specimens','type_search', oldfield.type_search, newfield.type_search);
      PERFORM fct_del_in_dict('specimens','sex', oldfield.sex, newfield.sex);
      PERFORM fct_del_in_dict('specimens','state', oldfield.state, newfield.state);
      PERFORM fct_del_in_dict('specimens','stage', oldfield.stage, newfield.stage);
      PERFORM fct_del_in_dict('specimens','social_status', oldfield.social_status, newfield.social_status);
      PERFORM fct_del_in_dict('specimens','rock_form', oldfield.rock_form, newfield.rock_form);

      PERFORM fct_del_in_dict('specimens','container_type', oldfield.container_type, newfield.container_type);
      PERFORM fct_del_in_dict('specimens','sub_container_type', oldfield.sub_container_type, newfield.sub_container_type);
      PERFORM fct_del_in_dict('specimens','specimen_part', oldfield.specimen_part, newfield.specimen_part);
      PERFORM fct_del_in_dict('specimens','specimen_status', oldfield.specimen_status, newfield.specimen_status);

      PERFORM fct_del_in_dict('specimens','shelf', oldfield.shelf, newfield.shelf);
      PERFORM fct_del_in_dict('specimens','col', oldfield.col, newfield.col);
      PERFORM fct_del_in_dict('specimens','row', oldfield.row, newfield.row);
      PERFORM fct_del_in_dict('specimens','room', oldfield.room, newfield.room);
      PERFORM fct_del_in_dict('specimens','floor', oldfield.floor, newfield.floor);
      PERFORM fct_del_in_dict('specimens','building', oldfield.building, newfield.building);

      PERFORM fct_del_in_dict_dept('specimens','container_storage', oldfield.container_storage, newfield.container_storage,
        oldfield.container_type, newfield.container_type, 'container_type' );
      PERFORM fct_del_in_dict_dept('specimens','sub_container_storage', oldfield.sub_container_storage, newfield.sub_container_storage,
        oldfield.sub_container_type, newfield.sub_container_type, 'sub_container_type' );

    ELSIF TG_TABLE_NAME = 'specimens_relationships' THEN
      PERFORM fct_del_in_dict('specimens_relationships','relationship_type', oldfield.relationship_type, newfield.relationship_type);
    ELSIF TG_TABLE_NAME = 'users' THEN
      PERFORM fct_del_in_dict('users','title', oldfield.title, newfield.title);
      PERFORM fct_del_in_dict('users','sub_type', oldfield.sub_type, newfield.sub_type);
    ELSIF TG_TABLE_NAME = 'users_addresses' THEN
      PERFORM fct_del_in_dict('users_addresses','country', oldfield.country, newfield.country);

    ELSIF TG_TABLE_NAME = 'loan_status' THEN
      PERFORM fct_del_in_dict('loan_status','status', oldfield.status, newfield.status);

    ELSIF TG_TABLE_NAME = 'properties' THEN

      PERFORM fct_del_in_dict_dept('properties','property_type', oldfield.property_type, newfield.property_type,
        oldfield.referenced_relation, newfield.referenced_relation, 'referenced_relation' );
      PERFORM fct_del_in_dict_dept('properties','applies_to', oldfield.applies_to, newfield.applies_to,
        oldfield.property_type, newfield.property_type, 'property_type' );
      PERFORM fct_del_in_dict_dept('properties','property_unit', oldfield.property_unit, newfield.property_unit,
        oldfield.property_type, newfield.property_type, 'property_type' );

    ELSIF TG_TABLE_NAME = 'tag_groups' THEN
      PERFORM fct_del_in_dict_dept('tag_groups','sub_group_name', oldfield.sub_group_name, newfield.sub_group_name,
        oldfield.group_name, newfield.group_name, 'group_name' );
		
   ELSIF TG_TABLE_NAME = 'identifiers' THEN
       PERFORM fct_del_in_dict('identifiers','protocol', oldfield.protocol, newfield.protocol);
   ELSIF TG_TABLE_NAME = 'people_sub_types' THEN
       PERFORM fct_del_in_dict('people_sub_types','sub_type', oldfield.sub_type, newfield.sub_type);
   ELSIF TG_TABLE_NAME = 'bibliography' THEN
       PERFORM fct_del_in_dict('bibliography','uri_protocol', oldfield.uri_protocol, newfield.uri_protocol);
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.trg_del_dict() OWNER TO darwin2;

--
-- TOC entry 2010 (class 1255 OID 1440366)
-- Name: trg_ins_update_dict(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.trg_ins_update_dict() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  oldfield RECORD;
  newfield RECORD;
BEGIN

    IF TG_OP = 'UPDATE' THEN
      oldfield = OLD;
      newfield = NEW;
    ELSE --INSERT
      newfield = NEW;
      execute 'select * from ' || TG_TABLE_NAME::text || ' where id = -15 ' into oldfield;
    END IF;
    IF TG_TABLE_NAME = 'codes' THEN
      PERFORM fct_add_in_dict('codes','code_prefix_separator', oldfield.code_prefix_separator, newfield.code_prefix_separator);
      PERFORM fct_add_in_dict('codes','code_suffix_separator', oldfield.code_suffix_separator, newfield.code_suffix_separator);

      --ftheeten 2016 09 15
      IF newfield.referenced_relation='specimens' AND newfield.code_category='main' THEN
	UPDATE specimens SET main_code_indexed= fullToIndex(COALESCE(newfield.code_prefix,'') || COALESCE(newfield.code::text,'') || 		COALESCE(newfield.code_suffix,'') ) WHERE id=newfield.record_id;
      END IF;
    ELSIF TG_TABLE_NAME = 'collection_maintenance' THEN
      PERFORM fct_add_in_dict('collection_maintenance','action_observation', oldfield.action_observation, newfield.action_observation);
    ELSIF TG_TABLE_NAME = 'identifications' THEN
      PERFORM fct_add_in_dict('identifications','determination_status', oldfield.determination_status, newfield.determination_status);
    ELSIF TG_TABLE_NAME = 'people' THEN
      PERFORM fct_add_in_dict('people','sub_type', oldfield.sub_type, newfield.sub_type);
      PERFORM fct_add_in_dict('people','title', oldfield.title, newfield.title);
    ELSIF TG_TABLE_NAME = 'people_addresses' THEN
      PERFORM fct_add_in_dict('people_addresses','country', oldfield.country, newfield.country);
    ELSIF TG_TABLE_NAME = 'insurances' THEN
      PERFORM fct_add_in_dict('insurances','insurance_currency', oldfield.insurance_currency, newfield.insurance_currency);
    ELSIF TG_TABLE_NAME = 'mineralogy' THEN
      PERFORM fct_add_in_dict('mineralogy','cristal_system', oldfield.cristal_system, newfield.cristal_system);
    ELSIF TG_TABLE_NAME = 'specimens' THEN
      PERFORM fct_add_in_dict('specimens','type', oldfield.type, newfield.type);
      PERFORM fct_add_in_dict('specimens','type_group', oldfield.type_group, newfield.type_group);
      PERFORM fct_add_in_dict('specimens','type_search', oldfield.type_search, newfield.type_search);
      PERFORM fct_add_in_dict('specimens','sex', oldfield.sex, newfield.sex);
      PERFORM fct_add_in_dict('specimens','state', oldfield.state, newfield.state);
      PERFORM fct_add_in_dict('specimens','stage', oldfield.stage, newfield.stage);
      PERFORM fct_add_in_dict('specimens','social_status', oldfield.social_status, newfield.social_status);
      PERFORM fct_add_in_dict('specimens','rock_form', oldfield.rock_form, newfield.rock_form);

      PERFORM fct_add_in_dict('specimens','container_type', oldfield.container_type, newfield.container_type);
      PERFORM fct_add_in_dict('specimens','sub_container_type', oldfield.sub_container_type, newfield.sub_container_type);
      PERFORM fct_add_in_dict('specimens','specimen_part', oldfield.specimen_part, newfield.specimen_part);
      PERFORM fct_add_in_dict('specimens','specimen_status', oldfield.specimen_status, newfield.specimen_status);

      PERFORM fct_add_in_dict('specimens','shelf', oldfield.shelf, newfield.shelf);
      PERFORM fct_add_in_dict('specimens','col', oldfield.col, newfield.col);
      PERFORM fct_add_in_dict('specimens','row', oldfield.row, newfield.row);
      PERFORM fct_add_in_dict('specimens','room', oldfield.room, newfield.room);
      PERFORM fct_add_in_dict('specimens','floor', oldfield.floor, newfield.floor);
      PERFORM fct_add_in_dict('specimens','building', oldfield.building, newfield.building);

      PERFORM fct_add_in_dict_dept('specimens','container_storage', oldfield.container_storage, newfield.container_storage,
        oldfield.container_type, newfield.container_type);
      PERFORM fct_add_in_dict_dept('specimens','sub_container_storage', oldfield.sub_container_storage, newfield.sub_container_storage,
        oldfield.sub_container_type, newfield.sub_container_type);

    ELSIF TG_TABLE_NAME = 'specimens_relationships' THEN
      PERFORM fct_add_in_dict('specimens_relationships','relationship_type', oldfield.relationship_type, newfield.relationship_type);
    ELSIF TG_TABLE_NAME = 'users' THEN
      PERFORM fct_add_in_dict('users','title', oldfield.title, newfield.title);
      PERFORM fct_add_in_dict('users','sub_type', oldfield.sub_type, newfield.sub_type);
    ELSIF TG_TABLE_NAME = 'users_addresses' THEN
      PERFORM fct_add_in_dict('users_addresses','country', oldfield.country, newfield.country);

    ELSIF TG_TABLE_NAME = 'loan_status' THEN
      PERFORM fct_add_in_dict('loan_status','status', oldfield.status, newfield.status);

    ELSIF TG_TABLE_NAME = 'properties' THEN

      PERFORM fct_add_in_dict_dept('properties','property_type', oldfield.property_type, newfield.property_type,
        oldfield.referenced_relation, newfield.referenced_relation);
      PERFORM fct_add_in_dict_dept('properties','applies_to', oldfield.applies_to, newfield.applies_to,
        oldfield.property_type, newfield.property_type);
      PERFORM fct_add_in_dict_dept('properties','property_unit', oldfield.property_unit, newfield.property_unit,
        oldfield.property_type, newfield.property_type);

    ELSIF TG_TABLE_NAME = 'tag_groups' THEN
      PERFORM fct_add_in_dict_dept('tag_groups','sub_group_name', oldfield.sub_group_name, newfield.sub_group_name,
        oldfield.group_name, newfield.group_name);
    ELSIF TG_TABLE_NAME = 'identifiers' THEN
       PERFORM fct_add_in_dict('identifiers','protocol', oldfield.protocol, newfield.protocol);
     ELSIF TG_TABLE_NAME = 'people_sub_types' THEN
       PERFORM fct_add_in_dict('people_sub_types','sub_type', oldfield.sub_type, newfield.sub_type);
	 ELSIF TG_TABLE_NAME = 'bibliography' THEN
       PERFORM fct_add_in_dict('bibliography','uri_protocol', oldfield.uri_protocol, newfield.uri_protocol);  
    END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.trg_ins_update_dict() OWNER TO darwin2;

--
-- TOC entry 2011 (class 1255 OID 1440367)
-- Name: trg_rmca_create_uuid(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.trg_rmca_create_uuid() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN 
INSERT INTO specimens_stable_ids (specimen_ref, specimen_fk) VALUEs (NEW.id, NEW.id);
RETURN NEW;
END
$$;


ALTER FUNCTION darwin2.trg_rmca_create_uuid() OWNER TO darwin2;

--
-- TOC entry 2014 (class 1255 OID 1440368)
-- Name: trg_rmca_del_import_related(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.trg_rmca_del_import_related() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

 IF TG_OP='DELETE' OR (TG_OP='UPDATE' AND NEW.state='deleted' ) THEN
	DELETE FROM properties WHERE referenced_relation='staging_gtu' AND record_id IN (SELECT id FROM staging_gtu WHERE import_ref= OLD.id ) ;
	DELETE FROM comments WHERE referenced_relation='staging_gtu' AND record_id IN (SELECT id FROM staging_gtu WHERE import_ref= OLD.id ) ;
	DELETE FROM staging_people WHERE referenced_relation='staging_gtu' AND record_id IN (SELECT id FROM staging_gtu WHERE import_ref= OLD.id ) ;
	DELETE FROM staging_gtu_tag_groups WHERE staging_gtu_ref IN (SELECT id FROM staging_gtu WHERE import_ref= OLD.id ) ;
	DELETE FROM staging_gtu WHERE import_ref=OLD.id;
	DELETE FROM staging_catalogue WHERE import_ref=OLD.id;
	PERFORM setval('darwin2.staging_gtu_id_seq', (SELECT MAX(id)+1 FROM staging_gtu) , false);
  
 END IF;
 IF TG_OP='DELETE' THEN
  RETURN OLD;
 ELSEIF TG_OP='UPDATE' THEN
  RETURN NEW;
 END IF;
 RETURN OLD;
END;
$$;


ALTER FUNCTION darwin2.trg_rmca_del_import_related() OWNER TO darwin2;

--
-- TOC entry 2012 (class 1255 OID 1440369)
-- Name: trg_rmca_import_taxonomy_history(); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.trg_rmca_import_taxonomy_history() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN
IF TG_OP='INSERT' THEN
	NEW.history_taxonomy =hstore(NEW.specimen_taxonomy_ref::varchar ,now()::varchar);
ELSIF TG_OP='UPDATE' THEN
	IF OLD.history_taxonomy IS NULL THEN
		NEW.history_taxonomy =hstore(NEW.specimen_taxonomy_ref::varchar ,now()::varchar);
	ELSE 
		IF NEW.specimen_taxonomy_ref!= OLD.specimen_taxonomy_ref  THEN
			NEW.history_taxonomy =OLD.history_taxonomy||hstore(NEW.specimen_taxonomy_ref::varchar ,now()::varchar);
			UPDATE staging SET specimen_taxonomy_ref=NEW.specimen_taxonomy_ref WHERE taxon_ref IS NULL AND import_ref=NEW.id;
		END IF;
	END IF ;
 END IF;
 
 RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.trg_rmca_import_taxonomy_history() OWNER TO darwin2;

--
-- TOC entry 2013 (class 1255 OID 1440370)
-- Name: update_collections_code_last_val(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.update_collections_code_last_val() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE collections 
  SET code_last_value = (SELECT max(code_num) 
                         FROM codes 
                         INNER JOIN specimens 
                           ON codes.referenced_relation = 'specimens' 
                           AND codes.record_id = specimens.id
                           AND codes.code_category = 'main'
                         WHERE specimens.collection_ref = NEW.collection_ref
                           AND codes.code_num IS NOT NULL
                        )
  WHERE id = NEW.collection_ref
    AND EXISTS (SELECT 1
                FROM codes inner join specimens
                  ON codes.referenced_relation = 'specimens'
                  AND codes.record_id = specimens.id
                WHERE codes.code_category = 'main'
                  AND specimens.collection_ref = NEW.collection_ref
                  AND codes.code_num IS NOT NULL
                LIMIT 1
               );
  UPDATE collections 
  SET code_last_value = (SELECT max(code_num) 
                         FROM codes 
                         INNER JOIN specimens 
                           ON codes.referenced_relation = 'specimens' 
                           AND codes.record_id = specimens.id
                           AND codes.code_category = 'main'
                         WHERE specimens.collection_ref = OLD.collection_ref
                           AND codes.code_num IS NOT NULL
                        )
  WHERE id = OLD.collection_ref
    AND EXISTS (SELECT 1
                FROM codes inner join specimens
                  ON codes.referenced_relation = 'specimens'
                  AND codes.record_id = specimens.id
                WHERE codes.code_category = 'main'
                  AND specimens.collection_ref = OLD.collection_ref
                  AND codes.code_num IS NOT NULL
                LIMIT 1
               );
  IF NOT FOUND THEN
    UPDATE collections
    SET code_last_value = DEFAULT
    WHERE id = OLD.collection_ref;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION darwin2.update_collections_code_last_val() OWNER TO postgres;

--
-- TOC entry 842 (class 1255 OID 1440371)
-- Name: update_collections_code_last_val_after_spec_del(); Type: FUNCTION; Schema: darwin2; Owner: postgres
--

CREATE FUNCTION darwin2.update_collections_code_last_val_after_spec_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE collections 
  SET code_last_value = (SELECT max(code_num) 
                         FROM codes 
                         INNER JOIN specimens 
                           ON codes.referenced_relation = 'specimens' 
                           AND codes.record_id = specimens.id
                           AND codes.code_category = 'main'
                         WHERE specimens.collection_ref = OLD.collection_ref
                           AND specimens.id != OLD.id
                           AND codes.code_num IS NOT NULL
                        )
  WHERE id = OLD.collection_ref
    AND EXISTS (SELECT 1
                FROM codes inner join specimens
                  ON codes.referenced_relation = 'specimens'
                  AND codes.record_id = specimens.id
                WHERE codes.code_category = 'main'
                  AND specimens.collection_ref = OLD.collection_ref
                  AND specimens.id != OLD.id
                  AND codes.code_num IS NOT NULL
                LIMIT 1
               );
  IF NOT FOUND THEN
    UPDATE collections
    SET code_last_value = DEFAULT
    WHERE id = OLD.collection_ref;
  END IF;
  RETURN NULL;
END;
$$;


ALTER FUNCTION darwin2.update_collections_code_last_val_after_spec_del() OWNER TO postgres;

--
-- TOC entry 2016 (class 1255 OID 1440372)
-- Name: upsert(character varying, public.hstore); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.upsert(tablename character varying, keyvalues public.hstore) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
  insert_stmt varchar := 'insert into ' || quote_ident(tableName) || ' (';
  update_stmt varchar := 'update ' || quote_ident(tableName) || ' SET (';
  where_stmt varchar := ' WHERE ';
  iloop integer := 0;
  recUnqFields RECORD;
  newhst RECORD;
  lowerKeyValues hstore;
begin
  for newhst in (select * from each(keyValues)) loop
    if iloop = 0 then
      lowerKeyValues := hstore(lower(newhst.key), newhst.value);
    else
      lowerKeyValues := lowerKeyValues || hstore(lower(newhst.key), newhst.value);
    end if;
    iloop := iloop +1;
  end loop;
  iloop := 0;
  insert_stmt := insert_stmt || array_to_string(akeys(lowerKeyValues), ',') || ') VALUES (' || chr(39) || array_to_string(avals(lowerKeyValues), (chr(39) || ',' || chr(39))::text) || chr(39) ||')';
  begin
    execute insert_stmt;
  exception
    when unique_violation then
      begin
        for recUnqFields IN (select x.vals as field, column_default as defaultVal 
                             from (select regexp_split_to_table(trim(substr(indexdef,strpos(indexdef, '(')+1),')'),', ') as vals 
                                   from pg_indexes 
                                   where tablename = tableName 
                                     and strpos(indexdef, 'UNIQUE') > 0 
                                     and indexname = (select conname 
                                                      from pg_class inner join pg_constraint on pg_class.oid = pg_constraint.conrelid and relname = tableName and contype = 'p'
                                                     )
                                  ) as x 
                             inner join 
                             information_schema.columns on x.vals = column_name and table_name = tableName) loop
          if iloop > 0 then
            where_stmt := where_stmt || ' AND ';
          end if;
          iloop := iloop + 1;
          if lowerKeyValues ? recUnqFields.field then
            where_stmt := where_stmt || quote_ident(recUnqFields.field) || ' = ' || quote_literal(lowerKeyValues -> recUnqFields.field);
          else
            where_stmt := where_stmt || quote_ident(recUnqFields.field) || ' = ' || quote_literal(coalesce(recUnqFields.defaultVal,''));
          end if;
        end loop;
        update_stmt := update_stmt || array_to_string(akeys(lowerKeyValues), ',') || ') = (' || chr(39) || array_to_string(avals(lowerKeyValues), (chr(39) || ',' || chr(39))::text) || chr(39) ||')' || where_stmt;
        execute update_stmt;
        return 'updated';
      exception
        when others then
          return 'SQL error is: '::text || SQLERRM;
      end;
      return 'SQL error is: '::text || SQLERRM;
  end;
  return 'inserted';
end;
$$;


ALTER FUNCTION darwin2.upsert(tablename character varying, keyvalues public.hstore) OWNER TO darwin2;

--
-- TOC entry 2017 (class 1255 OID 1440373)
-- Name: urlencode(text); Type: FUNCTION; Schema: darwin2; Owner: darwin2
--

CREATE FUNCTION darwin2.urlencode(in_str text, OUT _result text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    _i      int4;
    _temp   varchar;
    _ascii  int4;
BEGIN
    _result = '';
    FOR _i IN 1 .. length(in_str) LOOP
        _temp := substr(in_str, _i, 1);
        IF _temp ~ '[0-9a-zA-Z:/@._?#-]+' THEN
            _result := _result || _temp;
        ELSE
            _ascii := ascii(_temp);
            IF _ascii > x'07ff'::int4 THEN
                RAISE EXCEPTION 'Won''t deal with 3 (or more) byte sequences. (%)', in_str;
            END IF;
            IF _ascii <= x'07f'::int4 THEN
                _temp := '%'||to_hex(_ascii);
            ELSE
                _temp := '%'||to_hex((_ascii & x'03f'::int4)+x'80'::int4);
                _ascii := _ascii >> 6;
                _temp := '%'||to_hex((_ascii & x'01f'::int4)+x'c0'::int4)
                            ||_temp;
            END IF;
            _result := _result || upper(_temp);
        END IF;
    END LOOP;
    RETURN ;
END;
$$;


ALTER FUNCTION darwin2.urlencode(in_str text, OUT _result text) OWNER TO darwin2;

--
-- TOC entry 2015 (class 1255 OID 1440374)
-- Name: fct_rmca_worms_webservice(character varying); Type: FUNCTION; Schema: data_cleaning; Owner: darwin2
--

CREATE FUNCTION data_cleaning.fct_rmca_worms_webservice(canonical_name character varying) RETURNS TABLE(worms_aphia_id integer, worms_scientific_name character varying, worms_author character varying, worms_status character varying, worms_accepted_name character varying, worms_accepted_author character varying, worms_phylum character varying, worms_class character varying, worms_order character varying, worms_family character varying, worms_genus character varying, worms_species character varying, worms_subspecies character varying, worms_is_marine character varying, worms_is_brackish character varying, worms_is_freshwater character varying, worms_is_terrestrial character varying, worms_lsid character varying, worms_url character varying)
    LANGUAGE plpgsql
    AS $_$
DECLARE
      returned RECORD;
      url_worms1 varchar;
      url_worms2 varchar;
      url_worms3 varchar;
      worms_id varchar;
      json_worms_tmp varchar;
      json_worms jsonb;
      json_worms_tmp3 varchar;
      json_worms3 jsonb;
      json_taxa jsonb;
      rank varchar;
      scientific_name varchar;
      
	worms_scientific_name varchar;
	worms_author varchar;
	worms_status varchar;
					
	worms_accepted_name varchar;
	worms_accepted_author varchar;
	worms_phylum varchar;
	worms_class varchar;
	worms_order varchar;
	worms_family varchar;
	worms_genus varchar;
	worms_species varchar;
	worms_subspecies varchar;
	worms_is_marine varchar;
	worms_is_brackish varchar;
	worms_is_freshwater varchar;
	worms_is_terrestrial varchar;										
	worms_lsid varchar;
	worms_url varchar;
BEGIN
     canonical_name:=darwin2.fct_encode_uri(canonical_name);
     url_worms1:='http://www.marinespecies.org/rest/AphiaIDByName/';
     url_worms2:='http://www.marinespecies.org/rest/AphiaRecordByAphiaID/';
     url_worms3:='http://www.marinespecies.org/rest/AphiaClassificationByAphiaID/';
      
     url_worms1:=url_worms1||convert(canonical_name::bytea, 'utf-8', 'latin-1');
     raise notice '%',url_worms1;
     worms_id=fct_rmca_py_webservice(url_worms1);   
    
     --worms_id:=(regexp_matches(worms_id,'b''(\d*)'''))[1];
--raise notice '%', worms_id;
     IF LENGTH(worms_id)> 0 THEN
	url_worms2:=url_worms2||worms_id;
	url_worms3:=url_worms3||worms_id;
	--raise notice '%',url_worms2;
	json_worms_tmp:=fct_rmca_py_webservice(url_worms2);

	--raise notice '%',json_worms_tmp;
	--raise notice '%',(regexp_matches(json_worms_tmp,'^b''(.*)''$'))[1];
	IF LENGTH(json_worms_tmp)>0 THEN
		--json_worms:=(regexp_matches(json_worms_tmp,'^b''(.*)''$'))[1]::jsonb;
		json_worms:=json_worms_tmp::jsonb;
		worms_scientific_name:=TRIM('"' FROM (json_worms->'scientificname')::varchar);
		
		worms_author := TRIM('"' FROM (json_worms->'authority')::varchar);
		worms_status :=TRIM('"' FROM (json_worms->'status')::varchar);
		worms_accepted_name:=TRIM('"' FROM (json_worms->'valid_name')::varchar);
		worms_accepted_author :=TRIM('"' FROM (json_worms->'valid_authority')::varchar);
		json_worms_tmp3=fct_rmca_py_webservice(url_worms3);
		
		IF LENGTH(json_worms_tmp3)>0 THEN
			json_worms3:=json_worms_tmp3::jsonb;
			
			json_taxa:=json_worms3;
			WHILE json_taxa ? 'child' LOOP
				IF json_taxa ? 'rank' THEN
					
					rank := LOWER(TRIM('"' FROM (json_taxa->'rank')::varchar));					
					scientific_name := TRIM('"' FROM (json_taxa->'scientificname')::varchar);
					
					IF rank  = 'phylum' THEN
					
						worms_phylum := scientific_name;
						
					ELSIF rank = 'class' THEN
						worms_class := scientific_name;
					ELSIF rank = 'order' THEN
						worms_order := scientific_name;
					ELSIF rank = 'family' THEN
						worms_family := scientific_name;
					ELSIF rank = 'genus' THEN
						worms_genus := scientific_name;
					ELSIF rank = 'species' THEN
						worms_species := scientific_name;
					ELSIF rank = 'species' THEN
						worms_subspecies := scientific_name;
					END IF; 
				END IF;
				json_taxa:= json_taxa->'child';
			END LOOP;
		END IF;
		
		
		IF  (json_worms->'isMarine') ='1' THEN
			worms_is_marine:=TRUE ;
			
		END IF;
		IF json_worms->'isBrackish'='1' THEN
			worms_is_brackish:=TRUE ;
		END IF;
		IF json_worms->'isFreshwater'='1' THEN
			worms_is_freshwater:=TRUE ;
		END IF;
		IF json_worms->'isTerrestrial'='1' THEN
			worms_is_terrestrial:=TRUE ;
		END IF;									
		worms_lsid :=TRIM('"' FROM (json_worms->'lsid')::varchar);
		worms_url :=TRIM('"' FROM (json_worms->'url')::varchar);
	END IF;
     ELSE worms_id:=NULL;
     END IF;

     RETURN QUERY SELECT worms_id::int,worms_scientific_name as worms_scientific_name  ,
	worms_author  as  worms_author,
	worms_status as worms_status  ,
					
	worms_accepted_name  as worms_accepted_name ,
	worms_accepted_author as worms_accepted_author  ,
	worms_phylum as worms_phylum,
	worms_class as worms_class,
	worms_order  as worms_order,
	worms_family  as worms_family,
	worms_genus as worms_genus,
	worms_species as worms_species,
	worms_subspecies as worms_subspecies,
	worms_is_marine  as worms_is_marine,
	worms_is_brackish as  worms_is_brackish ,
	worms_is_freshwater as worms_is_freshwater,
	worms_is_terrestrial as worms_is_terrestrial,									
	worms_lsid as  worms_lsid,
	worms_url as worms_url
	;
END;
$_$;


ALTER FUNCTION data_cleaning.fct_rmca_worms_webservice(canonical_name character varying) OWNER TO darwin2;

--
-- TOC entry 2018 (class 1255 OID 1440375)
-- Name: call_geoname_service(character varying, character varying, character varying, text); Type: FUNCTION; Schema: georeferencing; Owner: darwin2
--

CREATE FUNCTION georeferencing.call_geoname_service(name character varying, feature_code character varying, iso_code character varying, url text DEFAULT 'http://api.geonames.org/searchJSON?username=ftheeten&q='::character varying) RETURNS TABLE(geoname_result json, geo_name_id text, toponym_name text, name_in_geoname text, longitude text, latitude text)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN query
SELECT *,
CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'geonameId' FROM json_array_elements(a.geoname_result->'geonames') obj
	LIMIT 1)
ELSE 
	NULL
	end
	as geo_name_id,
	
	CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'toponymName' FROM json_array_elements(a.geoname_result->'geonames') obj
	LIMIT 1)
ELSE 
	NULL
	end
	as toponym_name,
	
	CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'name' FROM json_array_elements(a.geoname_result->'geonames') obj
	LIMIT 1)
ELSE 
	NULL
	end
	as name_in_geoname,
	
	
	CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'lng' FROM json_array_elements(a.geoname_result->'geonames') obj
	LIMIT 1)
ELSE 
	NULL
	end
	as longitude
	,
	
	CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'lat' FROM json_array_elements(a.geoname_result->'geonames') obj
	LIMIT 1)
ELSE 
	NULL
	end
	as latitude
	
FROM 

(SELECT  fct_rmca_py_webservice(url||
					   
					   urlencode(name)
					  ||'&featureCode='||urlencode(feature_code)
					  ||'&country='||urlencode(iso_code)
									 )::json as geoname_result
 
) a;
END ;
$$;


ALTER FUNCTION georeferencing.call_geoname_service(name character varying, feature_code character varying, iso_code character varying, url text) OWNER TO darwin2;

--
-- TOC entry 2020 (class 1255 OID 1440376)
-- Name: call_nominatim_service(character varying, character varying, character varying, text[], text, text); Type: FUNCTION; Schema: georeferencing; Owner: postgres
--

CREATE FUNCTION georeferencing.call_nominatim_service(name character varying, iso_code character varying, p_osm_class character varying DEFAULT NULL::character varying, p_osm_types text[] DEFAULT NULL::text[], url text DEFAULT 'https://nominatim.openstreetmap.org/search?q='::character varying, url_osm text DEFAULT 'https://lz4.overpass-api.de/api/interpreter?data='::character varying) RETURNS TABLE(nominatim_result json, osm_result json, osm_id text, name_in_nominatim text, name_in_overpass text, osm_category text, osm_type text, longitude text, latitude text, geom public.geometry, geom_type text, wikidata_id text, date_query timestamp with time zone, url_nominatim character varying, url_osm_overpass character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE

	srv_query varchar;
	length integer;
	tmp jsonb;
	elems jsonb;
	osm_id text;
	r_geom geometry;
	r_name text;
	r_categories text;
	r_type text;
	lat text;
	long text;
	r_type_geom text;
	r_osm_type text;
	query_osm text;
	tmp_osm jsonb;
	tags_osm jsonb;
	r_wikidata_id text;
	iterator jsonb;
	osm_matched_name varchar;
	rec record;
	curs REFCURSOR;
	
BEGIN
--EX: SELECT * FROM georeferencing.call_nominatim_service('Meuse', 'BE', NULL, array['water', 'river']);

DROP  table if exists tmp_tbl ;
CREATE TEMPORARY TABLE IF NOT EXISTS 
tmp_tbl
(nominatim_result json, osm_result json, osm_id text, name_in_nominatim text, name_in_overpass text, osm_category text, osm_type text, longitude text, latitude text, geom geometry, geom_type text, wikidata_id text, date_query timestamp with time zone, url_nominatim varchar,
url_osm_overpass varchar)
ON COMMIT DROP;

tmp=NULL;
tmp_osm=NULL;
tags_osm=NULL;
r_geom=NULL;
 --osm_ids=NULL;
 r_name=NULL;
 r_categories=NULL;
 r_type=NULL;
lat=NULL;
long :=NULL;
r_type_geom:=NULL;
r_wikidata_id=NULL;
srv_query:=url||
					   
					   urlencode(name)					  
					  ||'&countrycodes='||urlencode(iso_code)
					  ||'&format=geojson&limit=100&polygon_geojson=1';
					  

RAISE NOTICE '%', srv_query;
PERFORM pg_sleep('1.2');
SELECT  fct_rmca_py_webservice(srv_query) into tmp; 
RAISE NOTICE '%', tmp;
IF p_osm_class IS NULL AND p_osm_types IS NULL THEN
	OPEN curs FOR SELECT obj FROM jsonb_array_elements(tmp->'features') obj WHERE 
	(obj->'properties'->>'osm_type'='relation' OR obj->'properties'->>'osm_type'='way')
	;
ELSIF p_osm_class IS NOT NULL AND p_osm_types IS NULL THEN
--raise notice '2';
	OPEN curs FOR SELECT obj FROM jsonb_array_elements(tmp->'features') obj WHERE obj->'properties'->>'category'= p_osm_class
	AND (obj->'properties'->>'osm_type'='relation' OR obj->'properties'->>'osm_type'='way')
	;
ELSIF p_osm_class IS  NULL AND p_osm_types IS NOT NULL THEN
	--raise notice '3 % ', tmp;
	OPEN curs FOR SELECT obj FROM jsonb_array_elements(tmp->'features') obj  
	WHERE array_position( p_osm_types, obj->'properties'->>'type')>0   AND
	 (obj->'properties'->>'osm_type'='relation' OR obj->'properties'->>'osm_type'='way')
	 ;

	 
ELSIF p_osm_class IS  NOT NULL AND p_osm_types IS NOT NULL THEN
	OPEN curs FOR SELECT obj FROM jsonb_array_elements(tmp->'features') obj WHERE  obj->'properties'->>'category'= p_osm_class AND  array_position( p_osm_types, obj->'properties'->>'type')>0    AND (obj->'properties'->>'osm_type'='relation' OR obj->'properties'->>'osm_type'='way')
	 ;
END IF;

LOOP FETCH curs INTO iterator;
--raise notice '!!!!!!!';
 EXIT WHEN NOT FOUND;
SELECT osm_response, a.wikidata_id , matched_name, a.url INTO tags_osm, r_wikidata_id , osm_matched_name , query_osm FROM georeferencing.call_overpass_id(iterator->'properties'->>'osm_id', name) a;
		
		SELECT public.st_geomfromgeojson((iterator->'geometry')::text) INTO r_geom;
		r_type_geom=st_geometrytype(r_geom);
		If LOWER(r_type_geom)='st_linestring' THEN
			lat=st_y(ST_Line_Interpolate_Point(r_geom, 0.5));
			long=st_x(ST_Line_Interpolate_Point(r_geom, 0.5));
		ELSE
			lat=st_y(st_centroid(r_geom));
			long=st_x(st_centroid(r_geom));
		END IF;
		INSERT INTO tmp_tbl (nominatim_result,osm_id, name_in_nominatim, name_in_overpass, osm_category, osm_type,
wikidata_id,
 longitude,
 latitude,
 geom,
 geom_type
		, date_query, url_nominatim, url_osm_overpass
		 ) VALUES(tmp,iterator->'properties'->>'osm_id'
		,iterator->'properties'->>'display_name'
		, osm_matched_name
		,iterator->'properties'->>'category'
		,iterator->'properties'->>'osm_type',
		r_wikidata_id
		,
 long,
 lat,
 st_setsrid(r_geom,4326),
 r_type_geom,
		current_timestamp,
		srv_query,
		query_osm
		);
		
END LOOP;


RETURN query
SELECT * FROM tmp_tbl;


END ;
$$;


ALTER FUNCTION georeferencing.call_nominatim_service(name character varying, iso_code character varying, p_osm_class character varying, p_osm_types text[], url text, url_osm text) OWNER TO postgres;

--
-- TOC entry 2019 (class 1255 OID 1440378)
-- Name: call_overpass_id(character varying, character varying, character varying, text); Type: FUNCTION; Schema: georeferencing; Owner: darwin2
--

CREATE FUNCTION georeferencing.call_overpass_id(p_osm_id character varying, p_name character varying, p_osm_type character varying DEFAULT 'relation'::character varying, p_url_osm text DEFAULT 'https://lz4.overpass-api.de/api/interpreter?data='::character varying) RETURNS TABLE(osm_id character varying, osm_response json, wikidata_id character varying, matched_name character varying, longitude character varying, latitude character varying, geom public.geometry, geom_type character varying, date_query timestamp with time zone, url character varying)
    LANGUAGE plpgsql
    AS $_$

DECLARE
query_osm text;
tmp_osm jsonb;

r_id varchar;
r_json json;
r_wikidata_id varchar;
r_name varchar;
r_longitude varchar;
r_latitude varchar;
r_geom geometry;
r_geom_type varchar;
iterator jsonb;
 counter integer;
BEGIN 

r_id =NULL;
r_json  =NULL;
r_wikidata_id  =NULL;
r_name =NULL;
r_longitude =NULL;
r_latitude =NULL;
r_geom  =NULL;
r_geom_type =NULL;
query_osm=p_url_osm||urlencode('[out:json];'||p_osm_type||'('||p_osm_id||'); (._;>;);out;');
SELECT  fct_rmca_py_webservice(query_osm) into tmp_osm; 
--raise notice '%', tmp_osm;
IF tmp_osm is not null then
 r_id=p_osm_id;
 FOR iterator IN SELECT obj FROM jsonb_array_elements(tmp_osm->'elements') obj WHERE  obj->'tags' ? 'wikidata'  LOOP
	
	PERFORM  FROM jsonb_each_text(iterator->'tags') obj2 WHERE 
	key LIKE 'name:%' AND LOWER(value) ~ ('(^|\s)'||LOWER(p_name)||'($|\s)')::varchar ;   
	IF FOUND THEN
		r_wikidata_id=iterator->'tags'->>'wikidata';
		r_name=iterator->'tags'->>'name';
		r_json=iterator->'tags';
	END IF;
 END LOOP;

END IF;

RETURN QUERY 
SELECT 
r_id,
r_json ,
r_wikidata_id ,
r_name,
r_longitude ,
r_latitude ,
r_geom ,
r_geom_type ,
current_timestamp,
query_osm::varchar
;
END;
$_$;


ALTER FUNCTION georeferencing.call_overpass_id(p_osm_id character varying, p_name character varying, p_osm_type character varying, p_url_osm text) OWNER TO darwin2;

--
-- TOC entry 1938 (class 1255 OID 1440379)
-- Name: fct_fill_georef_table(); Type: FUNCTION; Schema: georeferencing; Owner: darwin2
--

CREATE FUNCTION georeferencing.fct_fill_georef_table() RETURNS boolean
    LANGUAGE plpgsql
    AS $$

BEGIN
insert into georeferencing.mapping_geonames
(gtu_refs, group_name, sub_group_name, name, country,  count_specimens)
SELECT array_agg(gtu_ref), group_name, sub_group_name, tag_value, country,
sum(count_specimens)
FROM v_gtu_tags_no_coords_and_country
GROUP BY group_name, sub_group_name, tag_value, country ;
UPDATE georeferencing.mapping_geonames set country_iso =iso FROM georeferencing.t_gtu_country_to_geoname_iso
WHERE mapping_geonames.country=t_gtu_country_to_geoname_iso.country;

UPDATE georeferencing.mapping_geonames SET geoname_type=geonames_type_mapped
FROM georeferencing.mv_mapping_darwin_categories_to_nima_tv
WHERE mapping_geonames.sub_group_name=mv_mapping_darwin_categories_to_nima_tv.sub_group_name;
return true;
END
$$;


ALTER FUNCTION georeferencing.fct_fill_georef_table() OWNER TO darwin2;

--
-- TOC entry 2021 (class 1255 OID 1440380)
-- Name: map_country_to_geonames_iso(integer, integer, text); Type: FUNCTION; Schema: georeferencing; Owner: darwin2
--

CREATE FUNCTION georeferencing.map_country_to_geonames_iso(p_limit integer DEFAULT 10, p_offset integer DEFAULT 0, url text DEFAULT 'http://api.geonames.org/searchJSON?username=ftheeten&q='::character varying) RETURNS TABLE(country text, specimen_count bigint, geoname_result json, iso text)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN query
SELECT *,
CASE WHEN (a.geoname_result->>'totalResultsCount')::int> 0

THEN
	(SELECT obj->>'countryCode' FROM json_array_elements(a.geoname_result->'geonames') obj WHERE obj->>'fcode'='PCLI'
	LIMIT 1)
ELSE 
	NULL
	end
FROM 

(SELECT *, fct_rmca_py_webservice(url||
					   
					   urlencode(fulltoindex(v_gtu_countries_in_gtu.country, true)
					  ))::json as geoname_result
 FROM v_gtu_countries_in_gtu ORDER BY v_gtu_countries_in_gtu.country limit p_limit offset p_offset
) a;
END ;
$$;


ALTER FUNCTION georeferencing.map_country_to_geonames_iso(p_limit integer, p_offset integer, url text) OWNER TO darwin2;

--
-- TOC entry 843 (class 1255 OID 1440381)
-- Name: fct_bedic_adjust_distinct_tags(); Type: FUNCTION; Schema: ipt; Owner: darwin2
--

CREATE FUNCTION ipt.fct_bedic_adjust_distinct_tags() RETURNS TABLE(nb_inserted integer, nb_deleted integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
nb_deleted int;
nb_inserted int;
BEGIN
    
WITH insert_tag_group_distinct_cte AS (INSERT INTO tag_group_distinct (sub_group_name_indexed,group_name_indexed,tag_value) 
SELECT sub_group_name_indexed, group_name_indexed, tag_value FROM tag_groups 
WHERE tag_group_distinct_ref IS NULL
AND jsonb_build_object('tag1', sub_group_name_indexed, 'tag2', group_name_indexed, 'value', tag_value) NOT
IN (SELECT jsonb_build_object('tag1', sub_group_name_indexed, 'tag2', group_name_indexed, 'value', tag_value)   FROM  tag_group_distinct )
group by sub_group_name_indexed, group_name_indexed, tag_value
order by sub_group_name_indexed, group_name_indexed, tag_value

RETURNING id,sub_group_name_indexed, group_name_indexed, tag_value),
upd as (
UPDATE tag_groups set tag_group_distinct_ref=cte.id FROM insert_tag_group_distinct_cte cte
WHERE tag_groups.sub_group_name_indexed=cte.sub_group_name_indexed AND 
tag_groups.group_name_indexed=cte.group_name_indexed AND  tag_groups.tag_value=cte.tag_value)
SELECT COUNT(insert_tag_group_distinct_cte.id) INTO nb_inserted FROM  insert_tag_group_distinct_cte;
 
WITH  deleted AS (
DELETE FROM tag_group_distinct WHERE id NOT IN (SELECT DISTINCT tag_group_distinct_ref FROM tag_groups)
RETURNING *
) SELECT COUNT(*) INTO nb_deleted FROM deleted
;
RETURN QUERY SELECT
      nb_inserted,
      nb_deleted;
END;
$$;


ALTER FUNCTION ipt.fct_bedic_adjust_distinct_tags() OWNER TO darwin2;

--
-- TOC entry 2028 (class 1255 OID 1440382)
-- Name: fct_bedic_refresh_materialized_views(); Type: FUNCTION; Schema: ipt; Owner: postgres
--

CREATE FUNCTION ipt.fct_bedic_refresh_materialized_views() RETURNS void
    LANGUAGE sql
    AS $$
 
 REFRESH MATERIALIZED VIEW ipt.mv_eml;
 REFRESH MATERIALIZED VIEW ipt.mv_properties;
 REFRESH MATERIALIZED VIEW ipt.mv_spatial;
 REFRESH MATERIALIZED VIEW ipt.mv_tag_to_country;
 REFRESH materialized view ipt.mv_tag_to_locations;
 REFRESH MATERIALIZED VIEW ipt.mv_Darwin_ipt_rbins;
 REFRESH MATERIALIZED VIEW ipt.mv_Darwin_ipt_rbins_mof;
$$;


ALTER FUNCTION ipt.fct_bedic_refresh_materialized_views() OWNER TO postgres;

--
-- TOC entry 2022 (class 1255 OID 1440383)
-- Name: fct_cetaf_rdf(integer); Type: FUNCTION; Schema: naturalheritage; Owner: postgres
--

CREATE FUNCTION naturalheritage.fct_cetaf_rdf(integer) RETURNS TABLE(original_id bigint, "SpecimenID" character varying, "RefUri" character varying, "ObjectUri" character varying, "Title" character varying, "TitleDescription" character varying, collector character varying, "CollectionDate" character varying, "ObjectURI" character varying, "BaseOfRecord" character varying, "InstitutionCode" character varying, "CollectionName" character varying, "CatalogNumber" character varying, "Family" character varying, "Genus" character varying, "SpecificEpithet" character varying, "HigherGeography" character varying, "Country" character varying, "Locality" character varying, "ScientificName" character varying, created timestamp without time zone, modified timestamp without time zone)
    LANGUAGE sql
    AS $_$
WITH tmp 

AS(
 SELECT DISTINCT specimens.original_id, 
 specimens.code_display AS "SpecimenID", 
 'http://darwinweb.africamuseum.be/darwin/rdf/'::text || specimens.code_display AS "RefUri", 'https://darwin.naturalsciences.be/search/view/original_id/'::text || specimens.original_id AS "ObjectUri",
  btrim((specimens.code_display || ' '::text) || array_to_string(array_agg(DISTINCT specimens.taxon_name), ', '::text)) AS "Title", btrim((specimens.code_display || ' '::text) || array_to_string(array_agg(DISTINCT specimens.taxon_name), ', '::text)) AS "TitleDescription", btrim(array_to_string(( SELECT array_agg(people.formated_name) AS array_agg
           FROM people
          WHERE people.id = ANY (specimens.collector_ids)), ', '::text)) AS collector, 
         TRIM( NULLIF(fct_mask_date(from_date, from_date_mask), 'xxxx-xx-xx'::text) || COALESCE('-'::text || NULLIF(fct_mask_date(to_date, to_date_mask), 'xxxx-xx-xx'::text),'')) 

          AS "CollectionDate", 
          'https://darwin.naturalsciences.be/search/view/original_id/'::text || specimens.original_id AS "ObjectURI", 'specimens'::text AS "BaseOfRecord", 'RMCA'::text AS "InstitutionCode", specimens.collection_name AS "CollectionName", specimens.code_display AS "CatalogNumber", getspecificparentforlevel('taxonomy'::character varying, (array_agg(DISTINCT specimens.taxon_path))[1], 'family'::character varying) AS "Family", getspecificparentforlevel('taxonomy'::character varying, (array_agg(DISTINCT specimens.taxon_path))[1], 'genus'::character varying) AS "Genus", getspecificparentforlevel('taxonomy'::character varying, (array_agg(DISTINCT specimens.taxon_path))[1], '"species"'::character varying) AS "SpecificEpithet", NULL::character varying AS "HigherGeography", specimens.gtu_country_tag_value AS "Country", btrim(replace(replace(specimens.gtu_others_tag_value::text, specimens.gtu_country_tag_value::text, ''::text), ';'::text, '; '::text)) AS "Locality",
   taxon_name as "ScientificName" FROM ( 

   SELECT original_id, specimens.id, (((COALESCE(codes.code_prefix, ''::character varying)::text || COALESCE(codes.code_prefix_separator, ''::character varying)::text) || COALESCE(codes.code, ''::character varying)::text) || COALESCE(codes.code_suffix_separator, ''::character varying)::text) || COALESCE(codes.code_suffix, ''::character varying)::text AS code_display, codes.full_code_indexed, specimens.taxon_path, specimens.taxon_ref, specimens.collection_ref, specimens.collection_name, specimens.gtu_country_tag_indexed, specimens.gtu_country_tag_value, specimens.gtu_others_tag_indexed AS localities_indexed, specimens.gtu_others_tag_value, specimens.taxon_name, specimens.spec_coll_ids AS collector_ids, specimens.spec_don_sel_ids AS donator_ids, from_date, from_date_mask, to_date, to_date_mask, specimens.type AS coll_type, 
                CASE
                    WHEN specimens.gtu_country_tag_indexed IS NOT NULL THEN unnest(specimens.gtu_country_tag_indexed)
                    ELSE NULL::character varying
                END AS country_unnest,  specimens.gtu_location[0] AS latitude, specimens.gtu_location[1] AS longitude, identifications.notion_date AS identification_date, identifications.notion_date_mask AS identification_date_mask, COALESCE(fct_mask_date(identifications.notion_date, identifications.notion_date_mask) || ': '::text, ''::text) || specimens.taxon_name::text AS history, specimens.gtu_ref, tags.group_type, tags.sub_group_type, tags.tag, (((tags.group_type::text || '-'::text) || tags.sub_group_type::text) || ':'::text) || tags.tag::text AS tag_locality
           FROM specimens
      LEFT JOIN codes ON codes.referenced_relation::text = 'specimens'::text AND codes.code_category::text = 'main'::text AND specimens.id = codes.record_id
  
   LEFT JOIN temporal_information ON specimens.id=specimen_ref
   LEFT JOIN identifications ON identifications.referenced_relation::text = 'specimens'::text AND specimens.id = identifications.record_id AND identifications.notion_concerned::text = 'taxonomy'::text
   LEFT JOIN tags ON specimens.gtu_ref = tags.gtu_ref   

  ORDER BY tags.group_ref 


  ) 


  specimens

  where original_id=$1
  GROUP BY original_id , specimens.code_display, specimens.collection_name, specimens.gtu_country_tag_value, specimens.gtu_others_tag_value, from_date, from_date_mask, to_date, to_date_mask, specimens.coll_type, specimens.longitude, specimens.latitude, specimens.collector_ids, specimens.donator_ids,  taxon_name

),
created as (select  record_id, array_agg(users_tracking.modification_date_time order by modification_date_time) as log_time from users_tracking INNER JOIN tmp ON users_tracking.referenced_relation::text = 'specimens'::text AND record_id=$1 
 group by record_id )


select tmp.*,  log_time[1] as created,  log_time[array_length(log_time,1)] as modified
from tmp
left join created
on record_id=original_id
$_$;


ALTER FUNCTION naturalheritage.fct_cetaf_rdf(integer) OWNER TO postgres;

--
-- TOC entry 2023 (class 1255 OID 1440385)
-- Name: addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.addgeometrycolumn(character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 2024 (class 1255 OID 1440386)
-- Name: addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;

BEGIN

	-- Verify geometry type
	IF ( NOT ( (new_type = 'GEOMETRY') OR
			   (new_type = 'GEOMETRYCOLLECTION') OR
			   (new_type = 'POINT') OR
			   (new_type = 'MULTIPOINT') OR
			   (new_type = 'POLYGON') OR
			   (new_type = 'MULTIPOLYGON') OR
			   (new_type = 'LINESTRING') OR
			   (new_type = 'MULTILINESTRING') OR
			   (new_type = 'GEOMETRYCOLLECTIONM') OR
			   (new_type = 'POINTM') OR
			   (new_type = 'MULTIPOINTM') OR
			   (new_type = 'POLYGONM') OR
			   (new_type = 'MULTIPOLYGONM') OR
			   (new_type = 'LINESTRINGM') OR
			   (new_type = 'MULTILINESTRINGM') OR
			   (new_type = 'CIRCULARSTRING') OR
			   (new_type = 'CIRCULARSTRINGM') OR
			   (new_type = 'COMPOUNDCURVE') OR
			   (new_type = 'COMPOUNDCURVEM') OR
			   (new_type = 'CURVEPOLYGON') OR
			   (new_type = 'CURVEPOLYGONM') OR
			   (new_type = 'MULTICURVE') OR
			   (new_type = 'MULTICURVEM') OR
			   (new_type = 'MULTISURFACE') OR
			   (new_type = 'MULTISURFACEM')) )
	THEN
		RAISE EXCEPTION 'Invalid type name - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM,
	or GEOMETRYCOLLECTIONM';
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <0) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumns() - invalid SRID';
			RETURN 'fail';
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD COLUMN ' || quote_ident(column_name) ||
		' geometry ';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Delete stale record in geometry_columns (if any)
	sql := 'DELETE FROM geometry_columns WHERE
		f_table_catalog = ' || quote_literal('') ||
		' AND f_table_schema = ' ||
		quote_literal(real_schema) ||
		' AND f_table_name = ' || quote_literal(table_name) ||
		' AND f_geometry_column = ' || quote_literal(column_name);
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add record in geometry_columns
	sql := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema,f_table_name,' ||
										  'f_geometry_column,coord_dimension,srid,type)' ||
		' VALUES (' ||
		quote_literal('') || ',' ||
		quote_literal(real_schema) || ',' ||
		quote_literal(table_name) || ',' ||
		quote_literal(column_name) || ',' ||
		new_dim::text || ',' ||
		new_srid::text || ',' ||
		quote_literal(new_type) || ')';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add table CHECKs
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_srid_' || column_name)
		|| ' CHECK (ST_SRID(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_dims_' || column_name)
		|| ' CHECK (ST_NDims(' || quote_ident(column_name) ||
		') = ' || new_dim::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	IF ( NOT (new_type = 'GEOMETRY')) THEN
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
			quote_ident('enforce_geotype_' || column_name) ||
			' CHECK (GeometryType(' ||
			quote_ident(column_name) || ')=' ||
			quote_literal(new_type) || ' OR (' ||
			quote_ident(column_name) || ') is null)';
		RAISE DEBUG '%', sql;
		EXECUTE sql;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 2025 (class 1255 OID 1440387)
-- Name: addgeometrycolumn_old_postgis(character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.addgeometrycolumn_old_postgis(character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn_old_postgis(character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 2026 (class 1255 OID 1440388)
-- Name: fct_array_unique(anyarray); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.fct_array_unique(arr anyarray) RETURNS anyarray
    LANGUAGE sql
    AS $$
    select array_agg(distinct elem)
    from unnest(arr) as arr(elem) 
$$;


ALTER FUNCTION public.fct_array_unique(arr anyarray) OWNER TO darwin2;

--
-- TOC entry 2027 (class 1255 OID 1440389)
-- Name: fct_rmca_get_collection_text_path(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fct_rmca_get_collection_text_path(integer) RETURNS character varying
    LANGUAGE sql
    AS $_$
SELECT   collection_path_text
  FROM darwin2.v_rmca_collections_path_as_text where id=$1 limit 1;
$_$;


ALTER FUNCTION public.fct_rmca_get_collection_text_path(integer) OWNER TO postgres;

--
-- TOC entry 2029 (class 1255 OID 1440390)
-- Name: fix_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fix_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
			WHERE ( f_table_schema is NULL
		OR f_table_schema = ''
			OR f_table_schema NOT IN (
					SELECT nspname::varchar
					FROM pg_namespace nn, pg_class cc, pg_attribute aa
					WHERE cc.relnamespace = nn.oid
					AND cc.relname = f_table_name::name
					AND aa.attrelid = cc.oid
					AND aa.attname = f_geometry_column::name))
			AND f_table_name::name = c.relname
			AND c.oid = a.attrelid
			AND c.relnamespace = n.oid
			AND f_geometry_column::name = a.attname

			AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid(% = %)'
			AND sridcheck.consrc ~ textcat(' = ', srid::text)

			AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype(%) = ''%''::text) OR (% IS NULL))'
			AND typecheck.consrc ~ textcat(' = ''', type::text)

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return 'fixed:'||foundschema::text;

END;
$$;


ALTER FUNCTION public.fix_geometry_columns() OWNER TO postgres;

--
-- TOC entry 2030 (class 1255 OID 1440391)
-- Name: fulltoindex(character varying, boolean); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.fulltoindex(to_indexed character varying, keep_space boolean) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    temp_string varchar;
BEGIN
    -- Investigate https://launchpad.net/postgresql-unaccent
    temp_string := to_indexed;
    temp_string := translate(temp_string, 'âãäåāăąÁÂÃÄÅĀĂĄ', 'aaaaaaaaaaaaaaa');
    temp_string := translate(temp_string, 'èééêëēĕėęěĒĔĖĘĚ', 'eeeeeeeeeeeeeee');
    temp_string := translate(temp_string, 'ìíîïìĩīĭÌÍÎÏÌĨĪĬ', 'iiiiiiiiiiiiiiii');
    temp_string := translate(temp_string, 'óôõöōŏőÒÓÔÕÖŌŎŐ', 'ooooooooooooooo');
    temp_string := translate(temp_string, 'ùúûüũūŭůÙÚÛÜŨŪŬŮ', 'uuuuuuuuuuuuuuuu');
    temp_string := REPLACE(temp_string, 'Œ', 'oe');
    temp_string := REPLACE(temp_string, 'Ӕ', 'ae');
    temp_string := REPLACE(temp_string, 'œ', 'oe');
    temp_string := REPLACE(temp_string, 'æ', 'ae');
    temp_string := REPLACE(temp_string, 'ë', 'e');
    temp_string := REPLACE(temp_string, 'ï', 'i');
    temp_string := REPLACE(temp_string, 'ö', 'o');
    temp_string := REPLACE(temp_string, 'ü', 'u');
--     temp_string := REPLACE(temp_string, E'\'', '');
--     temp_string := REPLACE(temp_string, '"', '');
    temp_string := REPLACE(temp_string, 'ñ', 'n');
    temp_string := REPLACE(temp_string,chr(946),'b');
    temp_string := TRANSLATE(temp_string,'Ð','d');
    temp_string := TRANSLATE(temp_string,'ó','o');
    temp_string := TRANSLATE(temp_string,'ę','e');
    temp_string := TRANSLATE(temp_string,'ā','a');
    temp_string := TRANSLATE(temp_string,'ē','e');
    temp_string := TRANSLATE(temp_string,'ī','i');
    temp_string := TRANSLATE(temp_string,'ō','o');
    temp_string := TRANSLATE(temp_string,'ū','u');
    temp_string := TRANSLATE(temp_string,'ş','s');
    temp_string := TRANSLATE(temp_string,'Ş','s');
--     temp_string := TRANSLATE(temp_string,'†','');
--     temp_string := TRANSLATE(temp_string,chr(52914),'');
--ftheeten 2015 02 15

--ftheeten 2017 01 22
temp_string := TRANSLATE(temp_string,'-',' ');
temp_string := TRANSLATE(temp_string,'''',' ');
    -- FROM 160 to 255 ASCII
    temp_string := TRANSLATE(temp_string, ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
      '  cL YS sCa  -R     Zu .z   EeY?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty');
    --Remove ALL none alphanumerical char
    if keep_space= false then
    temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]]','', 'g'));
    else
        temp_string := lower(regexp_replace(temp_string,'[^[:alnum:]\s]','', 'g'));
	temp_string :=regexp_replace(temp_string,'(\s{2,})',' ', 'g');
	
    end if;
    return temp_string;
END;
$$;


ALTER FUNCTION public.fulltoindex(to_indexed character varying, keep_space boolean) OWNER TO darwin2;

--
-- TOC entry 2031 (class 1255 OID 1440392)
-- Name: populate_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.populate_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	EXECUTE 'TRUNCATE geometry_columns';

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
	AND t.typname = 'geometry'
	AND a.attisdropped = false
	AND a.atttypid = t.oid
	AND a.attrelid = c.oid
	AND c.relnamespace = n.oid
	AND n.nspname NOT ILIKE 'pg_temp%';

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	-- Add views to geometry columns table
	RAISE DEBUG 'Processing Views.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	IF oldcount > inserted THEN
	stale = oldcount-inserted;
	ELSE
	stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted|| ' conflicts:'||probed-inserted|| ' deleted:'||stale;
END

$$;


ALTER FUNCTION public.populate_geometry_columns() OWNER TO postgres;

--
-- TOC entry 2032 (class 1255 OID 1440393)
-- Name: populate_geometry_columns(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.populate_geometry_columns(tbl_oid oid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

	RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;

	gc_is_valid := true;

	-- Try to find srid check from system tables (pg_constraint)
	gsrid :=
		(SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %');
	IF (gsrid IS NULL) THEN
		-- Try to find srid from the geometry itself
		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		-- Try to apply srid check to column
		IF (gsrid IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || '
						 CHECK (srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find ndims check from system tables (pg_constraint)
	gndims :=
		(SELECT replace(split_part(s.consrc, ' = ', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %');
	IF (gndims IS NULL) THEN
		-- Try to find ndims from the geometry itself
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		-- Try to apply ndims check to column
		IF (gndims IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
						 CHECK (ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find geotype check from system tables (pg_constraint)
	gtype :=
		(SELECT replace(split_part(s.consrc, '''', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %');
	IF (gtype IS NULL) THEN
		-- Try to find geotype from the geometry itself
		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;
		--IF (gtype IS NULL) THEN
		--    gtype := 'GEOMETRY';
		--END IF;

		-- Try to apply geometrytype check to column
		IF (gtype IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
				CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
			EXCEPTION
				WHEN check_violation THEN
					-- No geometry check can be applied. This column contains a number of geometry types.
					RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
			END;
		END IF;
	END IF;

	IF (gsrid IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gndims IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the number of dimensions', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gtype IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the geometry type', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSE
		-- Only insert into geometry_columns if table constraints could be applied.
		IF (gc_is_valid) THEN
			INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type)
			VALUES ('', gcs.nspname, gcs.relname, gcs.attname, gndims, gsrid, gtype);
			inserted := inserted + 1;
		END IF;
	END IF;
	END LOOP;

	-- Add views to geometry columns table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
		RAISE DEBUG 'Processing view %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;
	  
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;

		IF (gndims IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine ndims', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gsrid IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gtype IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine gtype', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSE
			query := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) ' ||
					 'VALUES ('''', ' || quote_literal(gcs.nspname) || ',' || quote_literal(gcs.relname) || ',' || quote_literal(gcs.attname) || ',' || gndims || ',' || gsrid || ',' || quote_literal(gtype) || ')';
			EXECUTE query;
			inserted := inserted + 1;
		END IF;
	END LOOP;

	RETURN inserted;
END

$$;


ALTER FUNCTION public.populate_geometry_columns(tbl_oid oid) OWNER TO postgres;

--
-- TOC entry 2033 (class 1255 OID 1440395)
-- Name: probe_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.probe_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'
		;

	INSERT INTO geometry_columns SELECT
		''::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  ' =)' from
			replace(replace(split_part(
				sridcheck.consrc, ' = ', 2), ')', ''), '(', ''))::integer AS srid,
		trim(both ' =)''' from substr(typecheck.consrc,
			strpos(typecheck.consrc, '='),
			strpos(typecheck.consrc, '::')-
			strpos(typecheck.consrc, '=')
			))::varchar as type
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(st_srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount > probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:'||probed::text||
		' inserted:'||inserted::text||
		' conflicts:'||(probed-inserted)::text||
		' stale:'||stale::text;
END

$$;


ALTER FUNCTION public.probe_geometry_columns() OWNER TO postgres;

--
-- TOC entry 2034 (class 1255 OID 1440396)
-- Name: rename_geometry_table_constraints(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rename_geometry_table_constraints() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$
SELECT 'rename_geometry_table_constraint() is obsoleted'::text
$$;


ALTER FUNCTION public.rename_geometry_table_constraints() OWNER TO postgres;

--
-- TOC entry 2035 (class 1255 OID 1440397)
-- Name: rmca_create_missing_people_in_staging(integer); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_create_missing_people_in_staging(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	curs1 record;
	tmpid int;
	
BEGIN 
	DROP TABLE if EXISTs tmp_people_import_rmca;
	CREATE TEMPORARY TABLE tmp_people_import_rmca(pk int, name varchar);
	
	FOR curs1 IN SELECT DISTINCT formated_name from staging a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging'
		where a.to_import='f' 
		and people_ref is null
		and a.import_ref=p_import_ref 
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            INSERT INTO people (family_name, import_ref) VALUES (curs1.formated_name, p_import_ref) RETURNING id INTO tmpid;
            INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE
           INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
	DELETE FROM tmp_people_import_rmca;

	RAISE NOTICE  'GO identifications';
	UPDATE staging_people SET people_ref=tmp_people_import_rmca.pk FROM (SELECT pk, name FROM tmp_people_import_rmca ) AS tmp_people_import_rmca WHERE staging_people.formated_name=tmp_people_import_rmca.name 
	and referenced_relation='staging'
		
		and people_ref is null
		and record_id IN (SELECT id FROM staging WHERE staging.import_ref=p_import_ref AND to_import='f' )
		
		;




		FOR curs1 IN 
		SELECT distinct formated_name from staging a
		--inner join codes b
		--on b.referenced_relation='staging'
		--and a.id=b.record_id
		INNER JOIN identifications c
		ON c.record_id=a.id
		AND c.referenced_relation='staging'
		INNER JOIN
		staging_people d
		ON d.referenced_relation='identifications'
		AND c.id=d.record_id
		and people_ref is null
		where a.to_import='f' 

		and a.import_ref=p_import_ref
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people ident with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people ident split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            RAISE NOTICE 'INSERT %', curs1.formated_name;
                INSERT INTO people (family_name, import_ref) VALUES (curs1.formated_name, p_import_ref) RETURNING id INTO tmpid;
                INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE    
            INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
		UPDATE staging_people SET people_ref=tmp_people_import_rmca_alias.id FROM (SELECT id, family_name FROM people) AS tmp_people_import_rmca_alias 
		WHERE formated_name=tmp_people_import_rmca_alias.family_name 
		--and referenced_relation='identifications'
		
		and people_ref is null
		
		
		;
	DROP TABLE  tmp_people_import_rmca;

	--clean staging status for identifications (2018 09 05)
		UPDATE staging SET status=status - 'identifiers'::varchar  WHERE id IN
		(
		SELECT identifications.record_id from staging_people 
		INNER JOIN
		identifications

		ON staging_people.referenced_relation='identifications' 
		AND staging_people.record_id = identifications.id
		WHERE identifications.referenced_relation='staging'
		AND identifications.record_id IN  (select id FROM staging WHERE staging.import_ref=p_import_ref)
		AND staging_people.people_ref IS NOT NULL 

		)
		;
	-- clean staging status for other peoples (2018 09 05)
			UPDATE staging SET status=status - 'people'::varchar  WHERE id IN (SELECT record_id from staging_people WHERE referenced_relation='staging'  AND staging_people.people_ref IS NOT NULL AND record_id IN (SELECT id FROM staging WHERe staging.import_ref = p_import_ref)
		);



	-- TO DO : clean staging status for operators


END;
$$;


ALTER FUNCTION public.rmca_create_missing_people_in_staging(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 2036 (class 1255 OID 1440398)
-- Name: rmca_import_gtu_create_missing_people_in_staging(integer); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	curs1 record;
	tmpid int;
	
BEGIN 
	DROP TABLE if EXISTs tmp_people_import_rmca;
	CREATE TEMPORARY TABLE tmp_people_import_rmca(pk int, name varchar);
	RAISE NOTICE 'Different peoples %', (SELECT COUNT(DISTINCT formated_name) from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where-- a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref);
	RAISE NOTICE 'linked specimens to be imported %', (SELECT COUNT(formated_name) from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where --a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref);
	FOR curs1 IN SELECT DISTINCT formated_name from staging_gtu a
		
		inner join staging_people c
		ON
		c.record_id=a.id
		and c.referenced_relation='staging_gtu'
		where --a.to_import='f' 
		--and 
		people_ref is null
		and a.import_ref=p_import_ref 
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            INSERT INTO people (family_name) VALUES (curs1.formated_name) RETURNING id INTO tmpid;
            INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE
           INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
	DELETE FROM tmp_people_import_rmca;

	RAISE NOTICE  'GO identifications';
	UPDATE staging_people SET people_ref=tmp_people_import_rmca.pk FROM (SELECT pk, name FROM tmp_people_import_rmca ) AS tmp_people_import_rmca WHERE staging_people.formated_name=tmp_people_import_rmca.name 
	and referenced_relation='staging_gtu'
		
		and people_ref is null
		and record_id IN (SELECT id FROM staging_gtu WHERE staging_gtu.import_ref=p_import_ref --AND to_import='f'
		 )
		
		;




		FOR curs1 IN 
		SELECT distinct formated_name from staging_gtu a
		--inner join codes b
		--on b.referenced_relation='staging'
		--and a.id=b.record_id
		INNER JOIN identifications c
		ON c.record_id=a.id
		AND c.referenced_relation='staging_gtu'
		INNER JOIN
		staging_people d
		ON d.referenced_relation='identifications'
		AND c.id=d.record_id
		and people_ref is null
		where --a.to_import='f' 

		--and 
		a.import_ref=p_import_ref
		
		

		LOOP
		
		RAISE NOTICE '%', curs1.formated_name;
		RAISE NOTICE 'people ident with this name %', (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) );
		RAISE NOTICE 'people ident split %',  (SELECT regexp_split_to_array(curs1.formated_name, ' '));
		IF  (sELECt count(*) FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) )=0 THEN
            RAISE NOTICE 'INSERT %', curs1.formated_name;
                INSERT INTO people (family_name) VALUES (curs1.formated_name) RETURNING id INTO tmpid;
                INSERT INTO tmp_people_import_rmca (pk, name) VALUES(tmpid, curs1.formated_name);
		ELSE    
            INSERT INTO tmp_people_import_rmca (pk, name) SELECT id, family_name FROM people WHERE people.formated_name_indexed LIKE fulltoindex(curs1.formated_name, true) LIMIT 1;
        END IF;
		
	END LOOP;
		UPDATE staging_people SET people_ref=tmp_people_import_rmca_alias.id FROM (SELECT id, family_name FROM people) AS tmp_people_import_rmca_alias 
		WHERE formated_name=tmp_people_import_rmca_alias.family_name 
		--and referenced_relation='identifications'
		
		and people_ref is null
		
		
		;
	DROP TABLE  tmp_people_import_rmca;

END;
$$;


ALTER FUNCTION public.rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer) OWNER TO darwin2;

--
-- TOC entry 2037 (class 1255 OID 1440399)
-- Name: rmca_migrate_check_triggers(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rmca_migrate_check_triggers(schema character varying) RETURNS TABLE(sequence_name character varying, current_value bigint)
    LANGUAGE plpgsql
    AS $$
   DECLARE
    rec_seq record;
    tmp_val bigint;	
   cur_seq  CURSOR FOR SELECT * FROM information_schema.sequences where sequence_schema=schema;

    BEGIN
   
    OPEN cur_seq;
   LOOP
   		
    -- fetch row into the film
      FETCH cur_seq INTO rec_seq;
    -- exit when no more row to fetch
      BEGIN
	  	raise notice 'Sequence %', rec_seq.sequence_name;
		IF rec_seq.sequence_name IS NULL THEN
		  		--RAISE NOTICE 'SHOULD EXIT';
		  	EXIT;
		  END IF;

		EXECUTE 'SELECT last_value FROM ' ||schema||'.'||rec_seq.sequence_name||';'  INTO tmp_val ;
			sequence_name:= rec_seq.sequence_name;
			current_value := tmp_val;
			RETURN NEXT;
		EXCEPTION WHEN OTHERS THEN
			raise notice E'Got exception:
        SQLSTATE: % 
        SQLERRM: %', SQLSTATE, SQLERRM;     
		END;
   END LOOP;
	

      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_check_triggers(schema character varying) OWNER TO postgres;

--
-- TOC entry 2038 (class 1255 OID 1440400)
-- Name: rmca_migrate_normalize_gtus(); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_migrate_normalize_gtus() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare 
    returned int;
    declare same_tables varchar[];
    declare i integer;
    declare size_array_same int;
    declare fields_to_copy varchar[]; 
     text_var1 text;
  text_var2 text;
  text_var3 text;

  metadata_tmp integer;



    BEGIN
returned:=1;
truncate public.gtu_for_normalization ;
INSERT INTO  public.gtu_for_normalization SELECT DISTINCT
array_agg(gtu_id order by gtu_id) as gtu_id, code, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       location::varchar, elevation, elevation_accuracy, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, NULL, gtu_creation_date, import_ref, 
       NULL, NULL, comments, properties, ext_links, multimedias, tags, tag_groups
      

 FROM 
(
SELECT DISTINCT gtu.id as gtu_id, code, gtu_from_date_mask, gtu_from_date, gtu_to_date_mask, 
       gtu_to_date, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       elevation, elevation_accuracy, location::varchar, gtu_creation_date, import_ref, 
       collector_refs, expedition_refs, collection_ref, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, nagoya,
	   
	   
       array_agg(DISTINCT COALESCE(comments.notion_concerned,'')||COALESCE( comments.comment,'')||COALESCE(comments.comment_indexed ,'') ORDER BY COALESCE(comments.notion_concerned,'')||COALESCE( comments.comment,'')||COALESCE(comments.comment_indexed ,'')) as comments, 
	    
	   
	     array_agg(
	     DISTINCT 
COALESCE(property_type,'')||COALESCE(applies_to,'')||COALESCE(applies_to_indexed,'')||COALESCE(date_from_mask::varchar,'')||COALESCE(date_from::varchar,'')||COALESCE(date_to_mask::varchar,'')||COALESCE(date_to::varchar,'')||COALESCE(is_quantitative::varchar,'')||COALESCE(property_unit,'')||COALESCE(method,'')||COALESCE(method_indexed,'')||COALESCE(lower_value,'')||COALESCE(lower_value_unified::varchar,'')||COALESCE( upper_value,'')||COALESCE(upper_value_unified::varchar,'')||COALESCE(property_accuracy,'')  

ORDER BY 

COALESCE(property_type,'')||COALESCE(applies_to,'')||COALESCE(applies_to_indexed,'')||COALESCE(date_from_mask::varchar,'')||COALESCE(date_from::varchar,'')||COALESCE(date_to_mask::varchar,'')||COALESCE(date_to::varchar,'')||COALESCE(is_quantitative::varchar,'')||COALESCE(property_unit,'')||COALESCE(method,'')||COALESCE(method_indexed,'')||COALESCE(lower_value,'')||COALESCE(lower_value_unified::varchar,'')||COALESCE( upper_value,'')||COALESCE(upper_value_unified::varchar,'')||COALESCE(property_accuracy,'')  
 ) as properties, 
	     
	    array_agg(DISTINCT COALESCE(url,'')||COALESCE(ext_links.comment,'')||COALESCE(ext_links.comment_indexed,'')||COALESCE(ext_links.type,'') ORDER BY 

	    COALESCE(url,'')||COALESCE(ext_links.comment,'')||COALESCE(ext_links.comment_indexed,'')||COALESCE(ext_links.type,'')) as ext_links, 
		 
		
		
		array_agg(DISTINCT COALESCE(is_digital::varchar,'')||COALESCE(multimedia.type,'')||COALESCE(sub_type,'')||COALESCE(title,'')||COALESCE(description,'')||COALESCE(uri,'')||COALESCE(filename,'')||COALESCE(search_indexed,'')||COALESCE(creation_date::varchar,'')||COALESCE(creation_date_mask::varchar,'')||COALESCE(mime_type,'')||COALESCE(visible::varchar,'')||COALESCE(publishable::varchar,'')||COALESCE(extracted_info,'') 

		ORDER BY   COALESCE(is_digital::varchar,'')||COALESCE(multimedia.type,'')||COALESCE(sub_type,'')||COALESCE(title,'')||COALESCE(description,'')||COALESCE(uri,'')||COALESCE(filename,'')||COALESCE(search_indexed,'')||COALESCE(creation_date::varchar,'')||COALESCE(creation_date_mask::varchar,'')||COALESCE(mime_type,'')||COALESCE(visible::varchar,'')||COALESCE(publishable::varchar,'')||COALESCE(extracted_info,'')

		) as multimedias,
		
	   
	   array_agg(DISTINCT  COALESCE(group_type,'')||COALESCE(sub_group_type,'')||COALESCE(tag,'')||COALESCE(tag_indexed ,'')

	   order by COALESCE(group_type,'')||COALESCE(sub_group_type,'')||COALESCE(tag,'')||COALESCE(tag_indexed,'')  ) as tags, 
	  
		
		array_agg(DISTINCT COALESCE(group_name,'')||COALESCE(group_name_indexed,'')||COALESCE(sub_group_name,'')||COALESCE(sub_group_name_indexed,'')||COALESCE(international_name,'')||COALESCE(color,'')||COALESCE(tag_value,'') 

		ORDER BY COALESCE(group_name,'')||COALESCE(group_name_indexed,'')||COALESCE(sub_group_name,'')||COALESCE(sub_group_name_indexed,'')||COALESCE(international_name,'')||COALESCE(color,'')||COALESCE(tag_value,'')) as tag_groups
		
  FROM darwin2.gtu

  
  LEFT JOIN
  
   
  darwin2.comments
  ON gtu.id=comments.record_id
	AND comments.referenced_relation='gtu'
	
  LEFT JOIN   
  darwin2.properties
  ON gtu.id=properties.record_id
	AND properties.referenced_relation='gtu'	
	
	  LEFT JOIN   
  darwin2.ext_links
  ON gtu.id=ext_links.record_id
	AND ext_links.referenced_relation='gtu'	
  
  	  LEFT JOIN   
  darwin2.multimedia
  ON gtu.id=multimedia.record_id
	AND multimedia.referenced_relation='gtu'	
	
	LEFT JOIN darwin2.tags
	ON gtu.id=tags.gtu_ref
	
	LEFT JOIN darwin2.tag_groups
	ON gtu.id=tag_groups.gtu_ref
	
GROUP BY gtu.id, code, gtu_from_date_mask, gtu_from_date, gtu_to_date_mask, 
       gtu_to_date, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       elevation, elevation_accuracy, location::varchar, gtu_creation_date, import_ref, 
       collector_refs, expedition_refs, collection_ref, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, nagoya
   
       ) a
        
       GROUP BY code, gtu_from_date_mask, gtu_from_date, gtu_to_date_mask, 
       gtu_to_date, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       elevation, elevation_accuracy, location::varchar, gtu_creation_date, import_ref, 
       collector_refs, expedition_refs, collection_ref, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, nagoya,
        comments, properties, ext_links, multimedias, tags, tag_groups;


refresh MATERIALIZED VIEW public.v_gtu_for_normalization_correspondences;




ALTER TABLE darwin2.specimens DISABLE trigger user;
UPDATE darwin2.specimens SET gtu_ref=gtu_to_keep FROM public.v_gtu_for_normalization_correspondences
WHERE gtu_ref=gtu_to_remove;
ALTER TABLE darwin2.specimens ENABLE trigger user;



set search_path='darwin2';

alter table darwin2.comments disable trigger user;
delete from darwin2.comments where referenced_relation='gtu' and record_id
in (select gtu_to_remove from  public.v_gtu_for_normalization_correspondences);
alter table darwin2.comments enable trigger user;

alter table darwin2.properties disable trigger user;
delete from darwin2.properties where referenced_relation='gtu' and record_id
in (select gtu_to_remove from  public.v_gtu_for_normalization_correspondences);
alter table darwin2.properties enable trigger user;

alter table darwin2.tags disable trigger user;
delete from darwin2.tags  where gtu_ref
in (select gtu_to_remove from  public.v_gtu_for_normalization_correspondences);
alter table darwin2.tags enable trigger user;


alter table darwin2.tag_groups disable trigger user;
delete from darwin2.tag_groups  where gtu_ref
in (select gtu_to_remove from  public.v_gtu_for_normalization_correspondences);
alter table darwin2.tag_groups enable trigger user;

alter table darwin2.gtu disable trigger user;
delete from darwin2.gtu  where id
in (select gtu_to_remove from  public.tv_gtu_for_normalization_correspondences_unnested);
alter table darwin2.gtu enable trigger user;

      return returned;
EXCEPTION WHEN OTHERS then
begin
		 GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
                          RAISE NOTICE '%',text_var1;
			RAISE NOTICE 'DIFF_IN_FIELD_FOR : %',same_tables[i];
		END;
      return returned;


      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_normalize_gtus() OWNER TO darwin2;

--
-- TOC entry 2039 (class 1255 OID 1440403)
-- Name: rmca_migrate_rbins_count_tables(character varying, character varying); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_migrate_rbins_count_tables(schema1 character varying, schema2 character varying) RETURNS TABLE(tablename character varying, count_schema_1 bigint, count_schema_2 bigint, diff bigint)
    LANGUAGE plpgsql
    AS $$
   DECLARE
    rec_seq record;
	count_tmp_1 bigint;

    count_tmp_2 bigint;
	
   cur_seq  CURSOR FOR SELECT DISTINCT  table_name from information_schema.tables 
   	WHERE information_schema.tables.table_schema=schema1 
	AND (
		UPPER(information_schema.tables.table_type) ='BASE TABLE'
		 OR
		 UPPER(information_schema.tables.table_type) ='FOREIGN TABLE'
		) AND LOWER(table_name) NOT LIKE 'v_%' AND LOWER(table_name) NOT LIKE 'zzz_%'  AND table_name is not null
   	order by table_name;


    BEGIN
     
    OPEN cur_seq;
   LOOP
   		
    -- fetch row into the film
      FETCH cur_seq INTO rec_seq;
    -- exit when no more row to fetch
      BEGIN
	  	--raise notice 'table %', rec_seq.table_name;
		IF rec_seq.table_name IS NULL THEN
		  		--RAISE NOTICE 'SHOULD EXIT';
		  	EXIT;
		  END IF;
		  EXECUTE 'SELECT COUNT(*) FROM '||schema1||'.'||rec_seq.table_name||';' INTO count_tmp_1;


		  tablename := rec_seq.table_name;
		 
		
			EXECUTE 'SELECT COUNT(*) FROM '||schema2||'.'||rec_seq.table_name||';' INTO count_tmp_2;
		 
			count_schema_1 := count_tmp_1;
			count_schema_2 := count_tmp_2;
		  diff := count_tmp_1 - count_tmp_2;
		  
		  RETURN NEXT;
		EXCEPTION WHEN OTHERS THEN
			raise notice E'Got exception:
        SQLSTATE: % 
        SQLERRM: %', SQLSTATE, SQLERRM;     
		END;
   END LOOP;
	

      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_count_tables(schema1 character varying, schema2 character varying) OWNER TO darwin2;

--
-- TOC entry 2040 (class 1255 OID 1440404)
-- Name: rmca_migrate_rbins_reenable_triggers(character varying); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_migrate_rbins_reenable_triggers(schema1 character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
   DECLARE
    rec_seq record;
 	returned boolean;
	
   cur_seq  CURSOR FOR SELECT DISTINCT  table_name from information_schema.tables 
   	WHERE information_schema.tables.table_schema=schema1 
	AND (
		UPPER(information_schema.tables.table_type) ='BASE TABLE'
		 OR
		 UPPER(information_schema.tables.table_type) ='FOREIGN TABLE'
		) AND LOWER(table_name) NOT LIKE 'v_%' AND LOWER(table_name) NOT LIKE 'zzz_%'  AND table_name is not null
   	order by table_name;

    BEGIN
    returned :=false; 
    OPEN cur_seq;
   LOOP
   		
    -- fetch row into the film
      FETCH cur_seq INTO rec_seq;
    -- exit when no more row to fetch
      BEGIN
	  	raise notice 'table %', rec_seq.table_name;
		IF rec_seq.table_name IS NULL THEN
		  		--RAISE NOTICE 'SHOULD EXIT';
		  	EXIT;
		  END IF;
		  EXECUTE 'ALTER TABLE '||schema1||'.'||rec_seq.table_name||' ENABLE TRIGGER ALL;' ;

		 
		EXCEPTION WHEN OTHERS THEN
			raise notice E'Got exception:
        SQLSTATE: % 
        SQLERRM: %', SQLSTATE, SQLERRM;     
		END;
   END LOOP;
	

      returned = true;
	  return returned;
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_reenable_triggers(schema1 character varying) OWNER TO darwin2;

--
-- TOC entry 2041 (class 1255 OID 1440405)
-- Name: rmca_migrate_rbins_rmca(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rmca_migrate_rbins_rmca() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare returned int;
    declare same_tables varchar[];
    declare i integer;
    declare size_array_same int;
    declare fields_to_copy varchar[]; 
     text_var1 text;
  text_var2 text;
  text_var3 text;

  metadata_tmp integer;
    BEGIN
    --attention, the index esof specimens in the rbins are bound to some functions
    SET search_path TO darwin2;
      returned:=1;
     -- same_tables:='{"gtu"}';
     same_tables:='{"people",
"catalogue_relationships",
"catalogue_people",
"catalogue_levels",
"collections",
"possible_upper_levels",
"tag_groups",
"tags",
"properties",
"comments",
"ext_links",
"people_addresses",
"people_languages",
"people_relationships",
"identifications",
"vernacular_names",
"expeditions",
"collections_rights",
"users_tracking",
"informative_workflow",
"classification_keywords",
"chronostratigraphy",
"lithostratigraphy",
"mineralogy",
"lithology",
"igs",
"collecting_methods",
"codes",
"insurances",
"specimens_relationships",
"specimen_collecting_methods",
"specimen_collecting_tools",
"flat_dict",
"staging_info",
"staging_people",
"staging_collecting_methods",
"multimedia",
"loan_items",
"loan_rights",
"loan_status",
"loan_history",
"bibliography",
"catalogue_bibliography",
"multimedia_todelete",
"users",
"gtu",
"db_version",
"staging_catalogue",
"staging",
"collection_maintenance",
"collecting_tools",
"imports",
"loans",
"my_saved_searches",
"my_widgets",
"people_comm",
"preferences",
"users_addresses",
"staging_tag_groups",
"users_comm",
"users_login_infos"
}';

size_array_same:=array_length(same_tables,1);
raise notice 'begin %', timeofday()::varchar;

ALTER TABLE darwin2.taxonomy DISABLE TRIGGER ALL;
DELETE from darwin2.taxonomy;
ALTER TABLE darwin2.taxonomy ENABLE TRIGGER ALL;

ALTER TABLE darwin2.classification_synonymies DISABLE TRIGGER ALL;
DELETE from darwin2.classification_synonymies;
ALTER TABLE darwin2.classification_synonymies ENABLE TRIGGER ALL;

ALTER TABLE darwin2.taxonomy_metadata DISABLE TRIGGER ALL;
DELETE FROM darwin2.taxonomy_metadata;
ALTER TABLE darwin2.taxonomy_metadata ENABLE TRIGGER ALL;
ALTER TABLE darwin2.specimens DISABLE TRIGGER ALL;
DELETE FROM darwin2.specimens;
ALTER TABLE darwin2.specimens ENABLE TRIGGER ALL;
/*ALTER TABLE darwin2.storage_parts DISABLE TRIGGER ALL;
DELETE FROM darwin2.storage_parts;
ALTER TABLE darwin2.storage_parts ENABLE TRIGGER ALL;
*/
INSERT INTO public.count_migration VALUES ('begin_import', timeofday()::varchar,null);
FOR i in 1..size_array_same LOOP
 EXECUTE 'TRUNCATE darwin2.'||same_tables[i]||' CASCADE;';
END LOOP;

FOR i in 1..size_array_same LOOP
 RAISE NOTICE '%', same_tables[i];
 SELECT array_agg(column_name::varchar order by ordinal_position) into fields_to_copy
  FROM information_schema.columns
  WHERE table_schema = 'darwin2_rbins_data'
  AND table_name   = same_tables[i]  
  ;
  RAISE NOTICE '%', fields_to_copy;
  if fields_to_copy is not null then
  BEGIN

                 

   EXECUTE 'INSERT INTO public.count_migration VALUES (''darwin2_rbins_data.'||same_tables[i]||''',''before_copy'',(SELECT COUNT (*) FROM darwin2_rbins_data.'||same_tables[i]||'));';

   RAISE NOTICE 'ALTER TABLE darwin2.% DISABLE TRIGGER ALL;
  INSERT INTO darwin2.% (%) SELECT % FROM darwin2_rbins_data.%;
  ALTER TABLE darwin2.% ENABLE TRIGGER ALL;', same_tables[i], same_tables[i], array_to_string(fields_to_copy,','), array_to_string(fields_to_copy,','), same_tables[i], same_tables[i];

  EXECUTE 'ALTER TABLE darwin2.'||same_tables[i]||' DISABLE TRIGGER ALL;
  
  INSERT INTO darwin2.'||same_tables[i]||' ('||array_to_string(fields_to_copy,',')||') SELECT '||array_to_string(fields_to_copy,',')||' FROM darwin2_rbins_data.'||same_tables[i]||';
  ALTER TABLE darwin2.'||same_tables[i]||' ENABLE TRIGGER ALL;' ;

    EXECUTE 'INSERT INTO public.count_migration VALUES (
''darwin2.'||same_tables[i]||''' ,
''after_copy'',
(SELECT COUNT (*) FROM darwin2.'||same_tables[i]||'));';
  
  EXCEPTION WHEN OTHERS then
   GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
                          RAISE NOTICE '%',text_var1;
   RAISE NOTICE 'DIFF_IN_FIELD_FOR : %',same_tables[i];
  END;
  
  end if;
  
  
END LOOP;
BEGIN

 INSERT INTO public.count_migration VALUES ('end_import', timeofday()::varchar,null);
raise notice 'end %', timeofday()::varchar;

--taxonomy_metadata
RAISE NOTICE 'taxonomy_metadata %', timeofday()::varchar;

ALTER TABLE darwin2.taxonomy_metadata DISABLE TRIGGER ALL; 
--DELETE FROM darwin2.taxonomy_metadata;
INSERT INTO darwin2.taxonomy_metadata SELECT * FROM darwin2_rbins_data.taxonomy_metadata;
ALTER TABLE darwin2.taxonomy_metadata ENABLE TRIGGER ALL; 

--taxonomy
RAISE NOTICE 'taxonomy %', timeofday()::varchar;
SELECT max(id) INTO metadata_tmp FROM darwin2.taxonomy_metadata;
ALTER TABLE darwin2.taxonomy DISABLE TRIGGER ALL; 
--DELETE FROM darwin2.taxonomy;
INSERT INTO darwin2.taxonomy(
            name, name_indexed, level_ref, status, local_naming, color, path, 
            parent_ref, id, extinct,  
            metadata_ref, taxonomy_creation_date, import_ref)
    SELECT name, name_indexed, level_ref, status, local_naming, color, path, 
            parent_ref, id, extinct,  
            metadata_ref, taxonomy_creation_date, import_ref FROM  darwin2_rbins_data.taxonomy;

ALTER TABLE darwin2.taxonomy ENABLE TRIGGER ALL; 

--taxonomy synonymies
RAISE NOTICE 'syonymies %', timeofday()::varchar;
ALTER TABLE darwin2.classification_synonymies DISABLE TRIGGER ALL; 
--DELETE FROM darwin2.classification_synonymies;
INSERT INTO darwin2.classification_synonymies(
             referenced_relation, record_id, id, group_id, group_name, is_basionym, 
            order_by)
    SELECT  referenced_relation, record_id, id, group_id, group_name, is_basionym, 
            order_by FROM  darwin2_rbins_data.classification_synonymies;

ALTER TABLE darwin2.classification_synonymies ENABLE TRIGGER ALL; 

--specimens

RAISE NOTICE 'specimens (!) %', timeofday()::varchar;
ALTER TABLE darwin2.specimens DISABLE TRIGGER ALL; 
--DELETE FROM darwin2.specimens;
INSERT INTO darwin2.specimens(
            id, category, 
            collection_ref, expedition_ref, gtu_ref, taxon_ref, 
            litho_ref, chrono_ref, lithology_ref, mineral_ref, acquisition_category, 
            acquisition_date_mask, acquisition_date, station_visible, ig_ref, 
            type, type_group, type_search, sex, stage, state, social_status, 
            rock_form, 

            specimen_part, complete, institution_ref, building, 
            floor, room, "row", shelf, container, sub_container, container_type, 
            sub_container_type, container_storage, sub_container_storage, 
            surnumerary, specimen_status,

            specimen_count_min, specimen_count_max, 
            object_name, object_name_indexed, 

            spec_ident_ids, spec_coll_ids, 
            spec_don_sel_ids, collection_type, collection_code, collection_name, 
            collection_is_public, collection_parent_ref, collection_path, 
            expedition_name, expedition_name_indexed, 
            gtu_code, 
            gtu_from_date_mask, 
            gtu_from_date, 
            gtu_to_date_mask, 
            gtu_to_date, 

            
            gtu_tag_values_indexed, 
            gtu_country_tag_value, 
            gtu_country_tag_indexed, 
            gtu_province_tag_value, 
            gtu_province_tag_indexed,
             gtu_others_tag_value, 
             gtu_others_tag_indexed, 
            gtu_elevation, 
            gtu_elevation_accuracy, 
            taxon_name, taxon_name_indexed, 
            taxon_level_ref, taxon_level_name, taxon_status, taxon_path, 
            taxon_parent_ref, taxon_extinct, litho_name, litho_name_indexed, 
            litho_level_ref, litho_level_name, litho_status, litho_local, 
            litho_color, litho_path, litho_parent_ref, chrono_name, chrono_name_indexed, 
            chrono_level_ref, chrono_level_name, chrono_status, chrono_local, 
            chrono_color, chrono_path, chrono_parent_ref, lithology_name, 
            lithology_name_indexed, lithology_level_ref, lithology_level_name, 
            lithology_status, lithology_local, lithology_color, lithology_path, 
            lithology_parent_ref, mineral_name, mineral_name_indexed, mineral_level_ref, 
            mineral_level_name, mineral_status, mineral_local, mineral_color, 
            mineral_path, mineral_parent_ref, ig_num, ig_num_indexed, ig_date_mask, 
            ig_date, col, --gtu_location, 
            specimen_creation_date, import_ref)
   

            SELECt DISTINCT

 id, category, 
 collection_ref, expedition_ref, gtu_ref, taxon_ref, 
            litho_ref, chrono_ref, lithology_ref, mineral_ref, acquisition_category, 
            acquisition_date_mask, acquisition_date, station_visible, ig_ref, 
            type, type_group, type_search, sex, stage, state, social_status, 
            rock_form, 

            specimen_part, 
           complete, 
            institution_ref, 
            building, 
           floor, 
            room, 
            "row", 
            shelf, 
            container, 
            sub_container, 
            container_type, 
            sub_container_type, 
            container_storage, sub_container_storage, 
            surnumerary, specimen_status, 
            specimen_count_min, specimen_count_max, 
            object_name, object_name_indexed, 

            spec_ident_ids, spec_coll_ids, 
            spec_don_sel_ids, collection_type, collection_code, collection_name, 
            collection_is_public, collection_parent_ref, collection_path, 
            expedition_name, expedition_name_indexed, 
            gtu_code, 
            COALESCE(gtu_from_date_mask,0), 
            COALESCE(gtu_from_date,'0001-01-01'), 
            COALESCE(gtu_to_date_mask,0), 
            COALESCE(gtu_to_date,'0001-01-01'), 
            gtu_tag_values_indexed, 
            gtu_country_tag_value, 
            gtu_country_tag_indexed, 
            gtu_province_tag_value, 
            gtu_province_tag_indexed, 
            gtu_others_tag_value, 
            gtu_others_tag_indexed, 
            gtu_elevation, gtu_elevation_accuracy, taxon_name, taxon_name_indexed, 
            taxon_level_ref, taxon_level_name, taxon_status, taxon_path, 
            taxon_parent_ref, taxon_extinct, litho_name, litho_name_indexed, 
            litho_level_ref, litho_level_name, litho_status, litho_local, 
            litho_color, litho_path, litho_parent_ref, chrono_name, chrono_name_indexed, 
            chrono_level_ref, chrono_level_name, chrono_status, chrono_local, 
            chrono_color, chrono_path, chrono_parent_ref, lithology_name, 
            lithology_name_indexed, lithology_level_ref, lithology_level_name, 
            lithology_status, lithology_local, lithology_color, lithology_path, 
            lithology_parent_ref, mineral_name, mineral_name_indexed, mineral_level_ref, 
            mineral_level_name, mineral_status, mineral_local, mineral_color, 
            mineral_path, mineral_parent_ref, ig_num, ig_num_indexed, ig_date_mask, 
            ig_date, col, 
            --(SELECT gtu_location FROM darwin2.specimens s2 WHERE s2.id=specimens.id LIMIT 1), 
            specimen_creation_date, import_ref

            FROM 

            darwin2_rbins_data.specimens
            ;

ALTER TABLE darwin2.specimens ENABLE TRIGGER ALL; 

ALTER TABLE darwin2.specimens DISABLE TRIGGER ALL;
            UPDATE darwin2.specimens SET gtu_location=darwin2_rbins_data.specimens.gtu_location
            FROM darwin2_rbins_data.specimens  WHERE darwin2.specimens.id=darwin2_rbins_data.specimens.id;
   
   ALTER TABLE darwin2.specimens ENABLE TRIGGER ALL; 
/*

--storage parts
RAISE NOTICE 'storage_parts %', timeofday()::varchar;
ALTER TABLE darwin2.storage_parts DISABLE TRIGGER ALL; 
--DELETE FROM darwin2.storage_parts;

INSERT INTO darwin2.storage_parts(
             category, specimen_ref, specimen_part, institution_ref, building, 
            floor, room, "row", col, shelf, container, sub_container, container_type, 
            sub_container_type, container_storage, sub_container_storage, 
            surnumerary, object_name, object_name_indexed, specimen_status, 
            complete)
    SELECT
    DISTINCT    category, id, specimen_part, institution_ref, building, 
            floor, room, "row", col, shelf, container, sub_container, container_type, 
            sub_container_type, container_storage, sub_container_storage, 
            surnumerary, object_name, object_name_indexed, specimen_status, 
            complete FROM darwin2_rbins_data.specimens;

            ALTER TABLE darwin2.storage_parts ENABLE TRIGGER ALL;

            --normalize gtus 
            --RAISE NOTICE 'normalize_gtus %', timeofday()::varchar;
           --SELECT * FROM public.rmca_migrate_rbins_rmca_normalize_gtus();
*/
   --align sequences

--RAISE NOTICE 'Sequences %', timeofday()::varchar;
--select * FROM public.rmca_migrate_rbins_rmca_align_seq();

EXCEPTION WHEN OTHERS then
   GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
                          RAISE NOTICE '%',text_var1;
   RAISE NOTICE 'DIFF_IN_FIELD_FOR : %',same_tables[i];
  END;
      return returned;

      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_rmca() OWNER TO postgres;

--
-- TOC entry 2042 (class 1255 OID 1440407)
-- Name: rmca_migrate_rbins_rmca_align_seq(); Type: FUNCTION; Schema: public; Owner: darwin2
--

CREATE FUNCTION public.rmca_migrate_rbins_rmca_align_seq() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare returned int;
    rec_seq record;
	count_tmp bigint;
 
   cur_seq  CURSOR FOR SELECT REPLACE(REPLACE(column_default,'nextval(''',''),'''::regclass)','') as seq_name, table_name, column_name from information_schema.columns where column_default like 'nextval%' and table_schema='darwin2' order by table_name;

  metadata_tmp integer;
    BEGIN
       set search_path='darwin2';
    returned:=-1;
    --attention, the index esof specimens in the rbins are bound to some functions
    SET search_path TO darwin2;
      OPEN cur_seq;
 
   LOOP
    -- fetch row into the film
      FETCH cur_seq INTO rec_seq;
    -- exit when no more row to fetch
      EXIT WHEN NOT FOUND;
	  EXECUTE 'SELECT COUNT(*) FROM darwin2.'||rec_seq.table_name||';' INTO count_tmp;
	RAISE notice E'seq: % \t table:% \ t count: %', rec_seq.seq_name,rec_seq.table_name, count_tmp ;
       EXECUTE 'SELECT setval(''darwin2.'||rec_seq.seq_name||''', (SELECT MAX('||rec_seq.column_name||')+1 FROM darwin2.'||rec_seq.table_name||') , false);';
 
   END LOOP;
	returned:=0;
      return returned;

      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_rmca_align_seq() OWNER TO darwin2;

--
-- TOC entry 2043 (class 1255 OID 1440408)
-- Name: rmca_migrate_rbins_rmca_align_widgets(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rmca_migrate_rbins_rmca_align_widgets() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare returned int;
    
    BEGIN
    returned:=-1;
    delete from darwin2.my_widgets;

INSERT INTO darwin2.my_widgets(
             user_ref, category, group_name, order_by, col_num, mandatory, 
            visible, opened, color, is_available, icon_ref, title_perso, 
            collections, all_public)
SELECT users.id, category, group_name, order_by, col_num, mandatory, 
       visible, opened, color, is_available, icon_ref, title_perso, 
       collections, all_public
  FROM darwin2.users cross join 
  (select * from darwin2.my_widgets_rmca
  where user_ref=1) b;

	returned:=0;
      return returned;


      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_rmca_align_widgets() OWNER TO postgres;

--
-- TOC entry 2044 (class 1255 OID 1440409)
-- Name: rmca_migrate_rbins_rmca_detect_diff(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rmca_migrate_rbins_rmca_detect_diff() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare returned int;
    declare same_tables varchar[];
    declare i integer;
    declare size_array_same int;
    declare fields_to_copy varchar[]; 
    declare fields_to_create varchar[]; 
     text_var1 text;
  text_var2 text;
  text_var3 text;
    BEGIN
      returned:=1;
      same_tables:=
'{"people",
"catalogue_relationships",
"catalogue_people",
"catalogue_levels",
"possible_upper_levels",
"tag_groups",
"tags",
"properties",
"identifications",
"vernacular_names",
"expeditions",
"collections_rights",
"users_tracking",
"informative_workflow",
"classification_keywords",
"chronostratigraphy",
"lithostratigraphy",
"mineralogy",
"lithology",
"igs",
"collecting_methods",
"codes",
"insurances",
"specimens_relationships",
"specimen_collecting_methods",
"specimen_collecting_tools",
"flat_dict",
"staging_info",
"staging_tag_groups",
"staging_people",
"staging_collecting_methods",
"loan_actors",
"multimedia",
"loan_items",
"loan_rights",
"loan_status",
"loan_history",
"bibliography",
"catalogue_bibliography",
"multimedia_todelete"}';

size_array_same:=array_length(same_tables,1);

FOR i in 1..size_array_same LOOP
	--RAISE NOTICE '%', same_tables[i];
	SELECT array_agg(column_name::varchar order by ordinal_position) into fields_to_copy
		FROM information_schema.columns
		WHERE table_schema = 'darwin2_rbins_data'
		AND table_name   = same_tables[i]		
		;
		--RAISE NOTICE '%', fields_to_copy;
		if fields_to_copy is not null then
		BEGIN
		
		EXECUTE 'ALTER TABLE darwin2.'||same_tables[i]||' DISABLE TRIGGER ALL;
		DELETE FROM darwin2.'||same_tables[i]||';
		INSERT INTO darwin2.'||same_tables[i]||' ('||array_to_string(fields_to_copy,',')||') SELECT '||array_to_string(fields_to_copy,',')||' FROM darwin2_rbins_data.'||same_tables[i]||' LIMIT 1;
		DELETE FROM darwin2.'||same_tables[i]||';
		ALTER TABLE darwin2.'||same_tables[i]||' ENABLE TRIGGER ALL;' ;
		EXCEPTION WHEN OTHERS then
			RAISE NOTICE 'DIFF_IN_STRUCT_FOR : %',same_tables[i];
			SELECT array_agg(column_name::varchar order by ordinal_position) into fields_to_create
			FROM information_schema.columns
			WHERE table_schema = 'darwin2_rbins_data'
			AND table_name   = same_tables[i]
			AND column_name NOT IN (SELECT column_name FROM information_schema.columns
				WHERE table_schema = 'darwin2'
				AND table_name   = same_tables[i])	
			;
			  GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
                          RAISE NOTICE '%',text_var1;
			RAISE NOTICE 'COLUMNS TO CREATE = %',fields_to_create;
		END;
		--exit when i=5;
		end if;
		
		
END LOOP;




      
      return returned;
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_rmca_detect_diff() OWNER TO postgres;

--
-- TOC entry 2045 (class 1255 OID 1440410)
-- Name: rmca_migrate_rbins_rmca_normalize_gtus(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.rmca_migrate_rbins_rmca_normalize_gtus() RETURNS integer
    LANGUAGE plpgsql
    AS $$
    Declare returned int;
    text_var1 varchar;
    text_var2 varchar;
    text_var3 varchar;
BEGIN
 SET search_path TO darwin2;


BEGIN 
returned:=-1;

RAISE NOTICE 'backups %', timeofday()::varchar;
create table darwin2.gtu_bck2018 as SELECT * FROM darwin2_rbins_data.gtu;
create table  darwin2.specimens_bck2018 as select * from  darwin2_rbins_data.specimens;
  INSERT INTO darwin2.my_widgets (user_ref, category, group_name, order_by, col_num, is_available, title_perso)
SELECT id, 'specimen_widget', 'gtuDate', 0,2, true, 'Gathering date' FROM users where id NOT in (SELECT user_ref FROM my_widgets WHERE category='specimen_widget'  AND group_name ='Gathering date');


RAISE NOTICE 'widgets %', timeofday()::varchar;
INSERT INTO darwin2.my_widgets (user_ref, category, group_name, order_by, col_num, is_available, title_perso)
SELECT id, 'specimensearch_widget', 'gtuDate', 0,2, true, 'Gathering date' FROM users where id NOT in (SELECT user_ref FROM my_widgets WHERE category='specimensearch_widget'  AND group_name ='Gathering date');

RAISE NOTICE 'nullify specimens %', timeofday()::varchar;
UPDATE specimens SET gtu_from_date_mask=0 where gtu_from_date_mask is null;

ALTER TABLE specimens ALTER COLUMN gtu_from_date_mask SET NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_from_date_mask SET DEFAULT 0;
COMMENT ON COLUMN specimens.gtu_from_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';

UPDATE specimens SET gtu_from_date='0001-01-01 00:00:00'::timestamp without time zone where gtu_from_date is null;
ALTER TABLE specimens ALTER COLUMN gtu_from_date SET NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_from_date SET DEFAULT '0001-01-01 00:00:00'::timestamp without time zone;
COMMENT ON COLUMN specimens.gtu_from_date IS 'composed from date of the GTU';

UPDATE specimens SET gtu_to_date_mask=0 where gtu_to_date_mask is null;
ALTER TABLE specimens ALTER COLUMN gtu_to_date_mask SET NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date_mask SET DEFAULT 0;
COMMENT ON COLUMN specimens.gtu_to_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';

UPDATE specimens SET gtu_to_date='2038-12-31 00:00:00'::timestamp without time zone where gtu_to_date is null;
ALTER TABLE specimens ALTER COLUMN gtu_to_date SET NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date SET DEFAULT '2038-12-31 00:00:00'::timestamp without time zone;
COMMENT ON COLUMN specimens.gtu_to_date IS 'composed to date of the GTU';


ALTER TABLE specimens ALTER COLUMN gtu_to_date SET NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date SET DEFAULT '2038-12-31 00:00:00'::timestamp without time zone;
COMMENT ON COLUMN specimens.gtu_to_date IS 'composed to date of the GTU';

RAISE NOTICE 'allow nulls %', timeofday()::varchar;


ALTER TABLE gtu ALTER COLUMN gtu_from_date_mask DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_from_date DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_to_date_mask DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_to_date DROP NOT NULL;

ALTER TABLE specimens ALTER COLUMN gtu_from_date_mask DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_from_date DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date_mask DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date DROP NOT NULL;



RAISE NOTICE 'UNSERT NORMALIZED GTUS %', timeofday()::varchar;
ALTER TABLE specimens disable trigger ALL;

UPDATe specimens set gtu_ref=(
SELECT ref_id FROM
(
SELECt distinct array_id[1] as ref_id,unnest(array_id) as replacement FROM(SELECT count(*) as cpt, array_sort(array_agg(id order by id)) as array_id, code, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       location::varchar, elevation, elevation_accuracy, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, elevation_unit 
  FROM gtu

  GROUP BY  code, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       location::varchar, elevation, elevation_accuracy, latitude_dms_degree, 
       latitude_dms_minutes, latitude_dms_seconds, latitude_dms_direction, 
       longitude_dms_degree, longitude_dms_minutes, longitude_dms_seconds, 
       longitude_dms_direction, latitude_utm, longitude_utm, utm_zone, 
       coordinates_source, elevation_unit  
) as a )
as b WHERE gtu_ref=replacement
) 
WHERE gtu_ref is not null;

ALTER TABLE specimens enable trigger ALL;


RAISE NOTICE 'NULLIFY DATE IN GTU %', timeofday()::varchar;
ALTER table gtu disable trigger user;
--SELECT set_config('darwin.userid', '1', true);
UPDATE gtu SET  gtu_from_date_mask=null, gtu_from_date=null, gtu_to_date_mask=null,
 gtu_to_date=null;

 ALTER table gtu enable trigger user;
 
-- check /***************/
/*SELECT  distinct a.gtu_code, a.gtu_ref, c.tag_values_indexed , b.gtu_ref,  d.tag_values_indexed , a.gtu_from_date_mask, 
       a.gtu_from_date, a.gtu_to_date_mask, a.gtu_to_date, a.gtu_tag_values_indexed, a.gtu_location::text
  FROM specimens_bck2018 a
inner join specimens b
on a.id=b.id
LEFT JOIN gtu_bck2018 c
ON c.id=a.gtu_ref
LEFT JOIN gtu d
ON d.id=b.gtu_ref

   where a.gtu_ref not in (SELECT distinct gtu_ref from specimens b where a.id=b.id)
  order by gtu_code;
  */
  ---------------------
  


---------------

RAISE NOTICE 'RESTORE NOT NULL %', timeofday()::varchar;

ALTER TABLE gtu ALTER COLUMN gtu_from_date_mask DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_from_date DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_to_date_mask DROP NOT NULL;
ALTER TABLE gtu ALTER COLUMN gtu_to_date DROP NOT NULL;

ALTER TABLE specimens ALTER COLUMN gtu_from_date_mask DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_from_date DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date_mask DROP NOT NULL;
ALTER TABLE specimens ALTER COLUMN gtu_to_date DROP NOT NULL;


RAISE NOTICE 'delete remaining duplicates gtu (when date null) %', timeofday()::varchar;
ALTER TABLE gtu disable trigger all;

DELETE FROM darwin2.gtu where

id not in (
SELECT unnest(ids[2:1000]) FROM (

(SELECT array_agg(id order by id) as ids
  FROM darwin2_rbins_data.gtu
  GROUP BY code, tag_values_indexed, latitude, longitude, lat_long_accuracy, 
       elevation, elevation_accuracy, location::varchar
       ORDER BY count(*) desc
) )a) and id  NOT in (SELECT gtu_Ref from darwin2.specimens);


ALTER TABLE gtu enable trigger all;

ALTEr table tags disable trigger all;

DELETE FROM tags where gtu_ref not in (select id from gtu);

ALTEr table tags enable trigger all;

ALTEr table tag_groups disable trigger all;

DELETE FROM tag_groups where gtu_ref not in (select id from gtu);

ALTEr table tag_groups enable trigger all;

RAISE NOTICE 'end of function %', timeofday()::varchar;
EXCEPTION WHEN OTHERS then
		 GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
                          RAISE NOTICE '%',text_var1;
			RAISE NOTICE 'DIFF_IN_FIELD_FOR : %',same_tables[i];
		END;

 return returned;


      
    END;
    $$;


ALTER FUNCTION public.rmca_migrate_rbins_rmca_normalize_gtus() OWNER TO postgres;

--
-- TOC entry 2046 (class 1255 OID 1440412)
-- Name: st_asbinary(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.st_asbinary(text) RETURNS bytea
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsBinary($1::geometry);  $_$;


ALTER FUNCTION public.st_asbinary(text) OWNER TO postgres;

--
-- TOC entry 4152 (class 1255 OID 1440413)
-- Name: array_accum(anyarray); Type: AGGREGATE; Schema: darwin2; Owner: darwin2
--

CREATE AGGREGATE darwin2.array_accum(anyarray) (
    SFUNC = array_cat,
    STYPE = anyarray,
    INITCOND = '{}'
);


ALTER AGGREGATE darwin2.array_accum(anyarray) OWNER TO darwin2;

--
-- TOC entry 4151 (class 1255 OID 1440414)
-- Name: array_cat_agg(anyarray); Type: AGGREGATE; Schema: darwin2; Owner: darwin2
--

CREATE AGGREGATE darwin2.array_cat_agg(anyarray) (
    SFUNC = array_cat,
    STYPE = anyarray
);


ALTER AGGREGATE darwin2.array_cat_agg(anyarray) OWNER TO darwin2;

--
-- TOC entry 5036 (class 2617 OID 1440415)
-- Name: =; Type: OPERATOR; Schema: darwin2; Owner: postgres
--

CREATE OPERATOR darwin2.= (
    FUNCTION = darwin2.point_equal,
    LEFTARG = point,
    RIGHTARG = point
);


ALTER OPERATOR darwin2.= (point, point) OWNER TO postgres;

--
-- TOC entry 5329 (class 2753 OID 1440416)
-- Name: gist_geometry_ops; Type: OPERATOR FAMILY; Schema: public; Owner: postgres
--

CREATE OPERATOR FAMILY public.gist_geometry_ops USING gist;


ALTER OPERATOR FAMILY public.gist_geometry_ops USING gist OWNER TO postgres;

--
-- TOC entry 5385 (class 1417 OID 1440417)
-- Name: darwin2_server; Type: SERVER; Schema: -; Owner: postgres
--

CREATE SERVER darwin2_server FOREIGN DATA WRAPPER postgres_fdw OPTIONS (
    dbname 'darwin2',
    host '127.0.0.1',
    port '5432'
);


ALTER SERVER darwin2_server OWNER TO postgres;

--
-- TOC entry 8437 (class 0 OID 0)
-- Name: USER MAPPING darwin2 SERVER darwin2_server; Type: USER MAPPING; Schema: -; Owner: postgres
--

CREATE USER MAPPING FOR darwin2 SERVER darwin2_server OPTIONS (
    password 'CeBmPadYc',
    "user" 'darwin2'
);


--
-- TOC entry 8438 (class 0 OID 0)
-- Name: USER MAPPING postgres SERVER darwin2_server; Type: USER MAPPING; Schema: -; Owner: postgres
--

CREATE USER MAPPING FOR postgres SERVER darwin2_server OPTIONS (
    password 'CeBmPadYc',
    "user" 'darwin2'
);


--
-- TOC entry 5384 (class 1417 OID 1440420)
-- Name: file_server; Type: SERVER; Schema: -; Owner: postgres
--

CREATE SERVER file_server FOREIGN DATA WRAPPER file_fdw;


ALTER SERVER file_server OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 1440421)
-- Name: authority_domain; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.authority_domain (
    id integer NOT NULL,
    name character varying NOT NULL,
    website_url character varying,
    webservice_root character varying,
    webservice_format character varying
);


ALTER TABLE darwin2.authority_domain OWNER TO darwin2;

--
-- TOC entry 8439 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE authority_domain; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.authority_domain IS 'List of all authority domains that contributed to a mapping';


--
-- TOC entry 8440 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN authority_domain.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.authority_domain.id IS 'Unique identifier of a authority domain.';


--
-- TOC entry 8441 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN authority_domain.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.authority_domain.name IS 'Name of the authority domain';


--
-- TOC entry 8442 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN authority_domain.website_url; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.authority_domain.website_url IS 'Front-end URL of the authority domain';


--
-- TOC entry 8443 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN authority_domain.webservice_root; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.authority_domain.webservice_root IS 'Webservice endpoint of the authority domain.';


--
-- TOC entry 8444 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN authority_domain.webservice_format; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.authority_domain.webservice_format IS 'Main returned format of the authority domain. Might be multiple.';


--
-- TOC entry 243 (class 1259 OID 1440427)
-- Name: authority_domain_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.authority_domain_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.authority_domain_id_seq OWNER TO darwin2;

--
-- TOC entry 8446 (class 0 OID 0)
-- Dependencies: 243
-- Name: authority_domain_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.authority_domain_id_seq OWNED BY darwin2.authority_domain.id;


--
-- TOC entry 244 (class 1259 OID 1440429)
-- Name: bibliography; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.bibliography (
    id integer NOT NULL,
    title character varying NOT NULL,
    title_indexed character varying NOT NULL,
    type character varying NOT NULL,
    abstract character varying DEFAULT ''::character varying NOT NULL,
    year integer,
    reference character varying,
    uri_protocol character varying,
    uri character varying
);


ALTER TABLE darwin2.bibliography OWNER TO darwin2;

--
-- TOC entry 8448 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE bibliography; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.bibliography IS 'List of expeditions made to collect specimens';


--
-- TOC entry 8449 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.id IS 'Unique identifier';


--
-- TOC entry 8450 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.title; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.title IS 'bibliography title';


--
-- TOC entry 8451 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.title_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.title_indexed IS 'Indexed form of title';


--
-- TOC entry 8452 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.type IS 'bibliography type : article, book, booklet';


--
-- TOC entry 8453 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.abstract; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.abstract IS 'optional abstract of the bibliography';


--
-- TOC entry 8454 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN bibliography.year; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.bibliography.year IS 'The year of publication (or, if unpublished, the year of creation)';


--
-- TOC entry 245 (class 1259 OID 1440436)
-- Name: bibliography_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.bibliography_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.bibliography_id_seq OWNER TO darwin2;

--
-- TOC entry 8456 (class 0 OID 0)
-- Dependencies: 245
-- Name: bibliography_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.bibliography_id_seq OWNED BY darwin2.bibliography.id;


--
-- TOC entry 246 (class 1259 OID 1440438)
-- Name: template_table_record_ref; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.template_table_record_ref (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL
);


ALTER TABLE darwin2.template_table_record_ref OWNER TO darwin2;

--
-- TOC entry 8458 (class 0 OID 0)
-- Dependencies: 246
-- Name: TABLE template_table_record_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.template_table_record_ref IS 'Template called to add referenced_relation and record_id fields';


--
-- TOC entry 8459 (class 0 OID 0)
-- Dependencies: 246
-- Name: COLUMN template_table_record_ref.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_table_record_ref.referenced_relation IS 'Reference-Name of table concerned';


--
-- TOC entry 8460 (class 0 OID 0)
-- Dependencies: 246
-- Name: COLUMN template_table_record_ref.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_table_record_ref.record_id IS 'Id of record concerned';


--
-- TOC entry 247 (class 1259 OID 1440444)
-- Name: catalogue_bibliography; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.catalogue_bibliography (
    id integer NOT NULL,
    bibliography_ref integer NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.catalogue_bibliography OWNER TO darwin2;

--
-- TOC entry 8462 (class 0 OID 0)
-- Dependencies: 247
-- Name: TABLE catalogue_bibliography; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.catalogue_bibliography IS 'List of people of catalogues units - Taxonomy, Chronostratigraphy,...';


--
-- TOC entry 8463 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN catalogue_bibliography.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_bibliography.referenced_relation IS 'Identifier-Name of table the units come from';


--
-- TOC entry 8464 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN catalogue_bibliography.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_bibliography.record_id IS 'Identifier of record concerned in table concerned';


--
-- TOC entry 8465 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN catalogue_bibliography.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_bibliography.id IS 'Unique identifier of record';


--
-- TOC entry 8466 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN catalogue_bibliography.bibliography_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_bibliography.bibliography_ref IS 'Reference of the biblio concerned - id field of people table';


--
-- TOC entry 248 (class 1259 OID 1440450)
-- Name: catalogue_bibliography_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.catalogue_bibliography_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.catalogue_bibliography_id_seq OWNER TO darwin2;

--
-- TOC entry 8468 (class 0 OID 0)
-- Dependencies: 248
-- Name: catalogue_bibliography_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.catalogue_bibliography_id_seq OWNED BY darwin2.catalogue_bibliography.id;


--
-- TOC entry 249 (class 1259 OID 1440452)
-- Name: catalogue_levels_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.catalogue_levels_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.catalogue_levels_id_seq OWNER TO darwin2;

--
-- TOC entry 250 (class 1259 OID 1440454)
-- Name: catalogue_levels; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.catalogue_levels (
    id integer DEFAULT nextval('darwin2.catalogue_levels_id_seq'::regclass) NOT NULL,
    level_type character varying NOT NULL,
    level_name character varying NOT NULL,
    level_sys_name character varying NOT NULL,
    optional_level boolean DEFAULT false NOT NULL,
    level_order integer DEFAULT 999 NOT NULL
);


ALTER TABLE darwin2.catalogue_levels OWNER TO darwin2;

--
-- TOC entry 8471 (class 0 OID 0)
-- Dependencies: 250
-- Name: TABLE catalogue_levels; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.catalogue_levels IS 'List of hierarchical units levels - organized by type of unit: taxonomy, chroostratigraphy,...';


--
-- TOC entry 8472 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN catalogue_levels.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_levels.id IS 'Unique identifier of a hierarchical unit level';


--
-- TOC entry 8473 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN catalogue_levels.level_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_levels.level_type IS 'Type of unit the levels is applicable to - contained in a predifined list: taxonomy, chronostratigraphy,...';


--
-- TOC entry 8474 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN catalogue_levels.level_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_levels.level_name IS 'Name given to level concerned';


--
-- TOC entry 8475 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN catalogue_levels.level_sys_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_levels.level_sys_name IS 'Name given to level concerned in the system. i.e.: cohort zoology will be writen in system as cohort_zoology';


--
-- TOC entry 8476 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN catalogue_levels.optional_level; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_levels.optional_level IS 'Tells if the level is optional';


--
-- TOC entry 251 (class 1259 OID 1440463)
-- Name: catalogue_people_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.catalogue_people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.catalogue_people_id_seq OWNER TO darwin2;

--
-- TOC entry 252 (class 1259 OID 1440465)
-- Name: catalogue_people; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.catalogue_people (
    id integer DEFAULT nextval('darwin2.catalogue_people_id_seq'::regclass) NOT NULL,
    people_type character varying DEFAULT 'author'::character varying NOT NULL,
    people_sub_type character varying DEFAULT ''::character varying NOT NULL,
    order_by integer DEFAULT 1 NOT NULL,
    people_ref integer NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.catalogue_people OWNER TO darwin2;

--
-- TOC entry 8479 (class 0 OID 0)
-- Dependencies: 252
-- Name: TABLE catalogue_people; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.catalogue_people IS 'List of people of catalogues units - Taxonomy, Chronostratigraphy,...';


--
-- TOC entry 8480 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.referenced_relation IS 'Identifier-Name of table the units come from';


--
-- TOC entry 8481 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.record_id IS 'Identifier of record concerned in table concerned';


--
-- TOC entry 8482 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.id IS 'Unique identifier of record';


--
-- TOC entry 8483 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.people_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.people_type IS 'Type of "people" associated to the catalogue unit: authors, collectors, defined,  ...';


--
-- TOC entry 8484 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.people_sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.people_sub_type IS 'Type of "people" associated to the catalogue unit: Main author, corrector, taking the sense from,...';


--
-- TOC entry 8485 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.order_by; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.order_by IS 'Integer used to order the persons in a list';


--
-- TOC entry 8486 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN catalogue_people.people_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_people.people_ref IS 'Reference of person concerned - id field of people table';


--
-- TOC entry 253 (class 1259 OID 1440475)
-- Name: catalogue_properties_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.catalogue_properties_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.catalogue_properties_id_seq OWNER TO darwin2;

--
-- TOC entry 254 (class 1259 OID 1440477)
-- Name: catalogue_relationships_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.catalogue_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.catalogue_relationships_id_seq OWNER TO darwin2;

--
-- TOC entry 255 (class 1259 OID 1440479)
-- Name: catalogue_relationships; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.catalogue_relationships (
    id integer DEFAULT nextval('darwin2.catalogue_relationships_id_seq'::regclass) NOT NULL,
    referenced_relation character varying NOT NULL,
    record_id_1 integer NOT NULL,
    record_id_2 integer NOT NULL,
    relationship_type character varying DEFAULT 'recombined from'::character varying NOT NULL,
    CONSTRAINT chk_not_related_to_self CHECK ((record_id_1 <> record_id_2))
);


ALTER TABLE darwin2.catalogue_relationships OWNER TO darwin2;

--
-- TOC entry 8490 (class 0 OID 0)
-- Dependencies: 255
-- Name: TABLE catalogue_relationships; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.catalogue_relationships IS 'Stores the relationships between records of a table - current name, original combination, ...';


--
-- TOC entry 8491 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN catalogue_relationships.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_relationships.referenced_relation IS 'Reference of the table a relationship is defined for';


--
-- TOC entry 8492 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN catalogue_relationships.record_id_1; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_relationships.record_id_1 IS 'Identifier of record in relation with an other one (record_id_2)';


--
-- TOC entry 8493 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN catalogue_relationships.record_id_2; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_relationships.record_id_2 IS 'Identifier of record in relation with an other one (record_id_1)';


--
-- TOC entry 8494 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN catalogue_relationships.relationship_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.catalogue_relationships.relationship_type IS 'Type of relation between record 1 and record 2 - current name, original combination, ...';


--
-- TOC entry 256 (class 1259 OID 1440488)
-- Name: chronostratigraphy_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.chronostratigraphy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.chronostratigraphy_id_seq OWNER TO darwin2;

--
-- TOC entry 257 (class 1259 OID 1440490)
-- Name: template_classifications; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.template_classifications (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying DEFAULT 'valid'::character varying NOT NULL,
    local_naming boolean DEFAULT false NOT NULL,
    color character varying,
    path character varying DEFAULT '/'::character varying NOT NULL,
    parent_ref integer,
    metadata_ref integer
);


ALTER TABLE darwin2.template_classifications OWNER TO darwin2;

--
-- TOC entry 8497 (class 0 OID 0)
-- Dependencies: 257
-- Name: TABLE template_classifications; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.template_classifications IS 'Template table used to construct every common data in each classifications tables (taxonomy, chronostratigraphy, lithostratigraphy,...)';


--
-- TOC entry 8498 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.name IS 'Classification unit name';


--
-- TOC entry 8499 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.name_indexed IS 'Indexed form of name field for ordering';


--
-- TOC entry 8500 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8501 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8502 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.local_naming; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.local_naming IS 'Flag telling the appelation is local or internationally recognized';


--
-- TOC entry 8503 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.color; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.color IS 'Hexadecimal value of color associated to the unit';


--
-- TOC entry 8504 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8505 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN template_classifications.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_classifications.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 258 (class 1259 OID 1440499)
-- Name: chronostratigraphy; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.chronostratigraphy (
    id integer DEFAULT nextval('darwin2.chronostratigraphy_id_seq'::regclass) NOT NULL,
    lower_bound numeric(10,3),
    upper_bound numeric(10,3),
    CONSTRAINT fct_chk_onceinpath_chronostratigraphy CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
)
INHERITS (darwin2.template_classifications);


ALTER TABLE darwin2.chronostratigraphy OWNER TO darwin2;

--
-- TOC entry 8507 (class 0 OID 0)
-- Dependencies: 258
-- Name: TABLE chronostratigraphy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.chronostratigraphy IS 'List of chronostratigraphic units';


--
-- TOC entry 8508 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.name IS 'Classification unit name';


--
-- TOC entry 8509 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.name_indexed IS 'Indexed form of name field';


--
-- TOC entry 8510 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8511 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8512 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8513 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 8514 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.id IS 'Unique identifier of a classification unit';


--
-- TOC entry 8515 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.lower_bound; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.lower_bound IS 'Lower age boundary in years';


--
-- TOC entry 8516 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN chronostratigraphy.upper_bound; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.chronostratigraphy.upper_bound IS 'Upper age boundary in years';


--
-- TOC entry 259 (class 1259 OID 1440510)
-- Name: class_vernacular_names_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.class_vernacular_names_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.class_vernacular_names_id_seq OWNER TO darwin2;

--
-- TOC entry 260 (class 1259 OID 1440512)
-- Name: classification_keywords_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.classification_keywords_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.classification_keywords_id_seq OWNER TO darwin2;

--
-- TOC entry 261 (class 1259 OID 1440514)
-- Name: classification_keywords; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.classification_keywords (
    id integer DEFAULT nextval('darwin2.classification_keywords_id_seq'::regclass) NOT NULL,
    keyword_type character varying DEFAULT 'name'::character varying NOT NULL,
    keyword character varying NOT NULL,
    keyword_indexed character varying NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.classification_keywords OWNER TO darwin2;

--
-- TOC entry 8520 (class 0 OID 0)
-- Dependencies: 261
-- Name: TABLE classification_keywords; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.classification_keywords IS 'Help user to tag-label each part of full name in classifications';


--
-- TOC entry 8521 (class 0 OID 0)
-- Dependencies: 261
-- Name: COLUMN classification_keywords.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_keywords.referenced_relation IS 'Name of classifification table: taxonomy, lithology,...';


--
-- TOC entry 8522 (class 0 OID 0)
-- Dependencies: 261
-- Name: COLUMN classification_keywords.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_keywords.record_id IS 'Id of record concerned';


--
-- TOC entry 8523 (class 0 OID 0)
-- Dependencies: 261
-- Name: COLUMN classification_keywords.keyword_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_keywords.keyword_type IS 'Keyword type: name, year, authoritative keyword,...';


--
-- TOC entry 8524 (class 0 OID 0)
-- Dependencies: 261
-- Name: COLUMN classification_keywords.keyword; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_keywords.keyword IS 'Keyword';


--
-- TOC entry 262 (class 1259 OID 1440522)
-- Name: classification_synonymies_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.classification_synonymies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.classification_synonymies_id_seq OWNER TO darwin2;

--
-- TOC entry 263 (class 1259 OID 1440524)
-- Name: classification_synonymies; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.classification_synonymies (
    id integer DEFAULT nextval('darwin2.classification_synonymies_id_seq'::regclass) NOT NULL,
    group_id integer NOT NULL,
    group_name character varying NOT NULL,
    is_basionym boolean DEFAULT false,
    order_by integer DEFAULT 0 NOT NULL,
    synonym_record_id integer,
    original_synonym boolean
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.classification_synonymies OWNER TO darwin2;

--
-- TOC entry 8527 (class 0 OID 0)
-- Dependencies: 263
-- Name: TABLE classification_synonymies; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.classification_synonymies IS 'Table containing classification synonymies';


--
-- TOC entry 8528 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.referenced_relation IS 'Classification table concerned';


--
-- TOC entry 8529 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.record_id IS 'Id of record placed in group as a synonym';


--
-- TOC entry 8530 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.group_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.group_id IS 'Id given to group';


--
-- TOC entry 8531 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.group_name IS 'Name of group under which synonyms are placed';


--
-- TOC entry 8532 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.is_basionym; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.is_basionym IS 'If record is a basionym';


--
-- TOC entry 8533 (class 0 OID 0)
-- Dependencies: 263
-- Name: COLUMN classification_synonymies.order_by; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.classification_synonymies.order_by IS 'Order by used to qualify order amongst synonyms - used mainly for senio and junior synonyms';


--
-- TOC entry 264 (class 1259 OID 1440533)
-- Name: classification_synonymies_group_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.classification_synonymies_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.classification_synonymies_group_id_seq OWNER TO darwin2;

--
-- TOC entry 265 (class 1259 OID 1440535)
-- Name: classification_synonymies_history; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.classification_synonymies_history (
    id integer NOT NULL,
    group_id integer NOT NULL,
    group_name character varying NOT NULL,
    is_basionym boolean DEFAULT false,
    order_by integer DEFAULT 0 NOT NULL,
    modification_date_time timestamp without time zone,
    user_name character varying,
    taxon_name character varying,
    action character varying
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.classification_synonymies_history OWNER TO darwin2;

--
-- TOC entry 266 (class 1259 OID 1440543)
-- Name: classification_synonymies_history_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.classification_synonymies_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.classification_synonymies_history_id_seq OWNER TO darwin2;

--
-- TOC entry 8537 (class 0 OID 0)
-- Dependencies: 266
-- Name: classification_synonymies_history_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.classification_synonymies_history_id_seq OWNED BY darwin2.classification_synonymies_history.id;


--
-- TOC entry 267 (class 1259 OID 1440545)
-- Name: codes_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.codes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.codes_id_seq OWNER TO darwin2;

--
-- TOC entry 268 (class 1259 OID 1440547)
-- Name: codes; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.codes (
    id integer DEFAULT nextval('darwin2.codes_id_seq'::regclass) NOT NULL,
    code_category character varying DEFAULT 'main'::character varying NOT NULL,
    code_prefix character varying,
    code_prefix_separator character varying,
    code character varying,
    code_suffix character varying,
    code_suffix_separator character varying,
    full_code_indexed character varying NOT NULL,
    code_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    code_date_mask integer DEFAULT 0 NOT NULL,
    code_num bigint DEFAULT 0
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.codes OWNER TO darwin2;

--
-- TOC entry 8540 (class 0 OID 0)
-- Dependencies: 268
-- Name: TABLE codes; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.codes IS 'Template used to construct the specimen codes tables';


--
-- TOC entry 8541 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.referenced_relation IS 'Reference name of table concerned';


--
-- TOC entry 8542 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.record_id IS 'Identifier of record concerned';


--
-- TOC entry 8543 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.id IS 'Unique identifier of a code';


--
-- TOC entry 8544 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_category; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_category IS 'Category of code: main, secondary, temporary,...';


--
-- TOC entry 8545 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_prefix; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_prefix IS 'Code prefix - entire code if all alpha, begining character part if code is made of characters and numeric parts';


--
-- TOC entry 8546 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_prefix_separator; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_prefix_separator IS 'Separtor used between code core and code prefix';


--
-- TOC entry 8547 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code IS 'Numerical part of code - but not forced: if users want to use it as alphanumerical code - possible too';


--
-- TOC entry 8548 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_suffix; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_suffix IS 'For codes made of characters and numerical parts, this field stores the last alpha part of code';


--
-- TOC entry 8549 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_suffix_separator; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_suffix_separator IS 'Separtor used between code core and code suffix';


--
-- TOC entry 8550 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.full_code_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.full_code_indexed IS 'Full code composition by code_prefix, code and code suffix concatenation and indexed for unique check purpose';


--
-- TOC entry 8551 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_date IS 'Date of code creation (fuzzy date)';


--
-- TOC entry 8552 (class 0 OID 0)
-- Dependencies: 268
-- Name: COLUMN codes.code_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.codes.code_date_mask IS 'Mask used for code date';


--
-- TOC entry 269 (class 1259 OID 1440558)
-- Name: collecting_methods_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.collecting_methods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.collecting_methods_id_seq OWNER TO darwin2;

--
-- TOC entry 270 (class 1259 OID 1440560)
-- Name: collecting_methods; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.collecting_methods (
    id integer DEFAULT nextval('darwin2.collecting_methods_id_seq'::regclass) NOT NULL,
    method character varying NOT NULL,
    method_indexed character varying NOT NULL,
    CONSTRAINT chk_collecting_methods_method CHECK (((method)::text <> ''::text))
);


ALTER TABLE darwin2.collecting_methods OWNER TO darwin2;

--
-- TOC entry 8555 (class 0 OID 0)
-- Dependencies: 270
-- Name: TABLE collecting_methods; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.collecting_methods IS 'List of all available collecting methods';


--
-- TOC entry 8556 (class 0 OID 0)
-- Dependencies: 270
-- Name: COLUMN collecting_methods.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_methods.id IS 'Unique identifier of a collecting method';


--
-- TOC entry 8557 (class 0 OID 0)
-- Dependencies: 270
-- Name: COLUMN collecting_methods.method; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_methods.method IS 'Method used';


--
-- TOC entry 8558 (class 0 OID 0)
-- Dependencies: 270
-- Name: COLUMN collecting_methods.method_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_methods.method_indexed IS 'Indexed form of method used - for ordering and filtering purposes';


--
-- TOC entry 271 (class 1259 OID 1440568)
-- Name: collecting_tools_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.collecting_tools_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.collecting_tools_id_seq OWNER TO darwin2;

--
-- TOC entry 272 (class 1259 OID 1440570)
-- Name: collecting_tools; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.collecting_tools (
    id integer DEFAULT nextval('darwin2.collecting_tools_id_seq'::regclass) NOT NULL,
    tool character varying NOT NULL,
    tool_indexed character varying NOT NULL,
    CONSTRAINT chk_collecting_tools_tool CHECK (((tool)::text <> ''::text))
);


ALTER TABLE darwin2.collecting_tools OWNER TO darwin2;

--
-- TOC entry 8561 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE collecting_tools; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.collecting_tools IS 'List of all available collecting tools';


--
-- TOC entry 8562 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN collecting_tools.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_tools.id IS 'Unique identifier of a collecting tool';


--
-- TOC entry 8563 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN collecting_tools.tool; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_tools.tool IS 'Tool used';


--
-- TOC entry 8564 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN collecting_tools.tool_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collecting_tools.tool_indexed IS 'Indexed form of tool used - for ordering and filtering purposes';


--
-- TOC entry 273 (class 1259 OID 1440578)
-- Name: collection_maintenance_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.collection_maintenance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.collection_maintenance_id_seq OWNER TO darwin2;

--
-- TOC entry 274 (class 1259 OID 1440580)
-- Name: collection_maintenance; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.collection_maintenance (
    id integer DEFAULT nextval('darwin2.collection_maintenance_id_seq'::regclass) NOT NULL,
    people_ref integer,
    category character varying DEFAULT 'action'::character varying NOT NULL,
    action_observation character varying NOT NULL,
    description character varying,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL,
    modification_date_mask integer DEFAULT 0 NOT NULL,
    description_indexed text
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.collection_maintenance OWNER TO darwin2;

--
-- TOC entry 8567 (class 0 OID 0)
-- Dependencies: 274
-- Name: TABLE collection_maintenance; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.collection_maintenance IS 'History of specimen maintenance';


--
-- TOC entry 8568 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.referenced_relation IS 'Reference of table a maintenance entry has been created for';


--
-- TOC entry 8569 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.record_id IS 'ID of record a maintenance entry has been created for';


--
-- TOC entry 8570 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.id IS 'Unique identifier of a specimen maintenance';


--
-- TOC entry 8571 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.people_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.people_ref IS 'Reference of person having done an action or an observation';


--
-- TOC entry 8572 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.category; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.category IS 'Action or Observation';


--
-- TOC entry 8573 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.action_observation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.action_observation IS 'Action or observation done';


--
-- TOC entry 8574 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.description; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.description IS 'Complementary description';


--
-- TOC entry 8575 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.modification_date_time IS 'Last update date/time';


--
-- TOC entry 8576 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN collection_maintenance.description_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collection_maintenance.description_indexed IS 'indexed form of description field';


--
-- TOC entry 275 (class 1259 OID 1440590)
-- Name: collections_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.collections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.collections_id_seq OWNER TO darwin2;

--
-- TOC entry 276 (class 1259 OID 1440592)
-- Name: collections; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.collections (
    id integer DEFAULT nextval('darwin2.collections_id_seq'::regclass) NOT NULL,
    collection_type character varying DEFAULT 'mix'::character varying NOT NULL,
    code character varying NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL,
    institution_ref integer NOT NULL,
    main_manager_ref integer NOT NULL,
    parent_ref integer,
    path character varying NOT NULL,
    code_auto_increment boolean DEFAULT false NOT NULL,
    code_last_value bigint DEFAULT 0 NOT NULL,
    code_prefix character varying,
    code_prefix_separator character varying,
    code_suffix character varying,
    code_suffix_separator character varying,
    is_public boolean DEFAULT true NOT NULL,
    code_specimen_duplicate boolean DEFAULT false NOT NULL,
    staff_ref integer,
    code_auto_increment_for_insert_only boolean DEFAULT true NOT NULL,
    code_mask character varying,
    allow_duplicates boolean DEFAULT false,
    publish_to_gbif boolean,
    profile text[],
    title_en text,
    title_nl text,
    title_fr text,
    code_ai_inherit boolean DEFAULT false,
    preferred_taxonomy integer,
    uid character varying(1000),
    nagoya character varying DEFAULT 'not defined'::character varying,
    CONSTRAINT chk_main_manager_ref CHECK ((main_manager_ref > 0)),
    CONSTRAINT fct_chk_onceinpath_collections CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
);


ALTER TABLE darwin2.collections OWNER TO darwin2;

--
-- TOC entry 8579 (class 0 OID 0)
-- Dependencies: 276
-- Name: TABLE collections; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.collections IS 'List of all collections encoded in DaRWIN 2';


--
-- TOC entry 8580 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.id IS 'Unique identifier of a collection';


--
-- TOC entry 8581 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.collection_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.collection_type IS 'Type of collection: physical for a collection of only physical objects, observations for a collection of only observations, mix for any kind of entry catalogued in collection';


--
-- TOC entry 8582 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code IS 'Code given to collection';


--
-- TOC entry 8583 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.name IS 'Collection name';


--
-- TOC entry 8584 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.name_indexed IS 'Collection name indexed';


--
-- TOC entry 8585 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.institution_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.institution_ref IS 'Reference of institution current collection belongs to - id field of people table';


--
-- TOC entry 8586 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.main_manager_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.main_manager_ref IS 'Reference of collection main manager - id field of users table';


--
-- TOC entry 8587 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.parent_ref IS 'Recursive reference to collection table itself to represent collection parenty/hierarchy';


--
-- TOC entry 8588 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.path IS 'Descriptive path for collection hierarchy, each level separated by a /';


--
-- TOC entry 8589 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_auto_increment; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_auto_increment IS 'Flag telling if the numerical part of a code has to be incremented or not';


--
-- TOC entry 8590 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_last_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_last_value IS 'Value of the last numeric code given in this collection when auto increment is/was activated';


--
-- TOC entry 8591 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_prefix; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_prefix IS 'Default code prefix to be used for specimens encoded in this collection';


--
-- TOC entry 8592 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_prefix_separator; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_prefix_separator IS 'Character chain used to separate code prefix from code core';


--
-- TOC entry 8593 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_suffix; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_suffix IS 'Default code suffix to be used for specimens encoded in this collection';


--
-- TOC entry 8594 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_suffix_separator; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_suffix_separator IS 'Character chain used to separate code suffix from code core';


--
-- TOC entry 8595 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.is_public; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.is_public IS 'Flag telling if the collection can be found in the public search';


--
-- TOC entry 8596 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_specimen_duplicate; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_specimen_duplicate IS 'Flag telling if the whole specimen code has to be copied when you do a duplicate';


--
-- TOC entry 8597 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.staff_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.staff_ref IS 'Reference of staff member, scientist responsible - id field of users table';


--
-- TOC entry 8598 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_auto_increment_for_insert_only; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_auto_increment_for_insert_only IS 'Flag telling if the autoincremented code insertion has to be done only after insertion of specimens or also after updates of specimens';


--
-- TOC entry 8599 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_mask IS 'A mask that should be applied to help encode following a specific structured way';


--
-- TOC entry 8600 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.code_ai_inherit; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.code_ai_inherit IS 'jm herpers 2017 11 08';


--
-- TOC entry 8601 (class 0 OID 0)
-- Dependencies: 276
-- Name: COLUMN collections.uid; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections.uid IS 'Stable , structured and unique collzction identifier to map specimens to scientific networks (e.g : GBIF, OBIS). Should be meaningful and hierarchical (e.g : ISO 3166- ACRONYM_INSTITUTION-PARENT_COLLECTION-SUB_COLLECTION )';


--
-- TOC entry 277 (class 1259 OID 1440610)
-- Name: collections_rights_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.collections_rights_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.collections_rights_id_seq OWNER TO darwin2;

--
-- TOC entry 278 (class 1259 OID 1440612)
-- Name: collections_rights; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.collections_rights (
    collection_ref integer DEFAULT 0 NOT NULL,
    user_ref integer DEFAULT 0 NOT NULL,
    id integer DEFAULT nextval('darwin2.collections_rights_id_seq'::regclass) NOT NULL,
    db_user_type smallint DEFAULT 1 NOT NULL
);


ALTER TABLE darwin2.collections_rights OWNER TO darwin2;

--
-- TOC entry 8604 (class 0 OID 0)
-- Dependencies: 278
-- Name: TABLE collections_rights; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.collections_rights IS 'List of rights of given users on given collections';


--
-- TOC entry 8605 (class 0 OID 0)
-- Dependencies: 278
-- Name: COLUMN collections_rights.collection_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections_rights.collection_ref IS 'Reference of collection concerned - id field of collections table';


--
-- TOC entry 8606 (class 0 OID 0)
-- Dependencies: 278
-- Name: COLUMN collections_rights.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections_rights.user_ref IS 'Reference of user - id field of users table';


--
-- TOC entry 8607 (class 0 OID 0)
-- Dependencies: 278
-- Name: COLUMN collections_rights.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections_rights.id IS 'Unique identifier for collection rights';


--
-- TOC entry 8608 (class 0 OID 0)
-- Dependencies: 278
-- Name: COLUMN collections_rights.db_user_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.collections_rights.db_user_type IS 'Integer is representing a role: 1 for registered user, 2 for encoder, 4 for collection manager, 8 for system admin,...';


--
-- TOC entry 279 (class 1259 OID 1440619)
-- Name: comments_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.comments_id_seq OWNER TO darwin2;

--
-- TOC entry 280 (class 1259 OID 1440621)
-- Name: comments; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.comments (
    id integer DEFAULT nextval('darwin2.comments_id_seq'::regclass) NOT NULL,
    notion_concerned character varying NOT NULL,
    comment text NOT NULL,
    comment_indexed text NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.comments OWNER TO darwin2;

--
-- TOC entry 8611 (class 0 OID 0)
-- Dependencies: 280
-- Name: TABLE comments; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.comments IS 'Comments associated to a record of a given table (and maybe a given field) on a given subject';


--
-- TOC entry 8612 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.referenced_relation IS 'Reference-Name of table a comment is posted for';


--
-- TOC entry 8613 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.record_id IS 'Identifier of the record concerned';


--
-- TOC entry 8614 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.id IS 'Unique identifier of a comment';


--
-- TOC entry 8615 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.notion_concerned; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.notion_concerned IS 'Notion concerned by comment';


--
-- TOC entry 8616 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.comment; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.comment IS 'Comment';


--
-- TOC entry 8617 (class 0 OID 0)
-- Dependencies: 280
-- Name: COLUMN comments.comment_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.comments.comment_indexed IS 'indexed form of comment field';


--
-- TOC entry 281 (class 1259 OID 1440628)
-- Name: darwin_flat_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.darwin_flat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.darwin_flat_id_seq OWNER TO darwin2;

--
-- TOC entry 282 (class 1259 OID 1440630)
-- Name: db_version; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.db_version (
    id integer NOT NULL,
    update_at timestamp without time zone DEFAULT now()
);


ALTER TABLE darwin2.db_version OWNER TO darwin2;

--
-- TOC entry 8620 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE db_version; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.db_version IS 'Table holding the database version and update date';


--
-- TOC entry 283 (class 1259 OID 1440634)
-- Name: properties; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.properties (
    id integer NOT NULL,
    property_type character varying NOT NULL,
    applies_to character varying DEFAULT ''::character varying NOT NULL,
    applies_to_indexed character varying NOT NULL,
    date_from_mask integer DEFAULT 0 NOT NULL,
    date_from timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    date_to_mask integer DEFAULT 0 NOT NULL,
    date_to timestamp without time zone DEFAULT '2038-12-31 00:00:00'::timestamp without time zone NOT NULL,
    is_quantitative boolean DEFAULT false NOT NULL,
    property_unit character varying DEFAULT ''::character varying NOT NULL,
    method character varying,
    method_indexed character varying NOT NULL,
    lower_value character varying NOT NULL,
    lower_value_unified double precision,
    upper_value character varying NOT NULL,
    upper_value_unified double precision,
    property_accuracy character varying DEFAULT ''::character varying NOT NULL,
    property_type_ref bigint
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.properties OWNER TO darwin2;

--
-- TOC entry 8622 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE properties; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.properties IS 'All properties or all measurements describing an object in darwin are stored in this table';


--
-- TOC entry 8623 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.referenced_relation IS 'Identifier-Name of the table a property is defined for';


--
-- TOC entry 8624 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.record_id IS 'Identifier of record a property is defined for';


--
-- TOC entry 8625 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.property_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.property_type IS 'Type-Category of property - Latitude, Longitude, Ph, Height, Weight, Color, Temperature, Wind direction,...';


--
-- TOC entry 8626 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.applies_to; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.applies_to IS 'Depending on the use of the type, this can further specify the actual part measured. For example, a measurement of temperature may be a surface, air or sub-surface measurement.';


--
-- TOC entry 8627 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.applies_to_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.applies_to_indexed IS 'Indexed form of Sub type of property - if subtype is null, takes a generic replacement value';


--
-- TOC entry 8628 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.date_from_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.date_from_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8629 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.date_from; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.date_from IS 'For a range of measurements, give the measurement start - if null, takes a generic replacement value';


--
-- TOC entry 8630 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.date_to_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.date_to_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8631 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.date_to; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.date_to IS 'For a range of measurements, give the measurement stop date/time - if null, takes a generic replacement value';


--
-- TOC entry 8632 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.property_unit; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.property_unit IS 'Unit used for property value introduced';


--
-- TOC entry 8633 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.method; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.method IS 'Method used to collect property value';


--
-- TOC entry 8634 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.method_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.method_indexed IS 'Indexed version of property_method field - if null, takes a generic replacement value';


--
-- TOC entry 8635 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.lower_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.lower_value IS 'Lower value of Single Value';


--
-- TOC entry 8636 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.lower_value_unified; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.lower_value_unified IS 'unified version of the value for comparison with other units';


--
-- TOC entry 8637 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.upper_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.upper_value IS 'upper value if in bound';


--
-- TOC entry 8638 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.upper_value_unified; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.upper_value_unified IS 'unified version of the value for comparison with other units';


--
-- TOC entry 8639 (class 0 OID 0)
-- Dependencies: 283
-- Name: COLUMN properties.property_accuracy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.properties.property_accuracy IS 'Accuracy of the values';


--
-- TOC entry 284 (class 1259 OID 1440648)
-- Name: doctrine_gtu_comments; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_gtu_comments AS
 SELECT c.record_id AS id,
    c.record_id,
    string_agg(btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment))), '|'::text ORDER BY c.id) AS comments
   FROM darwin2.comments c
  WHERE ((c.referenced_relation)::text = 'gtu'::text)
  GROUP BY c.record_id
UNION
 SELECT DISTINCT properties.record_id AS id,
    properties.record_id,
    string_agg(btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text))), '|'::text ORDER BY properties.id) AS comments
   FROM darwin2.properties
  WHERE ((properties.referenced_relation)::text = 'gtu'::text)
  GROUP BY properties.record_id;


ALTER TABLE darwin2.doctrine_gtu_comments OWNER TO darwin2;

--
-- TOC entry 285 (class 1259 OID 1440653)
-- Name: identifications_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.identifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.identifications_id_seq OWNER TO darwin2;

--
-- TOC entry 286 (class 1259 OID 1440655)
-- Name: identifications; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.identifications (
    id integer DEFAULT nextval('darwin2.identifications_id_seq'::regclass) NOT NULL,
    notion_concerned character varying NOT NULL,
    notion_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    notion_date_mask integer DEFAULT 0 NOT NULL,
    value_defined character varying,
    value_defined_indexed character varying NOT NULL,
    determination_status character varying,
    order_by integer DEFAULT 1 NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.identifications OWNER TO darwin2;

--
-- TOC entry 8643 (class 0 OID 0)
-- Dependencies: 286
-- Name: TABLE identifications; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.identifications IS 'History of identifications';


--
-- TOC entry 8644 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.referenced_relation IS 'Reference of table an identification is introduced for';


--
-- TOC entry 8645 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.record_id IS 'Id of record concerned by an identification entry';


--
-- TOC entry 8646 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.id IS 'Unique identifier of an identification';


--
-- TOC entry 8647 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.notion_concerned; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.notion_concerned IS 'Type of entry: Identification on a specific concern';


--
-- TOC entry 8648 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.notion_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.notion_date IS 'Date of identification or preparation';


--
-- TOC entry 8649 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.notion_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.notion_date_mask IS 'Date/Time mask used for identification date fuzzyness';


--
-- TOC entry 8650 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.value_defined; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.value_defined IS 'When making identification, stores the value resulting of this identification';


--
-- TOC entry 8651 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.value_defined_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.value_defined_indexed IS 'Indexed form of value_defined field';


--
-- TOC entry 8652 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.determination_status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.determination_status IS 'Status of identification - can either be a percentage of certainty or a code describing the identification step in the process';


--
-- TOC entry 8653 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN identifications.order_by; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.identifications.order_by IS 'Integer used to order the identifications when no date entered';


--
-- TOC entry 287 (class 1259 OID 1440665)
-- Name: doctrine_taxonomic_identifications; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_taxonomic_identifications AS
 SELECT i.record_id AS id,
    i.record_id,
    string_agg(btrim((((COALESCE(i.value_defined, ''::character varying))::text || ' '::text) || COALESCE(darwin2.fct_mask_date(i.notion_date, i.notion_date_mask), ''::text))), '|'::text ORDER BY i.notion_date DESC) AS taxonomic_identification
   FROM darwin2.identifications i
  WHERE ((i.referenced_relation)::text = 'specimens'::text)
  GROUP BY i.record_id;


ALTER TABLE darwin2.doctrine_taxonomic_identifications OWNER TO darwin2;

--
-- TOC entry 288 (class 1259 OID 1440669)
-- Name: gtu_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.gtu_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.gtu_id_seq OWNER TO darwin2;

--
-- TOC entry 289 (class 1259 OID 1440671)
-- Name: gtu; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.gtu (
    id integer DEFAULT nextval('darwin2.gtu_id_seq'::regclass) NOT NULL,
    code character varying DEFAULT ''::character varying NOT NULL,
    gtu_from_date_mask integer DEFAULT 0 NOT NULL,
    gtu_from_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    gtu_to_date_mask integer DEFAULT 0 NOT NULL,
    gtu_to_date timestamp without time zone DEFAULT '2038-12-31 00:00:00'::timestamp without time zone NOT NULL,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    elevation double precision,
    elevation_accuracy double precision,
    location point,
    gtu_creation_date timestamp without time zone DEFAULT now(),
    import_ref integer,
    collector_refs integer[],
    expedition_refs integer[],
    collection_ref integer,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying,
    nagoya character varying DEFAULT 'not defined'::character varying,
    expedition_ref integer,
    geom public.geometry
);


ALTER TABLE darwin2.gtu OWNER TO darwin2;

--
-- TOC entry 8657 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE gtu; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.gtu IS 'Location or sampling units - GeoTemporalUnits';


--
-- TOC entry 8658 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.id IS 'Unique identifier of a location or sampling unit';


--
-- TOC entry 8659 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.code IS 'Code given - for sampling units - takes id if none defined';


--
-- TOC entry 8660 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.gtu_from_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.gtu_from_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8661 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.gtu_from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.gtu_from_date IS 'composed from date of the GTU';


--
-- TOC entry 8662 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.gtu_to_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.gtu_to_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8663 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.gtu_to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.gtu_to_date IS 'composed to date of the GTU';


--
-- TOC entry 8664 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.tag_values_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.tag_values_indexed IS 'Array of all tags associated to gtu (indexed form)';


--
-- TOC entry 8665 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.latitude; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.latitude IS 'Latitude of the gtu';


--
-- TOC entry 8666 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.longitude; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.longitude IS 'longitude of the gtu';


--
-- TOC entry 8667 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.lat_long_accuracy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.lat_long_accuracy IS 'Accuracy in meter of both lat & long';


--
-- TOC entry 8668 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.elevation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.elevation IS 'Elevation from the level of the sea in meter';


--
-- TOC entry 8669 (class 0 OID 0)
-- Dependencies: 289
-- Name: COLUMN gtu.elevation_accuracy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.gtu.elevation_accuracy IS 'Accuracy in meter of the elevation';


--
-- TOC entry 290 (class 1259 OID 1440685)
-- Name: temporal_information; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.temporal_information (
    id integer NOT NULL,
    gtu_ref integer,
    specimen_ref integer,
    from_date_mask integer DEFAULT 0 NOT NULL,
    from_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    to_date_mask integer DEFAULT 0 NOT NULL,
    to_date timestamp without time zone DEFAULT '2038-12-31 00:00:00'::timestamp without time zone NOT NULL
);


ALTER TABLE darwin2.temporal_information OWNER TO darwin2;

--
-- TOC entry 8671 (class 0 OID 0)
-- Dependencies: 290
-- Name: COLUMN temporal_information.from_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.temporal_information.from_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8672 (class 0 OID 0)
-- Dependencies: 290
-- Name: COLUMN temporal_information.from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.temporal_information.from_date IS 'composed from date of the GTU';


--
-- TOC entry 8673 (class 0 OID 0)
-- Dependencies: 290
-- Name: COLUMN temporal_information.to_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.temporal_information.to_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8674 (class 0 OID 0)
-- Dependencies: 290
-- Name: COLUMN temporal_information.to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.temporal_information.to_date IS 'composed to date of the GTU';


--
-- TOC entry 291 (class 1259 OID 1440692)
-- Name: doctrine_temporal_information_gtu_group; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_temporal_information_gtu_group AS
 SELECT DISTINCT gtu.id,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    gtu.gtu_creation_date,
    gtu.import_ref,
    gtu.collector_refs,
    gtu.expedition_refs,
    gtu.collection_ref,
    gtu.latitude_dms_degree,
    gtu.latitude_dms_minutes,
    gtu.latitude_dms_seconds,
    gtu.latitude_dms_direction,
    gtu.longitude_dms_degree,
    gtu.longitude_dms_minutes,
    gtu.longitude_dms_seconds,
    gtu.longitude_dms_direction,
    gtu.latitude_utm,
    gtu.longitude_utm,
    gtu.utm_zone,
    gtu.coordinates_source,
    array_agg(temporal_information.from_date_mask) AS array_from_date_mask,
    array_agg(temporal_information.from_date) AS array_from_date,
    array_agg(temporal_information.to_date_mask) AS array_to_date_mask,
    array_agg(temporal_information.to_date) AS array_to_date,
    string_agg(DISTINCT btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment))), '|'::text ORDER BY (btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment)))), '|'::text) AS comments,
    string_agg(DISTINCT btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text))), '|'::text ORDER BY (btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text)))), '|'::text) AS properties
   FROM (((darwin2.gtu
     LEFT JOIN darwin2.temporal_information ON ((gtu.id = temporal_information.gtu_ref)))
     LEFT JOIN darwin2.comments c ON (((gtu.id = c.record_id) AND ((c.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
  GROUP BY gtu.id, gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, gtu.gtu_creation_date, gtu.import_ref, gtu.collector_refs, gtu.expedition_refs, gtu.collection_ref, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source;


ALTER TABLE darwin2.doctrine_temporal_information_gtu_group OWNER TO darwin2;

--
-- TOC entry 292 (class 1259 OID 1440697)
-- Name: doctrine_temporal_information_gtu_group_tags; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_temporal_information_gtu_group_tags AS
SELECT
    NULL::integer AS id,
    NULL::character varying AS code,
    NULL::integer AS gtu_from_date_mask,
    NULL::timestamp without time zone AS gtu_from_date,
    NULL::integer AS gtu_to_date_mask,
    NULL::timestamp without time zone AS gtu_to_date,
    NULL::character varying[] AS tag_values_indexed,
    NULL::double precision AS latitude,
    NULL::double precision AS longitude,
    NULL::double precision AS lat_long_accuracy,
    NULL::double precision AS elevation,
    NULL::double precision AS elevation_accuracy,
    NULL::character varying AS location,
    NULL::timestamp without time zone AS gtu_creation_date,
    NULL::integer AS import_ref,
    NULL::integer[] AS collector_refs,
    NULL::integer[] AS expedition_refs,
    NULL::integer AS collection_ref,
    NULL::integer AS latitude_dms_degree,
    NULL::double precision AS latitude_dms_minutes,
    NULL::double precision AS latitude_dms_seconds,
    NULL::integer AS latitude_dms_direction,
    NULL::integer AS longitude_dms_degree,
    NULL::double precision AS longitude_dms_minutes,
    NULL::double precision AS longitude_dms_seconds,
    NULL::integer AS longitude_dms_direction,
    NULL::double precision AS latitude_utm,
    NULL::double precision AS longitude_utm,
    NULL::character varying AS utm_zone,
    NULL::character varying AS coordinates_source,
    NULL::integer[] AS array_from_date_mask,
    NULL::timestamp without time zone[] AS array_from_date,
    NULL::integer[] AS array_to_date_mask,
    NULL::timestamp without time zone[] AS array_to_date,
    NULL::text AS comments,
    NULL::text AS properties,
    NULL::character varying AS tag,
    NULL::character varying AS tag_indexed,
    NULL::integer AS expedition_ref;


ALTER TABLE darwin2.doctrine_temporal_information_gtu_group_tags OWNER TO darwin2;

--
-- TOC entry 293 (class 1259 OID 1440702)
-- Name: doctrine_temporal_information_gtu_group_unnest; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_temporal_information_gtu_group_unnest AS
 SELECT DISTINCT gtu.id,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    gtu.gtu_creation_date,
    gtu.import_ref,
    gtu.collector_refs,
    gtu.expedition_refs,
    gtu.collection_ref,
    gtu.latitude_dms_degree,
    gtu.latitude_dms_minutes,
    gtu.latitude_dms_seconds,
    gtu.latitude_dms_direction,
    gtu.longitude_dms_degree,
    gtu.longitude_dms_minutes,
    gtu.longitude_dms_seconds,
    gtu.longitude_dms_direction,
    gtu.latitude_utm,
    gtu.longitude_utm,
    gtu.utm_zone,
    gtu.coordinates_source,
    temporal_information.from_date_mask,
    temporal_information.from_date,
    temporal_information.to_date_mask,
    temporal_information.to_date,
    string_agg(DISTINCT btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment))), '|'::text ORDER BY (btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment)))), '|'::text) AS comments,
    string_agg(DISTINCT btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text))), '|'::text ORDER BY (btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text)))), '|'::text) AS properties
   FROM (((darwin2.gtu
     LEFT JOIN darwin2.temporal_information ON ((gtu.id = temporal_information.gtu_ref)))
     LEFT JOIN darwin2.comments c ON (((gtu.id = c.record_id) AND ((c.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
  GROUP BY gtu.id, gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, gtu.gtu_creation_date, gtu.import_ref, gtu.collector_refs, gtu.expedition_refs, gtu.collection_ref, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, temporal_information.from_date_mask, temporal_information.from_date, temporal_information.to_date_mask, temporal_information.to_date;


ALTER TABLE darwin2.doctrine_temporal_information_gtu_group_unnest OWNER TO darwin2;

--
-- TOC entry 294 (class 1259 OID 1440707)
-- Name: tags; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tags (
    gtu_ref integer NOT NULL,
    group_ref integer NOT NULL,
    group_type character varying NOT NULL,
    sub_group_type character varying NOT NULL,
    tag character varying NOT NULL,
    tag_indexed character varying NOT NULL,
    id integer NOT NULL
);


ALTER TABLE darwin2.tags OWNER TO darwin2;

--
-- TOC entry 8679 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE tags; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.tags IS 'List of calculated tags for a groups. This is only for query purpose (filled by triggers)';


--
-- TOC entry 8680 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.gtu_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.gtu_ref IS 'Reference to a Gtu';


--
-- TOC entry 8681 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.group_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.group_ref IS 'Reference of the Group name under which the tag is grouped';


--
-- TOC entry 8682 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.group_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.group_type IS 'Indexed form of a group name';


--
-- TOC entry 8683 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.sub_group_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.sub_group_type IS 'Indexed form of a sub-group name';


--
-- TOC entry 8684 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.tag; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.tag IS 'The readable version of the tag';


--
-- TOC entry 8685 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN tags.tag_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tags.tag_indexed IS 'The indexed version of the tag';


--
-- TOC entry 295 (class 1259 OID 1440713)
-- Name: doctrine_temporal_information_gtu_group_unnest_tags; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.doctrine_temporal_information_gtu_group_unnest_tags AS
 SELECT DISTINCT gtu.id,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    gtu.gtu_creation_date,
    gtu.import_ref,
    gtu.collector_refs,
    gtu.expedition_refs,
    gtu.collection_ref,
    gtu.latitude_dms_degree,
    gtu.latitude_dms_minutes,
    gtu.latitude_dms_seconds,
    gtu.latitude_dms_direction,
    gtu.longitude_dms_degree,
    gtu.longitude_dms_minutes,
    gtu.longitude_dms_seconds,
    gtu.longitude_dms_direction,
    gtu.latitude_utm,
    gtu.longitude_utm,
    gtu.utm_zone,
    gtu.coordinates_source,
    temporal_information.from_date_mask,
    temporal_information.from_date,
    temporal_information.to_date_mask,
    temporal_information.to_date,
    string_agg(DISTINCT btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment))), '|'::text ORDER BY (btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment)))), '|'::text) AS comments,
    string_agg(DISTINCT btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text))), '|'::text ORDER BY (btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text)))), '|'::text) AS properties,
    tags.tag,
    tags.tag_indexed
   FROM ((((darwin2.gtu
     LEFT JOIN darwin2.temporal_information ON ((gtu.id = temporal_information.gtu_ref)))
     LEFT JOIN darwin2.comments c ON (((gtu.id = c.record_id) AND ((c.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.tags ON ((gtu.id = tags.gtu_ref)))
  GROUP BY gtu.id, gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, gtu.gtu_creation_date, gtu.import_ref, gtu.collector_refs, gtu.expedition_refs, gtu.collection_ref, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, temporal_information.from_date_mask, temporal_information.from_date, temporal_information.to_date_mask, temporal_information.to_date, tags.tag, tags.tag_indexed;


ALTER TABLE darwin2.doctrine_temporal_information_gtu_group_unnest_tags OWNER TO darwin2;

--
-- TOC entry 789 (class 1259 OID 11670818)
-- Name: expedition_id; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.expedition_id (
    id integer
);


ALTER TABLE darwin2.expedition_id OWNER TO darwin2;

--
-- TOC entry 296 (class 1259 OID 1440718)
-- Name: expeditions_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.expeditions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.expeditions_id_seq OWNER TO darwin2;

--
-- TOC entry 297 (class 1259 OID 1440720)
-- Name: expeditions; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.expeditions (
    id integer DEFAULT nextval('darwin2.expeditions_id_seq'::regclass) NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL,
    expedition_from_date_mask integer DEFAULT 0 NOT NULL,
    expedition_from_date date DEFAULT '0001-01-01'::date NOT NULL,
    expedition_to_date_mask integer DEFAULT 0 NOT NULL,
    expedition_to_date date DEFAULT '2038-12-31'::date NOT NULL
);


ALTER TABLE darwin2.expeditions OWNER TO darwin2;

--
-- TOC entry 8689 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE expeditions; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.expeditions IS 'List of expeditions made to collect specimens';


--
-- TOC entry 8690 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.id IS 'Unique identifier of an expedition';


--
-- TOC entry 8691 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.name IS 'Expedition name';


--
-- TOC entry 8692 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.name_indexed IS 'Indexed form of expedition name';


--
-- TOC entry 8693 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.expedition_from_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.expedition_from_date_mask IS 'Contains the Mask flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 8694 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.expedition_from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.expedition_from_date IS 'Start date of the expedition';


--
-- TOC entry 8695 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.expedition_to_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.expedition_to_date_mask IS 'Contains the Mask flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 8696 (class 0 OID 0)
-- Dependencies: 297
-- Name: COLUMN expeditions.expedition_to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.expeditions.expedition_to_date IS 'End date of the expedition';


--
-- TOC entry 298 (class 1259 OID 1440731)
-- Name: ext_links_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.ext_links_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.ext_links_id_seq OWNER TO darwin2;

--
-- TOC entry 299 (class 1259 OID 1440733)
-- Name: ext_links; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.ext_links (
    id integer DEFAULT nextval('darwin2.ext_links_id_seq'::regclass) NOT NULL,
    url character varying NOT NULL,
    comment text NOT NULL,
    comment_indexed text NOT NULL,
    type text DEFAULT 'ext'::text NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.ext_links OWNER TO darwin2;

--
-- TOC entry 8699 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE ext_links; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.ext_links IS 'External link possibly refereced for a specific relation';


--
-- TOC entry 8700 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.referenced_relation IS 'Reference-Name of table a comment is posted for';


--
-- TOC entry 8701 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.record_id IS 'Identifier of the record concerned';


--
-- TOC entry 8702 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.id IS 'Unique identifier of a comment';


--
-- TOC entry 8703 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.url; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.url IS 'External URL';


--
-- TOC entry 8704 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.comment; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.comment IS 'Comment';


--
-- TOC entry 8705 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.comment_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.comment_indexed IS 'indexed form of comment field';


--
-- TOC entry 8706 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN ext_links.type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.ext_links.type IS 'Sort of external link given';


--
-- TOC entry 300 (class 1259 OID 1440741)
-- Name: flat_dict_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.flat_dict_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.flat_dict_id_seq OWNER TO darwin2;

--
-- TOC entry 301 (class 1259 OID 1440743)
-- Name: flat_dict; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.flat_dict (
    id integer DEFAULT nextval('darwin2.flat_dict_id_seq'::regclass) NOT NULL,
    referenced_relation character varying NOT NULL,
    dict_field character varying NOT NULL,
    dict_value character varying NOT NULL,
    dict_depend character varying DEFAULT ''::character varying NOT NULL
);


ALTER TABLE darwin2.flat_dict OWNER TO darwin2;

--
-- TOC entry 8709 (class 0 OID 0)
-- Dependencies: 301
-- Name: TABLE flat_dict; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.flat_dict IS 'Flat table compiling all small distinct values for a faster search like types, code prefixes ,...';


--
-- TOC entry 8710 (class 0 OID 0)
-- Dependencies: 301
-- Name: COLUMN flat_dict.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.flat_dict.referenced_relation IS 'The table where the value come from';


--
-- TOC entry 8711 (class 0 OID 0)
-- Dependencies: 301
-- Name: COLUMN flat_dict.dict_field; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.flat_dict.dict_field IS 'the field name of where the value come from';


--
-- TOC entry 8712 (class 0 OID 0)
-- Dependencies: 301
-- Name: COLUMN flat_dict.dict_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.flat_dict.dict_value IS 'the distinct value';


--
-- TOC entry 302 (class 1259 OID 1440751)
-- Name: identifiers; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.identifiers (
    id integer NOT NULL,
    protocol character varying,
    value character varying,
    creation_date timestamp with time zone DEFAULT now() NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.identifiers OWNER TO darwin2;

--
-- TOC entry 303 (class 1259 OID 1440758)
-- Name: identifiers_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.identifiers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.identifiers_id_seq OWNER TO darwin2;

--
-- TOC entry 8715 (class 0 OID 0)
-- Dependencies: 303
-- Name: identifiers_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.identifiers_id_seq OWNED BY darwin2.identifiers.id;


--
-- TOC entry 304 (class 1259 OID 1440760)
-- Name: igs_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.igs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.igs_id_seq OWNER TO darwin2;

--
-- TOC entry 305 (class 1259 OID 1440762)
-- Name: igs; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.igs (
    id integer DEFAULT nextval('darwin2.igs_id_seq'::regclass) NOT NULL,
    ig_num character varying NOT NULL,
    ig_num_indexed character varying NOT NULL,
    ig_date_mask integer DEFAULT 0 NOT NULL,
    ig_date date DEFAULT '0001-01-01'::date NOT NULL
);


ALTER TABLE darwin2.igs OWNER TO darwin2;

--
-- TOC entry 8718 (class 0 OID 0)
-- Dependencies: 305
-- Name: TABLE igs; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.igs IS 'Inventory table - register all ig (inventory general) numbers given in RBINS';


--
-- TOC entry 8719 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN igs.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.igs.id IS 'Unique identifier of an ig reference';


--
-- TOC entry 8720 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN igs.ig_num; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.igs.ig_num IS 'IG number';


--
-- TOC entry 8721 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN igs.ig_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.igs.ig_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 8722 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN igs.ig_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.igs.ig_date IS 'Date of ig number creation';


--
-- TOC entry 306 (class 1259 OID 1440771)
-- Name: imports_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.imports_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.imports_id_seq OWNER TO darwin2;

--
-- TOC entry 307 (class 1259 OID 1440773)
-- Name: imports; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.imports (
    id integer DEFAULT nextval('darwin2.imports_id_seq'::regclass) NOT NULL,
    user_ref integer NOT NULL,
    format character varying NOT NULL,
    collection_ref integer,
    filename character varying NOT NULL,
    state character varying DEFAULT ''::character varying NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now(),
    initial_count integer DEFAULT 0 NOT NULL,
    is_finished boolean DEFAULT false NOT NULL,
    errors_in_import text,
    template_version text,
    exclude_invalid_entries boolean DEFAULT false NOT NULL,
    creation_date date,
    creation_date_mask integer,
    working boolean,
    mime_type character varying,
    gtu_include_date boolean DEFAULT false,
    gtu_tags_in_merge boolean DEFAULT false,
    source_database character varying,
    sensitive_information_withheld boolean,
    taxonomy_kingdom character varying,
    history_taxonomy public.hstore,
    specimen_taxonomy_ref integer,
    taxonomy_name character varying,
    definition_taxonomy text,
    is_reference_taxonomy boolean,
    source_taxonomy character varying,
    url_website_taxonomy character varying,
    url_webservice_taxonomy character varying,
    collection_ref_for_gtu integer,
    enforce_code_unicity boolean
);


ALTER TABLE darwin2.imports OWNER TO darwin2;

--
-- TOC entry 8725 (class 0 OID 0)
-- Dependencies: 307
-- Name: TABLE imports; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.imports IS 'Table used to check the state of the date coming from an uploaded file';


--
-- TOC entry 8726 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.user_ref IS 'The referenced user id';


--
-- TOC entry 8727 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.format; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.format IS 'The import template to use for the imported file';


--
-- TOC entry 8728 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.collection_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.collection_ref IS 'The collection associated';


--
-- TOC entry 8729 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.filename; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.filename IS 'The filename of the file to proceed';


--
-- TOC entry 8730 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.state; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.state IS 'the state of the processing the file';


--
-- TOC entry 8731 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.created_at; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.created_at IS 'Creation of the file';


--
-- TOC entry 8732 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.updated_at; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.updated_at IS 'When the data has been modified lately';


--
-- TOC entry 8733 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.initial_count; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.initial_count IS 'Number of rows of staging when the import was created';


--
-- TOC entry 8734 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.is_finished; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.is_finished IS 'Boolean to mark if the import is finished or still need some operations';


--
-- TOC entry 8735 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN imports.exclude_invalid_entries; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.imports.exclude_invalid_entries IS 'Tell if, for this import, match should exclude the invalid units';


--
-- TOC entry 308 (class 1259 OID 1440788)
-- Name: informative_workflow_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.informative_workflow_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.informative_workflow_id_seq OWNER TO darwin2;

--
-- TOC entry 309 (class 1259 OID 1440790)
-- Name: informative_workflow; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.informative_workflow (
    id integer DEFAULT nextval('darwin2.informative_workflow_id_seq'::regclass) NOT NULL,
    user_ref integer,
    status character varying DEFAULT 'suggestion'::character varying NOT NULL,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL,
    comment character varying,
    formated_name character varying DEFAULT 'anonymous'::character varying NOT NULL,
    is_last boolean DEFAULT true NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.informative_workflow OWNER TO darwin2;

--
-- TOC entry 8738 (class 0 OID 0)
-- Dependencies: 309
-- Name: TABLE informative_workflow; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.informative_workflow IS 'Workflow information for each record encoded';


--
-- TOC entry 8739 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.referenced_relation IS 'Reference-Name of table concerned';


--
-- TOC entry 8740 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.record_id IS 'ID of record a workflow is defined for';


--
-- TOC entry 8741 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.user_ref IS 'Reference of user - id field of users table';


--
-- TOC entry 8742 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.status IS 'Record status: to correct, to be corrected or published';


--
-- TOC entry 8743 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.modification_date_time IS 'Date and time of status change - last date/time is used as actual status, but helps also to keep an history of status change';


--
-- TOC entry 8744 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.comment; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.comment IS 'Complementary comments';


--
-- TOC entry 8745 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.formated_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.formated_name IS 'used to allow non registered user to add a workflow';


--
-- TOC entry 8746 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN informative_workflow.is_last; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.informative_workflow.is_last IS 'a flag witch allow us to know if the workflow for this referenced_relation/record id is the latest';


--
-- TOC entry 310 (class 1259 OID 1440801)
-- Name: insurances_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.insurances_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.insurances_id_seq OWNER TO darwin2;

--
-- TOC entry 311 (class 1259 OID 1440803)
-- Name: insurances; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.insurances (
    id integer DEFAULT nextval('darwin2.insurances_id_seq'::regclass) NOT NULL,
    insurance_value numeric(16,2) NOT NULL,
    insurance_currency character varying DEFAULT '€'::character varying NOT NULL,
    insurer_ref integer,
    date_from_mask integer DEFAULT 0 NOT NULL,
    date_from date DEFAULT '0001-01-01'::date NOT NULL,
    date_to_mask integer DEFAULT 0 NOT NULL,
    date_to date DEFAULT '2038-12-31'::date NOT NULL,
    contact_ref integer,
    CONSTRAINT chk_chk_specimen_parts_insurances CHECK ((insurance_value > (0)::numeric))
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.insurances OWNER TO darwin2;

--
-- TOC entry 8749 (class 0 OID 0)
-- Dependencies: 311
-- Name: TABLE insurances; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.insurances IS 'List of insurances values for given specimen parts/individuals';


--
-- TOC entry 8750 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN insurances.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.insurances.referenced_relation IS 'Reference-Name of table concerned';


--
-- TOC entry 8751 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN insurances.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.insurances.record_id IS 'Identifier of record concerned';


--
-- TOC entry 8752 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN insurances.insurance_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.insurances.insurance_value IS 'Insurance value';


--
-- TOC entry 8753 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN insurances.insurance_currency; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.insurances.insurance_currency IS 'Currency used with insurance value';


--
-- TOC entry 8754 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN insurances.insurer_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.insurances.insurer_ref IS 'Reference of the insurance firm an insurance have been subscripted at';


--
-- TOC entry 312 (class 1259 OID 1440816)
-- Name: lithology_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.lithology_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.lithology_id_seq OWNER TO darwin2;

--
-- TOC entry 313 (class 1259 OID 1440818)
-- Name: lithology; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.lithology (
    id integer DEFAULT nextval('darwin2.lithology_id_seq'::regclass) NOT NULL,
    CONSTRAINT fct_chk_onceinpath_lithology CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
)
INHERITS (darwin2.template_classifications);


ALTER TABLE darwin2.lithology OWNER TO darwin2;

--
-- TOC entry 8757 (class 0 OID 0)
-- Dependencies: 313
-- Name: TABLE lithology; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.lithology IS 'List of lithologic units';


--
-- TOC entry 8758 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.name IS 'Classification unit name';


--
-- TOC entry 8759 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.name_indexed IS 'Indexed form of name field';


--
-- TOC entry 8760 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8761 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8762 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8763 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 8764 (class 0 OID 0)
-- Dependencies: 313
-- Name: COLUMN lithology.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithology.id IS 'Unique identifier of a classification unit';


--
-- TOC entry 314 (class 1259 OID 1440829)
-- Name: lithostratigraphy_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.lithostratigraphy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.lithostratigraphy_id_seq OWNER TO darwin2;

--
-- TOC entry 315 (class 1259 OID 1440831)
-- Name: lithostratigraphy; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.lithostratigraphy (
    id integer DEFAULT nextval('darwin2.lithostratigraphy_id_seq'::regclass) NOT NULL,
    import_ref integer,
    CONSTRAINT fct_chk_onceinpath_lithostratigraphy CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
)
INHERITS (darwin2.template_classifications);


ALTER TABLE darwin2.lithostratigraphy OWNER TO darwin2;

--
-- TOC entry 8767 (class 0 OID 0)
-- Dependencies: 315
-- Name: TABLE lithostratigraphy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.lithostratigraphy IS 'List of lithostratigraphic units';


--
-- TOC entry 8768 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.name IS 'Classification unit name';


--
-- TOC entry 8769 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.name_indexed IS 'Indexed form of name field';


--
-- TOC entry 8770 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8771 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8772 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8773 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 8774 (class 0 OID 0)
-- Dependencies: 315
-- Name: COLUMN lithostratigraphy.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.lithostratigraphy.id IS 'Unique identifier of a classification unit';


--
-- TOC entry 316 (class 1259 OID 1440842)
-- Name: loan_history; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.loan_history (
    id integer NOT NULL,
    loan_ref integer NOT NULL,
    referenced_table text NOT NULL,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL,
    record_line public.hstore
);


ALTER TABLE darwin2.loan_history OWNER TO darwin2;

--
-- TOC entry 8776 (class 0 OID 0)
-- Dependencies: 316
-- Name: TABLE loan_history; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.loan_history IS 'Table is a snapshot of an entire loan and related informations at a certain time';


--
-- TOC entry 8777 (class 0 OID 0)
-- Dependencies: 316
-- Name: COLUMN loan_history.loan_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_history.loan_ref IS 'Mandatory Reference to a loan';


--
-- TOC entry 8778 (class 0 OID 0)
-- Dependencies: 316
-- Name: COLUMN loan_history.referenced_table; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_history.referenced_table IS 'Mandatory Reference to the table refereced';


--
-- TOC entry 8779 (class 0 OID 0)
-- Dependencies: 316
-- Name: COLUMN loan_history.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_history.modification_date_time IS 'date of the modification';


--
-- TOC entry 8780 (class 0 OID 0)
-- Dependencies: 316
-- Name: COLUMN loan_history.record_line; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_history.record_line IS 'hstore containing the whole line of referenced_table';


--
-- TOC entry 317 (class 1259 OID 1440849)
-- Name: loan_history_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.loan_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.loan_history_id_seq OWNER TO darwin2;

--
-- TOC entry 8782 (class 0 OID 0)
-- Dependencies: 317
-- Name: loan_history_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.loan_history_id_seq OWNED BY darwin2.loan_history.id;


--
-- TOC entry 318 (class 1259 OID 1440851)
-- Name: loan_items_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.loan_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.loan_items_id_seq OWNER TO darwin2;

--
-- TOC entry 319 (class 1259 OID 1440853)
-- Name: loan_items; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.loan_items (
    id integer DEFAULT nextval('darwin2.loan_items_id_seq'::regclass) NOT NULL,
    loan_ref integer NOT NULL,
    ig_ref integer,
    from_date date,
    to_date date,
    specimen_ref integer,
    details character varying DEFAULT ''::character varying
);


ALTER TABLE darwin2.loan_items OWNER TO darwin2;

--
-- TOC entry 8785 (class 0 OID 0)
-- Dependencies: 319
-- Name: TABLE loan_items; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.loan_items IS 'Table holding an item of a loan. It may be a part from darwin or only an generic item';


--
-- TOC entry 8786 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.id IS 'Unique identifier of record';


--
-- TOC entry 8787 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.loan_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.loan_ref IS 'Mandatory Reference to a loan';


--
-- TOC entry 8788 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.ig_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.ig_ref IS 'Optional ref to an IG stored in the igs table';


--
-- TOC entry 8789 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.from_date IS 'Date when the item was sended';


--
-- TOC entry 8790 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.to_date IS 'Date when the item was recieved back';


--
-- TOC entry 8791 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.specimen_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.specimen_ref IS 'Optional reference to a Darwin Part';


--
-- TOC entry 8792 (class 0 OID 0)
-- Dependencies: 319
-- Name: COLUMN loan_items.details; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_items.details IS 'Textual details describing the item';


--
-- TOC entry 320 (class 1259 OID 1440861)
-- Name: loan_rights_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.loan_rights_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.loan_rights_id_seq OWNER TO darwin2;

--
-- TOC entry 321 (class 1259 OID 1440863)
-- Name: loan_rights; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.loan_rights (
    id integer DEFAULT nextval('darwin2.loan_rights_id_seq'::regclass) NOT NULL,
    loan_ref integer NOT NULL,
    user_ref integer NOT NULL,
    has_encoding_right boolean DEFAULT false NOT NULL
);


ALTER TABLE darwin2.loan_rights OWNER TO darwin2;

--
-- TOC entry 8795 (class 0 OID 0)
-- Dependencies: 321
-- Name: TABLE loan_rights; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.loan_rights IS 'Table describing rights into an entire loan (if user is in the table he has at least viewing rights)';


--
-- TOC entry 8796 (class 0 OID 0)
-- Dependencies: 321
-- Name: COLUMN loan_rights.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_rights.id IS 'Unique identifier of record';


--
-- TOC entry 8797 (class 0 OID 0)
-- Dependencies: 321
-- Name: COLUMN loan_rights.loan_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_rights.loan_ref IS 'Mandatory Reference to a loan';


--
-- TOC entry 8798 (class 0 OID 0)
-- Dependencies: 321
-- Name: COLUMN loan_rights.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_rights.user_ref IS 'Mandatory Reference to a user';


--
-- TOC entry 8799 (class 0 OID 0)
-- Dependencies: 321
-- Name: COLUMN loan_rights.has_encoding_right; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_rights.has_encoding_right IS 'Bool saying if the user can edit a loan';


--
-- TOC entry 322 (class 1259 OID 1440868)
-- Name: loan_status_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.loan_status_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.loan_status_id_seq OWNER TO darwin2;

--
-- TOC entry 323 (class 1259 OID 1440870)
-- Name: loan_status; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.loan_status (
    id integer DEFAULT nextval('darwin2.loan_status_id_seq'::regclass) NOT NULL,
    loan_ref integer NOT NULL,
    user_ref integer NOT NULL,
    status character varying DEFAULT 'new'::character varying NOT NULL,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL,
    comment character varying DEFAULT ''::character varying NOT NULL,
    is_last boolean DEFAULT true NOT NULL
);


ALTER TABLE darwin2.loan_status OWNER TO darwin2;

--
-- TOC entry 8802 (class 0 OID 0)
-- Dependencies: 323
-- Name: TABLE loan_status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.loan_status IS 'Table describing various states of a loan';


--
-- TOC entry 8803 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.id IS 'Unique identifier of record';


--
-- TOC entry 8804 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.loan_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.loan_ref IS 'Mandatory Reference to a loan';


--
-- TOC entry 8805 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.user_ref IS 'Mandatory Reference to a user';


--
-- TOC entry 8806 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.status IS 'Current status of the loan in a list (new, closed, running, ...)';


--
-- TOC entry 8807 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.modification_date_time IS 'date of the modification';


--
-- TOC entry 8808 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.comment; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.comment IS 'comment of the status modification';


--
-- TOC entry 8809 (class 0 OID 0)
-- Dependencies: 323
-- Name: COLUMN loan_status.is_last; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loan_status.is_last IS 'flag telling which line is the current line';


--
-- TOC entry 324 (class 1259 OID 1440881)
-- Name: loans_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.loans_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.loans_id_seq OWNER TO darwin2;

--
-- TOC entry 325 (class 1259 OID 1440883)
-- Name: loans; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.loans (
    id integer DEFAULT nextval('darwin2.loans_id_seq'::regclass) NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    description character varying DEFAULT ''::character varying NOT NULL,
    from_date date,
    to_date date,
    extended_to_date date,
    search_indexed text NOT NULL
);


ALTER TABLE darwin2.loans OWNER TO darwin2;

--
-- TOC entry 8812 (class 0 OID 0)
-- Dependencies: 325
-- Name: TABLE loans; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.loans IS 'Table holding an entire loan made of multiple loan items may also be linked to other table as comment, properties , ...';


--
-- TOC entry 8813 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.id IS 'Unique identifier of record';


--
-- TOC entry 8814 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.name IS 'Global name of the loan. May be a sort of code of other naming scheme';


--
-- TOC entry 8815 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.description; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.description IS 'Description of the meaning of the loan';


--
-- TOC entry 8816 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.from_date IS 'Date of the start of the loan';


--
-- TOC entry 8817 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.to_date IS 'Planned date of the end of the loan';


--
-- TOC entry 8818 (class 0 OID 0)
-- Dependencies: 325
-- Name: COLUMN loans.search_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.loans.search_indexed IS 'indexed getting Description and title of the loan';


--
-- TOC entry 326 (class 1259 OID 1440892)
-- Name: mineralogy_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.mineralogy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.mineralogy_id_seq OWNER TO darwin2;

--
-- TOC entry 327 (class 1259 OID 1440894)
-- Name: mineralogy; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.mineralogy (
    id integer DEFAULT nextval('darwin2.mineralogy_id_seq'::regclass) NOT NULL,
    code character varying NOT NULL,
    classification character varying DEFAULT 'strunz'::character varying NOT NULL,
    formule character varying,
    formule_indexed character varying,
    cristal_system character varying,
    CONSTRAINT fct_chk_onceinpath_mineralogy CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
)
INHERITS (darwin2.template_classifications);


ALTER TABLE darwin2.mineralogy OWNER TO darwin2;

--
-- TOC entry 8821 (class 0 OID 0)
-- Dependencies: 327
-- Name: TABLE mineralogy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.mineralogy IS 'List of mineralogic units';


--
-- TOC entry 8822 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.name IS 'Classification unit name';


--
-- TOC entry 8823 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.name_indexed IS 'Indexed form of name field';


--
-- TOC entry 8824 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8825 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8826 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8827 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 8828 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.id IS 'Unique identifier of a classification unit';


--
-- TOC entry 8829 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.code IS 'Classification code given to mineral - in classification chosen - Strunz by default';


--
-- TOC entry 8830 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.classification; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.classification IS 'Classification system used to describe mineral: strunz, dana,...';


--
-- TOC entry 8831 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.formule; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.formule IS 'Chemical formulation';


--
-- TOC entry 8832 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.formule_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.formule_indexed IS 'Indexed form of foumule field';


--
-- TOC entry 8833 (class 0 OID 0)
-- Dependencies: 327
-- Name: COLUMN mineralogy.cristal_system; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.mineralogy.cristal_system IS 'Cristal system defining the mineral structure: isometric, hexagonal,...';


--
-- TOC entry 328 (class 1259 OID 1440906)
-- Name: multimedia_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.multimedia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.multimedia_id_seq OWNER TO darwin2;

--
-- TOC entry 329 (class 1259 OID 1440908)
-- Name: multimedia; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.multimedia (
    id integer DEFAULT nextval('darwin2.multimedia_id_seq'::regclass) NOT NULL,
    is_digital boolean DEFAULT true NOT NULL,
    type character varying DEFAULT 'image'::character varying NOT NULL,
    sub_type character varying,
    title character varying NOT NULL,
    description character varying DEFAULT ''::character varying NOT NULL,
    uri character varying,
    filename character varying,
    creation_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    creation_date_mask integer DEFAULT 0 NOT NULL,
    mime_type character varying NOT NULL,
    visible boolean DEFAULT true NOT NULL,
    publishable boolean DEFAULT true NOT NULL,
    search_indexed text NOT NULL,
    extracted_info text,
    technical_parameters character varying,
    internet_protocol character varying,
    field_observations character varying,
    external_uri character varying,
    import_ref integer
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.multimedia OWNER TO darwin2;

--
-- TOC entry 8836 (class 0 OID 0)
-- Dependencies: 329
-- Name: TABLE multimedia; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.multimedia IS 'Stores all multimedia objects encoded in DaRWIN 2.0';


--
-- TOC entry 8837 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.referenced_relation IS 'Reference-Name of table concerned';


--
-- TOC entry 8838 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.record_id IS 'Identifier of record concerned';


--
-- TOC entry 8839 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.id IS 'Unique identifier of a multimedia object';


--
-- TOC entry 8840 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.is_digital; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.is_digital IS 'Flag telling if the object is digital (true) or physical (false)';


--
-- TOC entry 8841 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.type IS 'Main multimedia object type: image, sound, video,...';


--
-- TOC entry 8842 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.sub_type IS 'Characterization of object type: article, publication in serie, book, glass plate,...';


--
-- TOC entry 8843 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.title; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.title IS 'Title of the multimedia object';


--
-- TOC entry 8844 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.description; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.description IS 'Description of the current object';


--
-- TOC entry 8845 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.uri; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.uri IS 'URI of object if digital';


--
-- TOC entry 8846 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.filename; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.filename IS 'The original name of the saved file';


--
-- TOC entry 8847 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.creation_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.creation_date IS 'Object creation date';


--
-- TOC entry 8848 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.creation_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.creation_date_mask IS 'Mask used for object creation date display';


--
-- TOC entry 8849 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.mime_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.mime_type IS 'Mime/Type of the linked digital object';


--
-- TOC entry 8850 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.visible; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.visible IS 'Flag telling if the related file has been chosen to be publically visible or not';


--
-- TOC entry 8851 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.publishable; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.publishable IS 'Flag telling if the related file has been chosen as a prefered item for publication - Would be for example used for preselection of media published for Open Up project';


--
-- TOC entry 8852 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.search_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.search_indexed IS 'indexed form of title and description fields together';


--
-- TOC entry 8853 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.internet_protocol; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.internet_protocol IS 'Internel protocol of the ressource (IIIF, WMS, Sketchfab)';


--
-- TOC entry 8854 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.field_observations; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.field_observations IS 'Field observation attached to the document';


--
-- TOC entry 8855 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN multimedia.external_uri; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia.external_uri IS 'External URI of object if digital';


--
-- TOC entry 330 (class 1259 OID 1440922)
-- Name: multimedia_todelete; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.multimedia_todelete (
    id integer NOT NULL,
    uri text
);


ALTER TABLE darwin2.multimedia_todelete OWNER TO darwin2;

--
-- TOC entry 8857 (class 0 OID 0)
-- Dependencies: 330
-- Name: TABLE multimedia_todelete; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.multimedia_todelete IS 'Table here to save deleted multimedia files waiting for a deletion on the disk';


--
-- TOC entry 8858 (class 0 OID 0)
-- Dependencies: 330
-- Name: COLUMN multimedia_todelete.uri; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.multimedia_todelete.uri IS 'URI of the file to delete';


--
-- TOC entry 331 (class 1259 OID 1440928)
-- Name: multimedia_todelete_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.multimedia_todelete_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.multimedia_todelete_id_seq OWNER TO darwin2;

--
-- TOC entry 8860 (class 0 OID 0)
-- Dependencies: 331
-- Name: multimedia_todelete_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.multimedia_todelete_id_seq OWNED BY darwin2.multimedia_todelete.id;


--
-- TOC entry 332 (class 1259 OID 1440930)
-- Name: mv_spatial; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.mv_spatial AS
 WITH property_mess_cte AS (
         SELECT map.orig_property,
            map.mapped_property
           FROM ( VALUES ('Accuracy coordinates'::text,'coordinatePrecision'::text), ('Accuracy Coordinates'::text,'coordinatePrecision'::text), ('coordinates_original'::text,'verbatimCoordinates'::text), ('datum'::text,'datum'::text), ('ellipsoid'::text,'ellipsoid'::text), ('geo position'::text,'verbatimCoordinates'::text), ('gis_type'::text,'spatial_type'::text), ('km (offset from named place)'::text,'offset_from_location'::text), ('Lambert'::text,'lambert_coordinates_x_y'::text), ('latitude'::text,'decimal_latitude'::text), ('latitude1'::text,'decimal_start_latitude'::text), ('latitude2'::text,'decimal_end_latitude'::text), ('Latitude DMS (end of operation)'::text,'end_latitude'::text), ('Latitude DMS (start of operation)'::text,'start_latitude'::text), ('Locality'::text,'verbatimLocality'::text), ('longitude'::text,'decimal_longitude'::text), ('longitude1'::text,'decimal_start_longitude'::text), ('longitude2'::text,'decimal_end_longitude'::text), ('Longitude DMS (end of operation)'::text,'end_longitude'::text), ('Longitude DMS (start of operation)'::text,'start_longitude'::text), ('Named Place'::text,'verbatimLocality'::text), ('utm'::text,'utm_grid'::text)) map(orig_property, mapped_property)
        ), coordinates_cte AS (
         SELECT DISTINCT properties.record_id,
            cte.mapped_property AS property,
            properties.lower_value AS value,
            properties.applies_to
           FROM (darwin2.properties
             LEFT JOIN property_mess_cte cte ON ((cte.orig_property = (properties.property_type)::text)))
          WHERE (((properties.referenced_relation)::text = 'gtu'::text) AND ((properties.property_type)::text = ANY (ARRAY[('Accuracy coordinates'::character varying)::text, ('Accuracy Coordinates'::character varying)::text, ('coordinates_original'::character varying)::text, ('datum'::character varying)::text, ('ellipsoid'::character varying)::text, ('geo position'::character varying)::text, ('gis_type'::character varying)::text, ('km (offset from named place)'::character varying)::text, ('Lambert'::character varying)::text, ('latitude'::character varying)::text, ('latitude1'::character varying)::text, ('latitude2'::character varying)::text, ('Latitude DMS (end of operation)'::character varying)::text, ('Latitude DMS (start of operation)'::character varying)::text, ('Locality'::character varying)::text, ('longitude'::character varying)::text, ('longitude1'::character varying)::text, ('longitude2'::character varying)::text, ('Longitude DMS (end of operation)'::character varying)::text, ('Longitude DMS (start of operation)'::character varying)::text, ('Named Place'::character varying)::text, ('utm'::character varying)::text])))
          ORDER BY properties.record_id, cte.mapped_property
        )
 SELECT DISTINCT ON (q.gtu_ref) q.gtu_ref,
    q.source,
    q.decimal_start_latitude,
    q.decimal_start_longitude,
    q.decimal_end_latitude,
    q.decimal_end_longitude,
    q.datum,
    q.ellipsoid,
    q.verbatim_coordinates,
    q.coordinate_precision,
    q.lambert_coordinates_x_y
   FROM ( SELECT DISTINCT gtu.id AS gtu_ref,
            '1_prop_start_end_dms'::text AS source,
                CASE
                    WHEN (start_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((start_latitude.value)::text))
                END AS decimal_start_latitude,
                CASE
                    WHEN (start_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((start_longitude.value)::text))
                END AS decimal_start_longitude,
                CASE
                    WHEN ((end_longitude.value IS NULL) OR ((end_latitude.value)::text = (start_latitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((end_latitude.value)::text))
                END AS decimal_end_latitude,
                CASE
                    WHEN ((end_latitude.value IS NULL) OR ((end_longitude.value)::text = (start_longitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((end_longitude.value)::text))
                END AS decimal_end_longitude,
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((((darwin2.gtu
             LEFT JOIN coordinates_cte start_latitude ON (((gtu.id = start_latitude.record_id) AND (start_latitude.property = 'start_latitude'::text))))
             LEFT JOIN coordinates_cte end_latitude ON (((gtu.id = end_latitude.record_id) AND (end_latitude.property = 'end_latitude'::text))))
             LEFT JOIN coordinates_cte start_longitude ON (((gtu.id = start_longitude.record_id) AND (start_longitude.property = 'start_longitude'::text))))
             LEFT JOIN coordinates_cte end_longitude ON (((gtu.id = end_longitude.record_id) AND (end_longitude.property = 'end_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (start_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '1_prop_start_end'::text AS source,
                CASE
                    WHEN (decimal_start_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_start_latitude.value)::text))
                END AS decimal_start_latitude,
                CASE
                    WHEN (decimal_start_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_start_longitude.value)::text))
                END AS decimal_start_longitude,
                CASE
                    WHEN ((decimal_end_longitude.value IS NULL) OR ((decimal_end_latitude.value)::text = (decimal_start_latitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_end_latitude.value)::text))
                END AS decimal_end_latitude,
                CASE
                    WHEN ((decimal_end_latitude.value IS NULL) OR ((decimal_end_longitude.value)::text = (decimal_start_longitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_end_longitude.value)::text))
                END AS decimal_end_longitude,
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((((darwin2.gtu
             LEFT JOIN coordinates_cte decimal_start_latitude ON (((gtu.id = decimal_start_latitude.record_id) AND (decimal_start_latitude.property = 'decimal_start_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_start_longitude ON (((gtu.id = decimal_start_longitude.record_id) AND (decimal_start_longitude.property = 'decimal_start_longitude'::text))))
             LEFT JOIN coordinates_cte decimal_end_latitude ON (((gtu.id = decimal_end_latitude.record_id) AND (decimal_end_latitude.property = 'decimal_end_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_end_longitude ON (((gtu.id = decimal_end_longitude.record_id) AND (decimal_end_longitude.property = 'decimal_end_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (decimal_start_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '2_prop_lat_long'::text AS source,
                CASE
                    WHEN (decimal_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_latitude.value)::text))
                END AS decimal_latitude,
                CASE
                    WHEN (decimal_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_longitude.value)::text))
                END AS decimal_longitude,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((darwin2.gtu
             LEFT JOIN coordinates_cte decimal_latitude ON (((gtu.id = decimal_latitude.record_id) AND (decimal_latitude.property = 'decimal_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_longitude ON (((gtu.id = decimal_longitude.record_id) AND (decimal_longitude.property = 'decimal_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (decimal_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '3_gtu_lat_long'::text AS source,
            (trunc((gtu.latitude)::numeric, 10))::double precision AS trunc,
            (trunc((gtu.longitude)::numeric, 10))::double precision AS trunc,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            string_agg((verbatim_coordinates.value)::text, ', '::text) AS verbatim_coordinates,
            string_agg((coordinate_precision.value)::text, ', '::text) AS coordinate_precision,
            string_agg((((lambert_coordinates_x_y.applies_to)::text || ': '::text) || (lambert_coordinates_x_y.value)::text), ', '::text ORDER BY lambert_coordinates_x_y.applies_to) AS lambert_coordinates_x_y
           FROM (((((darwin2.gtu
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE ((gtu.latitude IS NOT NULL) OR (verbatim_coordinates.* IS NOT NULL))
          GROUP BY gtu.id, (trunc((gtu.latitude)::numeric, 10)), (trunc((gtu.longitude)::numeric, 10)), datum.value, ellipsoid.value) q
  ORDER BY q.gtu_ref, q.source, q.decimal_start_latitude, q.decimal_start_longitude, q.decimal_end_latitude, q.decimal_end_longitude
  WITH NO DATA;


ALTER TABLE darwin2.mv_spatial OWNER TO darwin2;

--
-- TOC entry 333 (class 1259 OID 1440938)
-- Name: tag_authority; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tag_authority (
    id integer NOT NULL,
    domain_ref bigint NOT NULL,
    source character varying,
    url character varying NOT NULL,
    urn character varying,
    code character varying,
    type text[],
    pref_label character varying(255) NOT NULL,
    definition character varying,
    synonyms text[],
    language_variants public.hstore,
    alternative_representations jsonb
);


ALTER TABLE darwin2.tag_authority OWNER TO darwin2;

--
-- TOC entry 8863 (class 0 OID 0)
-- Dependencies: 333
-- Name: TABLE tag_authority; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.tag_authority IS 'Formal representations of tags used in DarWIN as they appear in vocabularies or gazetteers. All mapped entries must have a resolvable url and a preferred label.';


--
-- TOC entry 8864 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.id IS 'Primary key of the authoritative representation of a tag.';


--
-- TOC entry 8865 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.domain_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.domain_ref IS 'Reference to the domain that authored the authoritative representation.';


--
-- TOC entry 8866 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.source; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.source IS 'A gazetter might have aggregated a matching entry from other sources. This source can be considered a subdomain if it is only aggregated by one (this) domain.';


--
-- TOC entry 8867 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.url; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.url IS 'The url of the authority entry. Mandatory.';


--
-- TOC entry 8868 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.urn; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.urn IS 'The urn or pseudo-urn of the authority entry.';


--
-- TOC entry 8869 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.code IS 'The internal identifier used in the domain (for example the GeoNames number).';


--
-- TOC entry 8870 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.type IS 'An array of the most specific types that a gazetteer has attached to this entry. Example:';


--
-- TOC entry 8871 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.pref_label; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.pref_label IS 'The principal name used for the term by the authority or gazetteer. Mandatory.';


--
-- TOC entry 8872 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.definition; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.definition IS 'The definition of the term used by the authority or gazetteer.';


--
-- TOC entry 8873 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.synonyms; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.synonyms IS 'A flat array containing synonyms. NOT intended as a reference towards other entries in the same authority, should contain only information gathered from the entry itself. Example: "Montana","The Buckeye State"';


--
-- TOC entry 8874 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.language_variants; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.language_variants IS 'An associative array containing key-value pairs for language variants. NOT intended as a reference towards other entries in the same authority, should contain only information gathered from the entry itself. Example: "@de": "Bayern"; "@nl":"Beieren"';


--
-- TOC entry 8875 (class 0 OID 0)
-- Dependencies: 333
-- Name: COLUMN tag_authority.alternative_representations; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_authority.alternative_representations IS 'An associative array containing key-value pairs for alternative representations. NOT intended as a reference towards other entries in the same authority, should contain only information gathered from the entry itself. Example: "ISO 3166-2": "DE"; "ISO 3166-3":"DEU"';


--
-- TOC entry 334 (class 1259 OID 1440944)
-- Name: tag_groups_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.tag_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.tag_groups_id_seq OWNER TO darwin2;

--
-- TOC entry 335 (class 1259 OID 1440946)
-- Name: tag_groups; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tag_groups (
    id bigint DEFAULT nextval('darwin2.tag_groups_id_seq'::regclass) NOT NULL,
    gtu_ref integer NOT NULL,
    group_name character varying NOT NULL,
    group_name_indexed character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    sub_group_name_indexed character varying NOT NULL,
    color character varying DEFAULT '#FFFFFF'::character varying NOT NULL,
    tag_value character varying NOT NULL,
    international_name text DEFAULT ''::text NOT NULL,
    tag_group_distinct_ref bigint
);


ALTER TABLE darwin2.tag_groups OWNER TO darwin2;

--
-- TOC entry 8878 (class 0 OID 0)
-- Dependencies: 335
-- Name: TABLE tag_groups; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.tag_groups IS 'List of grouped tags';


--
-- TOC entry 8879 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.id IS 'Unique identifier of a grouped tag';


--
-- TOC entry 8880 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.gtu_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.gtu_ref IS 'Reference to a Gtu';


--
-- TOC entry 8881 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.group_name IS 'Group name under which the tag is grouped: Administrative area, Topographic structure,...';


--
-- TOC entry 8882 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.group_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.group_name_indexed IS 'Indexed form of a group name';


--
-- TOC entry 8883 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.sub_group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.sub_group_name IS 'Sub-Group name under which the tag is grouped: Country, River, Mountain,...';


--
-- TOC entry 8884 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.sub_group_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.sub_group_name_indexed IS 'Indexed form of a sub-group name';


--
-- TOC entry 8885 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.color; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.color IS 'Color associated to the group concerned';


--
-- TOC entry 8886 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.tag_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.tag_value IS 'Ensemble of Tags';


--
-- TOC entry 8887 (class 0 OID 0)
-- Dependencies: 335
-- Name: COLUMN tag_groups.international_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_groups.international_name IS 'The international(english) name of the place / ocean / country';


--
-- TOC entry 336 (class 1259 OID 1440955)
-- Name: tag_tag_authority; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tag_tag_authority (
    tag_authority_ref bigint NOT NULL,
    tag_group_distinct_ref bigint NOT NULL,
    tag_authority_match_predicate text NOT NULL,
    CONSTRAINT chk_predicate_onto CHECK (((tag_authority_match_predicate ~~ '%skos:%'::text) OR (tag_authority_match_predicate ~~ '%owl:%'::text)))
);


ALTER TABLE darwin2.tag_tag_authority OWNER TO darwin2;

--
-- TOC entry 8889 (class 0 OID 0)
-- Dependencies: 336
-- Name: TABLE tag_tag_authority; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.tag_tag_authority IS 'The coupling table between vocabulary entries and tags.';


--
-- TOC entry 8890 (class 0 OID 0)
-- Dependencies: 336
-- Name: COLUMN tag_tag_authority.tag_authority_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_tag_authority.tag_authority_ref IS 'Reference to the authoritative vocabulary entry.';


--
-- TOC entry 8891 (class 0 OID 0)
-- Dependencies: 336
-- Name: COLUMN tag_tag_authority.tag_group_distinct_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_tag_authority.tag_group_distinct_ref IS 'Reference to the distinct grouped tag as used in DarWIN.';


--
-- TOC entry 8892 (class 0 OID 0)
-- Dependencies: 336
-- Name: COLUMN tag_tag_authority.tag_authority_match_predicate; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_tag_authority.tag_authority_match_predicate IS 'Predicate that indicates how close the match between the tag and the authoritative url is: must use a predicate from an existing ontology, i.e. skos:broader, skos:narrower, owl:sameAs.';


--
-- TOC entry 337 (class 1259 OID 1440962)
-- Name: mv_tag_to_country; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.mv_tag_to_country AS
 SELECT t1.gtu_ref,
    t1.tag_group_distinct_ref,
    t1.tag_value,
    tacountry.code AS country_code_gn,
    tacountry.url AS country_url_gn,
    tacountry.pref_label AS country_pref_label_gn,
    (tacountry.alternative_representations ->> 'iso 3166-2'::text) AS country_iso,
    jsonb_object(coord.property_type, coord.lower_value) AS country_coord
   FROM ((((darwin2.tag_groups t1
     RIGHT JOIN darwin2.tag_groups tcountry ON ((t1.gtu_ref = tcountry.gtu_ref)))
     LEFT JOIN darwin2.tag_tag_authority ttacountry ON ((ttacountry.tag_group_distinct_ref = tcountry.tag_group_distinct_ref)))
     LEFT JOIN darwin2.tag_authority tacountry ON ((ttacountry.tag_authority_ref = tacountry.id)))
     LEFT JOIN ( SELECT properties.record_id,
            array_agg(COALESCE((properties.lower_value)::text, 'no coords'::text)) AS lower_value,
            array_agg(COALESCE((properties.property_type)::text, 'no coords'::text)) AS property_type
           FROM darwin2.properties
          WHERE (((properties.referenced_relation)::text = 'tag_authority'::text) AND ((properties.property_type)::text = ANY (ARRAY[('latitude_wgs_84'::character varying)::text, ('longitude_wgs_84'::character varying)::text])))
          GROUP BY properties.record_id) coord ON ((coord.record_id = tacountry.id)))
  WHERE (((t1.tag_value)::text <> ALL (ARRAY[('Oceans'::character varying)::text, ('/'::character varying)::text, ('?'::character varying)::text])) AND ((tcountry.sub_group_name_indexed)::text = 'country'::text) AND (tacountry.id IS NOT NULL) AND ((t1.sub_group_name_indexed)::text <> ALL (ARRAY['ocean'::text, 'country'::text, 'continent'::text])) AND (t1.id IS NOT NULL))
  WITH NO DATA;


ALTER TABLE darwin2.mv_tag_to_country OWNER TO darwin2;

--
-- TOC entry 338 (class 1259 OID 1440970)
-- Name: tag_groups_authority_categories; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.tag_groups_authority_categories (
    authority text,
    original_type character varying,
    original_sub_type character varying,
    gazetteer_type_mapped text,
    "order" smallint,
    priority text
);


ALTER TABLE darwin2.tag_groups_authority_categories OWNER TO postgres;

--
-- TOC entry 339 (class 1259 OID 1440976)
-- Name: mv_tag_to_country; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_tag_to_country AS
 SELECT t1.gtu_ref,
    t1.tag_group_distinct_ref,
    t1.tag_value,
    tacountry.code AS country_code_gn,
    tacountry.url AS country_url_gn,
    tacountry.pref_label AS country_pref_label_gn,
    (tacountry.alternative_representations ->> 'iso 3166-2'::text) AS country_iso,
    jsonb_object(coord.property_type, coord.lower_value) AS country_coord
   FROM ((((darwin2.tag_groups t1
     RIGHT JOIN darwin2.tag_groups tcountry ON ((t1.gtu_ref = tcountry.gtu_ref)))
     LEFT JOIN darwin2.tag_tag_authority ttacountry ON ((ttacountry.tag_group_distinct_ref = tcountry.tag_group_distinct_ref)))
     LEFT JOIN darwin2.tag_authority tacountry ON ((ttacountry.tag_authority_ref = tacountry.id)))
     LEFT JOIN ( SELECT properties.record_id,
            array_agg(COALESCE((properties.lower_value)::text, 'no coords'::text)) AS lower_value,
            array_agg(COALESCE((properties.property_type)::text, 'no coords'::text)) AS property_type
           FROM darwin2.properties
          WHERE (((properties.referenced_relation)::text = 'tag_authority'::text) AND ((properties.property_type)::text = ANY (ARRAY[('latitude_wgs_84'::character varying)::text, ('longitude_wgs_84'::character varying)::text])))
          GROUP BY properties.record_id) coord ON ((coord.record_id = tacountry.id)))
  WHERE (((t1.tag_value)::text <> ALL (ARRAY[('Oceans'::character varying)::text, ('/'::character varying)::text, ('?'::character varying)::text])) AND ((tcountry.sub_group_name_indexed)::text = 'country'::text) AND (tacountry.id IS NOT NULL) AND ((t1.sub_group_name_indexed)::text <> ALL (ARRAY['ocean'::text, 'country'::text, 'continent'::text])) AND (t1.id IS NOT NULL))
  WITH NO DATA;


ALTER TABLE ipt.mv_tag_to_country OWNER TO ipt_viewer;

--
-- TOC entry 340 (class 1259 OID 1440984)
-- Name: mv_tag_to_locations; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.mv_tag_to_locations AS
 SELECT DISTINCT t.id AS tag_identifier,
    t.gtu_ref AS gtu_identifier,
    tta.tag_group_distinct_ref AS distinct_tag_identifier,
    t.tag_value AS original_location,
    t.group_name_indexed AS original_type,
    t.sub_group_name_indexed AS original_sub_type,
    tcat_gn.gazetteer_type_mapped AS geonames_type_mapped,
    tcat_mrg.gazetteer_type_mapped AS marineregions_type_mapped,
    tcat_gn.priority,
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN countries.country_code_gn
            ELSE ta.code
        END AS gazetteer_code,
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN countries.country_url_gn
            ELSE ta.url
        END AS gazetteer_url,
    ta.pref_label AS gazetteer_pref_label,
    (
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN (countries.country_coord ->> 'latitude_wgs_84'::text)
            ELSE (prop_coordinates.coords ->> 'latitude_wgs_84'::text)
        END)::numeric AS latitude,
    (
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN (countries.country_coord ->> 'latitude_wgs_84'::text)
            ELSE (prop_coordinates.coords ->> 'longitude_wgs_84'::text)
        END)::numeric AS longitude,
    countries.country_iso,
    countries.country_pref_label_gn AS country_pref_label
   FROM (((((((darwin2.tag_groups t
     LEFT JOIN darwin2.gtu ON ((t.gtu_ref = gtu.id)))
     LEFT JOIN darwin2.tag_tag_authority tta ON (((tta.tag_group_distinct_ref = t.tag_group_distinct_ref) AND ((t.sub_group_name_indexed)::text <> 'country'::text))))
     LEFT JOIN darwin2.tag_authority ta ON ((tta.tag_authority_ref = ta.id)))
     LEFT JOIN darwin2.tag_groups_authority_categories tcat_gn ON ((((tcat_gn.original_type)::text = (t.group_name_indexed)::text) AND ((tcat_gn.original_sub_type)::text = (t.sub_group_name_indexed)::text) AND (tcat_gn.authority = 'geonames.org'::text))))
     LEFT JOIN darwin2.tag_groups_authority_categories tcat_mrg ON ((((tcat_mrg.original_type)::text = (t.group_name_indexed)::text) AND ((tcat_mrg.original_sub_type)::text = (t.sub_group_name_indexed)::text) AND (tcat_mrg.authority = 'marineregions.org'::text))))
     LEFT JOIN ( SELECT DISTINCT props_lat.record_id,
            jsonb_object_agg(props_lat.property_type, props_lat.lower_value) AS coords
           FROM darwin2.properties props_lat
          WHERE (((props_lat.referenced_relation)::text = 'tag_authority'::text) AND (((props_lat.property_type)::text = 'latitude_wgs_84'::text) OR ((props_lat.property_type)::text = 'longitude_wgs_84'::text)))
          GROUP BY props_lat.record_id) prop_coordinates ON ((ta.id = prop_coordinates.record_id)))
     LEFT JOIN ( SELECT DISTINCT mv_tag_to_country.gtu_ref,
            mv_tag_to_country.tag_group_distinct_ref,
            mv_tag_to_country.country_iso,
            mv_tag_to_country.country_pref_label_gn,
            mv_tag_to_country.country_code_gn,
            mv_tag_to_country.country_url_gn,
            mv_tag_to_country.country_coord
           FROM ipt.mv_tag_to_country) countries ON ((countries.gtu_ref = t.gtu_ref)))
  WITH NO DATA;


ALTER TABLE darwin2.mv_tag_to_locations OWNER TO darwin2;

--
-- TOC entry 341 (class 1259 OID 1440992)
-- Name: specimens; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.specimens (
    id integer NOT NULL,
    category character varying DEFAULT 'physical'::character varying NOT NULL,
    collection_ref integer NOT NULL,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying DEFAULT ''::character varying NOT NULL,
    acquisition_date_mask integer DEFAULT 0 NOT NULL,
    acquisition_date date DEFAULT '0001-01-01'::date NOT NULL,
    station_visible boolean DEFAULT true NOT NULL,
    ig_ref integer,
    type character varying DEFAULT 'specimen'::character varying NOT NULL,
    type_group character varying DEFAULT 'specimen'::character varying NOT NULL,
    type_search character varying DEFAULT 'specimen'::character varying NOT NULL,
    sex character varying DEFAULT 'undefined'::character varying NOT NULL,
    stage character varying DEFAULT 'undefined'::character varying NOT NULL,
    state character varying DEFAULT 'not applicable'::character varying NOT NULL,
    social_status character varying DEFAULT 'not applicable'::character varying NOT NULL,
    rock_form character varying DEFAULT 'not applicable'::character varying NOT NULL,
    specimen_part character varying DEFAULT 'specimen'::character varying NOT NULL,
    complete boolean DEFAULT true NOT NULL,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying DEFAULT 'container'::character varying NOT NULL,
    sub_container_type character varying DEFAULT 'container'::character varying NOT NULL,
    container_storage character varying DEFAULT 'dry'::character varying NOT NULL,
    sub_container_storage character varying DEFAULT 'dry'::character varying NOT NULL,
    surnumerary boolean DEFAULT false NOT NULL,
    specimen_status character varying DEFAULT 'good state'::character varying NOT NULL,
    specimen_count_min integer DEFAULT 1 NOT NULL,
    specimen_count_max integer DEFAULT 1 NOT NULL,
    object_name text,
    object_name_indexed text DEFAULT ''::text NOT NULL,
    spec_ident_ids integer[] DEFAULT '{}'::integer[] NOT NULL,
    spec_coll_ids integer[] DEFAULT '{}'::integer[] NOT NULL,
    spec_don_sel_ids integer[] DEFAULT '{}'::integer[] NOT NULL,
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer DEFAULT 0,
    gtu_from_date timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone,
    gtu_to_date_mask integer DEFAULT 0,
    gtu_to_date timestamp without time zone DEFAULT '2038-12-31 00:00:00'::timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point,
    specimen_creation_date timestamp without time zone DEFAULT now(),
    import_ref integer,
    main_code_indexed character varying,
    specimen_count_males_min integer,
    specimen_count_males_max integer,
    specimen_count_females_min integer,
    specimen_count_females_max integer,
    specimen_count_juveniles_min integer,
    specimen_count_juveniles_max integer,
    nagoya character varying DEFAULT 'not defined'::character varying,
    uuid uuid,
    ig_main_code_indexed character varying,
    CONSTRAINT chk_chk_specimens_min CHECK ((specimen_count_min >= 0)),
    CONSTRAINT chk_chk_specimens_minmax CHECK ((specimen_count_min <= specimen_count_max))
);


ALTER TABLE darwin2.specimens OWNER TO darwin2;

--
-- TOC entry 8898 (class 0 OID 0)
-- Dependencies: 341
-- Name: TABLE specimens; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.specimens IS 'Specimens or batch of specimens stored in collection';


--
-- TOC entry 8899 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.id IS 'Unique identifier of a specimen or batch of specimens';


--
-- TOC entry 8900 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.category; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.category IS 'Type of specimen encoded: a physical object stored in collections, an observation, a figurate specimen,...';


--
-- TOC entry 8901 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.collection_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.collection_ref IS 'Reference of collection the specimen is grouped under - id field of collections table';


--
-- TOC entry 8902 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.expedition_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.expedition_ref IS 'When acquisition category is expedition, contains the reference of the expedition having conducted to the current specimen capture - id field of expeditions table';


--
-- TOC entry 8903 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.gtu_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.gtu_ref IS 'Reference of the sampling location the specimen is coming from - id field of gtu table';


--
-- TOC entry 8904 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.taxon_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.taxon_ref IS 'When encoding a ''living'' specimen, contains the reference of the taxon unit defining the specimen - id field of taxonomy table';


--
-- TOC entry 8905 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.litho_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.litho_ref IS 'When encoding a rock, mineral or paleontologic specimen, contains the reference of lithostratigraphic unit the specimen have been found into - id field of lithostratigraphy table';


--
-- TOC entry 8906 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.chrono_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.chrono_ref IS 'When encoding a rock, mineral or paleontologic specimen, contains the reference of chronostratigraphic unit the specimen have been found into - id field of chronostratigraphy table';


--
-- TOC entry 8907 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.lithology_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.lithology_ref IS 'Reference of a rock classification unit associated to the specimen encoded - id field of lithology table';


--
-- TOC entry 8908 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.mineral_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.mineral_ref IS 'Reference of a mineral classification unit associated to the specimen encoded - id field of mineralogy table';


--
-- TOC entry 8909 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.acquisition_category; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.acquisition_category IS 'Describe how the specimen was collected: expedition, donation,...';


--
-- TOC entry 8910 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.acquisition_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.acquisition_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 8911 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.acquisition_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.acquisition_date IS 'Date Composed (if possible) of the acquisition';


--
-- TOC entry 8912 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.station_visible; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.station_visible IS 'Flag telling if the sampling location can be visible or must be hidden for the specimen encoded';


--
-- TOC entry 8913 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.ig_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.ig_ref IS 'Reference of ig number this specimen has been associated to';


--
-- TOC entry 8914 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.type IS 'Flag indicating if the taxa has been improted into Darwin (2019 02 11)';


--
-- TOC entry 8915 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.type_group; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.type_group IS 'For some special status, a common appelation is used - ie: topotype and cotype are joined into a common appelation of syntype';


--
-- TOC entry 8916 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.type_search; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.type_search IS 'On the interface, the separation in all special status is not suggested for non official appelations. For instance, an unified grouping name is provided: type for non official appelation,...';


--
-- TOC entry 8917 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.sex; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.sex IS 'sex: male , female,...';


--
-- TOC entry 8918 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.stage; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.stage IS 'stage: adult, juvenile,...';


--
-- TOC entry 8919 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.state; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.state IS 'state - a sex complement: ovigerous, pregnant,...';


--
-- TOC entry 8920 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.social_status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.social_status IS 'For social specimens, give the social status/role of the specimen in colony';


--
-- TOC entry 8921 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.rock_form; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.rock_form IS 'For rock specimens, a descriptive form can be given: polygonous,...';


--
-- TOC entry 8922 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.specimen_part; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.specimen_part IS 'Description of the part stored in conservatory: the whole specimen or a given precise part such as skelleton, head, fur,...';


--
-- TOC entry 8923 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.complete; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.complete IS 'Flag telling if specimen is complete or not';


--
-- TOC entry 8924 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.building; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.building IS 'Building the specimen is stored in';


--
-- TOC entry 8925 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.floor; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.floor IS 'Floor the specimen is stored in';


--
-- TOC entry 8926 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.room; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.room IS 'Room the specimen is stored in';


--
-- TOC entry 8927 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens."row"; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens."row" IS 'Row the specimen is stored in';


--
-- TOC entry 8928 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.shelf; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.shelf IS 'Shelf the specimen is stored in';


--
-- TOC entry 8929 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.container; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.container IS 'Container the specimen is stored in';


--
-- TOC entry 8930 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.sub_container; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.sub_container IS 'Sub-Container the specimen is stored in';


--
-- TOC entry 8931 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.container_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.container_type IS 'Type of container: box, plateau-caisse,...';


--
-- TOC entry 8932 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.sub_container_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.sub_container_type IS 'Type of sub-container: slide, needle,...';


--
-- TOC entry 8933 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.container_storage; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.container_storage IS 'Conservative medium used: formol, alcohool, dry,...';


--
-- TOC entry 8934 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.sub_container_storage; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.sub_container_storage IS 'Conservative medium used: formol, alcohool, dry,...';


--
-- TOC entry 8935 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.surnumerary; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.surnumerary IS 'Tells if this specimen has been added after first inventory';


--
-- TOC entry 8936 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.specimen_status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.specimen_status IS 'Specimen status: good state, lost, damaged,...';


--
-- TOC entry 8937 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.specimen_count_min; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.specimen_count_min IS 'Minimum number of specimens';


--
-- TOC entry 8938 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.specimen_count_max; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.specimen_count_max IS 'Maximum number of specimens';


--
-- TOC entry 8939 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.gtu_from_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.gtu_from_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8940 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.gtu_from_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.gtu_from_date IS 'composed from date of the GTU';


--
-- TOC entry 8941 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.gtu_to_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.gtu_to_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day, 4 for hour, 2 for minutes, 1 for seconds';


--
-- TOC entry 8942 (class 0 OID 0)
-- Dependencies: 341
-- Name: COLUMN specimens.gtu_to_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens.gtu_to_date IS 'composed to date of the GTU';


--
-- TOC entry 342 (class 1259 OID 1441033)
-- Name: taxonomy_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.taxonomy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.taxonomy_id_seq OWNER TO darwin2;

--
-- TOC entry 343 (class 1259 OID 1441035)
-- Name: taxonomy; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.taxonomy (
    metadata_ref integer NOT NULL,
    id integer DEFAULT nextval('darwin2.taxonomy_id_seq'::regclass) NOT NULL,
    extinct boolean DEFAULT false NOT NULL,
    taxonomy_creation_date timestamp without time zone DEFAULT now(),
    import_ref integer,
    sensitive_info_withheld boolean,
    is_reference_taxonomy boolean DEFAULT true NOT NULL,
    cites boolean DEFAULT false,
    nomen_nodum boolean,
    CONSTRAINT fct_chk_onceinpath_taxonomy CHECK (darwin2.fct_chk_onceinpath(((((COALESCE(path, ''::character varying))::text || '/'::text) || id))::character varying))
)
INHERITS (darwin2.template_classifications);


ALTER TABLE darwin2.taxonomy OWNER TO darwin2;

--
-- TOC entry 8945 (class 0 OID 0)
-- Dependencies: 343
-- Name: TABLE taxonomy; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.taxonomy IS 'Taxonomic classification table';


--
-- TOC entry 8946 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.name IS 'Classification unit name';


--
-- TOC entry 8947 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.name_indexed IS 'Indexed form of name field';


--
-- TOC entry 8948 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.level_ref IS 'Reference of classification level the unit is encoded in';


--
-- TOC entry 8949 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.status; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.status IS 'Validitiy status: valid, invalid, in discussion';


--
-- TOC entry 8950 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.path IS 'Hierarchy path (/ for root)';


--
-- TOC entry 8951 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.parent_ref IS 'Id of parent - id field from table itself';


--
-- TOC entry 8952 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.id IS 'Unique identifier of a classification unit';


--
-- TOC entry 8953 (class 0 OID 0)
-- Dependencies: 343
-- Name: COLUMN taxonomy.extinct; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.taxonomy.extinct IS 'Tells if taxonomy is extinct or not';


--
-- TOC entry 344 (class 1259 OID 1441050)
-- Name: mv_taxo_ranks_counter; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.mv_taxo_ranks_counter AS
 WITH spec_path AS (
         SELECT a.level_text,
            count(a.id) AS taxon_in_spec_count
           FROM ( SELECT specimens_1.id,
                    unnest(public.akeys(darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore((((taxonomy_1.path)::text || ((taxonomy_1.id)::character varying)::text))::character varying))) AS level_text
                   FROM (darwin2.taxonomy taxonomy_1
                     JOIN darwin2.specimens specimens_1 ON ((taxonomy_1.id = specimens_1.taxon_ref)))) a
          GROUP BY a.level_text
        )
 SELECT taxonomy.level_ref,
    catalogue_levels.level_name,
    count(DISTINCT taxonomy.id) AS taxa_count,
    count(specimens.id) AS spec_ident_count,
    spec_path.taxon_in_spec_count
   FROM (((darwin2.taxonomy
     LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)))
     LEFT JOIN darwin2.specimens ON ((taxonomy.id = specimens.taxon_ref)))
     LEFT JOIN spec_path ON (((catalogue_levels.level_name)::text = spec_path.level_text)))
  GROUP BY taxonomy.level_ref, catalogue_levels.level_name, spec_path.taxon_in_spec_count
  ORDER BY (count(taxonomy.id)) DESC
  WITH NO DATA;


ALTER TABLE darwin2.mv_taxo_ranks_counter OWNER TO darwin2;

--
-- TOC entry 345 (class 1259 OID 1441058)
-- Name: my_saved_searches_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.my_saved_searches_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.my_saved_searches_id_seq OWNER TO darwin2;

--
-- TOC entry 346 (class 1259 OID 1441060)
-- Name: my_saved_searches; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.my_saved_searches (
    id integer DEFAULT nextval('darwin2.my_saved_searches_id_seq'::regclass) NOT NULL,
    user_ref integer NOT NULL,
    name character varying DEFAULT 'default'::character varying NOT NULL,
    search_criterias character varying NOT NULL,
    favorite boolean DEFAULT false NOT NULL,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL,
    visible_fields_in_result character varying NOT NULL,
    is_only_id boolean DEFAULT false NOT NULL,
    subject character varying DEFAULT 'specimen'::character varying NOT NULL,
    query_where character varying,
    query_parameters character varying,
    current_page integer DEFAULT 0,
    page_size integer DEFAULT 10000,
    nb_records bigint,
    download_lock boolean DEFAULT false,
    is_public boolean
);


ALTER TABLE darwin2.my_saved_searches OWNER TO darwin2;

--
-- TOC entry 8957 (class 0 OID 0)
-- Dependencies: 346
-- Name: TABLE my_saved_searches; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.my_saved_searches IS 'Stores user''s saved searches but also (by default) the last search done';


--
-- TOC entry 8958 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.user_ref IS 'Reference of user having saved a search';


--
-- TOC entry 8959 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.name IS 'Name given by user to his/her saved search';


--
-- TOC entry 8960 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.search_criterias; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.search_criterias IS 'String field containing the serialization of search criterias';


--
-- TOC entry 8961 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.favorite; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.favorite IS 'Flag telling if saved search concerned is one of the favorites or not';


--
-- TOC entry 8962 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.modification_date_time IS 'Last modification or entry date and time';


--
-- TOC entry 8963 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.visible_fields_in_result; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.visible_fields_in_result IS 'Array of fields that were set visible in the result table at the time the search was saved';


--
-- TOC entry 8964 (class 0 OID 0)
-- Dependencies: 346
-- Name: COLUMN my_saved_searches.is_only_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_saved_searches.is_only_id IS 'Tell if the search only contains saved specimen (ids) or it is a normal saved search';


--
-- TOC entry 347 (class 1259 OID 1441075)
-- Name: my_widgets_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.my_widgets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.my_widgets_id_seq OWNER TO darwin2;

--
-- TOC entry 348 (class 1259 OID 1441077)
-- Name: my_widgets; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.my_widgets (
    id integer DEFAULT nextval('darwin2.my_widgets_id_seq'::regclass) NOT NULL,
    user_ref integer NOT NULL,
    category character varying DEFAULT 'board_widget'::character varying NOT NULL,
    group_name character varying NOT NULL,
    order_by smallint DEFAULT 1 NOT NULL,
    col_num smallint DEFAULT 1 NOT NULL,
    mandatory boolean DEFAULT false NOT NULL,
    visible boolean DEFAULT true NOT NULL,
    opened boolean DEFAULT true NOT NULL,
    color character varying DEFAULT '#5BAABD'::character varying NOT NULL,
    is_available boolean DEFAULT false NOT NULL,
    icon_ref integer,
    title_perso character varying(32),
    collections character varying DEFAULT ','::character varying NOT NULL,
    all_public boolean DEFAULT false NOT NULL
);


ALTER TABLE darwin2.my_widgets OWNER TO darwin2;

--
-- TOC entry 8967 (class 0 OID 0)
-- Dependencies: 348
-- Name: TABLE my_widgets; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.my_widgets IS 'Stores user''s preferences for customizable page elements - widgets mainly';


--
-- TOC entry 8968 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.user_ref IS 'Reference of user concerned - id field of users table';


--
-- TOC entry 8969 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.category; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.category IS 'Customizable page element category: board widget, encoding widget,...';


--
-- TOC entry 8970 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.group_name IS 'Customizable page element name';


--
-- TOC entry 8971 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.order_by; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.order_by IS 'Absolute order by between page element name';


--
-- TOC entry 8972 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.col_num; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.col_num IS 'Column number - tells in which column the page element concerned is';


--
-- TOC entry 8973 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.mandatory; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.mandatory IS 'Flag telling if the page element can be closed or not';


--
-- TOC entry 8974 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.visible; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.visible IS 'Flag telling if the page element is on the board or in the widget chooser';


--
-- TOC entry 8975 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.opened; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.opened IS 'Flag telling if the page element is opened by default or not';


--
-- TOC entry 8976 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.color; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.color IS 'Color given to page element by user';


--
-- TOC entry 8977 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.is_available; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.is_available IS 'Flag telling if the widget can be used or not';


--
-- TOC entry 8978 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.icon_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.icon_ref IS 'Reference of multimedia icon to be used before page element title';


--
-- TOC entry 8979 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.title_perso; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.title_perso IS 'Page element title given by user';


--
-- TOC entry 8980 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.collections; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.collections IS 'list of collections whitch user_ref has rights to see';


--
-- TOC entry 8981 (class 0 OID 0)
-- Dependencies: 348
-- Name: COLUMN my_widgets.all_public; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.my_widgets.all_public IS 'Set to determine if the widget is public by default or not';


--
-- TOC entry 349 (class 1259 OID 1441094)
-- Name: people_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_id_seq OWNER TO darwin2;

--
-- TOC entry 350 (class 1259 OID 1441096)
-- Name: template_people; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.template_people (
    is_physical boolean DEFAULT true NOT NULL,
    sub_type character varying,
    formated_name character varying NOT NULL,
    formated_name_indexed character varying NOT NULL,
    formated_name_unique character varying NOT NULL,
    title character varying DEFAULT ''::character varying NOT NULL,
    family_name character varying NOT NULL,
    given_name character varying,
    additional_names character varying,
    birth_date_mask integer DEFAULT 0 NOT NULL,
    birth_date date DEFAULT '0001-01-01'::date NOT NULL,
    gender character(1),
    CONSTRAINT genders_chk CHECK ((gender = ANY (ARRAY['M'::bpchar, 'F'::bpchar])))
);


ALTER TABLE darwin2.template_people OWNER TO darwin2;

--
-- TOC entry 8984 (class 0 OID 0)
-- Dependencies: 350
-- Name: TABLE template_people; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.template_people IS 'Template table used to describe user/people tables';


--
-- TOC entry 8985 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.is_physical; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.is_physical IS 'Type of user/person: physical or moral - true is physical, false is moral';


--
-- TOC entry 8986 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.sub_type IS 'Used for moral user/persons: precise nature - public institution, asbl, sprl, sa,...';


--
-- TOC entry 8987 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.formated_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.formated_name IS 'Complete user/person formated name (with honorific mention, prefixes, suffixes,...) - By default composed with family_name and given_name fields, but can be modified by hand';


--
-- TOC entry 8988 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.formated_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.formated_name_indexed IS 'Indexed form of formated_name field';


--
-- TOC entry 8989 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.formated_name_unique; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.formated_name_unique IS 'Indexed form of formated_name field (for unique index purpose)';


--
-- TOC entry 8990 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.title; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.title IS 'Title of a physical user/person like Mr or Mrs or phd,...';


--
-- TOC entry 8991 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.family_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.family_name IS 'Family name for physical user/persons and Organisation name for moral user/persons';


--
-- TOC entry 8992 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.given_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.given_name IS 'User/person''s given name - usually first name';


--
-- TOC entry 8993 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.additional_names; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.additional_names IS 'Any additional names given to user/person';


--
-- TOC entry 8994 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.birth_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.birth_date_mask IS 'Contains the Mask flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 8995 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.birth_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.birth_date IS 'Birth/Creation date composed';


--
-- TOC entry 8996 (class 0 OID 0)
-- Dependencies: 350
-- Name: COLUMN template_people.gender; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people.gender IS 'For physical user/persons give the gender: M or F';


--
-- TOC entry 351 (class 1259 OID 1441107)
-- Name: people; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people (
    id integer DEFAULT nextval('darwin2.people_id_seq'::regclass) NOT NULL,
    db_people_type integer DEFAULT 1 NOT NULL,
    end_date_mask integer DEFAULT 0 NOT NULL,
    end_date date DEFAULT '2038-12-31'::date NOT NULL,
    activity_date_from_mask integer DEFAULT 0 NOT NULL,
    activity_date_from date DEFAULT '0001-01-01'::date NOT NULL,
    activity_date_to_mask integer DEFAULT 0 NOT NULL,
    activity_date_to date DEFAULT '2038-12-31'::date NOT NULL,
    name_formated_indexed text DEFAULT ''::text NOT NULL,
    import_ref integer
)
INHERITS (darwin2.template_people);


ALTER TABLE darwin2.people OWNER TO darwin2;

--
-- TOC entry 8998 (class 0 OID 0)
-- Dependencies: 351
-- Name: TABLE people; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.people IS 'All physical and moral persons used in the application are here stored';


--
-- TOC entry 8999 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.is_physical; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.is_physical IS 'Type of person: physical or moral - true is physical, false is moral';


--
-- TOC entry 9000 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.sub_type IS 'Used for moral persons: precise nature - public institution, asbl, sprl, sa,...';


--
-- TOC entry 9001 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.formated_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.formated_name IS 'Complete person formated name (with honorific mention, prefixes, suffixes,...) - By default composed with family_name and given_name fields, but can be modified by hand';


--
-- TOC entry 9002 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.formated_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.formated_name_indexed IS 'Indexed form of formated_name field';


--
-- TOC entry 9003 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.title; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.title IS 'Title of a physical user/person like Mr or Mrs or phd,...';


--
-- TOC entry 9004 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.family_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.family_name IS 'Family name for physical persons and Organisation name for moral persons';


--
-- TOC entry 9005 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.given_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.given_name IS 'User/person''s given name - usually first name';


--
-- TOC entry 9006 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.additional_names; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.additional_names IS 'Any additional names given to person';


--
-- TOC entry 9007 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.birth_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.birth_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 9008 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.birth_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.birth_date IS 'Day of birth/creation';


--
-- TOC entry 9009 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.gender; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.gender IS 'For physical persons give the gender: M or F';


--
-- TOC entry 9010 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.id IS 'Unique identifier of a person';


--
-- TOC entry 9011 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.db_people_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.db_people_type IS 'Sum of numbers in an arithmetic suite (1,2,4,8,...) that gives a unique number identifying people roles - each roles represented by one of the number in the arithmetic suite: 1 is contact, 2 is author, 4 is identifier, 8 is expert, 16 is collector, 32 preparator, 64 photographer...';


--
-- TOC entry 9012 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.end_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.end_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 9013 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.end_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.end_date IS 'End date';


--
-- TOC entry 9014 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.activity_date_from_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.activity_date_from_mask IS 'person general activity period or person activity period in the organization referenced date from mask';


--
-- TOC entry 9015 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.activity_date_from; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.activity_date_from IS 'person general activity period or person activity period in the organization referenced date from';


--
-- TOC entry 9016 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.activity_date_to_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.activity_date_to_mask IS 'person general activity period or person activity period in the organization referenced date to mask';


--
-- TOC entry 9017 (class 0 OID 0)
-- Dependencies: 351
-- Name: COLUMN people.activity_date_to; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people.activity_date_to IS 'person general activity period or person activity period in the organization referenced date to';


--
-- TOC entry 352 (class 1259 OID 1441127)
-- Name: people_addresses_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_addresses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_addresses_id_seq OWNER TO darwin2;

--
-- TOC entry 353 (class 1259 OID 1441129)
-- Name: template_people_users_addr_common; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.template_people_users_addr_common (
    po_box character varying,
    extended_address character varying,
    locality character varying NOT NULL,
    region character varying,
    zip_code character varying,
    country character varying NOT NULL
);


ALTER TABLE darwin2.template_people_users_addr_common OWNER TO darwin2;

--
-- TOC entry 9020 (class 0 OID 0)
-- Dependencies: 353
-- Name: TABLE template_people_users_addr_common; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.template_people_users_addr_common IS 'Template table used to construct addresses tables for people/users';


--
-- TOC entry 9021 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.po_box; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.po_box IS 'PO Box';


--
-- TOC entry 9022 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.extended_address; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.extended_address IS 'Address extension: State, Special post zip code characters,...';


--
-- TOC entry 9023 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.locality; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.locality IS 'Locality';


--
-- TOC entry 9024 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.region; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.region IS 'Region';


--
-- TOC entry 9025 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.zip_code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.zip_code IS 'zip code';


--
-- TOC entry 9026 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN template_people_users_addr_common.country; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_addr_common.country IS 'Country';


--
-- TOC entry 354 (class 1259 OID 1441135)
-- Name: template_people_users_comm_common; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.template_people_users_comm_common (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL
);


ALTER TABLE darwin2.template_people_users_comm_common OWNER TO darwin2;

--
-- TOC entry 9028 (class 0 OID 0)
-- Dependencies: 354
-- Name: TABLE template_people_users_comm_common; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.template_people_users_comm_common IS 'Template table used to construct people communication tables (tel and e-mail)';


--
-- TOC entry 9029 (class 0 OID 0)
-- Dependencies: 354
-- Name: COLUMN template_people_users_comm_common.person_user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_comm_common.person_user_ref IS 'Reference of person/user - id field of people/users table';


--
-- TOC entry 9030 (class 0 OID 0)
-- Dependencies: 354
-- Name: COLUMN template_people_users_comm_common.entry; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.template_people_users_comm_common.entry IS 'Communication entry';


--
-- TOC entry 355 (class 1259 OID 1441141)
-- Name: people_addresses; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people_addresses (
    id integer DEFAULT nextval('darwin2.people_addresses_id_seq'::regclass) NOT NULL,
    tag character varying DEFAULT ''::character varying NOT NULL
)
INHERITS (darwin2.template_people_users_comm_common, darwin2.template_people_users_addr_common);


ALTER TABLE darwin2.people_addresses OWNER TO darwin2;

--
-- TOC entry 9032 (class 0 OID 0)
-- Dependencies: 355
-- Name: TABLE people_addresses; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.people_addresses IS 'People addresses';


--
-- TOC entry 9033 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.person_user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.person_user_ref IS 'Reference of the person concerned - id field of people table';


--
-- TOC entry 9034 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.entry; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.entry IS 'Street address';


--
-- TOC entry 9035 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.po_box; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.po_box IS 'PO Box';


--
-- TOC entry 9036 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.extended_address; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.extended_address IS 'Address extension: State, zip code suffix,...';


--
-- TOC entry 9037 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.locality; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.locality IS 'Locality';


--
-- TOC entry 9038 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.region; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.region IS 'Region';


--
-- TOC entry 9039 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.zip_code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.zip_code IS 'Zip code';


--
-- TOC entry 9040 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.country; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.country IS 'Country';


--
-- TOC entry 9041 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.id IS 'Unique identifier of a person address';


--
-- TOC entry 9042 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN people_addresses.tag; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_addresses.tag IS 'List of descriptive tags: home, work,...';


--
-- TOC entry 356 (class 1259 OID 1441149)
-- Name: people_comm_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_comm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_comm_id_seq OWNER TO darwin2;

--
-- TOC entry 357 (class 1259 OID 1441151)
-- Name: people_comm; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people_comm (
    id integer DEFAULT nextval('darwin2.people_comm_id_seq'::regclass) NOT NULL,
    comm_type character varying DEFAULT 'phone/fax'::character varying NOT NULL,
    tag character varying DEFAULT ''::character varying NOT NULL
)
INHERITS (darwin2.template_people_users_comm_common);


ALTER TABLE darwin2.people_comm OWNER TO darwin2;

--
-- TOC entry 9045 (class 0 OID 0)
-- Dependencies: 357
-- Name: TABLE people_comm; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.people_comm IS 'People phones and e-mails';


--
-- TOC entry 9046 (class 0 OID 0)
-- Dependencies: 357
-- Name: COLUMN people_comm.person_user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_comm.person_user_ref IS 'Reference of person - id field of people table';


--
-- TOC entry 9047 (class 0 OID 0)
-- Dependencies: 357
-- Name: COLUMN people_comm.entry; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_comm.entry IS 'Communication entry';


--
-- TOC entry 9048 (class 0 OID 0)
-- Dependencies: 357
-- Name: COLUMN people_comm.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_comm.id IS 'Unique identifier of a person communication mean entry';


--
-- TOC entry 9049 (class 0 OID 0)
-- Dependencies: 357
-- Name: COLUMN people_comm.comm_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_comm.comm_type IS 'Type of communication table concerned: address, phone or e-mail';


--
-- TOC entry 9050 (class 0 OID 0)
-- Dependencies: 357
-- Name: COLUMN people_comm.tag; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_comm.tag IS 'List of descriptive tags separated by , : internet, tel, fax, pager, public, private,...';


--
-- TOC entry 358 (class 1259 OID 1441160)
-- Name: people_languages_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_languages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_languages_id_seq OWNER TO darwin2;

--
-- TOC entry 359 (class 1259 OID 1441162)
-- Name: people_languages; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people_languages (
    language_country character varying DEFAULT 'en'::character varying NOT NULL,
    mother boolean DEFAULT true NOT NULL,
    preferred_language boolean DEFAULT false NOT NULL,
    id integer DEFAULT nextval('darwin2.people_languages_id_seq'::regclass) NOT NULL,
    people_ref integer NOT NULL
);


ALTER TABLE darwin2.people_languages OWNER TO darwin2;

--
-- TOC entry 9053 (class 0 OID 0)
-- Dependencies: 359
-- Name: TABLE people_languages; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.people_languages IS 'Languages spoken by a given person';


--
-- TOC entry 9054 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN people_languages.language_country; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_languages.language_country IS 'Reference of Language - language_country field of languages_countries table';


--
-- TOC entry 9055 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN people_languages.mother; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_languages.mother IS 'Flag telling if its mother language or not';


--
-- TOC entry 9056 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN people_languages.preferred_language; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_languages.preferred_language IS 'Flag telling which language is preferred in communications';


--
-- TOC entry 9057 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN people_languages.people_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_languages.people_ref IS 'Reference of person - id field of people table';


--
-- TOC entry 360 (class 1259 OID 1441172)
-- Name: people_relationships_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_relationships_id_seq OWNER TO darwin2;

--
-- TOC entry 361 (class 1259 OID 1441174)
-- Name: people_relationships; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people_relationships (
    person_user_role character varying,
    id integer DEFAULT nextval('darwin2.people_relationships_id_seq'::regclass) NOT NULL,
    relationship_type character varying DEFAULT 'belongs to'::character varying NOT NULL,
    person_1_ref integer NOT NULL,
    person_2_ref integer NOT NULL,
    path character varying,
    activity_date_from_mask integer DEFAULT 0 NOT NULL,
    activity_date_from date DEFAULT '0001-01-01'::date NOT NULL,
    activity_date_to_mask integer DEFAULT 0 NOT NULL,
    activity_date_to date DEFAULT '2038-12-31'::date NOT NULL
);


ALTER TABLE darwin2.people_relationships OWNER TO darwin2;

--
-- TOC entry 9060 (class 0 OID 0)
-- Dependencies: 361
-- Name: TABLE people_relationships; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.people_relationships IS 'Relationships between people - mainly between physical person and moral person: relationship of dependancy';


--
-- TOC entry 9061 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.person_user_role; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.person_user_role IS 'Person role in the organization referenced';


--
-- TOC entry 9062 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.relationship_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.relationship_type IS 'Type of relationship between two persons: belongs to, is department of, is section of, works for,...';


--
-- TOC entry 9063 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.person_1_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.person_1_ref IS 'Reference of person to be puted in relationship with an other - id field of people table';


--
-- TOC entry 9064 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.person_2_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.person_2_ref IS 'Reference of person puted the person puted in relationship with is dependant of - id field of people table';


--
-- TOC entry 9065 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.path; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.path IS 'Hierarchical path of the organization structure';


--
-- TOC entry 9066 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.activity_date_from_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.activity_date_from_mask IS 'person activity period or person activity period in the organization referenced date from mask';


--
-- TOC entry 9067 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.activity_date_from; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.activity_date_from IS 'person activity period or person activity period in the organization referenced date from';


--
-- TOC entry 9068 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.activity_date_to_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.activity_date_to_mask IS 'person activity period or person activity period in the organization referenced date to mask';


--
-- TOC entry 9069 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN people_relationships.activity_date_to; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_relationships.activity_date_to IS 'person activity period or person activity period in the organization referenced date to';


--
-- TOC entry 362 (class 1259 OID 1441186)
-- Name: people_sub_types; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.people_sub_types (
    id integer NOT NULL,
    people_ref integer,
    sub_type character varying
);


ALTER TABLE darwin2.people_sub_types OWNER TO darwin2;

--
-- TOC entry 9071 (class 0 OID 0)
-- Dependencies: 362
-- Name: COLUMN people_sub_types.sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.people_sub_types.sub_type IS 'Used for moral user/persons: precise nature - public institution, asbl, sprl, sa,...';


--
-- TOC entry 363 (class 1259 OID 1441192)
-- Name: people_sub_types_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.people_sub_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.people_sub_types_id_seq OWNER TO darwin2;

--
-- TOC entry 9073 (class 0 OID 0)
-- Dependencies: 363
-- Name: people_sub_types_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.people_sub_types_id_seq OWNED BY darwin2.people_sub_types.id;


--
-- TOC entry 364 (class 1259 OID 1441194)
-- Name: possible_upper_levels; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.possible_upper_levels (
    level_ref integer NOT NULL,
    level_upper_ref integer
);


ALTER TABLE darwin2.possible_upper_levels OWNER TO darwin2;

--
-- TOC entry 9075 (class 0 OID 0)
-- Dependencies: 364
-- Name: TABLE possible_upper_levels; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.possible_upper_levels IS 'For each level, list all the availble parent levels';


--
-- TOC entry 9076 (class 0 OID 0)
-- Dependencies: 364
-- Name: COLUMN possible_upper_levels.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.possible_upper_levels.level_ref IS 'Reference of current level';


--
-- TOC entry 9077 (class 0 OID 0)
-- Dependencies: 364
-- Name: COLUMN possible_upper_levels.level_upper_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.possible_upper_levels.level_upper_ref IS 'Reference of authorized parent level';


--
-- TOC entry 365 (class 1259 OID 1441197)
-- Name: preferences_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.preferences_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.preferences_id_seq OWNER TO darwin2;

--
-- TOC entry 366 (class 1259 OID 1441199)
-- Name: preferences; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.preferences (
    id integer DEFAULT nextval('darwin2.preferences_id_seq'::regclass) NOT NULL,
    user_ref integer NOT NULL,
    pref_key character varying NOT NULL,
    pref_value character varying NOT NULL
);


ALTER TABLE darwin2.preferences OWNER TO darwin2;

--
-- TOC entry 9080 (class 0 OID 0)
-- Dependencies: 366
-- Name: TABLE preferences; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.preferences IS 'Table to handle users preferences';


--
-- TOC entry 9081 (class 0 OID 0)
-- Dependencies: 366
-- Name: COLUMN preferences.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.preferences.user_ref IS 'The referenced user id';


--
-- TOC entry 9082 (class 0 OID 0)
-- Dependencies: 366
-- Name: COLUMN preferences.pref_key; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.preferences.pref_key IS 'The classification key of the preference. eg: color';


--
-- TOC entry 9083 (class 0 OID 0)
-- Dependencies: 366
-- Name: COLUMN preferences.pref_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.preferences.pref_value IS 'The value of the preference for this user eg: red';


--
-- TOC entry 367 (class 1259 OID 1441206)
-- Name: properties_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.properties_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.properties_id_seq OWNER TO darwin2;

--
-- TOC entry 9085 (class 0 OID 0)
-- Dependencies: 367
-- Name: properties_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.properties_id_seq OWNED BY darwin2.properties.id;


--
-- TOC entry 368 (class 1259 OID 1441208)
-- Name: properties_values_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.properties_values_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.properties_values_id_seq OWNER TO darwin2;

--
-- TOC entry 369 (class 1259 OID 1441210)
-- Name: property_tag_authority; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.property_tag_authority (
    tag_authority_ref bigint NOT NULL,
    property_type_id bigint NOT NULL,
    tag_authority_match_predicate text NOT NULL,
    CONSTRAINT chk_predicate_onto CHECK (((tag_authority_match_predicate ~~ '%skos:%'::text) OR (tag_authority_match_predicate ~~ '%owl:%'::text)))
);


ALTER TABLE darwin2.property_tag_authority OWNER TO darwin2;

--
-- TOC entry 370 (class 1259 OID 1441217)
-- Name: property_type; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.property_type (
    id integer NOT NULL,
    type character varying NOT NULL
);


ALTER TABLE darwin2.property_type OWNER TO postgres;

--
-- TOC entry 371 (class 1259 OID 1441223)
-- Name: property_type_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: postgres
--

CREATE SEQUENCE darwin2.property_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.property_type_id_seq OWNER TO postgres;

--
-- TOC entry 9090 (class 0 OID 0)
-- Dependencies: 371
-- Name: property_type_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: postgres
--

ALTER SEQUENCE darwin2.property_type_id_seq OWNED BY darwin2.property_type.id;


--
-- TOC entry 372 (class 1259 OID 1441225)
-- Name: ref_rec; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.ref_rec (
    id integer
);


ALTER TABLE darwin2.ref_rec OWNER TO darwin2;

--
-- TOC entry 373 (class 1259 OID 1441228)
-- Name: reports; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.reports (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    name character varying NOT NULL,
    uri character varying,
    lang character(2) NOT NULL,
    format character varying DEFAULT 'csv'::character varying NOT NULL,
    comment character varying,
    parameters public.hstore
);


ALTER TABLE darwin2.reports OWNER TO postgres;

--
-- TOC entry 9093 (class 0 OID 0)
-- Dependencies: 373
-- Name: TABLE reports; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON TABLE darwin2.reports IS 'Table to handle users reports asking';


--
-- TOC entry 9094 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.user_ref; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.user_ref IS 'The referenced user id';


--
-- TOC entry 9095 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.name; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.name IS 'The report name';


--
-- TOC entry 9096 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.uri; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.uri IS 'The path where the report file is stored, if uri is not null then the report has already been launched';


--
-- TOC entry 9097 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.lang; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.lang IS 'The lang asked for this report';


--
-- TOC entry 9098 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.format; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.format IS 'The file type of the report file, generaly csv or xls';


--
-- TOC entry 9099 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.comment; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.comment IS 'A comment to add to the report, just in case.';


--
-- TOC entry 9100 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN reports.parameters; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.reports.parameters IS 'if the report requires some information (such as collection_ref), they are here';


--
-- TOC entry 374 (class 1259 OID 1441235)
-- Name: reports_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: postgres
--

CREATE SEQUENCE darwin2.reports_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.reports_id_seq OWNER TO postgres;

--
-- TOC entry 9102 (class 0 OID 0)
-- Dependencies: 374
-- Name: reports_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: postgres
--

ALTER SEQUENCE darwin2.reports_id_seq OWNED BY darwin2.reports.id;


--
-- TOC entry 375 (class 1259 OID 1441237)
-- Name: returned; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.returned (
    max bigint
);


ALTER TABLE darwin2.returned OWNER TO darwin2;

--
-- TOC entry 376 (class 1259 OID 1441240)
-- Name: specimen_collecting_methods_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimen_collecting_methods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimen_collecting_methods_id_seq OWNER TO darwin2;

--
-- TOC entry 377 (class 1259 OID 1441242)
-- Name: specimen_collecting_methods; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.specimen_collecting_methods (
    id integer DEFAULT nextval('darwin2.specimen_collecting_methods_id_seq'::regclass) NOT NULL,
    specimen_ref integer NOT NULL,
    collecting_method_ref integer NOT NULL
);


ALTER TABLE darwin2.specimen_collecting_methods OWNER TO darwin2;

--
-- TOC entry 9106 (class 0 OID 0)
-- Dependencies: 377
-- Name: TABLE specimen_collecting_methods; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.specimen_collecting_methods IS 'Association of collecting methods with specimens';


--
-- TOC entry 9107 (class 0 OID 0)
-- Dependencies: 377
-- Name: COLUMN specimen_collecting_methods.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_methods.id IS 'Unique identifier of an association';


--
-- TOC entry 9108 (class 0 OID 0)
-- Dependencies: 377
-- Name: COLUMN specimen_collecting_methods.specimen_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_methods.specimen_ref IS 'Identifier of a specimen - comes from specimens table (id field)';


--
-- TOC entry 9109 (class 0 OID 0)
-- Dependencies: 377
-- Name: COLUMN specimen_collecting_methods.collecting_method_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_methods.collecting_method_ref IS 'Identifier of a collecting method - comes from collecting_methods table (id field)';


--
-- TOC entry 378 (class 1259 OID 1441246)
-- Name: specimen_collecting_tools_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimen_collecting_tools_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimen_collecting_tools_id_seq OWNER TO darwin2;

--
-- TOC entry 379 (class 1259 OID 1441248)
-- Name: specimen_collecting_tools; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.specimen_collecting_tools (
    id integer DEFAULT nextval('darwin2.specimen_collecting_tools_id_seq'::regclass) NOT NULL,
    specimen_ref integer NOT NULL,
    collecting_tool_ref integer NOT NULL
);


ALTER TABLE darwin2.specimen_collecting_tools OWNER TO darwin2;

--
-- TOC entry 9112 (class 0 OID 0)
-- Dependencies: 379
-- Name: TABLE specimen_collecting_tools; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.specimen_collecting_tools IS 'Association of collecting tools with specimens';


--
-- TOC entry 9113 (class 0 OID 0)
-- Dependencies: 379
-- Name: COLUMN specimen_collecting_tools.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_tools.id IS 'Unique identifier of an association';


--
-- TOC entry 9114 (class 0 OID 0)
-- Dependencies: 379
-- Name: COLUMN specimen_collecting_tools.specimen_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_tools.specimen_ref IS 'Identifier of a specimen - comes from specimens table (id field)';


--
-- TOC entry 9115 (class 0 OID 0)
-- Dependencies: 379
-- Name: COLUMN specimen_collecting_tools.collecting_tool_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimen_collecting_tools.collecting_tool_ref IS 'Identifier of a collecting tool - comes from collecting_tools table (id field)';


--
-- TOC entry 380 (class 1259 OID 1441252)
-- Name: specimens_accompanying_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimens_accompanying_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimens_accompanying_id_seq OWNER TO darwin2;

--
-- TOC entry 381 (class 1259 OID 1441254)
-- Name: specimens_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimens_id_seq OWNER TO darwin2;

--
-- TOC entry 9118 (class 0 OID 0)
-- Dependencies: 381
-- Name: specimens_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.specimens_id_seq OWNED BY darwin2.specimens.id;


--
-- TOC entry 382 (class 1259 OID 1441256)
-- Name: specimens_maincodes; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.specimens_maincodes AS
 SELECT specimens.id,
    specimens.category,
    specimens.collection_ref,
    specimens.expedition_ref,
    specimens.gtu_ref,
    specimens.taxon_ref,
    specimens.litho_ref,
    specimens.chrono_ref,
    specimens.lithology_ref,
    specimens.mineral_ref,
    specimens.acquisition_category,
    specimens.acquisition_date_mask,
    specimens.acquisition_date,
    specimens.station_visible,
    specimens.ig_ref,
    specimens.type,
    specimens.type_group,
    specimens.type_search,
    specimens.sex,
    specimens.stage,
    specimens.state,
    specimens.social_status,
    specimens.rock_form,
    specimens.specimen_part,
    specimens.complete,
    specimens.institution_ref,
    specimens.building,
    specimens.floor,
    specimens.room,
    specimens."row",
    specimens.shelf,
    specimens.container,
    specimens.sub_container,
    specimens.container_type,
    specimens.sub_container_type,
    specimens.container_storage,
    specimens.sub_container_storage,
    specimens.surnumerary,
    specimens.specimen_status,
    specimens.specimen_count_min,
    specimens.specimen_count_max,
    specimens.object_name,
    specimens.object_name_indexed,
    specimens.spec_ident_ids,
    specimens.spec_coll_ids,
    specimens.spec_don_sel_ids,
    specimens.collection_type,
    specimens.collection_code,
    specimens.collection_name,
    specimens.collection_is_public,
    specimens.collection_parent_ref,
    specimens.collection_path,
    specimens.expedition_name,
    specimens.expedition_name_indexed,
    specimens.gtu_code,
    specimens.gtu_from_date_mask,
    specimens.gtu_from_date,
    specimens.gtu_to_date_mask,
    specimens.gtu_to_date,
    specimens.gtu_tag_values_indexed,
    specimens.gtu_country_tag_value,
    specimens.gtu_country_tag_indexed,
    specimens.gtu_province_tag_value,
    specimens.gtu_province_tag_indexed,
    specimens.gtu_others_tag_value,
    specimens.gtu_others_tag_indexed,
    specimens.gtu_elevation,
    specimens.gtu_elevation_accuracy,
    specimens.taxon_name,
    specimens.taxon_name_indexed,
    specimens.taxon_level_ref,
    specimens.taxon_level_name,
    specimens.taxon_status,
    specimens.taxon_path,
    specimens.taxon_parent_ref,
    specimens.taxon_extinct,
    specimens.litho_name,
    specimens.litho_name_indexed,
    specimens.litho_level_ref,
    specimens.litho_level_name,
    specimens.litho_status,
    specimens.litho_local,
    specimens.litho_color,
    specimens.litho_path,
    specimens.litho_parent_ref,
    specimens.chrono_name,
    specimens.chrono_name_indexed,
    specimens.chrono_level_ref,
    specimens.chrono_level_name,
    specimens.chrono_status,
    specimens.chrono_local,
    specimens.chrono_color,
    specimens.chrono_path,
    specimens.chrono_parent_ref,
    specimens.lithology_name,
    specimens.lithology_name_indexed,
    specimens.lithology_level_ref,
    specimens.lithology_level_name,
    specimens.lithology_status,
    specimens.lithology_local,
    specimens.lithology_color,
    specimens.lithology_path,
    specimens.lithology_parent_ref,
    specimens.mineral_name,
    specimens.mineral_name_indexed,
    specimens.mineral_level_ref,
    specimens.mineral_level_name,
    specimens.mineral_status,
    specimens.mineral_local,
    specimens.mineral_color,
    specimens.mineral_path,
    specimens.mineral_parent_ref,
    specimens.ig_num,
    specimens.ig_num_indexed,
    specimens.ig_date_mask,
    specimens.ig_date,
    specimens.col,
    specimens.gtu_location,
    specimens.specimen_creation_date,
    specimens.import_ref,
    btrim((((((COALESCE(codes.code_prefix, ''::character varying))::text || (COALESCE(codes.code_prefix_separator, ''::character varying))::text) || (COALESCE(codes.code, ''::character varying))::text) || (COALESCE(codes.code_suffix_separator, ''::character varying))::text) || (COALESCE(codes.code_suffix, ''::character varying))::text)) AS code_main
   FROM (darwin2.specimens
     LEFT JOIN darwin2.codes ON ((specimens.id = codes.record_id)))
  WHERE ((codes.code_category)::text = 'main'::text);


ALTER TABLE darwin2.specimens_maincodes OWNER TO darwin2;

--
-- TOC entry 383 (class 1259 OID 1441261)
-- Name: specimens_relationships; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.specimens_relationships (
    id integer NOT NULL,
    specimen_ref integer NOT NULL,
    relationship_type character varying DEFAULT 'host'::character varying NOT NULL,
    unit_type character varying DEFAULT 'specimens'::character varying NOT NULL,
    specimen_related_ref integer,
    taxon_ref integer,
    mineral_ref integer,
    institution_ref integer,
    source_name text,
    source_id text,
    quantity numeric(16,2),
    unit character varying DEFAULT '%'::character varying
);


ALTER TABLE darwin2.specimens_relationships OWNER TO darwin2;

--
-- TOC entry 9121 (class 0 OID 0)
-- Dependencies: 383
-- Name: TABLE specimens_relationships; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.specimens_relationships IS 'List all the objects/specimens related the current specimen';


--
-- TOC entry 9122 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.specimen_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.specimen_ref IS 'Reference of specimen concerned - id field of specimens table';


--
-- TOC entry 9123 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.relationship_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.relationship_type IS 'Type of relationship';


--
-- TOC entry 9124 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.unit_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.unit_type IS 'Type of the related unit : spec, taxo or mineralo';


--
-- TOC entry 9125 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.taxon_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.taxon_ref IS 'Reference of the related specimen';


--
-- TOC entry 9126 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.mineral_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.mineral_ref IS 'Reference of related mineral';


--
-- TOC entry 9127 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.institution_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.institution_ref IS 'External Specimen related institution';


--
-- TOC entry 9128 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.source_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.source_name IS 'External Specimen related  source DB';


--
-- TOC entry 9129 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.source_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.source_id IS 'External Specimen related id in the source';


--
-- TOC entry 9130 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN specimens_relationships.quantity; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_relationships.quantity IS 'Quantity of accompanying mineral';


--
-- TOC entry 384 (class 1259 OID 1441270)
-- Name: specimens_relationships_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimens_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimens_relationships_id_seq OWNER TO darwin2;

--
-- TOC entry 9132 (class 0 OID 0)
-- Dependencies: 384
-- Name: specimens_relationships_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.specimens_relationships_id_seq OWNED BY darwin2.specimens_relationships.id;


--
-- TOC entry 385 (class 1259 OID 1441272)
-- Name: specimens_stable_ids; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.specimens_stable_ids (
    id bigint NOT NULL,
    specimen_ref bigint NOT NULL,
    original_id bigint NOT NULL,
    uuid uuid DEFAULT public.uuid_generate_v4(),
    doi character varying,
    specimen_fk bigint
);


ALTER TABLE darwin2.specimens_stable_ids OWNER TO darwin2;

--
-- TOC entry 9134 (class 0 OID 0)
-- Dependencies: 385
-- Name: COLUMN specimens_stable_ids.uuid; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.specimens_stable_ids.uuid IS 'UUID column (CETAF field)';


--
-- TOC entry 386 (class 1259 OID 1441279)
-- Name: specimens_stable_ids_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.specimens_stable_ids_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.specimens_stable_ids_id_seq OWNER TO darwin2;

--
-- TOC entry 9136 (class 0 OID 0)
-- Dependencies: 386
-- Name: specimens_stable_ids_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.specimens_stable_ids_id_seq OWNED BY darwin2.specimens_stable_ids.id;


--
-- TOC entry 387 (class 1259 OID 1441281)
-- Name: specimens_test_geom; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.specimens_test_geom (
    id integer,
    geom public.geometry
);


ALTER TABLE darwin2.specimens_test_geom OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 1441287)
-- Name: staging_catalogue; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_catalogue (
    id integer NOT NULL,
    import_ref integer NOT NULL,
    name character varying NOT NULL,
    level_ref integer,
    parent_ref integer,
    catalogue_ref integer,
    parent_updated boolean DEFAULT false,
    is_reference_taxonomy boolean,
    source_taxonomy character varying,
    parent_ref_internal integer,
    hierarchical_conflict boolean DEFAULT false,
    name_cluster integer,
    imported boolean DEFAULT false NOT NULL,
    import_exception character varying,
    staging_hierarchy character varying,
    darwin_hierarchy character varying
);


ALTER TABLE darwin2.staging_catalogue OWNER TO darwin2;

--
-- TOC entry 9139 (class 0 OID 0)
-- Dependencies: 388
-- Name: TABLE staging_catalogue; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.staging_catalogue IS 'Stores the catalogues hierarchy to be imported';


--
-- TOC entry 9140 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.id IS 'Unique identifier of a to be imported catalogue unit entry';


--
-- TOC entry 9141 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.import_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.import_ref IS 'Reference of import concerned - from table imports';


--
-- TOC entry 9142 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.name IS 'Name of unit to be imported/checked';


--
-- TOC entry 9143 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.level_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.level_ref IS 'Level of unit to be imported/checked';


--
-- TOC entry 9144 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.parent_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.parent_ref IS 'ID of parent the unit is attached to. Right after the load of xml, it refers recursively to an entry in the same staging_catalogue table. During the import it is replaced by id of the parent from the concerned catalogue table.';


--
-- TOC entry 9145 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.catalogue_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.catalogue_ref IS 'ID of unit in concerned catalogue table - set during import process';


--
-- TOC entry 9146 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN staging_catalogue.parent_updated; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_catalogue.parent_updated IS 'During the catalogue import process, tells if the parent ref has already been updated with one catalogue entry or not';


--
-- TOC entry 389 (class 1259 OID 1441296)
-- Name: staging_catalogue_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_catalogue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_catalogue_id_seq OWNER TO darwin2;

--
-- TOC entry 9148 (class 0 OID 0)
-- Dependencies: 389
-- Name: staging_catalogue_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_catalogue_id_seq OWNED BY darwin2.staging_catalogue.id;


--
-- TOC entry 390 (class 1259 OID 1441298)
-- Name: staging_collecting_methods; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_collecting_methods (
    id integer NOT NULL,
    staging_ref integer NOT NULL,
    collecting_method_ref integer NOT NULL
);


ALTER TABLE darwin2.staging_collecting_methods OWNER TO darwin2;

--
-- TOC entry 9150 (class 0 OID 0)
-- Dependencies: 390
-- Name: TABLE staging_collecting_methods; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.staging_collecting_methods IS 'Association of collecting methods with staging';


--
-- TOC entry 9151 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN staging_collecting_methods.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_collecting_methods.id IS 'Unique identifier of an association';


--
-- TOC entry 9152 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN staging_collecting_methods.staging_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_collecting_methods.staging_ref IS 'Identifier of a specimen - comes from staging table (id field)';


--
-- TOC entry 9153 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN staging_collecting_methods.collecting_method_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_collecting_methods.collecting_method_ref IS 'Identifier of a collecting method - comes from collecting_methods table (id field)';


--
-- TOC entry 391 (class 1259 OID 1441301)
-- Name: staging_collecting_methods_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_collecting_methods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_collecting_methods_id_seq OWNER TO darwin2;

--
-- TOC entry 9155 (class 0 OID 0)
-- Dependencies: 391
-- Name: staging_collecting_methods_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_collecting_methods_id_seq OWNED BY darwin2.staging_collecting_methods.id;


--
-- TOC entry 392 (class 1259 OID 1441303)
-- Name: staging_gtu_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_gtu_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_gtu_id_seq OWNER TO darwin2;

--
-- TOC entry 393 (class 1259 OID 1441305)
-- Name: staging_gtu; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_gtu (
    id integer DEFAULT nextval('darwin2.staging_gtu_id_seq'::regclass) NOT NULL,
    import_ref integer,
    status public.hstore DEFAULT ''::public.hstore NOT NULL,
    date_included boolean DEFAULT false NOT NULL,
    tags_merged boolean DEFAULT false NOT NULL,
    sensitive_information_withheld boolean DEFAULT false NOT NULL,
    gtu_ref integer,
    station_type character varying DEFAULT 'station'::character varying NOT NULL,
    sampling_code character varying NOT NULL,
    sampling_field_number character varying,
    event_cluster_code character varying,
    event_order integer,
    ig_num character varying,
    ig_num_indexed character varying,
    collections character varying[],
    collectors character varying[],
    expeditions character varying[],
    collection_refs integer[],
    collector_refs integer[],
    expedition_refs integer[],
    iso3166 character varying,
    iso3166_subdivision character varying,
    countries character varying[],
    tags character varying[],
    tags_indexed character varying[],
    locality_text character varying,
    locality_text_indexed character varying,
    ecology_text character varying,
    ecology_text_indexed character varying,
    coordinates_format character varying,
    latitude1 character varying,
    longitude1 character varying,
    latitude2 character varying,
    longitude2 character varying,
    gis_type character varying,
    coordinates_wkt character varying,
    coordinates_datum character varying,
    coordinates_proj_ref integer,
    coordinates_original character varying,
    coordinates_accuracy numeric(15,4),
    coordinates_accuracy_text character varying,
    station_baseline_elevation numeric(10,4),
    station_baseline_accuracy numeric(10,4),
    sampling_elevation_start numeric(10,4),
    sampling_elevation_end numeric(10,4),
    sampling_elevation_accuracy numeric(10,4),
    original_elevation_data character varying,
    sampling_depth_start numeric(10,4),
    sampling_depth_end numeric(10,4),
    sampling_depth_accuracy numeric(10,4),
    original_depth_data character varying,
    collecting_date_begin timestamp without time zone,
    collecting_date_begin_mask character varying,
    collecting_date_end timestamp without time zone,
    collecting_date_end_mask character varying,
    collecting_time_begin time without time zone,
    collecting_time_end time without time zone,
    sampling_method character varying,
    sampling_fixation character varying,
    imported boolean DEFAULT false,
    pos_in_file integer,
    import_exception character varying
);


ALTER TABLE darwin2.staging_gtu OWNER TO darwin2;

--
-- TOC entry 9158 (class 0 OID 0)
-- Dependencies: 393
-- Name: COLUMN staging_gtu.coordinates_format; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu.coordinates_format IS 'Possible formats DMS/DD/UTM';


--
-- TOC entry 394 (class 1259 OID 1441318)
-- Name: staging_gtu_id_seq1; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_gtu_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_gtu_id_seq1 OWNER TO darwin2;

--
-- TOC entry 9160 (class 0 OID 0)
-- Dependencies: 394
-- Name: staging_gtu_id_seq1; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_gtu_id_seq1 OWNED BY darwin2.staging_gtu.id;


--
-- TOC entry 395 (class 1259 OID 1441320)
-- Name: staging_gtu_tag_groups; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_gtu_tag_groups (
    id integer NOT NULL,
    staging_gtu_ref integer NOT NULL,
    group_name character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    tag_value character varying NOT NULL
);


ALTER TABLE darwin2.staging_gtu_tag_groups OWNER TO darwin2;

--
-- TOC entry 9162 (class 0 OID 0)
-- Dependencies: 395
-- Name: TABLE staging_gtu_tag_groups; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.staging_gtu_tag_groups IS 'List of grouped tags for an imported row (copy of tag group)';


--
-- TOC entry 9163 (class 0 OID 0)
-- Dependencies: 395
-- Name: COLUMN staging_gtu_tag_groups.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu_tag_groups.id IS 'Unique identifier of a grouped tag';


--
-- TOC entry 9164 (class 0 OID 0)
-- Dependencies: 395
-- Name: COLUMN staging_gtu_tag_groups.staging_gtu_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu_tag_groups.staging_gtu_ref IS 'Ref of an imported line';


--
-- TOC entry 9165 (class 0 OID 0)
-- Dependencies: 395
-- Name: COLUMN staging_gtu_tag_groups.group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu_tag_groups.group_name IS 'Group name under which the tag is grouped: Administrative area, Topographic structure,...';


--
-- TOC entry 9166 (class 0 OID 0)
-- Dependencies: 395
-- Name: COLUMN staging_gtu_tag_groups.sub_group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu_tag_groups.sub_group_name IS 'Sub-Group name under which the tag is grouped: Country, River, Mountain,...';


--
-- TOC entry 9167 (class 0 OID 0)
-- Dependencies: 395
-- Name: COLUMN staging_gtu_tag_groups.tag_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_gtu_tag_groups.tag_value IS 'Ensemble of Tags';


--
-- TOC entry 396 (class 1259 OID 1441326)
-- Name: staging_gtu_tag_groups_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_gtu_tag_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_gtu_tag_groups_id_seq OWNER TO darwin2;

--
-- TOC entry 9169 (class 0 OID 0)
-- Dependencies: 396
-- Name: staging_gtu_tag_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_gtu_tag_groups_id_seq OWNED BY darwin2.staging_gtu_tag_groups.id;


--
-- TOC entry 397 (class 1259 OID 1441328)
-- Name: staging_info; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_info (
    id integer NOT NULL,
    staging_ref integer NOT NULL,
    referenced_relation character varying NOT NULL
);


ALTER TABLE darwin2.staging_info OWNER TO darwin2;

--
-- TOC entry 398 (class 1259 OID 1441334)
-- Name: staging_info_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_info_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_info_id_seq OWNER TO darwin2;

--
-- TOC entry 9172 (class 0 OID 0)
-- Dependencies: 398
-- Name: staging_info_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_info_id_seq OWNED BY darwin2.staging_info.id;


--
-- TOC entry 399 (class 1259 OID 1441336)
-- Name: staging_multimedia; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_multimedia (
    id integer NOT NULL,
    is_digital boolean DEFAULT true NOT NULL,
    type character varying DEFAULT 'image'::character varying NOT NULL,
    sub_type character varying,
    title character varying NOT NULL,
    description character varying DEFAULT ''::character varying NOT NULL,
    uri character varying,
    filename character varying,
    creation_date timestamp without time zone DEFAULT '0001-01-01'::date NOT NULL,
    creation_date_mask integer DEFAULT 0 NOT NULL,
    mime_type character varying NOT NULL,
    visible boolean DEFAULT true NOT NULL,
    publishable boolean DEFAULT true NOT NULL,
    extracted_info text,
    technical_parameters text,
    external_uri character varying,
    internet_protocol character varying,
    field_observations character varying
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.staging_multimedia OWNER TO darwin2;

--
-- TOC entry 9174 (class 0 OID 0)
-- Dependencies: 399
-- Name: COLUMN staging_multimedia.external_uri; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_multimedia.external_uri IS 'External URI of object if digital';


--
-- TOC entry 9175 (class 0 OID 0)
-- Dependencies: 399
-- Name: COLUMN staging_multimedia.internet_protocol; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_multimedia.internet_protocol IS 'Internel protocol of the ressource (IIIF, WMS, Sketchfab)';


--
-- TOC entry 9176 (class 0 OID 0)
-- Dependencies: 399
-- Name: COLUMN staging_multimedia.field_observations; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_multimedia.field_observations IS 'Field observation attached to the document';


--
-- TOC entry 400 (class 1259 OID 1441349)
-- Name: staging_multimedia_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_multimedia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_multimedia_id_seq OWNER TO darwin2;

--
-- TOC entry 9178 (class 0 OID 0)
-- Dependencies: 400
-- Name: staging_multimedia_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_multimedia_id_seq OWNED BY darwin2.staging_multimedia.id;


--
-- TOC entry 401 (class 1259 OID 1441351)
-- Name: staging_people_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_people_id_seq OWNER TO darwin2;

--
-- TOC entry 402 (class 1259 OID 1441353)
-- Name: staging_people; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_people (
    id integer DEFAULT nextval('darwin2.staging_people_id_seq'::regclass) NOT NULL,
    people_type character varying DEFAULT 'author'::character varying NOT NULL,
    people_sub_type character varying DEFAULT ''::character varying NOT NULL,
    order_by integer DEFAULT 1 NOT NULL,
    people_ref integer,
    formated_name character varying,
    import_ref integer
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.staging_people OWNER TO darwin2;

--
-- TOC entry 9181 (class 0 OID 0)
-- Dependencies: 402
-- Name: TABLE staging_people; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.staging_people IS 'List of people of staging units';


--
-- TOC entry 9182 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.referenced_relation IS 'Identifier-Name of table the units come from';


--
-- TOC entry 9183 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.record_id IS 'Identifier of record concerned in table concerned';


--
-- TOC entry 9184 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.id IS 'Unique identifier of record';


--
-- TOC entry 9185 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.people_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.people_type IS 'Type of "people" associated to the staging unit: authors, collectors, defined,  ...';


--
-- TOC entry 9186 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.people_sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.people_sub_type IS 'Type of "people" associated to the staging unit: Main author, corrector, taking the sense from,...';


--
-- TOC entry 9187 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.order_by; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.order_by IS 'Integer used to order the persons in a list';


--
-- TOC entry 9188 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.people_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.people_ref IS 'Reference of person concerned - id field of people table';


--
-- TOC entry 9189 (class 0 OID 0)
-- Dependencies: 402
-- Name: COLUMN staging_people.formated_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_people.formated_name IS 'full name of the people';


--
-- TOC entry 403 (class 1259 OID 1441363)
-- Name: staging_relationship; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_relationship (
    id integer NOT NULL,
    record_id integer NOT NULL,
    referenced_relation character varying NOT NULL,
    relationship_type character varying,
    staging_related_ref integer,
    taxon_ref integer,
    mineral_ref integer,
    institution_ref integer,
    institution_name text,
    source_name text,
    source_id text,
    quantity numeric(16,2),
    unit character varying DEFAULT '%'::character varying,
    unit_type character varying DEFAULT 'specimens'::character varying NOT NULL,
    existing_specimen_ref integer
);


ALTER TABLE darwin2.staging_relationship OWNER TO darwin2;

--
-- TOC entry 9191 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.record_id IS 'id of the orignial record';


--
-- TOC entry 9192 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.referenced_relation IS 'where to find the record_id, referenced_relation is always staging but this field uis mandatory for addRelated php function';


--
-- TOC entry 9193 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.relationship_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.relationship_type IS 'relation type (eg. host, parent, part of)';


--
-- TOC entry 9194 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.staging_related_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.staging_related_ref IS 'the record id associated, this record id must be found in the same import file';


--
-- TOC entry 9195 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.institution_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.institution_ref IS 'the institution id associated to this relationship';


--
-- TOC entry 9196 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.institution_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.institution_name IS 'the institution name associated to this relationship, used to add to darwin institution if it dont exist';


--
-- TOC entry 9197 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.source_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.source_name IS 'External Specimen related  source DB';


--
-- TOC entry 9198 (class 0 OID 0)
-- Dependencies: 403
-- Name: COLUMN staging_relationship.source_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_relationship.source_id IS 'External Specimen related id in the source';


--
-- TOC entry 404 (class 1259 OID 1441371)
-- Name: staging_relationship_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_relationship_id_seq OWNER TO darwin2;

--
-- TOC entry 9200 (class 0 OID 0)
-- Dependencies: 404
-- Name: staging_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.staging_relationship_id_seq OWNED BY darwin2.staging_relationship.id;


--
-- TOC entry 405 (class 1259 OID 1441373)
-- Name: staging_tag_groups_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.staging_tag_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.staging_tag_groups_id_seq OWNER TO darwin2;

--
-- TOC entry 406 (class 1259 OID 1441375)
-- Name: staging_tag_groups; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.staging_tag_groups (
    id bigint DEFAULT nextval('darwin2.staging_tag_groups_id_seq'::regclass) NOT NULL,
    staging_ref integer NOT NULL,
    group_name character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    tag_value character varying NOT NULL
);


ALTER TABLE darwin2.staging_tag_groups OWNER TO darwin2;

--
-- TOC entry 9203 (class 0 OID 0)
-- Dependencies: 406
-- Name: TABLE staging_tag_groups; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.staging_tag_groups IS 'List of grouped tags for an imported row (copy of tag group)';


--
-- TOC entry 9204 (class 0 OID 0)
-- Dependencies: 406
-- Name: COLUMN staging_tag_groups.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_tag_groups.id IS 'Unique identifier of a grouped tag';


--
-- TOC entry 9205 (class 0 OID 0)
-- Dependencies: 406
-- Name: COLUMN staging_tag_groups.staging_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_tag_groups.staging_ref IS 'Ref of an imported line';


--
-- TOC entry 9206 (class 0 OID 0)
-- Dependencies: 406
-- Name: COLUMN staging_tag_groups.group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_tag_groups.group_name IS 'Group name under which the tag is grouped: Administrative area, Topographic structure,...';


--
-- TOC entry 9207 (class 0 OID 0)
-- Dependencies: 406
-- Name: COLUMN staging_tag_groups.sub_group_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_tag_groups.sub_group_name IS 'Sub-Group name under which the tag is grouped: Country, River, Mountain,...';


--
-- TOC entry 9208 (class 0 OID 0)
-- Dependencies: 406
-- Name: COLUMN staging_tag_groups.tag_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.staging_tag_groups.tag_value IS 'Ensemble of Tags';


--
-- TOC entry 407 (class 1259 OID 1441382)
-- Name: tag_authority_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.tag_authority_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.tag_authority_id_seq OWNER TO darwin2;

--
-- TOC entry 9210 (class 0 OID 0)
-- Dependencies: 407
-- Name: tag_authority_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.tag_authority_id_seq OWNED BY darwin2.tag_authority.id;


--
-- TOC entry 408 (class 1259 OID 1441384)
-- Name: tag_authority_tag_authority; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.tag_authority_tag_authority (
    tag_authority_ref1 bigint NOT NULL,
    tag_authority_ref2 bigint NOT NULL,
    tag_authority_predicate text NOT NULL,
    CONSTRAINT chk_tag_authority_predicate CHECK ((tag_authority_predicate ~~ '%:%'::text))
);


ALTER TABLE darwin2.tag_authority_tag_authority OWNER TO postgres;

--
-- TOC entry 9212 (class 0 OID 0)
-- Dependencies: 408
-- Name: TABLE tag_authority_tag_authority; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON TABLE darwin2.tag_authority_tag_authority IS 'Table to link together authoritative vocabularies: MUST make use of existing linked data relationships. Example: gn:';


--
-- TOC entry 9213 (class 0 OID 0)
-- Dependencies: 408
-- Name: COLUMN tag_authority_tag_authority.tag_authority_ref1; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.tag_authority_tag_authority.tag_authority_ref1 IS 'Reference to the left-hand (subject) authoritative vocabulary entry.';


--
-- TOC entry 9214 (class 0 OID 0)
-- Dependencies: 408
-- Name: COLUMN tag_authority_tag_authority.tag_authority_ref2; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.tag_authority_tag_authority.tag_authority_ref2 IS 'Reference to the right-hand (object) authoritative vocabulary entry.';


--
-- TOC entry 9215 (class 0 OID 0)
-- Dependencies: 408
-- Name: COLUMN tag_authority_tag_authority.tag_authority_predicate; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.tag_authority_tag_authority.tag_authority_predicate IS 'Predicate that indicates a relation between a subject and an object.';


--
-- TOC entry 409 (class 1259 OID 1441391)
-- Name: tag_group_distinct; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tag_group_distinct (
    id integer NOT NULL,
    sub_group_name_indexed character varying NOT NULL,
    group_name_indexed character varying NOT NULL,
    tag_value character varying NOT NULL
);


ALTER TABLE darwin2.tag_group_distinct OWNER TO darwin2;

--
-- TOC entry 9217 (class 0 OID 0)
-- Dependencies: 409
-- Name: TABLE tag_group_distinct; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.tag_group_distinct IS 'List of all distinct tags';


--
-- TOC entry 9218 (class 0 OID 0)
-- Dependencies: 409
-- Name: COLUMN tag_group_distinct.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_group_distinct.id IS 'Unique identifier of a tag value/group name/sub group name combination';


--
-- TOC entry 9219 (class 0 OID 0)
-- Dependencies: 409
-- Name: COLUMN tag_group_distinct.sub_group_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_group_distinct.sub_group_name_indexed IS 'Reference to the sub_group_name';


--
-- TOC entry 9220 (class 0 OID 0)
-- Dependencies: 409
-- Name: COLUMN tag_group_distinct.group_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_group_distinct.group_name_indexed IS 'Reference to the group_name';


--
-- TOC entry 9221 (class 0 OID 0)
-- Dependencies: 409
-- Name: COLUMN tag_group_distinct.tag_value; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.tag_group_distinct.tag_value IS 'Textual value of the tag.';


--
-- TOC entry 410 (class 1259 OID 1441397)
-- Name: tag_group_distinct_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.tag_group_distinct_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.tag_group_distinct_id_seq OWNER TO darwin2;

--
-- TOC entry 9223 (class 0 OID 0)
-- Dependencies: 410
-- Name: tag_group_distinct_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.tag_group_distinct_id_seq OWNED BY darwin2.tag_group_distinct.id;


--
-- TOC entry 411 (class 1259 OID 1441399)
-- Name: tags_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.tags_id_seq OWNER TO darwin2;

--
-- TOC entry 9225 (class 0 OID 0)
-- Dependencies: 411
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.tags_id_seq OWNED BY darwin2.tags.id;


--
-- TOC entry 412 (class 1259 OID 1441401)
-- Name: taxonomy_authority; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.taxonomy_authority (
    id integer NOT NULL,
    taxonomy_ref integer NOT NULL,
    domain_ref bigint NOT NULL,
    url character varying,
    urn character varying,
    code character varying NOT NULL,
    pref_label character varying(255),
    profile public.hstore
);


ALTER TABLE darwin2.taxonomy_authority OWNER TO darwin2;

--
-- TOC entry 413 (class 1259 OID 1441407)
-- Name: taxonomy_authority_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.taxonomy_authority_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.taxonomy_authority_id_seq OWNER TO darwin2;

--
-- TOC entry 9228 (class 0 OID 0)
-- Dependencies: 413
-- Name: taxonomy_authority_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.taxonomy_authority_id_seq OWNED BY darwin2.taxonomy_authority.id;


--
-- TOC entry 414 (class 1259 OID 1441409)
-- Name: taxonomy_metadata; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.taxonomy_metadata (
    id integer NOT NULL,
    creation_date date NOT NULL,
    creation_date_mask integer,
    import_ref integer,
    taxonomy_name character varying NOT NULL,
    definition text,
    is_reference_taxonomy boolean NOT NULL,
    source character varying,
    url_website character varying,
    url_webservice character varying
);


ALTER TABLE darwin2.taxonomy_metadata OWNER TO darwin2;

--
-- TOC entry 415 (class 1259 OID 1441415)
-- Name: taxonomy_metadata_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.taxonomy_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.taxonomy_metadata_id_seq OWNER TO darwin2;

--
-- TOC entry 9231 (class 0 OID 0)
-- Dependencies: 415
-- Name: taxonomy_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.taxonomy_metadata_id_seq OWNED BY darwin2.taxonomy_metadata.id;


--
-- TOC entry 416 (class 1259 OID 1441417)
-- Name: temp_mineralogy; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.temp_mineralogy (
    code_variety text,
    name_variety text,
    formule text,
    class_name text,
    subclass_name text,
    series_name text,
    name_strunz text,
    code_serie_strunz text,
    code_subcla_strunz text,
    code_class_strunz text,
    name_engel text,
    code_serie_dana text,
    code_subcla_dana text,
    code_class_dana text
);


ALTER TABLE darwin2.temp_mineralogy OWNER TO darwin2;

--
-- TOC entry 417 (class 1259 OID 1441423)
-- Name: temporal_information_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.temporal_information_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.temporal_information_id_seq OWNER TO darwin2;

--
-- TOC entry 9234 (class 0 OID 0)
-- Dependencies: 417
-- Name: temporal_information_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: darwin2
--

ALTER SEQUENCE darwin2.temporal_information_id_seq OWNED BY darwin2.temporal_information.id;


--
-- TOC entry 418 (class 1259 OID 1441425)
-- Name: tv_reporting_count_all_specimens_by_collection_year_ig; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig (
    collection_name character varying,
    collection_path character varying,
    collection_ref integer,
    year double precision,
    specimen_creation_date timestamp without time zone,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint,
    ig_ref integer,
    ig_num character varying
);


ALTER TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig OWNER TO darwin2;

--
-- TOC entry 419 (class 1259 OID 1441431)
-- Name: tv_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig (
    collection_path character varying,
    collection_name character varying,
    collection_ref integer,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    specimen_creation_date timestamp without time zone,
    type text,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
);


ALTER TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 420 (class 1259 OID 1441437)
-- Name: tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig (
    taxonomy_id integer,
    collection_path character varying,
    collection_ref integer,
    collection_name character varying,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    creation_date timestamp without time zone,
    level_ref integer,
    level_name character varying,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
);


ALTER TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 421 (class 1259 OID 1441443)
-- Name: users_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_id_seq OWNER TO darwin2;

--
-- TOC entry 422 (class 1259 OID 1441445)
-- Name: users; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.users (
    id integer DEFAULT nextval('darwin2.users_id_seq'::regclass) NOT NULL,
    db_user_type smallint DEFAULT 1 NOT NULL,
    people_id integer,
    created_at timestamp without time zone DEFAULT now(),
    selected_lang character varying DEFAULT 'en'::character varying NOT NULL
)
INHERITS (darwin2.template_people);


ALTER TABLE darwin2.users OWNER TO darwin2;

--
-- TOC entry 9240 (class 0 OID 0)
-- Dependencies: 422
-- Name: TABLE users; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.users IS 'List all application users';


--
-- TOC entry 9241 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.is_physical; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.is_physical IS 'Type of user: physical or moral - true is physical, false is moral';


--
-- TOC entry 9242 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.sub_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.sub_type IS 'Used for moral users: precise nature - public institution, asbl, sprl, sa,...';


--
-- TOC entry 9243 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.formated_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.formated_name IS 'Complete user formated name (with honorific mention, prefixes, suffixes,...) - By default composed with family_name and given_name fields, but can be modified by hand';


--
-- TOC entry 9244 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.formated_name_indexed; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.formated_name_indexed IS 'Indexed form of formated_name field';


--
-- TOC entry 9245 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.formated_name_unique; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.formated_name_unique IS 'Indexed form of formated_name field (for unique index use)';


--
-- TOC entry 9246 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.title; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.title IS 'Title of a physical user/person like Mr or Mrs or phd,...';


--
-- TOC entry 9247 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.family_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.family_name IS 'Family name for physical users and Organisation name for moral users';


--
-- TOC entry 9248 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.given_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.given_name IS 'User/user''s given name - usually first name';


--
-- TOC entry 9249 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.additional_names; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.additional_names IS 'Any additional names given to user';


--
-- TOC entry 9250 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.birth_date_mask; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.birth_date_mask IS 'Mask Flag to know wich part of the date is effectively known: 32 for year, 16 for month and 8 for day';


--
-- TOC entry 9251 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.birth_date; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.birth_date IS 'Birth/Creation date composed';


--
-- TOC entry 9252 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.gender; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.gender IS 'For physical users give the gender: M or F';


--
-- TOC entry 9253 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.id IS 'Unique identifier of a user';


--
-- TOC entry 9254 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.db_user_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.db_user_type IS 'Integer is representing a role: 1 for registered user, 2 for encoder, 4 for collection manager, 8 for system admin,...';


--
-- TOC entry 9255 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.people_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.people_id IS 'Reference to a people if this user is also known as a people';


--
-- TOC entry 9256 (class 0 OID 0)
-- Dependencies: 422
-- Name: COLUMN users.selected_lang; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users.selected_lang IS 'Lang of the interface for the user en,fr,nl ,....';


--
-- TOC entry 423 (class 1259 OID 1441460)
-- Name: users_addresses_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_addresses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_addresses_id_seq OWNER TO darwin2;

--
-- TOC entry 424 (class 1259 OID 1441462)
-- Name: users_addresses; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.users_addresses (
    person_user_role character varying,
    id integer DEFAULT nextval('darwin2.users_addresses_id_seq'::regclass) NOT NULL,
    organization_unit character varying,
    tag character varying DEFAULT ''::character varying NOT NULL
)
INHERITS (darwin2.template_people_users_comm_common, darwin2.template_people_users_addr_common);


ALTER TABLE darwin2.users_addresses OWNER TO darwin2;

--
-- TOC entry 9259 (class 0 OID 0)
-- Dependencies: 424
-- Name: TABLE users_addresses; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.users_addresses IS 'Users addresses';


--
-- TOC entry 9260 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.person_user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.person_user_ref IS 'Reference of the user concerned - id field of users table';


--
-- TOC entry 9261 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.entry; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.entry IS 'Street address';


--
-- TOC entry 9262 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.po_box; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.po_box IS 'PO Box';


--
-- TOC entry 9263 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.extended_address; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.extended_address IS 'Address extension: State, zip code suffix,...';


--
-- TOC entry 9264 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.locality; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.locality IS 'Locality';


--
-- TOC entry 9265 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.region; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.region IS 'Region';


--
-- TOC entry 9266 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.zip_code; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.zip_code IS 'Zip code';


--
-- TOC entry 9267 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.country; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.country IS 'Country';


--
-- TOC entry 9268 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.person_user_role; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.person_user_role IS 'User role in the organization referenced';


--
-- TOC entry 9269 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.id IS 'Unique identifier of a user address';


--
-- TOC entry 9270 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.organization_unit; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.organization_unit IS 'When a physical user is in relationship with a moral one, indicates the department or unit the user is related to';


--
-- TOC entry 9271 (class 0 OID 0)
-- Dependencies: 424
-- Name: COLUMN users_addresses.tag; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_addresses.tag IS 'List of descriptive tags: home, work,...';


--
-- TOC entry 425 (class 1259 OID 1441470)
-- Name: users_comm_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_comm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_comm_id_seq OWNER TO darwin2;

--
-- TOC entry 426 (class 1259 OID 1441472)
-- Name: users_comm; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.users_comm (
    id integer DEFAULT nextval('darwin2.users_comm_id_seq'::regclass) NOT NULL,
    comm_type character varying DEFAULT 'phone/fax'::character varying NOT NULL,
    tag character varying DEFAULT ''::character varying NOT NULL
)
INHERITS (darwin2.template_people_users_comm_common);


ALTER TABLE darwin2.users_comm OWNER TO darwin2;

--
-- TOC entry 9274 (class 0 OID 0)
-- Dependencies: 426
-- Name: TABLE users_comm; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.users_comm IS 'Users phones and e-mails';


--
-- TOC entry 9275 (class 0 OID 0)
-- Dependencies: 426
-- Name: COLUMN users_comm.person_user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_comm.person_user_ref IS 'Reference of user - id field of user table';


--
-- TOC entry 9276 (class 0 OID 0)
-- Dependencies: 426
-- Name: COLUMN users_comm.entry; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_comm.entry IS 'Communication entry';


--
-- TOC entry 9277 (class 0 OID 0)
-- Dependencies: 426
-- Name: COLUMN users_comm.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_comm.id IS 'Unique identifier of a users communication mean entry';


--
-- TOC entry 9278 (class 0 OID 0)
-- Dependencies: 426
-- Name: COLUMN users_comm.comm_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_comm.comm_type IS 'Type of communication table concerned: address, phone or e-mail';


--
-- TOC entry 9279 (class 0 OID 0)
-- Dependencies: 426
-- Name: COLUMN users_comm.tag; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_comm.tag IS 'List of descriptive tags: internet, tel, fax, pager, public, private,...';


--
-- TOC entry 427 (class 1259 OID 1441481)
-- Name: users_languages_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_languages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_languages_id_seq OWNER TO darwin2;

--
-- TOC entry 428 (class 1259 OID 1441483)
-- Name: users_login_info_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_login_info_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_login_info_id_seq OWNER TO darwin2;

--
-- TOC entry 429 (class 1259 OID 1441485)
-- Name: users_login_infos; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.users_login_infos (
    id integer DEFAULT nextval('darwin2.users_login_info_id_seq'::regclass) NOT NULL,
    user_ref integer NOT NULL,
    login_type character varying DEFAULT 'local'::character varying NOT NULL,
    user_name character varying,
    password character varying,
    login_system character varying,
    renew_hash character varying,
    last_seen timestamp without time zone
);


ALTER TABLE darwin2.users_login_infos OWNER TO darwin2;

--
-- TOC entry 9283 (class 0 OID 0)
-- Dependencies: 429
-- Name: TABLE users_login_infos; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.users_login_infos IS 'Contains the login/password informations of DaRWIN 2 users';


--
-- TOC entry 9284 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.user_ref IS 'Identifier of user - id field of users table';


--
-- TOC entry 9285 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.login_type; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.login_type IS 'Type of identification system';


--
-- TOC entry 9286 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.user_name; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.user_name IS 'For some system (local, ldap, kerberos,...) provides the username (encrypted form)';


--
-- TOC entry 9287 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.password; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.password IS 'For some system (local, ldap, kerberos,...) provides the password (encrypted form)';


--
-- TOC entry 9288 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.login_system; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.login_system IS 'For some system (shibbolet, openID,...) provides the user id';


--
-- TOC entry 9289 (class 0 OID 0)
-- Dependencies: 429
-- Name: COLUMN users_login_infos.renew_hash; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_login_infos.renew_hash IS 'Hashed key defined when asking to renew a password';


--
-- TOC entry 430 (class 1259 OID 1441493)
-- Name: users_tracking_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: darwin2
--

CREATE SEQUENCE darwin2.users_tracking_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.users_tracking_id_seq OWNER TO darwin2;

--
-- TOC entry 431 (class 1259 OID 1441495)
-- Name: users_tracking; Type: TABLE; Schema: darwin2; Owner: darwin2
--

CREATE TABLE darwin2.users_tracking (
    id bigint DEFAULT nextval('darwin2.users_tracking_id_seq'::regclass) NOT NULL,
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    user_ref integer NOT NULL,
    action character varying DEFAULT 'insert'::character varying NOT NULL,
    old_value public.hstore,
    new_value public.hstore,
    modification_date_time timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE darwin2.users_tracking OWNER TO darwin2;

--
-- TOC entry 9292 (class 0 OID 0)
-- Dependencies: 431
-- Name: TABLE users_tracking; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON TABLE darwin2.users_tracking IS 'Tracking of users actions on tables';


--
-- TOC entry 9293 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.id IS 'Unique identifier of a table track entry';


--
-- TOC entry 9294 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.referenced_relation IS 'Reference-Name of table concerned';


--
-- TOC entry 9295 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.record_id; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.record_id IS 'ID of record concerned';


--
-- TOC entry 9296 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.user_ref; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.user_ref IS 'Reference of user having made an action - id field of users table';


--
-- TOC entry 9297 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.action; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.action IS 'Action done on table record: insert, update, delete';


--
-- TOC entry 9298 (class 0 OID 0)
-- Dependencies: 431
-- Name: COLUMN users_tracking.modification_date_time; Type: COMMENT; Schema: darwin2; Owner: darwin2
--

COMMENT ON COLUMN darwin2.users_tracking.modification_date_time IS 'Track date and time';


--
-- TOC entry 432 (class 1259 OID 1441504)
-- Name: v_darwin_ipt_taxonomy; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_darwin_ipt_taxonomy AS
 SELECT taxonomy.id AS darwin_id,
    taxonomy.name AS scientificname,
    catalogue_levels.level_name AS taxonrank,
    catalogue_levels.level_name AS verbatimtaxonrank,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 2) AS kingdom,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 4) AS phylum,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 12) AS class,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 28) AS "order",
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 34) AS family,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 41) AS genus,
    replace((darwin2.fct_rmca_sort_taxon_path_alphabetically_not_indexed(taxonomy.path))::text, '/'::text, '|'::text) AS higherclassification,
    taxonomy.path,
    ((taxonomy.path)::text || ((taxonomy.id)::character varying)::text) AS full_path
   FROM (darwin2.taxonomy
     LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)));


ALTER TABLE darwin2.v_darwin_ipt_taxonomy OWNER TO darwin2;

--
-- TOC entry 433 (class 1259 OID 1441509)
-- Name: vernacular_names; Type: TABLE; Schema: darwin2; Owner: postgres
--

CREATE TABLE darwin2.vernacular_names (
    id integer NOT NULL,
    community character varying NOT NULL,
    community_indexed character varying NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL
)
INHERITS (darwin2.template_table_record_ref);


ALTER TABLE darwin2.vernacular_names OWNER TO postgres;

--
-- TOC entry 9301 (class 0 OID 0)
-- Dependencies: 433
-- Name: TABLE vernacular_names; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON TABLE darwin2.vernacular_names IS 'List of vernacular names for a given unit and a given language community';


--
-- TOC entry 9302 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.referenced_relation; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.referenced_relation IS 'Reference of the unit table a vernacular name for a language community has to be defined - id field of table_list table';


--
-- TOC entry 9303 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.record_id; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.record_id IS 'Identifier of record a vernacular name for a language community has to be defined';


--
-- TOC entry 9304 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.community; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.community IS 'Language community, a unit translation is available for';


--
-- TOC entry 9305 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.community_indexed; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.community_indexed IS 'indexed version of the language community';


--
-- TOC entry 9306 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.name; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.name IS 'Vernacular name';


--
-- TOC entry 9307 (class 0 OID 0)
-- Dependencies: 433
-- Name: COLUMN vernacular_names.name_indexed; Type: COMMENT; Schema: darwin2; Owner: postgres
--

COMMENT ON COLUMN darwin2.vernacular_names.name_indexed IS 'Indexed form of vernacular name';


--
-- TOC entry 434 (class 1259 OID 1441515)
-- Name: v_darwin_ipt_taxonomy_vernacular; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_darwin_ipt_taxonomy_vernacular AS
 SELECT taxonomy.id AS darwin_id,
    taxonomy.name AS scientificname,
    catalogue_levels.level_name AS taxonrank,
    catalogue_levels.level_name AS verbatimtaxonrank,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 2) AS kingdom,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 4) AS phylum,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 12) AS class,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 28) AS "order",
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 34) AS family,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(taxonomy.id, 41) AS genus,
    replace((darwin2.fct_rmca_sort_taxon_path_alphabetically_not_indexed(taxonomy.path))::text, '/'::text, '|'::text) AS higherclassification,
    taxonomy.path,
    (((taxonomy.path)::text || '/'::text) || taxonomy.id) AS full_path,
    vernacular_names.community,
    vernacular_names.name
   FROM ((darwin2.taxonomy
     LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)))
     LEFT JOIN darwin2.vernacular_names ON ((((vernacular_names.referenced_relation)::text = 'taxonomy'::text) AND (vernacular_names.record_id = taxonomy.id))));


ALTER TABLE darwin2.v_darwin_ipt_taxonomy_vernacular OWNER TO darwin2;

--
-- TOC entry 435 (class 1259 OID 1441520)
-- Name: v_diagnose_several_main_in_vertebrates_201909; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_diagnose_several_main_in_vertebrates_201909 AS
SELECT
    NULL::integer AS id,
    NULL::character varying AS collection_name,
    NULL::bigint AS count,
    NULL::text AS code_text,
    NULL::character varying AS taxon_name,
    NULL::timestamp without time zone AS gtu_from_date,
    NULL::character varying AS gtu_others_tag_value;


ALTER TABLE darwin2.v_diagnose_several_main_in_vertebrates_201909 OWNER TO darwin2;

--
-- TOC entry 436 (class 1259 OID 1441524)
-- Name: v_erik_verheyen_mammals_in_alcohol_2020; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_erik_verheyen_mammals_in_alcohol_2020 AS
 SELECT DISTINCT b.name AS taxon_group,
    specimens.taxon_name,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 34) AS family,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 41) AS genus,
    darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 48) AS species,
    specimens.container_storage,
    lower(btrim(split_part((specimens.gtu_country_tag_value)::text, ';'::text, 1))) AS country,
    string_agg(DISTINCT replace((specimens.gtu_others_tag_value)::text, (specimens.gtu_country_tag_value)::text, ''::text), '; '::text) AS loc_list,
    min(NULLIF(specimens.gtu_from_date, '0001-01-01 00:00:00'::timestamp without time zone)) AS date_min,
    GREATEST(max(((NULLIF(specimens.gtu_from_date, '0001-01-01 00:00:00'::timestamp without time zone))::character varying)::text), max(((NULLIF(specimens.gtu_to_date, '2038-12-31 00:00:00'::timestamp without time zone))::character varying)::text)) AS date_max,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min
   FROM darwin2.specimens,
    ( SELECT (taxonomy.id)::character varying AS id_char,
            taxonomy.name
           FROM darwin2.taxonomy
          WHERE (((taxonomy.name_indexed)::text ~~ '%afrosoricida%'::text) OR ((taxonomy.name_indexed)::text ~~ 'artiodactyla%'::text) OR ((taxonomy.name_indexed)::text ~~ 'carnivora%'::text) OR ((taxonomy.name_indexed)::text ~~ 'chiroptera%'::text) OR ((taxonomy.name_indexed)::text ~~ 'erinaceomorpha%'::text) OR ((taxonomy.name_indexed)::text ~~ 'hyracoid%'::text) OR ((taxonomy.name_indexed)::text ~~ 'lagomorpha%'::text) OR ((taxonomy.name_indexed)::text ~~ 'macroscelidae%'::text) OR ((taxonomy.name_indexed)::text ~~ 'perissodactyla%'::text) OR ((taxonomy.name_indexed)::text ~~ 'pholidota%'::text) OR ((taxonomy.name_indexed)::text ~~ 'pinnid%'::text) OR ((taxonomy.name_indexed)::text ~~ 'primates%'::text) OR ((taxonomy.name_indexed)::text ~~ 'proboscidea%'::text) OR ((taxonomy.name_indexed)::text ~~ 'rodent%'::text) OR ((taxonomy.name_indexed)::text ~~ 'sirenia%'::text) OR ((taxonomy.name_indexed)::text ~~ 'soricida%'::text) OR ((taxonomy.name_indexed)::text ~~ 'talpida%'::text) OR ((taxonomy.name_indexed)::text ~~ 'tubulid%'::text))) b
  WHERE ((((((specimens.taxon_path)::text || '/'::text) || ((specimens.taxon_ref)::character varying)::text) || '/'::text) ~~ (('%/'::text || (b.id_char)::text) || '/%'::text)) AND ((lower((specimens.container_storage)::text) ~~ 'alc%'::text) OR (lower((specimens.container_storage)::text) ~~ 'form%'::text) OR (lower((specimens.container_storage)::text) ~~ 'eth%'::text)))
  GROUP BY (lower(btrim(split_part((specimens.gtu_country_tag_value)::text, ';'::text, 1)))), b.name, (darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 34)), (darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 41)), (darwin2.fct_rmca_sort_taxon_get_parent_level_text(specimens.taxon_ref, 48)), specimens.container_storage, specimens.taxon_name
  ORDER BY specimens.taxon_name, b.name, (lower(btrim(split_part((specimens.gtu_country_tag_value)::text, ';'::text, 1)))), specimens.container_storage;


ALTER TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020 OWNER TO darwin2;

--
-- TOC entry 437 (class 1259 OID 1441529)
-- Name: v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro AS
 SELECT DISTINCT v_erik_verheyen_mammals_in_alcohol_2020.taxon_group,
    v_erik_verheyen_mammals_in_alcohol_2020.family,
    v_erik_verheyen_mammals_in_alcohol_2020.genus,
    v_erik_verheyen_mammals_in_alcohol_2020.species,
    array_agg(v_erik_verheyen_mammals_in_alcohol_2020.container_storage) AS container_storage,
    v_erik_verheyen_mammals_in_alcohol_2020.country,
    array_agg(DISTINCT v_erik_verheyen_mammals_in_alcohol_2020.loc_list) AS loc_list,
    max(v_erik_verheyen_mammals_in_alcohol_2020.date_min) AS date_min,
    max(v_erik_verheyen_mammals_in_alcohol_2020.date_max) AS date_max,
    sum(v_erik_verheyen_mammals_in_alcohol_2020.nb_records) AS nb_records,
    sum(v_erik_verheyen_mammals_in_alcohol_2020.specimen_count_min) AS specimen_count_min
   FROM darwin2.v_erik_verheyen_mammals_in_alcohol_2020
  WHERE (((v_erik_verheyen_mammals_in_alcohol_2020.taxon_group)::text ~~ 'Chiro%'::text) OR ((v_erik_verheyen_mammals_in_alcohol_2020.taxon_group)::text ~~ 'Rodent%'::text))
  GROUP BY v_erik_verheyen_mammals_in_alcohol_2020.taxon_group, v_erik_verheyen_mammals_in_alcohol_2020.country, v_erik_verheyen_mammals_in_alcohol_2020.family, v_erik_verheyen_mammals_in_alcohol_2020.genus, v_erik_verheyen_mammals_in_alcohol_2020.species
  ORDER BY v_erik_verheyen_mammals_in_alcohol_2020.taxon_group, v_erik_verheyen_mammals_in_alcohol_2020.country, v_erik_verheyen_mammals_in_alcohol_2020.family, v_erik_verheyen_mammals_in_alcohol_2020.genus, v_erik_verheyen_mammals_in_alcohol_2020.species;


ALTER TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro OWNER TO darwin2;

--
-- TOC entry 438 (class 1259 OID 1441534)
-- Name: v_erik_verheyen_mammals_in_alcohol_2020_generic; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_erik_verheyen_mammals_in_alcohol_2020_generic AS
 SELECT DISTINCT v_erik_verheyen_mammals_in_alcohol_2020.taxon_group,
    array_agg(DISTINCT v_erik_verheyen_mammals_in_alcohol_2020.container_storage) AS container_storage,
    v_erik_verheyen_mammals_in_alcohol_2020.country,
    array_agg(DISTINCT v_erik_verheyen_mammals_in_alcohol_2020.loc_list) AS array_agg,
    min(v_erik_verheyen_mammals_in_alcohol_2020.date_min) AS min,
    max(v_erik_verheyen_mammals_in_alcohol_2020.date_max) AS max,
    sum(v_erik_verheyen_mammals_in_alcohol_2020.nb_records) AS nb_records,
    sum(v_erik_verheyen_mammals_in_alcohol_2020.specimen_count_min) AS specimen_count_min
   FROM darwin2.v_erik_verheyen_mammals_in_alcohol_2020
  GROUP BY v_erik_verheyen_mammals_in_alcohol_2020.taxon_group, v_erik_verheyen_mammals_in_alcohol_2020.country
  ORDER BY v_erik_verheyen_mammals_in_alcohol_2020.taxon_group, v_erik_verheyen_mammals_in_alcohol_2020.country;


ALTER TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_generic OWNER TO darwin2;

--
-- TOC entry 439 (class 1259 OID 1441538)
-- Name: v_gtu_countries_in_gtu; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_gtu_countries_in_gtu AS
 SELECT DISTINCT btrim(unnest(regexp_split_to_array((tag_groups.tag_value)::text, ';'::text))) AS country,
    count(specimens.id) AS specimen_count
   FROM (darwin2.tag_groups
     LEFT JOIN darwin2.specimens ON ((tag_groups.gtu_ref = specimens.gtu_ref)))
  WHERE (lower((tag_groups.sub_group_name)::text) = 'country'::text)
  GROUP BY (btrim(unnest(regexp_split_to_array((tag_groups.tag_value)::text, ';'::text))));


ALTER TABLE darwin2.v_gtu_countries_in_gtu OWNER TO darwin2;

--
-- TOC entry 440 (class 1259 OID 1441543)
-- Name: v_gtu_tags_no_coords_and_country; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_gtu_tags_no_coords_and_country AS
 WITH no_country AS (
         SELECT gtu.id,
            tag_groups_1.group_name,
            tag_groups_1.sub_group_name,
            tag_groups_1.tag_value
           FROM (darwin2.gtu
             JOIN darwin2.tag_groups tag_groups_1 ON ((gtu.id = tag_groups_1.gtu_ref)))
          WHERE ((lower((tag_groups_1.sub_group_name_indexed)::text) <> 'country'::text) AND (gtu.location IS NULL))
        )
 SELECT no_country.id AS gtu_ref,
    no_country.group_name,
    btrim(unnest(regexp_split_to_array((no_country.sub_group_name)::text, (';'::character varying)::text))) AS sub_group_name,
    btrim(unnest(regexp_split_to_array((no_country.tag_value)::text, (';'::character varying)::text))) AS tag_value,
    btrim(unnest(regexp_split_to_array((tag_groups.tag_value)::text, (';'::character varying)::text))) AS country,
    count(specimens.id) AS count_specimens
   FROM ((no_country
     LEFT JOIN darwin2.tag_groups ON ((no_country.id = tag_groups.gtu_ref)))
     LEFT JOIN darwin2.specimens ON ((tag_groups.gtu_ref = specimens.gtu_ref)))
  WHERE (lower((tag_groups.sub_group_name_indexed)::text) = 'country'::text)
  GROUP BY no_country.id, no_country.group_name, (btrim(unnest(regexp_split_to_array((no_country.sub_group_name)::text, (';'::character varying)::text)))), (btrim(unnest(regexp_split_to_array((no_country.tag_value)::text, (';'::character varying)::text)))), (btrim(unnest(regexp_split_to_array((tag_groups.tag_value)::text, (';'::character varying)::text))));


ALTER TABLE darwin2.v_gtu_tags_no_coords_and_country OWNER TO darwin2;

--
-- TOC entry 441 (class 1259 OID 1441548)
-- Name: v_historic_synonymies; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_historic_synonymies AS
 SELECT DISTINCT a.id,
    a.group_id,
    a.record_id,
    a.action
   FROM ( SELECT users_tracking.id,
            (users_tracking.old_value OPERATOR(public.->) 'group_id'::text) AS group_id,
            (users_tracking.old_value OPERATOR(public.->) 'record_id'::text) AS record_id,
            (users_tracking.old_value OPERATOR(public.->) 'action'::text) AS action
           FROM darwin2.users_tracking
          WHERE ((users_tracking.referenced_relation)::text = 'classification_synonymies'::text)
        UNION
         SELECT users_tracking.id,
            (users_tracking.new_value OPERATOR(public.->) 'group_id'::text),
            (users_tracking.new_value OPERATOR(public.->) 'record_id'::text),
            (users_tracking.new_value OPERATOR(public.->) 'action'::text) AS action
           FROM darwin2.users_tracking
          WHERE ((users_tracking.referenced_relation)::text = 'classification_synonymies'::text)) a;


ALTER TABLE darwin2.v_historic_synonymies OWNER TO darwin2;

--
-- TOC entry 442 (class 1259 OID 1441553)
-- Name: v_imports_encoded_xml_name; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_imports_encoded_xml_name AS
 SELECT (('uploaded_'::text || encode(public.digest(((imports.filename)::text || ((imports.created_at)::character varying)::text), 'sha1'::text), 'hex'::text)) || '.xml'::text) AS filename_encoded,
    imports.id,
    imports.user_ref,
    imports.format,
    imports.collection_ref,
    imports.filename,
    imports.state,
    imports.created_at,
    imports.updated_at,
    imports.initial_count,
    imports.is_finished,
    imports.errors_in_import,
    imports.template_version,
    imports.exclude_invalid_entries,
    imports.creation_date,
    imports.creation_date_mask,
    imports.working,
    imports.mime_type,
    imports.gtu_include_date,
    imports.gtu_tags_in_merge,
    imports.source_database,
    imports.sensitive_information_withheld,
    imports.taxonomy_kingdom,
    imports.history_taxonomy,
    imports.specimen_taxonomy_ref,
    imports.taxonomy_name,
    imports.definition_taxonomy,
    imports.is_reference_taxonomy,
    imports.source_taxonomy,
    imports.url_website_taxonomy,
    imports.url_webservice_taxonomy,
    imports.collection_ref_for_gtu,
    imports.enforce_code_unicity
   FROM darwin2.imports;


ALTER TABLE darwin2.v_imports_encoded_xml_name OWNER TO darwin2;

--
-- TOC entry 443 (class 1259 OID 1441558)
-- Name: specimens; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimens (
    id integer NOT NULL,
    category character varying NOT NULL,
    collection_ref integer NOT NULL,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying NOT NULL,
    acquisition_date_mask integer NOT NULL,
    acquisition_date date NOT NULL,
    station_visible boolean NOT NULL,
    ig_ref integer,
    type character varying NOT NULL,
    type_group character varying NOT NULL,
    type_search character varying NOT NULL,
    sex character varying NOT NULL,
    stage character varying NOT NULL,
    state character varying NOT NULL,
    social_status character varying NOT NULL,
    rock_form character varying NOT NULL,
    specimen_part character varying NOT NULL,
    complete boolean NOT NULL,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying NOT NULL,
    sub_container_type character varying NOT NULL,
    container_storage character varying NOT NULL,
    sub_container_storage character varying NOT NULL,
    surnumerary boolean NOT NULL,
    specimen_status character varying NOT NULL,
    specimen_count_min integer NOT NULL,
    specimen_count_max integer NOT NULL,
    object_name text,
    object_name_indexed text NOT NULL,
    spec_ident_ids integer[] NOT NULL,
    spec_coll_ids integer[] NOT NULL,
    spec_don_sel_ids integer[] NOT NULL,
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point,
    specimen_creation_date timestamp without time zone,
    import_ref integer,
    main_code_indexed character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimens'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN type_group OPTIONS (
    column_name 'type_group'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN type_search OPTIONS (
    column_name 'type_search'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN rock_form OPTIONS (
    column_name 'rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN object_name_indexed OPTIONS (
    column_name 'object_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN spec_ident_ids OPTIONS (
    column_name 'spec_ident_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN spec_coll_ids OPTIONS (
    column_name 'spec_coll_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN spec_don_sel_ids OPTIONS (
    column_name 'spec_don_sel_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_is_public OPTIONS (
    column_name 'collection_is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_parent_ref OPTIONS (
    column_name 'collection_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN expedition_name_indexed OPTIONS (
    column_name 'expedition_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_tag_values_indexed OPTIONS (
    column_name 'gtu_tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_country_tag_indexed OPTIONS (
    column_name 'gtu_country_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_province_tag_indexed OPTIONS (
    column_name 'gtu_province_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_others_tag_indexed OPTIONS (
    column_name 'gtu_others_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_name_indexed OPTIONS (
    column_name 'taxon_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_parent_ref OPTIONS (
    column_name 'taxon_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_name_indexed OPTIONS (
    column_name 'litho_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_path OPTIONS (
    column_name 'litho_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN litho_parent_ref OPTIONS (
    column_name 'litho_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_name_indexed OPTIONS (
    column_name 'chrono_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_path OPTIONS (
    column_name 'chrono_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN chrono_parent_ref OPTIONS (
    column_name 'chrono_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_name_indexed OPTIONS (
    column_name 'lithology_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_path OPTIONS (
    column_name 'lithology_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN lithology_parent_ref OPTIONS (
    column_name 'lithology_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_name_indexed OPTIONS (
    column_name 'mineral_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN mineral_parent_ref OPTIONS (
    column_name 'mineral_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN gtu_location OPTIONS (
    column_name 'gtu_location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens ALTER COLUMN main_code_indexed OPTIONS (
    column_name 'main_code_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimens OWNER TO darwin2;

--
-- TOC entry 444 (class 1259 OID 1441561)
-- Name: tags; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.tags (
    gtu_ref integer NOT NULL,
    group_ref integer NOT NULL,
    group_type character varying NOT NULL,
    sub_group_type character varying NOT NULL,
    tag character varying NOT NULL,
    tag_indexed character varying NOT NULL,
    id integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'tags'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN group_ref OPTIONS (
    column_name 'group_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN group_type OPTIONS (
    column_name 'group_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN sub_group_type OPTIONS (
    column_name 'sub_group_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN tag OPTIONS (
    column_name 'tag'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN tag_indexed OPTIONS (
    column_name 'tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tags ALTER COLUMN id OPTIONS (
    column_name 'id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.tags OWNER TO darwin2;

--
-- TOC entry 445 (class 1259 OID 1441564)
-- Name: v_migration_compare_gtu; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_migration_compare_gtu AS
 SELECT a.id AS specimen_id,
    a.gtu_ref AS gtu_id_source,
    b.gtu_ref AS gtu_id_dest
   FROM (darwin2_rbins_data.specimens a
     LEFT JOIN darwin2.specimens b ON ((a.id = b.id)))
  WHERE ((a.gtu_ref <> b.gtu_ref) OR ((b.gtu_ref IS NULL) AND (a.gtu_ref IS NOT NULL)) OR ((a.gtu_ref IS NULL) AND (b.gtu_ref IS NOT NULL)));


ALTER TABLE public.v_migration_compare_gtu OWNER TO darwin2;

--
-- TOC entry 446 (class 1259 OID 1441569)
-- Name: v_migration_compare_gtu_with_tags; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_migration_compare_gtu_with_tags AS
 SELECT v_migration_compare_gtu.specimen_id,
    v_migration_compare_gtu.gtu_id_source,
    v_migration_compare_gtu.gtu_id_dest,
    array_agg(DISTINCT b.tag ORDER BY b.tag) AS source_tags,
    array_agg(DISTINCT c.tag ORDER BY c.tag) AS dest_tags
   FROM ((public.v_migration_compare_gtu
     LEFT JOIN darwin2_rbins_data.tags b ON ((v_migration_compare_gtu.gtu_id_source = b.gtu_ref)))
     LEFT JOIN darwin2_rbins_data.tags c ON ((v_migration_compare_gtu.gtu_id_dest = c.gtu_ref)))
  GROUP BY v_migration_compare_gtu.specimen_id, v_migration_compare_gtu.gtu_id_source, v_migration_compare_gtu.gtu_id_dest;


ALTER TABLE darwin2.v_migration_compare_gtu_with_tags OWNER TO darwin2;

--
-- TOC entry 447 (class 1259 OID 1441574)
-- Name: v_migration_wrong_temporal_information_date; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_migration_wrong_temporal_information_date AS
 SELECT temporal_information.id,
    temporal_information.gtu_ref,
    temporal_information.specimen_ref,
    temporal_information.from_date_mask,
    temporal_information.from_date,
    temporal_information.to_date_mask,
    temporal_information.to_date,
    specimens.gtu_from_date_mask AS specimen_from_date_mask,
    specimens.gtu_from_date AS specimen_from_date,
    specimens.gtu_to_date_mask AS specimen_to_date_mask,
    specimens.gtu_to_date AS specimen_to_date
   FROM (darwin2.temporal_information
     JOIN darwin2_rbins_data.specimens ON ((temporal_information.specimen_ref = specimens.id)))
  WHERE (temporal_information.from_date <> specimens.gtu_from_date);


ALTER TABLE darwin2.v_migration_wrong_temporal_information_date OWNER TO darwin2;

--
-- TOC entry 448 (class 1259 OID 1441579)
-- Name: v_normalize_gtu_without_date; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_normalize_gtu_without_date AS
 SELECT DISTINCT array_agg(a.gtu_id ORDER BY a.gtu_id) AS gtu_id,
    a.code,
    a.tag_values_indexed,
    a.latitude,
    a.longitude,
    a.lat_long_accuracy,
    a.location,
    a.elevation,
    a.elevation_accuracy,
    a.latitude_dms_degree,
    a.latitude_dms_minutes,
    a.latitude_dms_seconds,
    a.latitude_dms_direction,
    a.longitude_dms_degree,
    a.longitude_dms_minutes,
    a.longitude_dms_seconds,
    a.longitude_dms_direction,
    a.latitude_utm,
    a.longitude_utm,
    a.utm_zone,
    a.coordinates_source,
    a.gtu_creation_date,
    a.import_ref,
    a.comments,
    a.properties,
    a.ext_links,
    a.multimedias,
    a.tags,
    a.tag_groups
   FROM ( SELECT DISTINCT gtu.id AS gtu_id,
            gtu.code,
            gtu.tag_values_indexed,
            gtu.latitude,
            gtu.longitude,
            gtu.lat_long_accuracy,
            (gtu.location)::character varying AS location,
            gtu.elevation,
            gtu.elevation_accuracy,
            gtu.latitude_dms_degree,
            gtu.latitude_dms_minutes,
            gtu.latitude_dms_seconds,
            gtu.latitude_dms_direction,
            gtu.longitude_dms_degree,
            gtu.longitude_dms_minutes,
            gtu.longitude_dms_seconds,
            gtu.longitude_dms_direction,
            gtu.latitude_utm,
            gtu.longitude_utm,
            gtu.utm_zone,
            gtu.coordinates_source,
            gtu.gtu_creation_date,
            gtu.import_ref,
            array_agg(DISTINCT (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text)) ORDER BY (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text))) AS comments,
            array_agg(DISTINCT ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text) ORDER BY ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text)) AS properties,
            array_agg(DISTINCT ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text)) ORDER BY ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text))) AS ext_links,
            array_agg(DISTINCT ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text)) ORDER BY ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text))) AS multimedias,
            array_agg(DISTINCT ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text) ORDER BY ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text)) AS tags,
            array_agg(DISTINCT (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text) ORDER BY (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text)) AS tag_groups
           FROM ((((((darwin2.gtu
             LEFT JOIN darwin2.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.ext_links ON (((gtu.id = ext_links.record_id) AND ((ext_links.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.tags ON ((gtu.id = tags.gtu_ref)))
             LEFT JOIN darwin2.tag_groups ON ((gtu.id = tag_groups.gtu_ref)))
          GROUP BY gtu.id, gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, (gtu.location)::character varying, gtu.elevation, gtu.elevation_accuracy, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, gtu.gtu_creation_date, gtu.import_ref) a
  GROUP BY a.code, a.tag_values_indexed, a.latitude, a.longitude, a.lat_long_accuracy, a.location, a.elevation, a.elevation_accuracy, a.latitude_dms_degree, a.latitude_dms_minutes, a.latitude_dms_seconds, a.latitude_dms_direction, a.longitude_dms_degree, a.longitude_dms_minutes, a.longitude_dms_seconds, a.longitude_dms_direction, a.latitude_utm, a.longitude_utm, a.utm_zone, a.coordinates_source, a.gtu_creation_date, a.import_ref, a.comments, a.properties, a.ext_links, a.multimedias, a.tags, a.tag_groups
  WITH NO DATA;


ALTER TABLE darwin2.v_normalize_gtu_without_date OWNER TO darwin2;

--
-- TOC entry 449 (class 1259 OID 1441587)
-- Name: v_normalize_gtu_without_date_no_code; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_normalize_gtu_without_date_no_code AS
 SELECT DISTINCT array_agg(a.gtu_id ORDER BY a.gtu_id) AS gtu_id,
    a.tag_values_indexed,
    a.latitude,
    a.longitude,
    a.lat_long_accuracy,
    a.location,
    a.elevation,
    a.elevation_accuracy,
    a.latitude_dms_degree,
    a.latitude_dms_minutes,
    a.latitude_dms_seconds,
    a.latitude_dms_direction,
    a.longitude_dms_degree,
    a.longitude_dms_minutes,
    a.longitude_dms_seconds,
    a.longitude_dms_direction,
    a.latitude_utm,
    a.longitude_utm,
    a.utm_zone,
    a.coordinates_source,
    a.gtu_creation_date,
    a.import_ref,
    a.comments,
    a.properties,
    a.ext_links,
    a.multimedias,
    a.tags,
    a.tag_groups
   FROM ( SELECT DISTINCT gtu.id AS gtu_id,
            gtu.tag_values_indexed,
            gtu.latitude,
            gtu.longitude,
            gtu.lat_long_accuracy,
            (gtu.location)::character varying AS location,
            gtu.elevation,
            gtu.elevation_accuracy,
            gtu.latitude_dms_degree,
            gtu.latitude_dms_minutes,
            gtu.latitude_dms_seconds,
            gtu.latitude_dms_direction,
            gtu.longitude_dms_degree,
            gtu.longitude_dms_minutes,
            gtu.longitude_dms_seconds,
            gtu.longitude_dms_direction,
            gtu.latitude_utm,
            gtu.longitude_utm,
            gtu.utm_zone,
            gtu.coordinates_source,
            gtu.gtu_creation_date,
            gtu.import_ref,
            array_agg(DISTINCT (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text)) ORDER BY (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text))) AS comments,
            array_agg(DISTINCT ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text) ORDER BY ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text)) AS properties,
            array_agg(DISTINCT ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text)) ORDER BY ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text))) AS ext_links,
            array_agg(DISTINCT ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text)) ORDER BY ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text))) AS multimedias,
            array_agg(DISTINCT ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text) ORDER BY ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text)) AS tags,
            array_agg(DISTINCT (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text) ORDER BY (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text)) AS tag_groups
           FROM ((((((darwin2.gtu
             LEFT JOIN darwin2.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.ext_links ON (((gtu.id = ext_links.record_id) AND ((ext_links.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.tags ON ((gtu.id = tags.gtu_ref)))
             LEFT JOIN darwin2.tag_groups ON ((gtu.id = tag_groups.gtu_ref)))
          GROUP BY gtu.id, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, (gtu.location)::character varying, gtu.elevation, gtu.elevation_accuracy, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, gtu.gtu_creation_date, gtu.import_ref) a
  GROUP BY a.tag_values_indexed, a.latitude, a.longitude, a.lat_long_accuracy, a.location, a.elevation, a.elevation_accuracy, a.latitude_dms_degree, a.latitude_dms_minutes, a.latitude_dms_seconds, a.latitude_dms_direction, a.longitude_dms_degree, a.longitude_dms_minutes, a.longitude_dms_seconds, a.longitude_dms_direction, a.latitude_utm, a.longitude_utm, a.utm_zone, a.coordinates_source, a.gtu_creation_date, a.import_ref, a.comments, a.properties, a.ext_links, a.multimedias, a.tags, a.tag_groups
  WITH NO DATA;


ALTER TABLE darwin2.v_normalize_gtu_without_date_no_code OWNER TO darwin2;

--
-- TOC entry 450 (class 1259 OID 1441595)
-- Name: v_possible_duplicates; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_possible_duplicates AS
 SELECT DISTINCT specimens.ig_num,
    codes.full_code_indexed,
    count(specimens.id) AS count,
    array_agg(specimens.id ORDER BY specimens.id) AS array_agg
   FROM (darwin2.specimens
     LEFT JOIN darwin2.codes ON ((((codes.referenced_relation)::text = 'specimens'::text) AND (specimens.id = codes.record_id) AND ((codes.code_category)::text = 'main'::text))))
  WHERE ((length((specimens.ig_num)::text) > 0) AND (length((codes.full_code_indexed)::text) > 0))
  GROUP BY specimens.ig_num, codes.full_code_indexed
 HAVING (count(specimens.id) > 1)
  ORDER BY (count(specimens.id)) DESC;


ALTER TABLE darwin2.v_possible_duplicates OWNER TO darwin2;

--
-- TOC entry 451 (class 1259 OID 1441600)
-- Name: v_reindex_tag_spaces; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_reindex_tag_spaces AS
SELECT
    NULL::bigint AS id,
    NULL::integer AS gtu_ref,
    NULL::text AS tag_value;


ALTER TABLE darwin2.v_reindex_tag_spaces OWNER TO darwin2;

--
-- TOC entry 452 (class 1259 OID 1441604)
-- Name: v_reporting_count_all_specimens; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens AS
 SELECT count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max
   FROM darwin2.specimens
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens OWNER TO darwin2;

--
-- TOC entry 453 (class 1259 OID 1441609)
-- Name: v_reporting_count_all_specimens_by_collection_year_ig; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens_by_collection_year_ig AS
 SELECT DISTINCT specimens.collection_name,
    specimens.collection_path,
    specimens.collection_ref,
    date_part('year'::text, specimens.specimen_creation_date) AS year,
    specimens.specimen_creation_date,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max,
    specimens.ig_ref,
    specimens.ig_num
   FROM darwin2.specimens
  GROUP BY specimens.collection_ref, specimens.collection_name, specimens.collection_path, (date_part('year'::text, specimens.specimen_creation_date)), specimens.specimen_creation_date, specimens.ig_ref, specimens.ig_num
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens_by_collection_year_ig OWNER TO darwin2;

--
-- TOC entry 454 (class 1259 OID 1441617)
-- Name: v_reporting_count_all_specimens_by_year; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens_by_year AS
 SELECT DISTINCT date_part('year'::text, specimens.specimen_creation_date) AS year,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max
   FROM darwin2.specimens
  GROUP BY (date_part('year'::text, specimens.specimen_creation_date))
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens_by_year OWNER TO darwin2;

--
-- TOC entry 455 (class 1259 OID 1441622)
-- Name: v_reporting_count_all_specimens_type; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens_type AS
 SELECT btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)) AS type,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max
   FROM darwin2.specimens
  GROUP BY (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  ORDER BY (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens_type OWNER TO darwin2;

--
-- TOC entry 456 (class 1259 OID 1441630)
-- Name: v_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens_type_by_collection_ref_year_ig AS
 SELECT DISTINCT specimens.collection_path,
    specimens.collection_name,
    specimens.collection_ref,
    specimens.ig_ref,
    specimens.ig_num,
    date_part('year'::text, specimens.specimen_creation_date) AS year,
    specimens.specimen_creation_date,
    btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)) AS type,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max
   FROM darwin2.specimens
  GROUP BY specimens.collection_path, specimens.collection_name, specimens.collection_ref, specimens.ig_ref, specimens.ig_num, specimens.specimen_creation_date, (date_part('year'::text, specimens.specimen_creation_date)), (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  ORDER BY (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens_type_by_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 457 (class 1259 OID 1441638)
-- Name: v_reporting_count_all_specimens_type_by_year; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_count_all_specimens_type_by_year AS
 SELECT DISTINCT date_part('year'::text, specimens.specimen_creation_date) AS year,
    btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)) AS type,
    count(*) AS nb_records,
    sum(specimens.specimen_count_min) AS specimen_count_min,
    sum(specimens.specimen_count_max) AS specimen_count_max
   FROM darwin2.specimens
  GROUP BY (date_part('year'::text, specimens.specimen_creation_date)), (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  ORDER BY (btrim(regexp_replace(replace(lower((specimens.type)::text), 'types'::text, 'type'::text), '\d'::text, ''::text)))
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_count_all_specimens_type_by_year OWNER TO darwin2;

--
-- TOC entry 458 (class 1259 OID 1441646)
-- Name: v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig AS
 SELECT a.taxonomy_id,
    a.collection_path,
    a.collection_ref,
    a.collection_name,
    a.ig_ref,
    a.ig_num,
    a.year,
    a.creation_date,
    a.level_ref,
    a.level_name,
    count(*) AS nb_records,
    sum(a.specimen_count_min) AS specimen_count_min,
    sum(a.specimen_count_max) AS specimen_count_max
   FROM ( SELECT taxonomy.id AS taxonomy_id,
            specimens.collection_path,
            specimens.collection_ref,
            specimens.collection_name,
            taxonomy.id,
            date_part('year'::text, min(COALESCE(taxonomy.taxonomy_creation_date, specimens.specimen_creation_date))) AS year,
            min(COALESCE(taxonomy.taxonomy_creation_date, specimens.specimen_creation_date)) AS creation_date,
            taxonomy.level_ref,
            catalogue_levels.level_name,
            specimens.ig_ref,
            specimens.ig_num,
            specimens.specimen_count_min,
            specimens.specimen_count_max
           FROM ((darwin2.taxonomy
             JOIN darwin2.specimens ON ((taxonomy.id = specimens.taxon_ref)))
             LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)))
          GROUP BY taxonomy.id, specimens.collection_path, specimens.collection_name, specimens.collection_ref, taxonomy.level_ref, catalogue_levels.level_name, specimens.ig_ref, specimens.ig_num, specimens.specimen_count_min, specimens.specimen_count_max) a
  GROUP BY a.taxonomy_id, a.collection_path, a.collection_name, a.collection_ref, a.year, a.creation_date, a.level_ref, a.level_name, a.ig_ref, a.ig_num, a.specimen_count_min, a.specimen_count_max
  ORDER BY a.year, a.level_name DESC
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 459 (class 1259 OID 1441654)
-- Name: v_reporting_taxa_in_specimen_per_rank_collection_ref_year_igall; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_igall AS
 SELECT a.taxonomy_id,
    a.collection_path,
    a.collection_ref,
    a.collection_name,
    a.ig_ref,
    a.ig_num,
    a.year,
    a.creation_date,
    a.level_ref,
    a.level_name,
    count(*) AS nb_records,
    sum(a.specimen_count_min) AS specimen_count_min,
    sum(a.specimen_count_max) AS specimen_count_max
   FROM ( SELECT taxonomy.id AS taxonomy_id,
            specimens.collection_path,
            specimens.collection_ref,
            specimens.collection_name,
            taxonomy.id,
            date_part('year'::text, min(COALESCE(taxonomy.taxonomy_creation_date, specimens.specimen_creation_date))) AS year,
            min(COALESCE(taxonomy.taxonomy_creation_date, specimens.specimen_creation_date)) AS creation_date,
            taxonomy.level_ref,
            catalogue_levels.level_name,
            specimens.ig_ref,
            specimens.ig_num,
            specimens.specimen_count_min,
            specimens.specimen_count_max
           FROM ((( WITH aa AS (
                         SELECT specimens_1.collection_path,
                            specimens_1.collection_ref,
                            specimens_1.collection_name,
                            specimens_1.specimen_creation_date,
                            specimens_1.ig_ref,
                            specimens_1.ig_num,
                            specimens_1.specimen_count_min,
                            specimens_1.specimen_count_max,
                            regexp_split_to_table((((specimens_1.taxon_path)::text || ((specimens_1.taxon_ref)::character varying)::text) || '/'::text), '/'::text) AS path_elem_2
                           FROM darwin2.specimens specimens_1
                        )
                 SELECT DISTINCT aa.collection_path,
                    aa.collection_ref,
                    aa.collection_name,
                    aa.specimen_creation_date,
                    aa.ig_ref,
                    aa.ig_num,
                    aa.specimen_count_min,
                    aa.specimen_count_max,
                    aa.path_elem_2
                   FROM aa
                  WHERE (aa.path_elem_2 <> ''::text)) specimens
             JOIN darwin2.taxonomy ON (((specimens.path_elem_2)::integer = taxonomy.id)))
             LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)))
          GROUP BY taxonomy.id, specimens.collection_path, specimens.collection_name, specimens.collection_ref, taxonomy.level_ref, catalogue_levels.level_name, specimens.ig_ref, specimens.ig_num, specimens.specimen_count_min, specimens.specimen_count_max) a
  GROUP BY a.taxonomy_id, a.collection_path, a.collection_name, a.collection_ref, a.year, a.creation_date, a.level_ref, a.level_name, a.ig_ref, a.ig_num, a.specimen_count_min, a.specimen_count_max
  ORDER BY a.year, a.level_name DESC
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_igall OWNER TO darwin2;

--
-- TOC entry 460 (class 1259 OID 1441662)
-- Name: v_reporting_taxa_in_specimen_per_year; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_taxa_in_specimen_per_year AS
 SELECT a.year,
    count(*) AS count
   FROM ( SELECT taxonomy.id,
            date_part('year'::text, min(COALESCE(taxonomy.taxonomy_creation_date, specimens.specimen_creation_date))) AS year
           FROM (darwin2.taxonomy
             JOIN darwin2.specimens ON ((taxonomy.id = specimens.taxon_ref)))
          WHERE (taxonomy.taxonomy_creation_date IS NOT NULL)
          GROUP BY taxonomy.id) a
  GROUP BY a.year
  ORDER BY a.year DESC
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_taxa_in_specimen_per_year OWNER TO darwin2;

--
-- TOC entry 461 (class 1259 OID 1441667)
-- Name: v_reporting_taxonomy_general; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_taxonomy_general AS
 SELECT catalogue_levels.level_name,
    count(*) AS count
   FROM (darwin2.taxonomy
     LEFT JOIN darwin2.catalogue_levels ON ((taxonomy.level_ref = catalogue_levels.id)))
  GROUP BY catalogue_levels.level_name, taxonomy.level_ref
  ORDER BY taxonomy.level_ref
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_taxonomy_general OWNER TO darwin2;

--
-- TOC entry 462 (class 1259 OID 1441675)
-- Name: v_reporting_taxonomy_in_specimen; Type: MATERIALIZED VIEW; Schema: darwin2; Owner: darwin2
--

CREATE MATERIALIZED VIEW darwin2.v_reporting_taxonomy_in_specimen AS
 SELECT specimens.taxon_level_name,
    count(DISTINCT specimens.taxon_name) AS count
   FROM darwin2.specimens
  GROUP BY specimens.taxon_level_ref, specimens.taxon_level_name
  ORDER BY specimens.taxon_level_ref
  WITH NO DATA;


ALTER TABLE darwin2.v_reporting_taxonomy_in_specimen OWNER TO darwin2;

--
-- TOC entry 463 (class 1259 OID 1441683)
-- Name: v_rmca_collections_path_as_text; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_rmca_collections_path_as_text AS
 SELECT collections.id,
    collections.collection_type,
    collections.code,
    collections.name,
    collections.name_indexed,
    collections.institution_ref,
    collections.main_manager_ref,
    collections.parent_ref,
    collections.path,
    collections.code_auto_increment,
    collections.code_last_value,
    collections.code_prefix,
    collections.code_prefix_separator,
    collections.code_suffix,
    collections.code_suffix_separator,
    collections.is_public,
    collections.code_specimen_duplicate,
    collections.staff_ref,
    collections.code_auto_increment_for_insert_only,
    collections.code_mask,
    collections.allow_duplicates,
    string_agg((b.name)::text, '/'::text ORDER BY (collections.coll_path)::integer) AS collection_path_text,
    string_agg((b.code)::text, '/'::text ORDER BY (collections.coll_path)::integer) AS collection_path_code,
    string_agg((b.name_indexed)::text, '/'::text ORDER BY (collections.coll_path)::integer) AS collection_path_indexed,
    (array_agg((b.name)::text ORDER BY (collections.coll_path)::integer))[1] AS collection_main_text,
    (array_agg((b.code)::text ORDER BY (collections.coll_path)::integer))[1] AS collection_main_code,
    (array_agg((b.name_indexed)::text ORDER BY (collections.coll_path)::integer))[1] AS collection_main_indexed
   FROM (( SELECT DISTINCT collections_1.id,
            collections_1.collection_type,
            collections_1.code,
            collections_1.name,
            collections_1.name_indexed,
            collections_1.institution_ref,
            collections_1.main_manager_ref,
            collections_1.parent_ref,
            collections_1.path,
            regexp_split_to_table(btrim(((collections_1.path)::text || ((collections_1.id)::character varying)::text), '/'::text), '/'::text) AS coll_path,
            collections_1.code_auto_increment,
            collections_1.code_last_value,
            collections_1.code_prefix,
            collections_1.code_prefix_separator,
            collections_1.code_suffix,
            collections_1.code_suffix_separator,
            collections_1.is_public,
            collections_1.code_specimen_duplicate,
            collections_1.staff_ref,
            collections_1.code_auto_increment_for_insert_only,
            collections_1.code_mask,
            collections_1.allow_duplicates
           FROM darwin2.collections collections_1) collections
     LEFT JOIN darwin2.collections b ON (((collections.coll_path)::integer = b.id)))
  GROUP BY collections.id, collections.collection_type, collections.code, collections.name, collections.name_indexed, collections.institution_ref, collections.main_manager_ref, collections.parent_ref, collections.path, collections.code_auto_increment, collections.code_last_value, collections.code_prefix, collections.code_prefix_separator, collections.code_suffix, collections.code_suffix_separator, collections.is_public, collections.code_specimen_duplicate, collections.staff_ref, collections.code_auto_increment_for_insert_only, collections.code_mask, collections.allow_duplicates;


ALTER TABLE darwin2.v_rmca_collections_path_as_text OWNER TO darwin2;

--
-- TOC entry 464 (class 1259 OID 1441688)
-- Name: v_rmca_host_parasite_specimens_to_taxa; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_rmca_host_parasite_specimens_to_taxa AS
 SELECT DISTINCT taxonomy1.id AS taxon_ref_1,
    taxonomy1.name AS name_1,
    specimens_relationships.unit_type,
    specimens_relationships.relationship_type,
    taxonomy2.id AS taxon_ref_2,
    taxonomy2.name AS name_2,
    count(specimens_relationships.specimen_ref) AS count_specicmens_involved
   FROM (((darwin2.specimens_relationships
     JOIN darwin2.specimens ON ((specimens_relationships.specimen_ref = specimens.id)))
     JOIN darwin2.taxonomy taxonomy1 ON ((specimens.taxon_ref = taxonomy1.id)))
     JOIN darwin2.taxonomy taxonomy2 ON ((specimens_relationships.taxon_ref = taxonomy2.id)))
  WHERE ((specimens_relationships.unit_type)::text = 'taxonomy'::text)
  GROUP BY taxonomy1.id, taxonomy1.name, specimens_relationships.unit_type, specimens_relationships.relationship_type, taxonomy2.id, taxonomy2.name;


ALTER TABLE darwin2.v_rmca_host_parasite_specimens_to_taxa OWNER TO darwin2;

--
-- TOC entry 465 (class 1259 OID 1441693)
-- Name: v_rmca_taxo_detect_duplicate_hierarchies; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_rmca_taxo_detect_duplicate_hierarchies AS
 SELECT subquery.level_ref,
    catalogue_levels.level_name,
    subquery.canonical_name,
    array_length(subquery.names_list, 1) AS nb_canonical_homonyms,
    subquery.names_list,
    subquery.taxa_ids AS ids
   FROM (( SELECT darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(taxonomy.name) AS fct_rmca_taxonomy_try_to_isolate_from_author,
            count(DISTINCT taxonomy.id) AS canonical_homonyms,
            taxonomy.level_ref,
            array_agg(taxonomy.name ORDER BY taxonomy.id) AS names_list,
            array_agg(taxonomy.id ORDER BY taxonomy.id) AS taxa_ids,
            darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(taxonomy.name) AS canonical_name
           FROM darwin2.taxonomy
          GROUP BY (darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(taxonomy.name)), taxonomy.level_ref
         HAVING (count(DISTINCT taxonomy.id) > 1)) subquery
     JOIN darwin2.catalogue_levels ON ((subquery.level_ref = catalogue_levels.id)))
  GROUP BY subquery.level_ref, catalogue_levels.level_name, subquery.names_list, subquery.taxa_ids, subquery.canonical_name
  ORDER BY subquery.level_ref, subquery.canonical_name;


ALTER TABLE darwin2.v_rmca_taxo_detect_duplicate_hierarchies OWNER TO darwin2;

--
-- TOC entry 466 (class 1259 OID 1441698)
-- Name: v_rmca_taxonomy_synonyms_with_name_and_specs; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs AS
SELECT
    NULL::character varying AS referenced_relation,
    NULL::integer[] AS records_ids,
    NULL::integer[] AS ids,
    NULL::integer AS group_id,
    NULL::character varying AS group_name,
    NULL::boolean[] AS basionyms,
    NULL::integer[] AS orders,
    NULL::text AS taxon_names,
    NULL::numeric AS count_specimens,
    NULL::public.hstore AS count_specimens_by_taxon;


ALTER TABLE darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs OWNER TO darwin2;

--
-- TOC entry 467 (class 1259 OID 1441702)
-- Name: v_taxonomy_split_author_fast; Type: VIEW; Schema: darwin2; Owner: darwin2
--

CREATE VIEW darwin2.v_taxonomy_split_author_fast AS
SELECT
    NULL::integer AS id,
    NULL::character varying AS name,
    NULL::character varying AS name_indexed,
    NULL::integer AS level_ref,
    NULL::character varying AS status,
    NULL::boolean AS local_naming,
    NULL::character varying AS color,
    NULL::character varying AS path,
    NULL::integer AS parent_ref,
    NULL::boolean AS extinct,
    NULL::boolean AS sensitive_info_withheld,
    NULL::integer AS metadata_ref,
    NULL::timestamp without time zone AS taxonomy_creation_date,
    NULL::text AS name_no_author,
    NULL::text AS author;


ALTER TABLE darwin2.v_taxonomy_split_author_fast OWNER TO darwin2;

--
-- TOC entry 468 (class 1259 OID 1441706)
-- Name: vernacular_names_id_seq; Type: SEQUENCE; Schema: darwin2; Owner: postgres
--

CREATE SEQUENCE darwin2.vernacular_names_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE darwin2.vernacular_names_id_seq OWNER TO postgres;

--
-- TOC entry 9338 (class 0 OID 0)
-- Dependencies: 468
-- Name: vernacular_names_id_seq; Type: SEQUENCE OWNED BY; Schema: darwin2; Owner: postgres
--

ALTER SEQUENCE darwin2.vernacular_names_id_seq OWNED BY darwin2.vernacular_names.id;


--
-- TOC entry 469 (class 1259 OID 1441708)
-- Name: bibliography; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.bibliography (
    id integer NOT NULL,
    title character varying NOT NULL,
    title_indexed character varying NOT NULL,
    type character varying NOT NULL,
    abstract character varying NOT NULL,
    year integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'bibliography'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN title_indexed OPTIONS (
    column_name 'title_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN abstract OPTIONS (
    column_name 'abstract'
);
ALTER FOREIGN TABLE darwin2_rbins_data.bibliography ALTER COLUMN year OPTIONS (
    column_name 'year'
);


ALTER FOREIGN TABLE darwin2_rbins_data.bibliography OWNER TO darwin2;

--
-- TOC entry 470 (class 1259 OID 1441711)
-- Name: catalogue_bibliography; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    bibliography_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'catalogue_bibliography'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography ALTER COLUMN bibliography_ref OPTIONS (
    column_name 'bibliography_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_bibliography OWNER TO darwin2;

--
-- TOC entry 471 (class 1259 OID 1441714)
-- Name: catalogue_levels; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.catalogue_levels (
    id integer NOT NULL,
    level_type character varying NOT NULL,
    level_name character varying NOT NULL,
    level_sys_name character varying NOT NULL,
    optional_level boolean NOT NULL,
    level_order integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'catalogue_levels'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN level_type OPTIONS (
    column_name 'level_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN level_name OPTIONS (
    column_name 'level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN level_sys_name OPTIONS (
    column_name 'level_sys_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN optional_level OPTIONS (
    column_name 'optional_level'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels ALTER COLUMN level_order OPTIONS (
    column_name 'level_order'
);


ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_levels OWNER TO darwin2;

--
-- TOC entry 472 (class 1259 OID 1441717)
-- Name: catalogue_people; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.catalogue_people (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    people_type character varying NOT NULL,
    people_sub_type character varying NOT NULL,
    order_by integer NOT NULL,
    people_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'catalogue_people'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN people_type OPTIONS (
    column_name 'people_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN people_sub_type OPTIONS (
    column_name 'people_sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN order_by OPTIONS (
    column_name 'order_by'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people ALTER COLUMN people_ref OPTIONS (
    column_name 'people_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_people OWNER TO darwin2;

--
-- TOC entry 473 (class 1259 OID 1441720)
-- Name: catalogue_relationships; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.catalogue_relationships (
    id integer NOT NULL,
    referenced_relation character varying NOT NULL,
    record_id_1 integer NOT NULL,
    record_id_2 integer NOT NULL,
    relationship_type character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'catalogue_relationships'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships ALTER COLUMN record_id_1 OPTIONS (
    column_name 'record_id_1'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships ALTER COLUMN record_id_2 OPTIONS (
    column_name 'record_id_2'
);
ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships ALTER COLUMN relationship_type OPTIONS (
    column_name 'relationship_type'
);


ALTER FOREIGN TABLE darwin2_rbins_data.catalogue_relationships OWNER TO darwin2;

--
-- TOC entry 474 (class 1259 OID 1441723)
-- Name: chronostratigraphy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.chronostratigraphy (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer,
    id integer NOT NULL,
    lower_bound numeric(10,3),
    upper_bound numeric(10,3)
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'chronostratigraphy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN lower_bound OPTIONS (
    column_name 'lower_bound'
);
ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy ALTER COLUMN upper_bound OPTIONS (
    column_name 'upper_bound'
);


ALTER FOREIGN TABLE darwin2_rbins_data.chronostratigraphy OWNER TO darwin2;

--
-- TOC entry 475 (class 1259 OID 1441726)
-- Name: classification_keywords; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.classification_keywords (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    keyword_type character varying NOT NULL,
    keyword character varying NOT NULL,
    keyword_indexed character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'classification_keywords'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN keyword_type OPTIONS (
    column_name 'keyword_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN keyword OPTIONS (
    column_name 'keyword'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords ALTER COLUMN keyword_indexed OPTIONS (
    column_name 'keyword_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.classification_keywords OWNER TO darwin2;

--
-- TOC entry 476 (class 1259 OID 1441729)
-- Name: classification_synonymies; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.classification_synonymies (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    group_id integer NOT NULL,
    group_name character varying NOT NULL,
    is_basionym boolean,
    order_by integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'classification_synonymies'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN group_id OPTIONS (
    column_name 'group_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN is_basionym OPTIONS (
    column_name 'is_basionym'
);
ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies ALTER COLUMN order_by OPTIONS (
    column_name 'order_by'
);


ALTER FOREIGN TABLE darwin2_rbins_data.classification_synonymies OWNER TO darwin2;

--
-- TOC entry 477 (class 1259 OID 1441732)
-- Name: codes; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.codes (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    code_category character varying NOT NULL,
    code_prefix character varying,
    code_prefix_separator character varying,
    code character varying,
    code_suffix character varying,
    code_suffix_separator character varying,
    full_code_indexed character varying NOT NULL,
    code_date timestamp without time zone NOT NULL,
    code_date_mask integer NOT NULL,
    code_num bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'codes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_category OPTIONS (
    column_name 'code_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_prefix OPTIONS (
    column_name 'code_prefix'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_prefix_separator OPTIONS (
    column_name 'code_prefix_separator'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_suffix OPTIONS (
    column_name 'code_suffix'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_suffix_separator OPTIONS (
    column_name 'code_suffix_separator'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN full_code_indexed OPTIONS (
    column_name 'full_code_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_date OPTIONS (
    column_name 'code_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_date_mask OPTIONS (
    column_name 'code_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.codes ALTER COLUMN code_num OPTIONS (
    column_name 'code_num'
);


ALTER FOREIGN TABLE darwin2_rbins_data.codes OWNER TO darwin2;

--
-- TOC entry 478 (class 1259 OID 1441735)
-- Name: collecting_methods; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.collecting_methods (
    id integer NOT NULL,
    method character varying NOT NULL,
    method_indexed character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'collecting_methods'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_methods ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_methods ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_methods ALTER COLUMN method_indexed OPTIONS (
    column_name 'method_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.collecting_methods OWNER TO darwin2;

--
-- TOC entry 479 (class 1259 OID 1441738)
-- Name: collecting_tools; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.collecting_tools (
    id integer NOT NULL,
    tool character varying NOT NULL,
    tool_indexed character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'collecting_tools'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_tools ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_tools ALTER COLUMN tool OPTIONS (
    column_name 'tool'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collecting_tools ALTER COLUMN tool_indexed OPTIONS (
    column_name 'tool_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.collecting_tools OWNER TO darwin2;

--
-- TOC entry 480 (class 1259 OID 1441741)
-- Name: collection_maintenance; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.collection_maintenance (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    people_ref integer,
    category character varying NOT NULL,
    action_observation character varying NOT NULL,
    description character varying,
    modification_date_time timestamp without time zone NOT NULL,
    modification_date_mask integer NOT NULL,
    description_indexed text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'collection_maintenance'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN people_ref OPTIONS (
    column_name 'people_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN action_observation OPTIONS (
    column_name 'action_observation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN description OPTIONS (
    column_name 'description'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN modification_date_mask OPTIONS (
    column_name 'modification_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance ALTER COLUMN description_indexed OPTIONS (
    column_name 'description_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.collection_maintenance OWNER TO darwin2;

--
-- TOC entry 481 (class 1259 OID 1441744)
-- Name: collections; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.collections (
    id integer NOT NULL,
    collection_type character varying NOT NULL,
    code character varying NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL,
    institution_ref integer NOT NULL,
    main_manager_ref integer NOT NULL,
    parent_ref integer,
    path character varying NOT NULL,
    code_auto_increment boolean NOT NULL,
    code_last_value bigint NOT NULL,
    code_prefix character varying,
    code_prefix_separator character varying,
    code_suffix character varying,
    code_suffix_separator character varying,
    is_public boolean NOT NULL,
    code_specimen_duplicate boolean NOT NULL,
    staff_ref integer,
    code_auto_increment_for_insert_only boolean NOT NULL,
    code_mask character varying,
    allow_duplicates boolean
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'collections'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN main_manager_ref OPTIONS (
    column_name 'main_manager_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_auto_increment OPTIONS (
    column_name 'code_auto_increment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_last_value OPTIONS (
    column_name 'code_last_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_prefix OPTIONS (
    column_name 'code_prefix'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_prefix_separator OPTIONS (
    column_name 'code_prefix_separator'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_suffix OPTIONS (
    column_name 'code_suffix'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_suffix_separator OPTIONS (
    column_name 'code_suffix_separator'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN is_public OPTIONS (
    column_name 'is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_specimen_duplicate OPTIONS (
    column_name 'code_specimen_duplicate'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN staff_ref OPTIONS (
    column_name 'staff_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_auto_increment_for_insert_only OPTIONS (
    column_name 'code_auto_increment_for_insert_only'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN code_mask OPTIONS (
    column_name 'code_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections ALTER COLUMN allow_duplicates OPTIONS (
    column_name 'allow_duplicates'
);


ALTER FOREIGN TABLE darwin2_rbins_data.collections OWNER TO darwin2;

--
-- TOC entry 482 (class 1259 OID 1441747)
-- Name: collections_rights; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.collections_rights (
    collection_ref integer NOT NULL,
    user_ref integer NOT NULL,
    id integer NOT NULL,
    db_user_type smallint NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'collections_rights'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections_rights ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections_rights ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections_rights ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.collections_rights ALTER COLUMN db_user_type OPTIONS (
    column_name 'db_user_type'
);


ALTER FOREIGN TABLE darwin2_rbins_data.collections_rights OWNER TO darwin2;

--
-- TOC entry 483 (class 1259 OID 1441750)
-- Name: comments; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.comments (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    notion_concerned character varying NOT NULL,
    comment text NOT NULL,
    comment_indexed text NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'comments'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN notion_concerned OPTIONS (
    column_name 'notion_concerned'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.comments ALTER COLUMN comment_indexed OPTIONS (
    column_name 'comment_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.comments OWNER TO darwin2;

--
-- TOC entry 484 (class 1259 OID 1441753)
-- Name: db_version; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.db_version (
    id integer NOT NULL,
    update_at timestamp without time zone
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'db_version'
);
ALTER FOREIGN TABLE darwin2_rbins_data.db_version ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.db_version ALTER COLUMN update_at OPTIONS (
    column_name 'update_at'
);


ALTER FOREIGN TABLE darwin2_rbins_data.db_version OWNER TO darwin2;

--
-- TOC entry 485 (class 1259 OID 1441756)
-- Name: doctrine_gtu_comments; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.doctrine_gtu_comments (
    id integer,
    record_id integer,
    comments text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'doctrine_gtu_comments'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_gtu_comments ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_gtu_comments ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_gtu_comments ALTER COLUMN comments OPTIONS (
    column_name 'comments'
);


ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_gtu_comments OWNER TO darwin2;

--
-- TOC entry 486 (class 1259 OID 1441759)
-- Name: doctrine_taxonomic_identifications; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.doctrine_taxonomic_identifications (
    id integer,
    record_id integer,
    taxonomic_identification text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'doctrine_taxonomic_identifications'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_taxonomic_identifications ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_taxonomic_identifications ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_taxonomic_identifications ALTER COLUMN taxonomic_identification OPTIONS (
    column_name 'taxonomic_identification'
);


ALTER FOREIGN TABLE darwin2_rbins_data.doctrine_taxonomic_identifications OWNER TO darwin2;

--
-- TOC entry 487 (class 1259 OID 1441762)
-- Name: expeditions; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.expeditions (
    id integer NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL,
    expedition_from_date_mask integer NOT NULL,
    expedition_from_date date NOT NULL,
    expedition_to_date_mask integer NOT NULL,
    expedition_to_date date NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'expeditions'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN expedition_from_date_mask OPTIONS (
    column_name 'expedition_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN expedition_from_date OPTIONS (
    column_name 'expedition_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN expedition_to_date_mask OPTIONS (
    column_name 'expedition_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.expeditions ALTER COLUMN expedition_to_date OPTIONS (
    column_name 'expedition_to_date'
);


ALTER FOREIGN TABLE darwin2_rbins_data.expeditions OWNER TO darwin2;

--
-- TOC entry 488 (class 1259 OID 1441765)
-- Name: ext_links; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.ext_links (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    url character varying NOT NULL,
    comment text NOT NULL,
    comment_indexed text NOT NULL,
    type text NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'ext_links'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN url OPTIONS (
    column_name 'url'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN comment_indexed OPTIONS (
    column_name 'comment_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ext_links ALTER COLUMN type OPTIONS (
    column_name 'type'
);


ALTER FOREIGN TABLE darwin2_rbins_data.ext_links OWNER TO darwin2;

--
-- TOC entry 489 (class 1259 OID 1441768)
-- Name: flat_dict; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.flat_dict (
    id integer NOT NULL,
    referenced_relation character varying NOT NULL,
    dict_field character varying NOT NULL,
    dict_value character varying NOT NULL,
    dict_depend character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'flat_dict'
);
ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict ALTER COLUMN dict_field OPTIONS (
    column_name 'dict_field'
);
ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict ALTER COLUMN dict_value OPTIONS (
    column_name 'dict_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict ALTER COLUMN dict_depend OPTIONS (
    column_name 'dict_depend'
);


ALTER FOREIGN TABLE darwin2_rbins_data.flat_dict OWNER TO darwin2;

--
-- TOC entry 490 (class 1259 OID 1441771)
-- Name: gtu; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.gtu (
    id integer NOT NULL,
    code character varying NOT NULL,
    gtu_from_date_mask integer NOT NULL,
    gtu_from_date timestamp without time zone NOT NULL,
    gtu_to_date_mask integer NOT NULL,
    gtu_to_date timestamp without time zone NOT NULL,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    elevation double precision,
    elevation_accuracy double precision,
    location point,
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    collector_refs integer[],
    expedition_refs integer[],
    collection_ref integer,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'gtu'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN tag_values_indexed OPTIONS (
    column_name 'tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN elevation OPTIONS (
    column_name 'elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN elevation_accuracy OPTIONS (
    column_name 'elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN gtu_creation_date OPTIONS (
    column_name 'gtu_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN collector_refs OPTIONS (
    column_name 'collector_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN expedition_refs OPTIONS (
    column_name 'expedition_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude_dms_degree OPTIONS (
    column_name 'latitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude_dms_minutes OPTIONS (
    column_name 'latitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude_dms_seconds OPTIONS (
    column_name 'latitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude_dms_direction OPTIONS (
    column_name 'latitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude_dms_degree OPTIONS (
    column_name 'longitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude_dms_minutes OPTIONS (
    column_name 'longitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude_dms_seconds OPTIONS (
    column_name 'longitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude_dms_direction OPTIONS (
    column_name 'longitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN latitude_utm OPTIONS (
    column_name 'latitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN longitude_utm OPTIONS (
    column_name 'longitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN utm_zone OPTIONS (
    column_name 'utm_zone'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu ALTER COLUMN coordinates_source OPTIONS (
    column_name 'coordinates_source'
);


ALTER FOREIGN TABLE darwin2_rbins_data.gtu OWNER TO darwin2;

--
-- TOC entry 491 (class 1259 OID 1441774)
-- Name: gtu_analyse_normalisation_20181127; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.gtu_analyse_normalisation_20181127 (
    formated_name character varying,
    id integer,
    gtu_id integer[]
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'gtu_analyse_normalisation_20181127'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_analyse_normalisation_20181127 ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_analyse_normalisation_20181127 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_analyse_normalisation_20181127 ALTER COLUMN gtu_id OPTIONS (
    column_name 'gtu_id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.gtu_analyse_normalisation_20181127 OWNER TO darwin2;

--
-- TOC entry 492 (class 1259 OID 1441777)
-- Name: gtu_bck20181123; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 (
    id integer NOT NULL,
    code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    elevation double precision,
    elevation_accuracy double precision,
    location point,
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    collector_refs integer[],
    expedition_refs integer[],
    collection_ref integer,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'gtu_bck20181123'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN tag_values_indexed OPTIONS (
    column_name 'tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN elevation OPTIONS (
    column_name 'elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN elevation_accuracy OPTIONS (
    column_name 'elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN gtu_creation_date OPTIONS (
    column_name 'gtu_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN collector_refs OPTIONS (
    column_name 'collector_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN expedition_refs OPTIONS (
    column_name 'expedition_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude_dms_degree OPTIONS (
    column_name 'latitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude_dms_minutes OPTIONS (
    column_name 'latitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude_dms_seconds OPTIONS (
    column_name 'latitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude_dms_direction OPTIONS (
    column_name 'latitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude_dms_degree OPTIONS (
    column_name 'longitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude_dms_minutes OPTIONS (
    column_name 'longitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude_dms_seconds OPTIONS (
    column_name 'longitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude_dms_direction OPTIONS (
    column_name 'longitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN latitude_utm OPTIONS (
    column_name 'latitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN longitude_utm OPTIONS (
    column_name 'longitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN utm_zone OPTIONS (
    column_name 'utm_zone'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 ALTER COLUMN coordinates_source OPTIONS (
    column_name 'coordinates_source'
);


ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181123 OWNER TO darwin2;

--
-- TOC entry 493 (class 1259 OID 1441780)
-- Name: gtu_bck20181130; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 (
    id integer,
    code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    elevation double precision,
    elevation_accuracy double precision,
    location point,
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    collector_refs integer[],
    expedition_refs integer[],
    collection_ref integer,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'gtu_bck20181130'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN tag_values_indexed OPTIONS (
    column_name 'tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN elevation OPTIONS (
    column_name 'elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN elevation_accuracy OPTIONS (
    column_name 'elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN gtu_creation_date OPTIONS (
    column_name 'gtu_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN collector_refs OPTIONS (
    column_name 'collector_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN expedition_refs OPTIONS (
    column_name 'expedition_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude_dms_degree OPTIONS (
    column_name 'latitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude_dms_minutes OPTIONS (
    column_name 'latitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude_dms_seconds OPTIONS (
    column_name 'latitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude_dms_direction OPTIONS (
    column_name 'latitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude_dms_degree OPTIONS (
    column_name 'longitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude_dms_minutes OPTIONS (
    column_name 'longitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude_dms_seconds OPTIONS (
    column_name 'longitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude_dms_direction OPTIONS (
    column_name 'longitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN latitude_utm OPTIONS (
    column_name 'latitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN longitude_utm OPTIONS (
    column_name 'longitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN utm_zone OPTIONS (
    column_name 'utm_zone'
);
ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 ALTER COLUMN coordinates_source OPTIONS (
    column_name 'coordinates_source'
);


ALTER FOREIGN TABLE darwin2_rbins_data.gtu_bck20181130 OWNER TO darwin2;

--
-- TOC entry 494 (class 1259 OID 1441783)
-- Name: identifications; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.identifications (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    notion_concerned character varying NOT NULL,
    notion_date timestamp without time zone NOT NULL,
    notion_date_mask integer NOT NULL,
    value_defined character varying,
    value_defined_indexed character varying NOT NULL,
    determination_status character varying,
    order_by integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'identifications'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN notion_concerned OPTIONS (
    column_name 'notion_concerned'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN notion_date OPTIONS (
    column_name 'notion_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN notion_date_mask OPTIONS (
    column_name 'notion_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN value_defined OPTIONS (
    column_name 'value_defined'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN value_defined_indexed OPTIONS (
    column_name 'value_defined_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN determination_status OPTIONS (
    column_name 'determination_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.identifications ALTER COLUMN order_by OPTIONS (
    column_name 'order_by'
);


ALTER FOREIGN TABLE darwin2_rbins_data.identifications OWNER TO darwin2;

--
-- TOC entry 495 (class 1259 OID 1441786)
-- Name: igs; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.igs (
    id integer NOT NULL,
    ig_num character varying NOT NULL,
    ig_num_indexed character varying NOT NULL,
    ig_date_mask integer NOT NULL,
    ig_date date NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'igs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.igs ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.igs ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.igs ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.igs ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.igs ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);


ALTER FOREIGN TABLE darwin2_rbins_data.igs OWNER TO darwin2;

--
-- TOC entry 496 (class 1259 OID 1441789)
-- Name: imports; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.imports (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    format character varying NOT NULL,
    collection_ref integer,
    filename character varying NOT NULL,
    state character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone,
    initial_count integer NOT NULL,
    is_finished boolean NOT NULL,
    errors_in_import text,
    template_version text,
    exclude_invalid_entries boolean NOT NULL,
    creation_date date,
    creation_date_mask integer,
    working boolean,
    mime_type character varying,
    gtu_include_date boolean,
    gtu_tags_in_merge boolean,
    source_database character varying,
    sensitive_information_withheld boolean,
    taxonomy_kingdom character varying,
    history_taxonomy public.hstore,
    specimen_taxonomy_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'imports'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN format OPTIONS (
    column_name 'format'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN filename OPTIONS (
    column_name 'filename'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN initial_count OPTIONS (
    column_name 'initial_count'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN is_finished OPTIONS (
    column_name 'is_finished'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN errors_in_import OPTIONS (
    column_name 'errors_in_import'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN template_version OPTIONS (
    column_name 'template_version'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN exclude_invalid_entries OPTIONS (
    column_name 'exclude_invalid_entries'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN creation_date_mask OPTIONS (
    column_name 'creation_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN working OPTIONS (
    column_name 'working'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN mime_type OPTIONS (
    column_name 'mime_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN gtu_include_date OPTIONS (
    column_name 'gtu_include_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN gtu_tags_in_merge OPTIONS (
    column_name 'gtu_tags_in_merge'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN source_database OPTIONS (
    column_name 'source_database'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN sensitive_information_withheld OPTIONS (
    column_name 'sensitive_information_withheld'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN taxonomy_kingdom OPTIONS (
    column_name 'taxonomy_kingdom'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN history_taxonomy OPTIONS (
    column_name 'history_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.imports ALTER COLUMN specimen_taxonomy_ref OPTIONS (
    column_name 'specimen_taxonomy_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.imports OWNER TO darwin2;

--
-- TOC entry 497 (class 1259 OID 1441792)
-- Name: informative_workflow; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.informative_workflow (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    user_ref integer,
    status character varying NOT NULL,
    modification_date_time timestamp without time zone NOT NULL,
    comment character varying,
    formated_name character varying NOT NULL,
    is_last boolean NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'informative_workflow'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow ALTER COLUMN is_last OPTIONS (
    column_name 'is_last'
);


ALTER FOREIGN TABLE darwin2_rbins_data.informative_workflow OWNER TO darwin2;

--
-- TOC entry 498 (class 1259 OID 1441795)
-- Name: insurances; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.insurances (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    insurance_value numeric(16,2) NOT NULL,
    insurance_currency character varying NOT NULL,
    insurer_ref integer,
    date_from_mask integer NOT NULL,
    date_from date NOT NULL,
    date_to_mask integer NOT NULL,
    date_to date NOT NULL,
    contact_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'insurances'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN insurance_value OPTIONS (
    column_name 'insurance_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN insurance_currency OPTIONS (
    column_name 'insurance_currency'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN insurer_ref OPTIONS (
    column_name 'insurer_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN date_from_mask OPTIONS (
    column_name 'date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN date_from OPTIONS (
    column_name 'date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN date_to_mask OPTIONS (
    column_name 'date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN date_to OPTIONS (
    column_name 'date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.insurances ALTER COLUMN contact_ref OPTIONS (
    column_name 'contact_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.insurances OWNER TO darwin2;

--
-- TOC entry 499 (class 1259 OID 1441798)
-- Name: lithology; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.lithology (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer,
    id integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'lithology'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithology ALTER COLUMN id OPTIONS (
    column_name 'id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.lithology OWNER TO darwin2;

--
-- TOC entry 500 (class 1259 OID 1441801)
-- Name: lithostratigraphy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.lithostratigraphy (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer,
    id integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'lithostratigraphy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy ALTER COLUMN id OPTIONS (
    column_name 'id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.lithostratigraphy OWNER TO darwin2;

--
-- TOC entry 501 (class 1259 OID 1441804)
-- Name: loan_history; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.loan_history (
    id integer NOT NULL,
    loan_ref integer NOT NULL,
    referenced_table text NOT NULL,
    modification_date_time timestamp without time zone NOT NULL,
    record_line public.hstore
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'loan_history'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_history ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_history ALTER COLUMN loan_ref OPTIONS (
    column_name 'loan_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_history ALTER COLUMN referenced_table OPTIONS (
    column_name 'referenced_table'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_history ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_history ALTER COLUMN record_line OPTIONS (
    column_name 'record_line'
);


ALTER FOREIGN TABLE darwin2_rbins_data.loan_history OWNER TO darwin2;

--
-- TOC entry 502 (class 1259 OID 1441807)
-- Name: loan_items; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.loan_items (
    id integer NOT NULL,
    loan_ref integer NOT NULL,
    ig_ref integer,
    from_date date,
    to_date date,
    specimen_ref integer,
    details character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'loan_items'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN loan_ref OPTIONS (
    column_name 'loan_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN from_date OPTIONS (
    column_name 'from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN to_date OPTIONS (
    column_name 'to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN specimen_ref OPTIONS (
    column_name 'specimen_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_items ALTER COLUMN details OPTIONS (
    column_name 'details'
);


ALTER FOREIGN TABLE darwin2_rbins_data.loan_items OWNER TO darwin2;

--
-- TOC entry 503 (class 1259 OID 1441810)
-- Name: loan_rights; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.loan_rights (
    id integer NOT NULL,
    loan_ref integer NOT NULL,
    user_ref integer NOT NULL,
    has_encoding_right boolean NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'loan_rights'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_rights ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_rights ALTER COLUMN loan_ref OPTIONS (
    column_name 'loan_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_rights ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_rights ALTER COLUMN has_encoding_right OPTIONS (
    column_name 'has_encoding_right'
);


ALTER FOREIGN TABLE darwin2_rbins_data.loan_rights OWNER TO darwin2;

--
-- TOC entry 504 (class 1259 OID 1441813)
-- Name: loan_status; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.loan_status (
    id integer NOT NULL,
    loan_ref integer NOT NULL,
    user_ref integer NOT NULL,
    status character varying NOT NULL,
    modification_date_time timestamp without time zone NOT NULL,
    comment character varying NOT NULL,
    is_last boolean NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'loan_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN loan_ref OPTIONS (
    column_name 'loan_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loan_status ALTER COLUMN is_last OPTIONS (
    column_name 'is_last'
);


ALTER FOREIGN TABLE darwin2_rbins_data.loan_status OWNER TO darwin2;

--
-- TOC entry 505 (class 1259 OID 1441816)
-- Name: loans; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.loans (
    id integer NOT NULL,
    name character varying NOT NULL,
    description character varying NOT NULL,
    from_date date,
    to_date date,
    extended_to_date date,
    search_indexed text NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'loans'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN description OPTIONS (
    column_name 'description'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN from_date OPTIONS (
    column_name 'from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN to_date OPTIONS (
    column_name 'to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN extended_to_date OPTIONS (
    column_name 'extended_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.loans ALTER COLUMN search_indexed OPTIONS (
    column_name 'search_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.loans OWNER TO darwin2;

--
-- TOC entry 506 (class 1259 OID 1441819)
-- Name: mineralogy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.mineralogy (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer,
    id integer NOT NULL,
    code character varying NOT NULL,
    classification character varying NOT NULL,
    formule character varying,
    formule_indexed character varying,
    cristal_system character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'mineralogy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN classification OPTIONS (
    column_name 'classification'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN formule OPTIONS (
    column_name 'formule'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN formule_indexed OPTIONS (
    column_name 'formule_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy ALTER COLUMN cristal_system OPTIONS (
    column_name 'cristal_system'
);


ALTER FOREIGN TABLE darwin2_rbins_data.mineralogy OWNER TO darwin2;

--
-- TOC entry 507 (class 1259 OID 1441822)
-- Name: multimedia; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.multimedia (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    is_digital boolean NOT NULL,
    type character varying NOT NULL,
    sub_type character varying,
    title character varying NOT NULL,
    description character varying NOT NULL,
    uri character varying,
    filename character varying,
    creation_date date NOT NULL,
    creation_date_mask integer NOT NULL,
    mime_type character varying NOT NULL,
    visible boolean NOT NULL,
    publishable boolean NOT NULL,
    search_indexed text NOT NULL,
    extracted_info text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'multimedia'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN is_digital OPTIONS (
    column_name 'is_digital'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN sub_type OPTIONS (
    column_name 'sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN description OPTIONS (
    column_name 'description'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN uri OPTIONS (
    column_name 'uri'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN filename OPTIONS (
    column_name 'filename'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN creation_date_mask OPTIONS (
    column_name 'creation_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN mime_type OPTIONS (
    column_name 'mime_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN visible OPTIONS (
    column_name 'visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN publishable OPTIONS (
    column_name 'publishable'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN search_indexed OPTIONS (
    column_name 'search_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia ALTER COLUMN extracted_info OPTIONS (
    column_name 'extracted_info'
);


ALTER FOREIGN TABLE darwin2_rbins_data.multimedia OWNER TO darwin2;

--
-- TOC entry 508 (class 1259 OID 1441825)
-- Name: multimedia_todelete; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.multimedia_todelete (
    id integer NOT NULL,
    uri text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'multimedia_todelete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia_todelete ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.multimedia_todelete ALTER COLUMN uri OPTIONS (
    column_name 'uri'
);


ALTER FOREIGN TABLE darwin2_rbins_data.multimedia_todelete OWNER TO darwin2;

--
-- TOC entry 509 (class 1259 OID 1441828)
-- Name: my_saved_searches; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.my_saved_searches (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    name character varying NOT NULL,
    search_criterias character varying NOT NULL,
    favorite boolean NOT NULL,
    modification_date_time timestamp without time zone NOT NULL,
    visible_fields_in_result character varying NOT NULL,
    is_only_id boolean NOT NULL,
    subject character varying NOT NULL,
    query_where character varying,
    query_parameters character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'my_saved_searches'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN search_criterias OPTIONS (
    column_name 'search_criterias'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN favorite OPTIONS (
    column_name 'favorite'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN visible_fields_in_result OPTIONS (
    column_name 'visible_fields_in_result'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN is_only_id OPTIONS (
    column_name 'is_only_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN subject OPTIONS (
    column_name 'subject'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN query_where OPTIONS (
    column_name 'query_where'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches ALTER COLUMN query_parameters OPTIONS (
    column_name 'query_parameters'
);


ALTER FOREIGN TABLE darwin2_rbins_data.my_saved_searches OWNER TO darwin2;

--
-- TOC entry 510 (class 1259 OID 1441831)
-- Name: my_widgets; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.my_widgets (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    category character varying NOT NULL,
    group_name character varying NOT NULL,
    order_by smallint NOT NULL,
    col_num smallint NOT NULL,
    mandatory boolean NOT NULL,
    visible boolean NOT NULL,
    opened boolean NOT NULL,
    color character varying NOT NULL,
    is_available boolean NOT NULL,
    icon_ref integer,
    title_perso character varying(32),
    collections character varying NOT NULL,
    all_public boolean NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'my_widgets'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN order_by OPTIONS (
    column_name 'order_by'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN col_num OPTIONS (
    column_name 'col_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN mandatory OPTIONS (
    column_name 'mandatory'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN visible OPTIONS (
    column_name 'visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN opened OPTIONS (
    column_name 'opened'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN is_available OPTIONS (
    column_name 'is_available'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN icon_ref OPTIONS (
    column_name 'icon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN title_perso OPTIONS (
    column_name 'title_perso'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN collections OPTIONS (
    column_name 'collections'
);
ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets ALTER COLUMN all_public OPTIONS (
    column_name 'all_public'
);


ALTER FOREIGN TABLE darwin2_rbins_data.my_widgets OWNER TO darwin2;

--
-- TOC entry 511 (class 1259 OID 1441834)
-- Name: old_multimedia; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.old_multimedia (
    id integer NOT NULL,
    is_digital boolean NOT NULL,
    type character varying NOT NULL,
    sub_type character varying,
    title character varying NOT NULL,
    title_indexed character varying NOT NULL,
    subject character varying NOT NULL,
    coverage darwin2.coverages NOT NULL,
    apercu_path character varying,
    copyright character varying,
    license character varying,
    uri character varying,
    descriptive_ts tsvector NOT NULL,
    descriptive_language_full_text darwin2.full_text_language,
    creation_date date NOT NULL,
    creation_date_mask integer NOT NULL,
    publication_date_from date NOT NULL,
    publication_date_from_mask integer NOT NULL,
    publication_date_to date NOT NULL,
    publication_date_to_mask integer NOT NULL,
    parent_ref integer,
    path character varying NOT NULL,
    mime_type character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'old_multimedia'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN is_digital OPTIONS (
    column_name 'is_digital'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN sub_type OPTIONS (
    column_name 'sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN title_indexed OPTIONS (
    column_name 'title_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN subject OPTIONS (
    column_name 'subject'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN coverage OPTIONS (
    column_name 'coverage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN apercu_path OPTIONS (
    column_name 'apercu_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN copyright OPTIONS (
    column_name 'copyright'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN license OPTIONS (
    column_name 'license'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN uri OPTIONS (
    column_name 'uri'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN descriptive_ts OPTIONS (
    column_name 'descriptive_ts'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN descriptive_language_full_text OPTIONS (
    column_name 'descriptive_language_full_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN creation_date_mask OPTIONS (
    column_name 'creation_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN publication_date_from OPTIONS (
    column_name 'publication_date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN publication_date_from_mask OPTIONS (
    column_name 'publication_date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN publication_date_to OPTIONS (
    column_name 'publication_date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN publication_date_to_mask OPTIONS (
    column_name 'publication_date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia ALTER COLUMN mime_type OPTIONS (
    column_name 'mime_type'
);


ALTER FOREIGN TABLE darwin2_rbins_data.old_multimedia OWNER TO darwin2;

--
-- TOC entry 512 (class 1259 OID 1441837)
-- Name: people; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.people (
    is_physical boolean NOT NULL,
    sub_type character varying,
    formated_name character varying NOT NULL,
    formated_name_indexed character varying NOT NULL,
    formated_name_unique character varying NOT NULL,
    title character varying NOT NULL,
    family_name character varying NOT NULL,
    given_name character varying,
    additional_names character varying,
    birth_date_mask integer NOT NULL,
    birth_date date NOT NULL,
    gender character(1),
    id integer NOT NULL,
    db_people_type integer NOT NULL,
    end_date_mask integer NOT NULL,
    end_date date NOT NULL,
    activity_date_from_mask integer NOT NULL,
    activity_date_from date NOT NULL,
    activity_date_to_mask integer NOT NULL,
    activity_date_to date NOT NULL,
    name_formated_indexed text NOT NULL,
    import_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'people'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN is_physical OPTIONS (
    column_name 'is_physical'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN sub_type OPTIONS (
    column_name 'sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN formated_name_indexed OPTIONS (
    column_name 'formated_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN formated_name_unique OPTIONS (
    column_name 'formated_name_unique'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN family_name OPTIONS (
    column_name 'family_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN given_name OPTIONS (
    column_name 'given_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN additional_names OPTIONS (
    column_name 'additional_names'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN birth_date_mask OPTIONS (
    column_name 'birth_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN birth_date OPTIONS (
    column_name 'birth_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN gender OPTIONS (
    column_name 'gender'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN db_people_type OPTIONS (
    column_name 'db_people_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN end_date_mask OPTIONS (
    column_name 'end_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN end_date OPTIONS (
    column_name 'end_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN activity_date_from_mask OPTIONS (
    column_name 'activity_date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN activity_date_from OPTIONS (
    column_name 'activity_date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN activity_date_to_mask OPTIONS (
    column_name 'activity_date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN activity_date_to OPTIONS (
    column_name 'activity_date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN name_formated_indexed OPTIONS (
    column_name 'name_formated_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.people OWNER TO darwin2;

--
-- TOC entry 513 (class 1259 OID 1441840)
-- Name: people_addresses; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.people_addresses (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL,
    po_box character varying,
    extended_address character varying,
    locality character varying NOT NULL,
    region character varying,
    zip_code character varying,
    country character varying NOT NULL,
    id integer NOT NULL,
    tag character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'people_addresses'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN person_user_ref OPTIONS (
    column_name 'person_user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN entry OPTIONS (
    column_name 'entry'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN po_box OPTIONS (
    column_name 'po_box'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN extended_address OPTIONS (
    column_name 'extended_address'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN locality OPTIONS (
    column_name 'locality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN region OPTIONS (
    column_name 'region'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN zip_code OPTIONS (
    column_name 'zip_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN country OPTIONS (
    column_name 'country'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses ALTER COLUMN tag OPTIONS (
    column_name 'tag'
);


ALTER FOREIGN TABLE darwin2_rbins_data.people_addresses OWNER TO darwin2;

--
-- TOC entry 514 (class 1259 OID 1441843)
-- Name: people_comm; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.people_comm (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL,
    id integer NOT NULL,
    comm_type character varying NOT NULL,
    tag character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'people_comm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_comm ALTER COLUMN person_user_ref OPTIONS (
    column_name 'person_user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_comm ALTER COLUMN entry OPTIONS (
    column_name 'entry'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_comm ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_comm ALTER COLUMN comm_type OPTIONS (
    column_name 'comm_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_comm ALTER COLUMN tag OPTIONS (
    column_name 'tag'
);


ALTER FOREIGN TABLE darwin2_rbins_data.people_comm OWNER TO darwin2;

--
-- TOC entry 515 (class 1259 OID 1441846)
-- Name: people_languages; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.people_languages (
    language_country character varying NOT NULL,
    mother boolean NOT NULL,
    preferred_language boolean NOT NULL,
    id integer NOT NULL,
    people_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'people_languages'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_languages ALTER COLUMN language_country OPTIONS (
    column_name 'language_country'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_languages ALTER COLUMN mother OPTIONS (
    column_name 'mother'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_languages ALTER COLUMN preferred_language OPTIONS (
    column_name 'preferred_language'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_languages ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_languages ALTER COLUMN people_ref OPTIONS (
    column_name 'people_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.people_languages OWNER TO darwin2;

--
-- TOC entry 516 (class 1259 OID 1441849)
-- Name: people_relationships; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.people_relationships (
    person_user_role character varying,
    id integer NOT NULL,
    relationship_type character varying NOT NULL,
    person_1_ref integer NOT NULL,
    person_2_ref integer NOT NULL,
    path character varying,
    activity_date_from_mask integer NOT NULL,
    activity_date_from date NOT NULL,
    activity_date_to_mask integer NOT NULL,
    activity_date_to date NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'people_relationships'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN person_user_role OPTIONS (
    column_name 'person_user_role'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN relationship_type OPTIONS (
    column_name 'relationship_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN person_1_ref OPTIONS (
    column_name 'person_1_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN person_2_ref OPTIONS (
    column_name 'person_2_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN activity_date_from_mask OPTIONS (
    column_name 'activity_date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN activity_date_from OPTIONS (
    column_name 'activity_date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN activity_date_to_mask OPTIONS (
    column_name 'activity_date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships ALTER COLUMN activity_date_to OPTIONS (
    column_name 'activity_date_to'
);


ALTER FOREIGN TABLE darwin2_rbins_data.people_relationships OWNER TO darwin2;

--
-- TOC entry 517 (class 1259 OID 1441852)
-- Name: possible_upper_levels; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.possible_upper_levels (
    level_ref integer NOT NULL,
    level_upper_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'possible_upper_levels'
);
ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels ALTER COLUMN level_upper_ref OPTIONS (
    column_name 'level_upper_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels OWNER TO darwin2;

--
-- TOC entry 518 (class 1259 OID 1441855)
-- Name: possible_upper_levels_20180924_before_rmca_merge; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.possible_upper_levels_20180924_before_rmca_merge (
    level_ref integer,
    level_upper_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'possible_upper_levels_20180924_before_rmca_merge'
);
ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels_20180924_before_rmca_merge ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels_20180924_before_rmca_merge ALTER COLUMN level_upper_ref OPTIONS (
    column_name 'level_upper_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.possible_upper_levels_20180924_before_rmca_merge OWNER TO darwin2;

--
-- TOC entry 519 (class 1259 OID 1441858)
-- Name: preferences; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.preferences (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    pref_key character varying NOT NULL,
    pref_value character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'preferences'
);
ALTER FOREIGN TABLE darwin2_rbins_data.preferences ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.preferences ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.preferences ALTER COLUMN pref_key OPTIONS (
    column_name 'pref_key'
);
ALTER FOREIGN TABLE darwin2_rbins_data.preferences ALTER COLUMN pref_value OPTIONS (
    column_name 'pref_value'
);


ALTER FOREIGN TABLE darwin2_rbins_data.preferences OWNER TO darwin2;

--
-- TOC entry 520 (class 1259 OID 1441861)
-- Name: properties; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.properties (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    property_type character varying NOT NULL,
    applies_to character varying NOT NULL,
    applies_to_indexed character varying NOT NULL,
    date_from_mask integer NOT NULL,
    date_from timestamp without time zone NOT NULL,
    date_to_mask integer NOT NULL,
    date_to timestamp without time zone NOT NULL,
    is_quantitative boolean NOT NULL,
    property_unit character varying NOT NULL,
    method character varying,
    method_indexed character varying NOT NULL,
    lower_value character varying NOT NULL,
    lower_value_unified double precision,
    upper_value character varying NOT NULL,
    upper_value_unified double precision,
    property_accuracy character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'properties'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN property_type OPTIONS (
    column_name 'property_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN applies_to OPTIONS (
    column_name 'applies_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN applies_to_indexed OPTIONS (
    column_name 'applies_to_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN date_from_mask OPTIONS (
    column_name 'date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN date_from OPTIONS (
    column_name 'date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN date_to_mask OPTIONS (
    column_name 'date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN date_to OPTIONS (
    column_name 'date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN is_quantitative OPTIONS (
    column_name 'is_quantitative'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN property_unit OPTIONS (
    column_name 'property_unit'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN method_indexed OPTIONS (
    column_name 'method_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN lower_value OPTIONS (
    column_name 'lower_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN lower_value_unified OPTIONS (
    column_name 'lower_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN upper_value OPTIONS (
    column_name 'upper_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN upper_value_unified OPTIONS (
    column_name 'upper_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties ALTER COLUMN property_accuracy OPTIONS (
    column_name 'property_accuracy'
);


ALTER FOREIGN TABLE darwin2_rbins_data.properties OWNER TO darwin2;

--
-- TOC entry 521 (class 1259 OID 1441864)
-- Name: properties_bck20180731_fix_colmate_dates; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates (
    referenced_relation character varying,
    record_id integer,
    id integer,
    property_type character varying,
    applies_to character varying,
    applies_to_indexed character varying,
    date_from_mask integer,
    date_from timestamp without time zone,
    date_to_mask integer,
    date_to timestamp without time zone,
    is_quantitative boolean,
    property_unit character varying,
    method character varying,
    method_indexed character varying,
    lower_value character varying,
    lower_value_unified double precision,
    upper_value character varying,
    upper_value_unified double precision,
    property_accuracy character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'properties_bck20180731_fix_colmate_dates'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN property_type OPTIONS (
    column_name 'property_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN applies_to OPTIONS (
    column_name 'applies_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN applies_to_indexed OPTIONS (
    column_name 'applies_to_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN date_from_mask OPTIONS (
    column_name 'date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN date_from OPTIONS (
    column_name 'date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN date_to_mask OPTIONS (
    column_name 'date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN date_to OPTIONS (
    column_name 'date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN is_quantitative OPTIONS (
    column_name 'is_quantitative'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN property_unit OPTIONS (
    column_name 'property_unit'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN method_indexed OPTIONS (
    column_name 'method_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN lower_value OPTIONS (
    column_name 'lower_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN lower_value_unified OPTIONS (
    column_name 'lower_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN upper_value OPTIONS (
    column_name 'upper_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN upper_value_unified OPTIONS (
    column_name 'upper_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates ALTER COLUMN property_accuracy OPTIONS (
    column_name 'property_accuracy'
);


ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20180731_fix_colmate_dates OWNER TO darwin2;

--
-- TOC entry 522 (class 1259 OID 1441867)
-- Name: properties_bck20181127; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 (
    referenced_relation character varying,
    record_id integer,
    id integer,
    property_type character varying,
    applies_to character varying,
    applies_to_indexed character varying,
    date_from_mask integer,
    date_from timestamp without time zone,
    date_to_mask integer,
    date_to timestamp without time zone,
    is_quantitative boolean,
    property_unit character varying,
    method character varying,
    method_indexed character varying,
    lower_value character varying,
    lower_value_unified double precision,
    upper_value character varying,
    upper_value_unified double precision,
    property_accuracy character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'properties_bck20181127'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN property_type OPTIONS (
    column_name 'property_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN applies_to OPTIONS (
    column_name 'applies_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN applies_to_indexed OPTIONS (
    column_name 'applies_to_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN date_from_mask OPTIONS (
    column_name 'date_from_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN date_from OPTIONS (
    column_name 'date_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN date_to_mask OPTIONS (
    column_name 'date_to_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN date_to OPTIONS (
    column_name 'date_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN is_quantitative OPTIONS (
    column_name 'is_quantitative'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN property_unit OPTIONS (
    column_name 'property_unit'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN method_indexed OPTIONS (
    column_name 'method_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN lower_value OPTIONS (
    column_name 'lower_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN lower_value_unified OPTIONS (
    column_name 'lower_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN upper_value OPTIONS (
    column_name 'upper_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN upper_value_unified OPTIONS (
    column_name 'upper_value_unified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 ALTER COLUMN property_accuracy OPTIONS (
    column_name 'property_accuracy'
);


ALTER FOREIGN TABLE darwin2_rbins_data.properties_bck20181127 OWNER TO darwin2;

--
-- TOC entry 523 (class 1259 OID 1441870)
-- Name: query_result; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.query_result (
    id text,
    collection_code character varying,
    code text,
    additional_codes text,
    ig_num character varying,
    taxon_name text,
    author text,
    full_scientific_name text,
    family text,
    type text,
    specimen_count_min integer,
    specimen_count_max integer,
    identifiers text,
    abbreviated_identifiers text,
    identification_year text,
    longitude double precision,
    latitude double precision,
    longitude_text character varying,
    latitude_text character varying,
    gtu_country_tag_value character varying,
    municipality text,
    region_district text,
    exact_site text,
    ecology text,
    gtu_others_tag_value character varying,
    gtu_code character varying,
    gtu_elevation double precision,
    collecting_year_from double precision,
    collecting_month_from double precision,
    collecting_day_from double precision,
    collecting_year_to double precision,
    collecting_month_to double precision,
    collecting_day_to double precision,
    properties_locality text,
    collectors text,
    abbreviated_collectors text,
    expedition_name character varying,
    donators text,
    abbreviated_donators text,
    acquisition_category character varying,
    acquisition_date text,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    specimen_part character varying,
    complete boolean,
    object_name text,
    specimen_status character varying,
    container_storage character varying,
    method text,
    tool text,
    comment text,
    properties_all text,
    specimen_creation_date timestamp without time zone
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'query_result'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN additional_codes OPTIONS (
    column_name 'additional_codes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN author OPTIONS (
    column_name 'author'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN full_scientific_name OPTIONS (
    column_name 'full_scientific_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN family OPTIONS (
    column_name 'family'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN identifiers OPTIONS (
    column_name 'identifiers'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN abbreviated_identifiers OPTIONS (
    column_name 'abbreviated_identifiers'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN identification_year OPTIONS (
    column_name 'identification_year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN longitude_text OPTIONS (
    column_name 'longitude_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN latitude_text OPTIONS (
    column_name 'latitude_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN municipality OPTIONS (
    column_name 'municipality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN region_district OPTIONS (
    column_name 'region_district'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN exact_site OPTIONS (
    column_name 'exact_site'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN ecology OPTIONS (
    column_name 'ecology'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_year_from OPTIONS (
    column_name 'collecting_year_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_month_from OPTIONS (
    column_name 'collecting_month_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_day_from OPTIONS (
    column_name 'collecting_day_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_year_to OPTIONS (
    column_name 'collecting_year_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_month_to OPTIONS (
    column_name 'collecting_month_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collecting_day_to OPTIONS (
    column_name 'collecting_day_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN properties_locality OPTIONS (
    column_name 'properties_locality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN collectors OPTIONS (
    column_name 'collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN abbreviated_collectors OPTIONS (
    column_name 'abbreviated_collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN donators OPTIONS (
    column_name 'donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN abbreviated_donators OPTIONS (
    column_name 'abbreviated_donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN tool OPTIONS (
    column_name 'tool'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN properties_all OPTIONS (
    column_name 'properties_all'
);
ALTER FOREIGN TABLE darwin2_rbins_data.query_result ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);


ALTER FOREIGN TABLE darwin2_rbins_data.query_result OWNER TO darwin2;

--
-- TOC entry 524 (class 1259 OID 1441873)
-- Name: ref_rec; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.ref_rec (
    id integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'ref_rec'
);
ALTER FOREIGN TABLE darwin2_rbins_data.ref_rec ALTER COLUMN id OPTIONS (
    column_name 'id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.ref_rec OWNER TO darwin2;

--
-- TOC entry 525 (class 1259 OID 1441876)
-- Name: reports; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.reports (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    name character varying NOT NULL,
    uri character varying,
    lang character(2) NOT NULL,
    format character varying NOT NULL,
    comment character varying,
    parameters public.hstore
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'reports'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN uri OPTIONS (
    column_name 'uri'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN lang OPTIONS (
    column_name 'lang'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN format OPTIONS (
    column_name 'format'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.reports ALTER COLUMN parameters OPTIONS (
    column_name 'parameters'
);


ALTER FOREIGN TABLE darwin2_rbins_data.reports OWNER TO darwin2;

--
-- TOC entry 526 (class 1259 OID 1441879)
-- Name: specimen_collecting_methods; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimen_collecting_methods (
    id integer NOT NULL,
    specimen_ref integer NOT NULL,
    collecting_method_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimen_collecting_methods'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_methods ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_methods ALTER COLUMN specimen_ref OPTIONS (
    column_name 'specimen_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_methods ALTER COLUMN collecting_method_ref OPTIONS (
    column_name 'collecting_method_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_methods OWNER TO darwin2;

--
-- TOC entry 527 (class 1259 OID 1441882)
-- Name: specimen_collecting_tools; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimen_collecting_tools (
    id integer NOT NULL,
    specimen_ref integer NOT NULL,
    collecting_tool_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimen_collecting_tools'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_tools ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_tools ALTER COLUMN specimen_ref OPTIONS (
    column_name 'specimen_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_tools ALTER COLUMN collecting_tool_ref OPTIONS (
    column_name 'collecting_tool_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimen_collecting_tools OWNER TO darwin2;

--
-- TOC entry 528 (class 1259 OID 1441885)
-- Name: specimens_bck20181203; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 (
    id integer,
    category character varying,
    collection_ref integer,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    station_visible boolean,
    ig_ref integer,
    type character varying,
    type_group character varying,
    type_search character varying,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    rock_form character varying,
    specimen_part character varying,
    complete boolean,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying,
    sub_container_type character varying,
    container_storage character varying,
    sub_container_storage character varying,
    surnumerary boolean,
    specimen_status character varying,
    specimen_count_min integer,
    specimen_count_max integer,
    object_name text,
    object_name_indexed text,
    spec_ident_ids integer[],
    spec_coll_ids integer[],
    spec_don_sel_ids integer[],
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point,
    specimen_creation_date timestamp without time zone,
    import_ref integer,
    main_code_indexed character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimens_bck20181203'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN type_group OPTIONS (
    column_name 'type_group'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN type_search OPTIONS (
    column_name 'type_search'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN rock_form OPTIONS (
    column_name 'rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN object_name_indexed OPTIONS (
    column_name 'object_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN spec_ident_ids OPTIONS (
    column_name 'spec_ident_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN spec_coll_ids OPTIONS (
    column_name 'spec_coll_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN spec_don_sel_ids OPTIONS (
    column_name 'spec_don_sel_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_is_public OPTIONS (
    column_name 'collection_is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_parent_ref OPTIONS (
    column_name 'collection_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN expedition_name_indexed OPTIONS (
    column_name 'expedition_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_tag_values_indexed OPTIONS (
    column_name 'gtu_tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_country_tag_indexed OPTIONS (
    column_name 'gtu_country_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_province_tag_indexed OPTIONS (
    column_name 'gtu_province_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_others_tag_indexed OPTIONS (
    column_name 'gtu_others_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_name_indexed OPTIONS (
    column_name 'taxon_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_parent_ref OPTIONS (
    column_name 'taxon_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_name_indexed OPTIONS (
    column_name 'litho_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_path OPTIONS (
    column_name 'litho_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN litho_parent_ref OPTIONS (
    column_name 'litho_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_name_indexed OPTIONS (
    column_name 'chrono_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_path OPTIONS (
    column_name 'chrono_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN chrono_parent_ref OPTIONS (
    column_name 'chrono_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_name_indexed OPTIONS (
    column_name 'lithology_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_path OPTIONS (
    column_name 'lithology_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN lithology_parent_ref OPTIONS (
    column_name 'lithology_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_name_indexed OPTIONS (
    column_name 'mineral_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN mineral_parent_ref OPTIONS (
    column_name 'mineral_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN gtu_location OPTIONS (
    column_name 'gtu_location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 ALTER COLUMN main_code_indexed OPTIONS (
    column_name 'main_code_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181203 OWNER TO darwin2;

--
-- TOC entry 529 (class 1259 OID 1441888)
-- Name: specimens_bck20181212; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 (
    id integer,
    category character varying,
    collection_ref integer,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    station_visible boolean,
    ig_ref integer,
    type character varying,
    type_group character varying,
    type_search character varying,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    rock_form character varying,
    specimen_part character varying,
    complete boolean,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying,
    sub_container_type character varying,
    container_storage character varying,
    sub_container_storage character varying,
    surnumerary boolean,
    specimen_status character varying,
    specimen_count_min integer,
    specimen_count_max integer,
    object_name text,
    object_name_indexed text,
    spec_ident_ids integer[],
    spec_coll_ids integer[],
    spec_don_sel_ids integer[],
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point,
    specimen_creation_date timestamp without time zone,
    import_ref integer,
    main_code_indexed character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimens_bck20181212'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN type_group OPTIONS (
    column_name 'type_group'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN type_search OPTIONS (
    column_name 'type_search'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN rock_form OPTIONS (
    column_name 'rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN object_name_indexed OPTIONS (
    column_name 'object_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN spec_ident_ids OPTIONS (
    column_name 'spec_ident_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN spec_coll_ids OPTIONS (
    column_name 'spec_coll_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN spec_don_sel_ids OPTIONS (
    column_name 'spec_don_sel_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_is_public OPTIONS (
    column_name 'collection_is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_parent_ref OPTIONS (
    column_name 'collection_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN expedition_name_indexed OPTIONS (
    column_name 'expedition_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_tag_values_indexed OPTIONS (
    column_name 'gtu_tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_country_tag_indexed OPTIONS (
    column_name 'gtu_country_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_province_tag_indexed OPTIONS (
    column_name 'gtu_province_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_others_tag_indexed OPTIONS (
    column_name 'gtu_others_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_name_indexed OPTIONS (
    column_name 'taxon_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_parent_ref OPTIONS (
    column_name 'taxon_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_name_indexed OPTIONS (
    column_name 'litho_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_path OPTIONS (
    column_name 'litho_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN litho_parent_ref OPTIONS (
    column_name 'litho_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_name_indexed OPTIONS (
    column_name 'chrono_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_path OPTIONS (
    column_name 'chrono_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN chrono_parent_ref OPTIONS (
    column_name 'chrono_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_name_indexed OPTIONS (
    column_name 'lithology_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_path OPTIONS (
    column_name 'lithology_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN lithology_parent_ref OPTIONS (
    column_name 'lithology_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_name_indexed OPTIONS (
    column_name 'mineral_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN mineral_parent_ref OPTIONS (
    column_name 'mineral_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN gtu_location OPTIONS (
    column_name 'gtu_location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 ALTER COLUMN main_code_indexed OPTIONS (
    column_name 'main_code_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimens_bck20181212 OWNER TO darwin2;

--
-- TOC entry 530 (class 1259 OID 1441891)
-- Name: specimens_maincodes; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimens_maincodes (
    id integer,
    category character varying,
    collection_ref integer,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    station_visible boolean,
    ig_ref integer,
    type character varying,
    type_group character varying,
    type_search character varying,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    rock_form character varying,
    specimen_part character varying,
    complete boolean,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying,
    sub_container_type character varying,
    container_storage character varying,
    sub_container_storage character varying,
    surnumerary boolean,
    specimen_status character varying,
    specimen_count_min integer,
    specimen_count_max integer,
    object_name text,
    object_name_indexed text,
    spec_ident_ids integer[],
    spec_coll_ids integer[],
    spec_don_sel_ids integer[],
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point,
    specimen_creation_date timestamp without time zone,
    import_ref integer,
    code_main text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimens_maincodes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN type_group OPTIONS (
    column_name 'type_group'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN type_search OPTIONS (
    column_name 'type_search'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN rock_form OPTIONS (
    column_name 'rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN object_name_indexed OPTIONS (
    column_name 'object_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN spec_ident_ids OPTIONS (
    column_name 'spec_ident_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN spec_coll_ids OPTIONS (
    column_name 'spec_coll_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN spec_don_sel_ids OPTIONS (
    column_name 'spec_don_sel_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_is_public OPTIONS (
    column_name 'collection_is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_parent_ref OPTIONS (
    column_name 'collection_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN expedition_name_indexed OPTIONS (
    column_name 'expedition_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_tag_values_indexed OPTIONS (
    column_name 'gtu_tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_country_tag_indexed OPTIONS (
    column_name 'gtu_country_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_province_tag_indexed OPTIONS (
    column_name 'gtu_province_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_others_tag_indexed OPTIONS (
    column_name 'gtu_others_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_name_indexed OPTIONS (
    column_name 'taxon_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_parent_ref OPTIONS (
    column_name 'taxon_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_name_indexed OPTIONS (
    column_name 'litho_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_path OPTIONS (
    column_name 'litho_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN litho_parent_ref OPTIONS (
    column_name 'litho_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_name_indexed OPTIONS (
    column_name 'chrono_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_path OPTIONS (
    column_name 'chrono_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN chrono_parent_ref OPTIONS (
    column_name 'chrono_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_name_indexed OPTIONS (
    column_name 'lithology_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_path OPTIONS (
    column_name 'lithology_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN lithology_parent_ref OPTIONS (
    column_name 'lithology_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_name_indexed OPTIONS (
    column_name 'mineral_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN mineral_parent_ref OPTIONS (
    column_name 'mineral_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN gtu_location OPTIONS (
    column_name 'gtu_location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes ALTER COLUMN code_main OPTIONS (
    column_name 'code_main'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimens_maincodes OWNER TO darwin2;

--
-- TOC entry 531 (class 1259 OID 1441894)
-- Name: specimens_relationships; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.specimens_relationships (
    id integer NOT NULL,
    specimen_ref integer NOT NULL,
    relationship_type character varying NOT NULL,
    unit_type character varying NOT NULL,
    specimen_related_ref integer,
    taxon_ref integer,
    mineral_ref integer,
    institution_ref integer,
    source_name text,
    source_id text,
    quantity numeric(16,2),
    unit character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'specimens_relationships'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN specimen_ref OPTIONS (
    column_name 'specimen_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN relationship_type OPTIONS (
    column_name 'relationship_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN unit_type OPTIONS (
    column_name 'unit_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN specimen_related_ref OPTIONS (
    column_name 'specimen_related_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN source_name OPTIONS (
    column_name 'source_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN source_id OPTIONS (
    column_name 'source_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN quantity OPTIONS (
    column_name 'quantity'
);
ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships ALTER COLUMN unit OPTIONS (
    column_name 'unit'
);


ALTER FOREIGN TABLE darwin2_rbins_data.specimens_relationships OWNER TO darwin2;

--
-- TOC entry 532 (class 1259 OID 1441897)
-- Name: staging; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging (
    id integer NOT NULL,
    import_ref integer NOT NULL,
    spec_ref integer,
    category character varying,
    expedition_ref integer,
    expedition_name character varying,
    expedition_from_date date,
    expedition_from_date_mask integer,
    expedition_to_date date,
    expedition_to_date_mask integer,
    station_visible boolean,
    gtu_ref integer,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_latitude double precision,
    gtu_longitude double precision,
    gtu_lat_long_accuracy double precision,
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_ref integer,
    taxon_name character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_extinct boolean,
    taxon_parents public.hstore,
    litho_ref integer,
    litho_name character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_parents public.hstore,
    chrono_ref integer,
    chrono_name character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_upper_bound numeric(10,3),
    chrono_lower_bound numeric(10,3),
    chrono_parents public.hstore,
    lithology_ref integer,
    lithology_name character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_parents public.hstore,
    mineral_ref integer,
    mineral_name character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parents public.hstore,
    host_taxon_name character varying,
    host_taxon_level_ref integer,
    host_taxon_level_name character varying,
    host_taxon_status character varying,
    ig_ref integer,
    ig_num character varying,
    ig_date_mask integer,
    ig_date date,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    individual_type character varying,
    individual_sex character varying,
    individual_state character varying,
    individual_stage character varying,
    individual_social_status character varying,
    individual_rock_form character varying,
    individual_count_min integer,
    individual_count_max integer,
    collectors text[],
    donators text[],
    part character varying,
    institution_ref integer,
    institution_name character varying,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container_type character varying,
    container_storage character varying,
    container character varying,
    sub_container_type character varying,
    sub_container_storage character varying,
    sub_container character varying,
    part_count_min integer,
    part_count_max integer,
    specimen_status character varying,
    complete boolean,
    surnumerary boolean,
    status public.hstore NOT NULL,
    to_import boolean,
    object_name text,
    create_taxon boolean NOT NULL,
    col text,
    mineral_classification text,
    specimen_taxonomy_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN spec_ref OPTIONS (
    column_name 'spec_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_from_date OPTIONS (
    column_name 'expedition_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_from_date_mask OPTIONS (
    column_name 'expedition_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_to_date OPTIONS (
    column_name 'expedition_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN expedition_to_date_mask OPTIONS (
    column_name 'expedition_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_latitude OPTIONS (
    column_name 'gtu_latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_longitude OPTIONS (
    column_name 'gtu_longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_lat_long_accuracy OPTIONS (
    column_name 'gtu_lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN taxon_parents OPTIONS (
    column_name 'taxon_parents'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN litho_parents OPTIONS (
    column_name 'litho_parents'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_upper_bound OPTIONS (
    column_name 'chrono_upper_bound'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_lower_bound OPTIONS (
    column_name 'chrono_lower_bound'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN chrono_parents OPTIONS (
    column_name 'chrono_parents'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN lithology_parents OPTIONS (
    column_name 'lithology_parents'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_parents OPTIONS (
    column_name 'mineral_parents'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN host_taxon_name OPTIONS (
    column_name 'host_taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN host_taxon_level_ref OPTIONS (
    column_name 'host_taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN host_taxon_level_name OPTIONS (
    column_name 'host_taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN host_taxon_status OPTIONS (
    column_name 'host_taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_type OPTIONS (
    column_name 'individual_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_sex OPTIONS (
    column_name 'individual_sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_state OPTIONS (
    column_name 'individual_state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_stage OPTIONS (
    column_name 'individual_stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_social_status OPTIONS (
    column_name 'individual_social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_rock_form OPTIONS (
    column_name 'individual_rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_count_min OPTIONS (
    column_name 'individual_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN individual_count_max OPTIONS (
    column_name 'individual_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN collectors OPTIONS (
    column_name 'collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN donators OPTIONS (
    column_name 'donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN part OPTIONS (
    column_name 'part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN institution_name OPTIONS (
    column_name 'institution_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN part_count_min OPTIONS (
    column_name 'part_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN part_count_max OPTIONS (
    column_name 'part_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN to_import OPTIONS (
    column_name 'to_import'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN create_taxon OPTIONS (
    column_name 'create_taxon'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN mineral_classification OPTIONS (
    column_name 'mineral_classification'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging ALTER COLUMN specimen_taxonomy_ref OPTIONS (
    column_name 'specimen_taxonomy_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging OWNER TO darwin2;

--
-- TOC entry 533 (class 1259 OID 1441900)
-- Name: staging_catalogue; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_catalogue (
    id integer NOT NULL,
    import_ref integer NOT NULL,
    name character varying NOT NULL,
    level_ref integer,
    parent_ref integer,
    catalogue_ref integer,
    parent_updated boolean,
    is_reference_taxonomy boolean,
    source_taxonomy character varying,
    parent_ref_internal integer,
    hierarchical_conflict boolean
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_catalogue'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN catalogue_ref OPTIONS (
    column_name 'catalogue_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN parent_updated OPTIONS (
    column_name 'parent_updated'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN is_reference_taxonomy OPTIONS (
    column_name 'is_reference_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN source_taxonomy OPTIONS (
    column_name 'source_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN parent_ref_internal OPTIONS (
    column_name 'parent_ref_internal'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue ALTER COLUMN hierarchical_conflict OPTIONS (
    column_name 'hierarchical_conflict'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_catalogue OWNER TO darwin2;

--
-- TOC entry 534 (class 1259 OID 1441903)
-- Name: staging_collecting_methods; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_collecting_methods (
    id integer NOT NULL,
    staging_ref integer NOT NULL,
    collecting_method_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_collecting_methods'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_collecting_methods ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_collecting_methods ALTER COLUMN staging_ref OPTIONS (
    column_name 'staging_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_collecting_methods ALTER COLUMN collecting_method_ref OPTIONS (
    column_name 'collecting_method_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_collecting_methods OWNER TO darwin2;

--
-- TOC entry 535 (class 1259 OID 1441906)
-- Name: staging_gtu; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_gtu (
    id integer NOT NULL,
    import_ref integer,
    status public.hstore NOT NULL,
    date_included boolean NOT NULL,
    tags_merged boolean NOT NULL,
    sensitive_information_withheld boolean NOT NULL,
    gtu_ref integer,
    station_type character varying NOT NULL,
    sampling_code character varying NOT NULL,
    sampling_field_number character varying,
    event_cluster_code character varying,
    event_order integer,
    ig_num character varying,
    ig_num_indexed character varying,
    collections character varying[],
    collectors character varying[],
    expeditions character varying[],
    collection_refs integer[],
    collector_refs integer[],
    expedition_refs integer[],
    iso3166 character varying,
    iso3166_subdivision character varying,
    countries character varying[],
    tags character varying[],
    tags_indexed character varying[],
    locality_text character varying,
    locality_text_indexed character varying,
    ecology_text character varying,
    ecology_text_indexed character varying,
    coordinates_format character varying,
    latitude1 character varying,
    longitude1 character varying,
    latitude2 character varying,
    longitude2 character varying,
    gis_type character varying,
    coordinates_wkt character varying,
    coordinates_datum character varying,
    coordinates_proj_ref integer,
    coordinates_original character varying,
    coordinates_accuracy numeric(15,4),
    coordinates_accuracy_text character varying,
    station_baseline_elevation numeric(10,4),
    station_baseline_accuracy numeric(10,4),
    sampling_elevation_start numeric(10,4),
    sampling_elevation_end numeric(10,4),
    sampling_elevation_accuracy numeric(10,4),
    original_elevation_data character varying,
    sampling_depth_start numeric(10,4),
    sampling_depth_end numeric(10,4),
    sampling_depth_accuracy numeric(10,4),
    original_depth_data character varying,
    collecting_date_begin timestamp without time zone,
    collecting_date_begin_mask character varying,
    collecting_date_end timestamp without time zone,
    collecting_date_end_mask character varying,
    collecting_time_begin time without time zone,
    collecting_time_end time without time zone,
    sampling_method character varying,
    sampling_fixation character varying,
    imported boolean,
    pos_in_file integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_gtu'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN date_included OPTIONS (
    column_name 'date_included'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN tags_merged OPTIONS (
    column_name 'tags_merged'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sensitive_information_withheld OPTIONS (
    column_name 'sensitive_information_withheld'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN station_type OPTIONS (
    column_name 'station_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_code OPTIONS (
    column_name 'sampling_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_field_number OPTIONS (
    column_name 'sampling_field_number'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN event_cluster_code OPTIONS (
    column_name 'event_cluster_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN event_order OPTIONS (
    column_name 'event_order'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collections OPTIONS (
    column_name 'collections'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collectors OPTIONS (
    column_name 'collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN expeditions OPTIONS (
    column_name 'expeditions'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collection_refs OPTIONS (
    column_name 'collection_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collector_refs OPTIONS (
    column_name 'collector_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN expedition_refs OPTIONS (
    column_name 'expedition_refs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN iso3166 OPTIONS (
    column_name 'iso3166'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN iso3166_subdivision OPTIONS (
    column_name 'iso3166_subdivision'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN countries OPTIONS (
    column_name 'countries'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN tags OPTIONS (
    column_name 'tags'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN tags_indexed OPTIONS (
    column_name 'tags_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN locality_text OPTIONS (
    column_name 'locality_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN locality_text_indexed OPTIONS (
    column_name 'locality_text_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN ecology_text OPTIONS (
    column_name 'ecology_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN ecology_text_indexed OPTIONS (
    column_name 'ecology_text_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_format OPTIONS (
    column_name 'coordinates_format'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN latitude1 OPTIONS (
    column_name 'latitude1'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN longitude1 OPTIONS (
    column_name 'longitude1'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN latitude2 OPTIONS (
    column_name 'latitude2'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN longitude2 OPTIONS (
    column_name 'longitude2'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN gis_type OPTIONS (
    column_name 'gis_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_wkt OPTIONS (
    column_name 'coordinates_wkt'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_datum OPTIONS (
    column_name 'coordinates_datum'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_proj_ref OPTIONS (
    column_name 'coordinates_proj_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_original OPTIONS (
    column_name 'coordinates_original'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_accuracy OPTIONS (
    column_name 'coordinates_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN coordinates_accuracy_text OPTIONS (
    column_name 'coordinates_accuracy_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN station_baseline_elevation OPTIONS (
    column_name 'station_baseline_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN station_baseline_accuracy OPTIONS (
    column_name 'station_baseline_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_elevation_start OPTIONS (
    column_name 'sampling_elevation_start'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_elevation_end OPTIONS (
    column_name 'sampling_elevation_end'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_elevation_accuracy OPTIONS (
    column_name 'sampling_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN original_elevation_data OPTIONS (
    column_name 'original_elevation_data'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_depth_start OPTIONS (
    column_name 'sampling_depth_start'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_depth_end OPTIONS (
    column_name 'sampling_depth_end'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_depth_accuracy OPTIONS (
    column_name 'sampling_depth_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN original_depth_data OPTIONS (
    column_name 'original_depth_data'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_date_begin OPTIONS (
    column_name 'collecting_date_begin'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_date_begin_mask OPTIONS (
    column_name 'collecting_date_begin_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_date_end OPTIONS (
    column_name 'collecting_date_end'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_date_end_mask OPTIONS (
    column_name 'collecting_date_end_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_time_begin OPTIONS (
    column_name 'collecting_time_begin'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN collecting_time_end OPTIONS (
    column_name 'collecting_time_end'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_method OPTIONS (
    column_name 'sampling_method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN sampling_fixation OPTIONS (
    column_name 'sampling_fixation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN imported OPTIONS (
    column_name 'imported'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu ALTER COLUMN pos_in_file OPTIONS (
    column_name 'pos_in_file'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu OWNER TO darwin2;

--
-- TOC entry 536 (class 1259 OID 1441909)
-- Name: staging_gtu_tag_groups; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups (
    id integer NOT NULL,
    staging_gtu_ref integer NOT NULL,
    group_name character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    tag_value character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_gtu_tag_groups'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups ALTER COLUMN staging_gtu_ref OPTIONS (
    column_name 'staging_gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups ALTER COLUMN sub_group_name OPTIONS (
    column_name 'sub_group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups ALTER COLUMN tag_value OPTIONS (
    column_name 'tag_value'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_gtu_tag_groups OWNER TO darwin2;

--
-- TOC entry 537 (class 1259 OID 1441912)
-- Name: staging_info; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_info (
    id integer NOT NULL,
    staging_ref integer NOT NULL,
    referenced_relation character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_info'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_info ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_info ALTER COLUMN staging_ref OPTIONS (
    column_name 'staging_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_info ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_info OWNER TO darwin2;

--
-- TOC entry 538 (class 1259 OID 1441915)
-- Name: staging_people; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_people (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    people_type character varying NOT NULL,
    people_sub_type character varying NOT NULL,
    order_by integer NOT NULL,
    people_ref integer,
    formated_name character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_people'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN people_type OPTIONS (
    column_name 'people_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN people_sub_type OPTIONS (
    column_name 'people_sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN order_by OPTIONS (
    column_name 'order_by'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN people_ref OPTIONS (
    column_name 'people_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_people ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_people OWNER TO darwin2;

--
-- TOC entry 539 (class 1259 OID 1441918)
-- Name: staging_relationship; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_relationship (
    id integer NOT NULL,
    record_id integer NOT NULL,
    referenced_relation character varying NOT NULL,
    relationship_type character varying,
    staging_related_ref integer,
    taxon_ref integer,
    mineral_ref integer,
    institution_ref integer,
    institution_name text,
    source_name text,
    source_id text,
    quantity numeric(16,2),
    unit character varying,
    unit_type character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_relationship'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN relationship_type OPTIONS (
    column_name 'relationship_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN staging_related_ref OPTIONS (
    column_name 'staging_related_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN institution_name OPTIONS (
    column_name 'institution_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN source_name OPTIONS (
    column_name 'source_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN source_id OPTIONS (
    column_name 'source_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN quantity OPTIONS (
    column_name 'quantity'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN unit OPTIONS (
    column_name 'unit'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship ALTER COLUMN unit_type OPTIONS (
    column_name 'unit_type'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_relationship OWNER TO darwin2;

--
-- TOC entry 540 (class 1259 OID 1441921)
-- Name: staging_tag_groups; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.staging_tag_groups (
    id bigint NOT NULL,
    staging_ref integer NOT NULL,
    group_name character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    tag_value character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'staging_tag_groups'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups ALTER COLUMN staging_ref OPTIONS (
    column_name 'staging_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups ALTER COLUMN sub_group_name OPTIONS (
    column_name 'sub_group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups ALTER COLUMN tag_value OPTIONS (
    column_name 'tag_value'
);


ALTER FOREIGN TABLE darwin2_rbins_data.staging_tag_groups OWNER TO darwin2;

--
-- TOC entry 541 (class 1259 OID 1441924)
-- Name: tag_groups; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.tag_groups (
    id bigint NOT NULL,
    gtu_ref integer NOT NULL,
    group_name character varying NOT NULL,
    group_name_indexed character varying NOT NULL,
    sub_group_name character varying NOT NULL,
    sub_group_name_indexed character varying NOT NULL,
    color character varying NOT NULL,
    tag_value character varying NOT NULL,
    international_name text NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'tag_groups'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN group_name_indexed OPTIONS (
    column_name 'group_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN sub_group_name OPTIONS (
    column_name 'sub_group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN sub_group_name_indexed OPTIONS (
    column_name 'sub_group_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN tag_value OPTIONS (
    column_name 'tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups ALTER COLUMN international_name OPTIONS (
    column_name 'international_name'
);


ALTER FOREIGN TABLE darwin2_rbins_data.tag_groups OWNER TO darwin2;

--
-- TOC entry 542 (class 1259 OID 1441927)
-- Name: taxonomy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.taxonomy (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer,
    id integer NOT NULL,
    extinct boolean NOT NULL,
    taxonomy_creation_date timestamp without time zone,
    import_ref integer,
    sensitive_info_withheld boolean,
    is_reference_taxonomy boolean NOT NULL,
    metadata_ref integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN extinct OPTIONS (
    column_name 'extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN taxonomy_creation_date OPTIONS (
    column_name 'taxonomy_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN sensitive_info_withheld OPTIONS (
    column_name 'sensitive_info_withheld'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN is_reference_taxonomy OPTIONS (
    column_name 'is_reference_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy ALTER COLUMN metadata_ref OPTIONS (
    column_name 'metadata_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy OWNER TO darwin2;

--
-- TOC entry 543 (class 1259 OID 1441930)
-- Name: taxonomy_bck20181211; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 (
    name character varying,
    name_indexed character varying,
    level_ref integer,
    status character varying,
    local_naming boolean,
    color character varying,
    path character varying,
    parent_ref integer,
    id integer,
    extinct boolean,
    taxonomy_creation_date timestamp without time zone,
    import_ref integer,
    sensitive_info_withheld boolean,
    is_reference_taxonomy boolean,
    metadata_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'taxonomy_bck20181211'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN extinct OPTIONS (
    column_name 'extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN taxonomy_creation_date OPTIONS (
    column_name 'taxonomy_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN sensitive_info_withheld OPTIONS (
    column_name 'sensitive_info_withheld'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN is_reference_taxonomy OPTIONS (
    column_name 'is_reference_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 ALTER COLUMN metadata_ref OPTIONS (
    column_name 'metadata_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181211 OWNER TO darwin2;

--
-- TOC entry 544 (class 1259 OID 1441933)
-- Name: taxonomy_bck20181212; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 (
    name character varying,
    name_indexed character varying,
    level_ref integer,
    status character varying,
    local_naming boolean,
    color character varying,
    path character varying,
    parent_ref integer,
    id integer,
    extinct boolean,
    taxonomy_creation_date timestamp without time zone,
    import_ref integer,
    sensitive_info_withheld boolean,
    is_reference_taxonomy boolean,
    metadata_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'taxonomy_bck20181212'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN extinct OPTIONS (
    column_name 'extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN taxonomy_creation_date OPTIONS (
    column_name 'taxonomy_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN sensitive_info_withheld OPTIONS (
    column_name 'sensitive_info_withheld'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN is_reference_taxonomy OPTIONS (
    column_name 'is_reference_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 ALTER COLUMN metadata_ref OPTIONS (
    column_name 'metadata_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_bck20181212 OWNER TO darwin2;

--
-- TOC entry 545 (class 1259 OID 1441936)
-- Name: taxonomy_metadata; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata (
    id integer NOT NULL,
    creation_date date NOT NULL,
    creation_date_mask integer,
    import_ref integer,
    taxonomy_name character varying NOT NULL,
    definition text,
    is_reference_taxonomy boolean NOT NULL,
    source character varying,
    url_website character varying,
    url_webservice character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'taxonomy_metadata'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN creation_date_mask OPTIONS (
    column_name 'creation_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN taxonomy_name OPTIONS (
    column_name 'taxonomy_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN definition OPTIONS (
    column_name 'definition'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN is_reference_taxonomy OPTIONS (
    column_name 'is_reference_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN source OPTIONS (
    column_name 'source'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN url_website OPTIONS (
    column_name 'url_website'
);
ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata ALTER COLUMN url_webservice OPTIONS (
    column_name 'url_webservice'
);


ALTER FOREIGN TABLE darwin2_rbins_data.taxonomy_metadata OWNER TO darwin2;

--
-- TOC entry 546 (class 1259 OID 1441939)
-- Name: temp_mineralogy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.temp_mineralogy (
    code_variety text,
    name_variety text,
    formule text,
    class_name text,
    subclass_name text,
    series_name text,
    name_strunz text,
    code_serie_strunz text,
    code_subcla_strunz text,
    code_class_strunz text,
    name_engel text,
    code_serie_dana text,
    code_subcla_dana text,
    code_class_dana text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'temp_mineralogy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_variety OPTIONS (
    column_name 'code_variety'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN name_variety OPTIONS (
    column_name 'name_variety'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN formule OPTIONS (
    column_name 'formule'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN class_name OPTIONS (
    column_name 'class_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN subclass_name OPTIONS (
    column_name 'subclass_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN series_name OPTIONS (
    column_name 'series_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN name_strunz OPTIONS (
    column_name 'name_strunz'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_serie_strunz OPTIONS (
    column_name 'code_serie_strunz'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_subcla_strunz OPTIONS (
    column_name 'code_subcla_strunz'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_class_strunz OPTIONS (
    column_name 'code_class_strunz'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN name_engel OPTIONS (
    column_name 'name_engel'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_serie_dana OPTIONS (
    column_name 'code_serie_dana'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_subcla_dana OPTIONS (
    column_name 'code_subcla_dana'
);
ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy ALTER COLUMN code_class_dana OPTIONS (
    column_name 'code_class_dana'
);


ALTER FOREIGN TABLE darwin2_rbins_data.temp_mineralogy OWNER TO darwin2;

--
-- TOC entry 547 (class 1259 OID 1441942)
-- Name: template_classifications; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.template_classifications (
    name character varying NOT NULL,
    name_indexed character varying,
    level_ref integer NOT NULL,
    status character varying NOT NULL,
    local_naming boolean NOT NULL,
    color character varying,
    path character varying NOT NULL,
    parent_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'template_classifications'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.template_classifications OWNER TO darwin2;

--
-- TOC entry 548 (class 1259 OID 1441945)
-- Name: template_people; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.template_people (
    is_physical boolean NOT NULL,
    sub_type character varying,
    formated_name character varying NOT NULL,
    formated_name_indexed character varying NOT NULL,
    formated_name_unique character varying NOT NULL,
    title character varying NOT NULL,
    family_name character varying NOT NULL,
    given_name character varying,
    additional_names character varying,
    birth_date_mask integer NOT NULL,
    birth_date date NOT NULL,
    gender character(1)
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'template_people'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN is_physical OPTIONS (
    column_name 'is_physical'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN sub_type OPTIONS (
    column_name 'sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN formated_name_indexed OPTIONS (
    column_name 'formated_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN formated_name_unique OPTIONS (
    column_name 'formated_name_unique'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN family_name OPTIONS (
    column_name 'family_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN given_name OPTIONS (
    column_name 'given_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN additional_names OPTIONS (
    column_name 'additional_names'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN birth_date_mask OPTIONS (
    column_name 'birth_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN birth_date OPTIONS (
    column_name 'birth_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people ALTER COLUMN gender OPTIONS (
    column_name 'gender'
);


ALTER FOREIGN TABLE darwin2_rbins_data.template_people OWNER TO darwin2;

--
-- TOC entry 549 (class 1259 OID 1441948)
-- Name: template_people_users_addr_common; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common (
    po_box character varying,
    extended_address character varying,
    locality character varying NOT NULL,
    region character varying,
    zip_code character varying,
    country character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'template_people_users_addr_common'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN po_box OPTIONS (
    column_name 'po_box'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN extended_address OPTIONS (
    column_name 'extended_address'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN locality OPTIONS (
    column_name 'locality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN region OPTIONS (
    column_name 'region'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN zip_code OPTIONS (
    column_name 'zip_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common ALTER COLUMN country OPTIONS (
    column_name 'country'
);


ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_addr_common OWNER TO darwin2;

--
-- TOC entry 550 (class 1259 OID 1441951)
-- Name: template_people_users_comm_common; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.template_people_users_comm_common (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'template_people_users_comm_common'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_comm_common ALTER COLUMN person_user_ref OPTIONS (
    column_name 'person_user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_comm_common ALTER COLUMN entry OPTIONS (
    column_name 'entry'
);


ALTER FOREIGN TABLE darwin2_rbins_data.template_people_users_comm_common OWNER TO darwin2;

--
-- TOC entry 551 (class 1259 OID 1441954)
-- Name: template_table_record_ref; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.template_table_record_ref (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'template_table_record_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_table_record_ref ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.template_table_record_ref ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.template_table_record_ref OWNER TO darwin2;

--
-- TOC entry 552 (class 1259 OID 1441957)
-- Name: tv_reporting_count_all_specimens_by_collection_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig (
    collection_name character varying,
    collection_path character varying,
    collection_ref integer,
    year double precision,
    specimen_creation_date timestamp without time zone,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint,
    ig_ref integer,
    ig_num character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'tv_reporting_count_all_specimens_by_collection_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);


ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_by_collection_year_ig OWNER TO darwin2;

--
-- TOC entry 553 (class 1259 OID 1441960)
-- Name: tv_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig (
    collection_path character varying,
    collection_name character varying,
    collection_ref integer,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    specimen_creation_date timestamp without time zone,
    type text,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'tv_reporting_count_all_specimens_type_by_collection_ref_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 554 (class 1259 OID 1441963)
-- Name: tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig (
    taxonomy_id integer,
    collection_path character varying,
    collection_ref integer,
    collection_name character varying,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    creation_date timestamp without time zone,
    level_ref integer,
    level_name character varying,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN taxonomy_id OPTIONS (
    column_name 'taxonomy_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN level_name OPTIONS (
    column_name 'level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 555 (class 1259 OID 1441966)
-- Name: users; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.users (
    is_physical boolean NOT NULL,
    sub_type character varying,
    formated_name character varying NOT NULL,
    formated_name_indexed character varying NOT NULL,
    formated_name_unique character varying NOT NULL,
    title character varying NOT NULL,
    family_name character varying NOT NULL,
    given_name character varying,
    additional_names character varying,
    birth_date_mask integer NOT NULL,
    birth_date date NOT NULL,
    gender character(1),
    id integer NOT NULL,
    db_user_type smallint NOT NULL,
    people_id integer,
    created_at timestamp without time zone,
    selected_lang character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'users'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN is_physical OPTIONS (
    column_name 'is_physical'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN sub_type OPTIONS (
    column_name 'sub_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN formated_name OPTIONS (
    column_name 'formated_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN formated_name_indexed OPTIONS (
    column_name 'formated_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN formated_name_unique OPTIONS (
    column_name 'formated_name_unique'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN title OPTIONS (
    column_name 'title'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN family_name OPTIONS (
    column_name 'family_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN given_name OPTIONS (
    column_name 'given_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN additional_names OPTIONS (
    column_name 'additional_names'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN birth_date_mask OPTIONS (
    column_name 'birth_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN birth_date OPTIONS (
    column_name 'birth_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN gender OPTIONS (
    column_name 'gender'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN db_user_type OPTIONS (
    column_name 'db_user_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN people_id OPTIONS (
    column_name 'people_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users ALTER COLUMN selected_lang OPTIONS (
    column_name 'selected_lang'
);


ALTER FOREIGN TABLE darwin2_rbins_data.users OWNER TO darwin2;

--
-- TOC entry 556 (class 1259 OID 1441969)
-- Name: users_addresses; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.users_addresses (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL,
    po_box character varying,
    extended_address character varying,
    locality character varying NOT NULL,
    region character varying,
    zip_code character varying,
    country character varying NOT NULL,
    person_user_role character varying,
    id integer NOT NULL,
    organization_unit character varying,
    tag character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'users_addresses'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN person_user_ref OPTIONS (
    column_name 'person_user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN entry OPTIONS (
    column_name 'entry'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN po_box OPTIONS (
    column_name 'po_box'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN extended_address OPTIONS (
    column_name 'extended_address'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN locality OPTIONS (
    column_name 'locality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN region OPTIONS (
    column_name 'region'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN zip_code OPTIONS (
    column_name 'zip_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN country OPTIONS (
    column_name 'country'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN person_user_role OPTIONS (
    column_name 'person_user_role'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN organization_unit OPTIONS (
    column_name 'organization_unit'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses ALTER COLUMN tag OPTIONS (
    column_name 'tag'
);


ALTER FOREIGN TABLE darwin2_rbins_data.users_addresses OWNER TO darwin2;

--
-- TOC entry 557 (class 1259 OID 1441972)
-- Name: users_comm; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.users_comm (
    person_user_ref integer NOT NULL,
    entry character varying NOT NULL,
    id integer NOT NULL,
    comm_type character varying NOT NULL,
    tag character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'users_comm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_comm ALTER COLUMN person_user_ref OPTIONS (
    column_name 'person_user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_comm ALTER COLUMN entry OPTIONS (
    column_name 'entry'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_comm ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_comm ALTER COLUMN comm_type OPTIONS (
    column_name 'comm_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_comm ALTER COLUMN tag OPTIONS (
    column_name 'tag'
);


ALTER FOREIGN TABLE darwin2_rbins_data.users_comm OWNER TO darwin2;

--
-- TOC entry 558 (class 1259 OID 1441975)
-- Name: users_login_infos; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.users_login_infos (
    id integer NOT NULL,
    user_ref integer NOT NULL,
    login_type character varying NOT NULL,
    user_name character varying,
    password character varying,
    login_system character varying,
    renew_hash character varying,
    last_seen timestamp without time zone
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'users_login_infos'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN login_type OPTIONS (
    column_name 'login_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN user_name OPTIONS (
    column_name 'user_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN password OPTIONS (
    column_name 'password'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN login_system OPTIONS (
    column_name 'login_system'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN renew_hash OPTIONS (
    column_name 'renew_hash'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos ALTER COLUMN last_seen OPTIONS (
    column_name 'last_seen'
);


ALTER FOREIGN TABLE darwin2_rbins_data.users_login_infos OWNER TO darwin2;

--
-- TOC entry 559 (class 1259 OID 1441978)
-- Name: users_tracking; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.users_tracking (
    id bigint NOT NULL,
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    user_ref integer NOT NULL,
    action character varying NOT NULL,
    old_value public.hstore,
    new_value public.hstore,
    modification_date_time timestamp without time zone NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'users_tracking'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN action OPTIONS (
    column_name 'action'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN old_value OPTIONS (
    column_name 'old_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN new_value OPTIONS (
    column_name 'new_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);


ALTER FOREIGN TABLE darwin2_rbins_data.users_tracking OWNER TO darwin2;

--
-- TOC entry 560 (class 1259 OID 1441981)
-- Name: v_amphibians_brabant_terry_postgis; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_amphibians_brabant_terry_postgis (
    id integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_amphibians_brabant_terry_postgis'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_amphibians_brabant_terry_postgis ALTER COLUMN id OPTIONS (
    column_name 'id'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_amphibians_brabant_terry_postgis OWNER TO darwin2;

--
-- TOC entry 561 (class 1259 OID 1441984)
-- Name: v_collection_string_path; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_collection_string_path (
    id integer,
    coll_path_string text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_collection_string_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_collection_string_path ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_collection_string_path ALTER COLUMN coll_path_string OPTIONS (
    column_name 'coll_path_string'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_collection_string_path OWNER TO darwin2;

--
-- TOC entry 562 (class 1259 OID 1441987)
-- Name: v_darwin_ipt_rbins; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins (
    ids text,
    guid text,
    collection_ref integer,
    collection_code character varying,
    collection_name character varying,
    collection_id integer,
    collection_path character varying,
    cataloguenumber text,
    basisofrecord text,
    institutionid text,
    iso_country_institution text,
    bibliographic_citation text,
    license text,
    email text,
    type character varying,
    taxon_path character varying,
    taxon_ref integer,
    taxon_name character varying,
    family character varying,
    country character varying,
    location text,
    latitude character varying,
    longitude character varying,
    lat_long_accuracy double precision,
    collector_ids integer[],
    collectors text,
    donator_ids integer[],
    donators text,
    identifiers_ids integer[],
    identifiers text,
    gtu_from_date timestamp without time zone,
    gtu_from_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_to_date_mask integer,
    eventdate text,
    country_unnest character varying,
    identification_date text,
    history text,
    gtu_ref integer
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_darwin_ipt_rbins'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN ids OPTIONS (
    column_name 'ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN guid OPTIONS (
    column_name 'guid'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collection_id OPTIONS (
    column_name 'collection_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN cataloguenumber OPTIONS (
    column_name 'cataloguenumber'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN basisofrecord OPTIONS (
    column_name 'basisofrecord'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN institutionid OPTIONS (
    column_name 'institutionid'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN iso_country_institution OPTIONS (
    column_name 'iso_country_institution'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN bibliographic_citation OPTIONS (
    column_name 'bibliographic_citation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN license OPTIONS (
    column_name 'license'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN email OPTIONS (
    column_name 'email'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN family OPTIONS (
    column_name 'family'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN country OPTIONS (
    column_name 'country'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collector_ids OPTIONS (
    column_name 'collector_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN collectors OPTIONS (
    column_name 'collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN donator_ids OPTIONS (
    column_name 'donator_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN donators OPTIONS (
    column_name 'donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN identifiers_ids OPTIONS (
    column_name 'identifiers_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN identifiers OPTIONS (
    column_name 'identifiers'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN eventdate OPTIONS (
    column_name 'eventdate'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN country_unnest OPTIONS (
    column_name 'country_unnest'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN identification_date OPTIONS (
    column_name 'identification_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN history OPTIONS (
    column_name 'history'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_rbins OWNER TO darwin2;

--
-- TOC entry 563 (class 1259 OID 1441990)
-- Name: v_darwin_ipt_taxonomy; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy (
    darwin_id integer,
    scientificname character varying,
    taxonrank character varying,
    verbatimtaxonrank character varying,
    kingdom character varying,
    phylum character varying,
    class character varying,
    "order" character varying,
    family character varying,
    genus character varying,
    higherclassification text,
    path character varying,
    full_path text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_darwin_ipt_taxonomy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN darwin_id OPTIONS (
    column_name 'darwin_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN scientificname OPTIONS (
    column_name 'scientificname'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN taxonrank OPTIONS (
    column_name 'taxonrank'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN verbatimtaxonrank OPTIONS (
    column_name 'verbatimtaxonrank'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN kingdom OPTIONS (
    column_name 'kingdom'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN phylum OPTIONS (
    column_name 'phylum'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN class OPTIONS (
    column_name 'class'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN "order" OPTIONS (
    column_name 'order'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN family OPTIONS (
    column_name 'family'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN genus OPTIONS (
    column_name 'genus'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN higherclassification OPTIONS (
    column_name 'higherclassification'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy ALTER COLUMN full_path OPTIONS (
    column_name 'full_path'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy OWNER TO darwin2;

--
-- TOC entry 564 (class 1259 OID 1441993)
-- Name: v_darwin_ipt_taxonomy_vernacular; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular (
    darwin_id integer,
    scientificname character varying,
    taxonrank character varying,
    verbatimtaxonrank character varying,
    kingdom character varying,
    phylum character varying,
    class character varying,
    "order" character varying,
    family character varying,
    genus character varying,
    higherclassification text,
    path character varying,
    full_path text,
    community character varying,
    name character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_darwin_ipt_taxonomy_vernacular'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN darwin_id OPTIONS (
    column_name 'darwin_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN scientificname OPTIONS (
    column_name 'scientificname'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN taxonrank OPTIONS (
    column_name 'taxonrank'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN verbatimtaxonrank OPTIONS (
    column_name 'verbatimtaxonrank'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN kingdom OPTIONS (
    column_name 'kingdom'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN phylum OPTIONS (
    column_name 'phylum'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN class OPTIONS (
    column_name 'class'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN "order" OPTIONS (
    column_name 'order'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN family OPTIONS (
    column_name 'family'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN genus OPTIONS (
    column_name 'genus'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN higherclassification OPTIONS (
    column_name 'higherclassification'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN full_path OPTIONS (
    column_name 'full_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN community OPTIONS (
    column_name 'community'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular ALTER COLUMN name OPTIONS (
    column_name 'name'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_darwin_ipt_taxonomy_vernacular OWNER TO darwin2;

--
-- TOC entry 565 (class 1259 OID 1441996)
-- Name: v_diagnose_marie_deschamps; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps (
    id bigint,
    referenced_relation character varying,
    record_id integer,
    user_ref integer,
    action character varying,
    old_value public.hstore,
    new_value public.hstore,
    modification_date_time timestamp without time zone,
    collection_ref integer,
    collection_path character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_diagnose_marie_deschamps'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN action OPTIONS (
    column_name 'action'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN old_value OPTIONS (
    column_name 'old_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN new_value OPTIONS (
    column_name 'new_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_diagnose_marie_deschamps OWNER TO darwin2;

--
-- TOC entry 566 (class 1259 OID 1441999)
-- Name: v_export_csv; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_export_csv (
    id integer,
    collection_code character varying,
    code text,
    additional_codes text,
    ig_num character varying,
    full_scientific_name character varying,
    taxon_name character varying,
    author character varying,
    family character varying,
    type character varying,
    specimen_count_min integer,
    specimen_count_max integer,
    identifiers text,
    abbreviated_identifiers text,
    identification_year double precision,
    gtu_country_tag_value character varying,
    gtu_province_tag_value character varying,
    municipality text,
    region_district text,
    exact_site text,
    ecology text,
    gtu_others_tag_value character varying,
    gtu_code character varying,
    latitude_deci double precision,
    longitude_deci double precision,
    latitude_text character varying,
    longitude_text character varying,
    gtu_elevation double precision,
    collecting_year_from double precision,
    collecting_month_from double precision,
    collecting_day_from double precision,
    collecting_year_to double precision,
    collecting_month_to double precision,
    collecting_day_to double precision,
    properties_locality text,
    collectors text,
    abbreviated_collectors text,
    expedition_name character varying,
    donators text,
    abbreviated_donators text,
    acquisition_category character varying,
    acquisition_date text,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    specimen_part character varying,
    complete boolean,
    object_name text,
    method character varying,
    tool character varying,
    specimen_status character varying,
    container_storage character varying,
    comment text,
    properties_all text,
    specimen_creation_date timestamp without time zone
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_export_csv'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN additional_codes OPTIONS (
    column_name 'additional_codes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN full_scientific_name OPTIONS (
    column_name 'full_scientific_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN author OPTIONS (
    column_name 'author'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN family OPTIONS (
    column_name 'family'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN identifiers OPTIONS (
    column_name 'identifiers'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN abbreviated_identifiers OPTIONS (
    column_name 'abbreviated_identifiers'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN identification_year OPTIONS (
    column_name 'identification_year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN municipality OPTIONS (
    column_name 'municipality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN region_district OPTIONS (
    column_name 'region_district'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN exact_site OPTIONS (
    column_name 'exact_site'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN ecology OPTIONS (
    column_name 'ecology'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN latitude_deci OPTIONS (
    column_name 'latitude_deci'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN longitude_deci OPTIONS (
    column_name 'longitude_deci'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN latitude_text OPTIONS (
    column_name 'latitude_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN longitude_text OPTIONS (
    column_name 'longitude_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_year_from OPTIONS (
    column_name 'collecting_year_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_month_from OPTIONS (
    column_name 'collecting_month_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_day_from OPTIONS (
    column_name 'collecting_day_from'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_year_to OPTIONS (
    column_name 'collecting_year_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_month_to OPTIONS (
    column_name 'collecting_month_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collecting_day_to OPTIONS (
    column_name 'collecting_day_to'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN properties_locality OPTIONS (
    column_name 'properties_locality'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN collectors OPTIONS (
    column_name 'collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN abbreviated_collectors OPTIONS (
    column_name 'abbreviated_collectors'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN donators OPTIONS (
    column_name 'donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN abbreviated_donators OPTIONS (
    column_name 'abbreviated_donators'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN method OPTIONS (
    column_name 'method'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN tool OPTIONS (
    column_name 'tool'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN comment OPTIONS (
    column_name 'comment'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN properties_all OPTIONS (
    column_name 'properties_all'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_export_csv OWNER TO darwin2;

--
-- TOC entry 567 (class 1259 OID 1442002)
-- Name: v_imports_encoded_xml_name; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name (
    filename_encoded text,
    id integer,
    user_ref integer,
    format character varying,
    collection_ref integer,
    filename character varying,
    state character varying,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    initial_count integer,
    is_finished boolean,
    errors_in_import text,
    template_version text,
    exclude_invalid_entries boolean
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_imports_encoded_xml_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN filename_encoded OPTIONS (
    column_name 'filename_encoded'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN format OPTIONS (
    column_name 'format'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN filename OPTIONS (
    column_name 'filename'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN initial_count OPTIONS (
    column_name 'initial_count'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN is_finished OPTIONS (
    column_name 'is_finished'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN errors_in_import OPTIONS (
    column_name 'errors_in_import'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN template_version OPTIONS (
    column_name 'template_version'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name ALTER COLUMN exclude_invalid_entries OPTIONS (
    column_name 'exclude_invalid_entries'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_imports_encoded_xml_name OWNER TO darwin2;

--
-- TOC entry 568 (class 1259 OID 1442005)
-- Name: v_normalize_gtu_without_date; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date (
    gtu_id integer[],
    code character varying,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    location character varying,
    elevation double precision,
    elevation_accuracy double precision,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying,
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    comments text[],
    properties text[],
    ext_links text[],
    multimedias text[],
    tags text[],
    tag_groups text[]
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_normalize_gtu_without_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN gtu_id OPTIONS (
    column_name 'gtu_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN tag_values_indexed OPTIONS (
    column_name 'tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN elevation OPTIONS (
    column_name 'elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN elevation_accuracy OPTIONS (
    column_name 'elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude_dms_degree OPTIONS (
    column_name 'latitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude_dms_minutes OPTIONS (
    column_name 'latitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude_dms_seconds OPTIONS (
    column_name 'latitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude_dms_direction OPTIONS (
    column_name 'latitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude_dms_degree OPTIONS (
    column_name 'longitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude_dms_minutes OPTIONS (
    column_name 'longitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude_dms_seconds OPTIONS (
    column_name 'longitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude_dms_direction OPTIONS (
    column_name 'longitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN latitude_utm OPTIONS (
    column_name 'latitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN longitude_utm OPTIONS (
    column_name 'longitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN utm_zone OPTIONS (
    column_name 'utm_zone'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN coordinates_source OPTIONS (
    column_name 'coordinates_source'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN gtu_creation_date OPTIONS (
    column_name 'gtu_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN comments OPTIONS (
    column_name 'comments'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN properties OPTIONS (
    column_name 'properties'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN ext_links OPTIONS (
    column_name 'ext_links'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN multimedias OPTIONS (
    column_name 'multimedias'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN tags OPTIONS (
    column_name 'tags'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date ALTER COLUMN tag_groups OPTIONS (
    column_name 'tag_groups'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date OWNER TO darwin2;

--
-- TOC entry 569 (class 1259 OID 1442008)
-- Name: v_normalize_gtu_without_date_no_code; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code (
    gtu_id integer[],
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    location character varying,
    elevation double precision,
    elevation_accuracy double precision,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying,
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    comments text[],
    properties text[],
    ext_links text[],
    multimedias text[],
    tags text[],
    tag_groups text[]
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_normalize_gtu_without_date_no_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN gtu_id OPTIONS (
    column_name 'gtu_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN tag_values_indexed OPTIONS (
    column_name 'tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN lat_long_accuracy OPTIONS (
    column_name 'lat_long_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN location OPTIONS (
    column_name 'location'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN elevation OPTIONS (
    column_name 'elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN elevation_accuracy OPTIONS (
    column_name 'elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude_dms_degree OPTIONS (
    column_name 'latitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude_dms_minutes OPTIONS (
    column_name 'latitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude_dms_seconds OPTIONS (
    column_name 'latitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude_dms_direction OPTIONS (
    column_name 'latitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude_dms_degree OPTIONS (
    column_name 'longitude_dms_degree'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude_dms_minutes OPTIONS (
    column_name 'longitude_dms_minutes'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude_dms_seconds OPTIONS (
    column_name 'longitude_dms_seconds'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude_dms_direction OPTIONS (
    column_name 'longitude_dms_direction'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN latitude_utm OPTIONS (
    column_name 'latitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN longitude_utm OPTIONS (
    column_name 'longitude_utm'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN utm_zone OPTIONS (
    column_name 'utm_zone'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN coordinates_source OPTIONS (
    column_name 'coordinates_source'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN gtu_creation_date OPTIONS (
    column_name 'gtu_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN import_ref OPTIONS (
    column_name 'import_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN comments OPTIONS (
    column_name 'comments'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN properties OPTIONS (
    column_name 'properties'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN ext_links OPTIONS (
    column_name 'ext_links'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN multimedias OPTIONS (
    column_name 'multimedias'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN tags OPTIONS (
    column_name 'tags'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code ALTER COLUMN tag_groups OPTIONS (
    column_name 'tag_groups'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_normalize_gtu_without_date_no_code OWNER TO darwin2;

--
-- TOC entry 570 (class 1259 OID 1442011)
-- Name: v_reporting_count_all_specimens; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens (
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens OWNER TO darwin2;

--
-- TOC entry 571 (class 1259 OID 1442014)
-- Name: v_reporting_count_all_specimens_by_collection_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig (
    collection_name character varying,
    collection_path character varying,
    collection_ref integer,
    year double precision,
    specimen_creation_date timestamp without time zone,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint,
    ig_ref integer,
    ig_num character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens_by_collection_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_collection_year_ig OWNER TO darwin2;

--
-- TOC entry 572 (class 1259 OID 1442017)
-- Name: v_reporting_count_all_specimens_by_year; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year (
    year double precision,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens_by_year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_by_year OWNER TO darwin2;

--
-- TOC entry 573 (class 1259 OID 1442020)
-- Name: v_reporting_count_all_specimens_type; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type (
    type text,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type OWNER TO darwin2;

--
-- TOC entry 574 (class 1259 OID 1442023)
-- Name: v_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig (
    collection_path character varying,
    collection_name character varying,
    collection_ref integer,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    specimen_creation_date timestamp without time zone,
    type text,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens_type_by_collection_ref_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_creation_date OPTIONS (
    column_name 'specimen_creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 575 (class 1259 OID 1442026)
-- Name: v_reporting_count_all_specimens_type_by_year; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year (
    year double precision,
    type text,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_count_all_specimens_type_by_year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_count_all_specimens_type_by_year OWNER TO darwin2;

--
-- TOC entry 576 (class 1259 OID 1442029)
-- Name: v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig (
    taxonomy_id integer,
    collection_path character varying,
    collection_ref integer,
    collection_name character varying,
    ig_ref integer,
    ig_num character varying,
    year double precision,
    creation_date timestamp without time zone,
    level_ref integer,
    level_name character varying,
    nb_records bigint,
    specimen_count_min bigint,
    specimen_count_max bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN taxonomy_id OPTIONS (
    column_name 'taxonomy_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN creation_date OPTIONS (
    column_name 'creation_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN level_name OPTIONS (
    column_name 'level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN nb_records OPTIONS (
    column_name 'nb_records'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig OWNER TO darwin2;

--
-- TOC entry 577 (class 1259 OID 1442032)
-- Name: v_reporting_taxa_in_specimen_per_year; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_year (
    year double precision,
    count bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_taxa_in_specimen_per_year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_year ALTER COLUMN year OPTIONS (
    column_name 'year'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_year ALTER COLUMN count OPTIONS (
    column_name 'count'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxa_in_specimen_per_year OWNER TO darwin2;

--
-- TOC entry 578 (class 1259 OID 1442035)
-- Name: v_reporting_taxonomy_general; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_general (
    level_name character varying,
    count bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_taxonomy_general'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_general ALTER COLUMN level_name OPTIONS (
    column_name 'level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_general ALTER COLUMN count OPTIONS (
    column_name 'count'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_general OWNER TO darwin2;

--
-- TOC entry 579 (class 1259 OID 1442038)
-- Name: v_reporting_taxonomy_in_specimen; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_in_specimen (
    taxon_level_name character varying,
    count bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_reporting_taxonomy_in_specimen'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_in_specimen ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_in_specimen ALTER COLUMN count OPTIONS (
    column_name 'count'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_reporting_taxonomy_in_specimen OWNER TO darwin2;

--
-- TOC entry 580 (class 1259 OID 1442041)
-- Name: v_rmca_collections_path_as_text; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text (
    id integer,
    collection_type character varying,
    code character varying,
    name character varying,
    name_indexed character varying,
    institution_ref integer,
    main_manager_ref integer,
    parent_ref integer,
    path character varying,
    collection_path_text text
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_rmca_collections_path_as_text'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN main_manager_ref OPTIONS (
    column_name 'main_manager_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text ALTER COLUMN collection_path_text OPTIONS (
    column_name 'collection_path_text'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_collections_path_as_text OWNER TO darwin2;

--
-- TOC entry 581 (class 1259 OID 1442044)
-- Name: v_rmca_public_view; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view (
    id integer,
    code_display text,
    taxon_path character varying,
    taxon_ref integer,
    taxon_name character varying,
    gtu_country_tag_value character varying,
    gtu_others_tag_value character varying,
    gtu_from_date timestamp without time zone,
    gtu_from_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_to_date_mask integer,
    date_from_display text,
    date_to_display text,
    coll_type character varying,
    longitude double precision,
    latitude double precision,
    full_count bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_rmca_public_view'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN code_display OPTIONS (
    column_name 'code_display'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN date_from_display OPTIONS (
    column_name 'date_from_display'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN date_to_display OPTIONS (
    column_name 'date_to_display'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN coll_type OPTIONS (
    column_name 'coll_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN longitude OPTIONS (
    column_name 'longitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN latitude OPTIONS (
    column_name 'latitude'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view ALTER COLUMN full_count OPTIONS (
    column_name 'full_count'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_public_view OWNER TO darwin2;

--
-- TOC entry 582 (class 1259 OID 1442047)
-- Name: v_rmca_taxo_detect_duplicate_hierarchies; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies (
    level_ref integer,
    level_name character varying,
    canonical_name character varying,
    nb_canonical_homonyms integer,
    names_list character varying[],
    ids integer[]
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_rmca_taxo_detect_duplicate_hierarchies'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN level_name OPTIONS (
    column_name 'level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN canonical_name OPTIONS (
    column_name 'canonical_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN nb_canonical_homonyms OPTIONS (
    column_name 'nb_canonical_homonyms'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN names_list OPTIONS (
    column_name 'names_list'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies ALTER COLUMN ids OPTIONS (
    column_name 'ids'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxo_detect_duplicate_hierarchies OWNER TO darwin2;

--
-- TOC entry 583 (class 1259 OID 1442050)
-- Name: v_rmca_taxonomy_synonyms_with_name_and_specs; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs (
    referenced_relation character varying,
    records_ids integer[],
    ids integer[],
    group_id integer,
    group_name character varying,
    basionyms boolean[],
    orders integer[],
    taxon_names text,
    count_specimens numeric,
    count_specimens_by_taxon public.hstore
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_rmca_taxonomy_synonyms_with_name_and_specs'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN records_ids OPTIONS (
    column_name 'records_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN ids OPTIONS (
    column_name 'ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN group_id OPTIONS (
    column_name 'group_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN group_name OPTIONS (
    column_name 'group_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN basionyms OPTIONS (
    column_name 'basionyms'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN orders OPTIONS (
    column_name 'orders'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN taxon_names OPTIONS (
    column_name 'taxon_names'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN count_specimens OPTIONS (
    column_name 'count_specimens'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs ALTER COLUMN count_specimens_by_taxon OPTIONS (
    column_name 'count_specimens_by_taxon'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_rmca_taxonomy_synonyms_with_name_and_specs OWNER TO darwin2;

--
-- TOC entry 584 (class 1259 OID 1442053)
-- Name: v_voronoi; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.v_voronoi (
    id integer,
    voronoi public.geometry
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'v_voronoi'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_voronoi ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.v_voronoi ALTER COLUMN voronoi OPTIONS (
    column_name 'voronoi'
);


ALTER FOREIGN TABLE darwin2_rbins_data.v_voronoi OWNER TO darwin2;

--
-- TOC entry 585 (class 1259 OID 1442056)
-- Name: vernacular_names; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.vernacular_names (
    referenced_relation character varying NOT NULL,
    record_id integer NOT NULL,
    id integer NOT NULL,
    community character varying NOT NULL,
    community_indexed character varying NOT NULL,
    name character varying NOT NULL,
    name_indexed character varying NOT NULL
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'vernacular_names'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN community OPTIONS (
    column_name 'community'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN community_indexed OPTIONS (
    column_name 'community_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);


ALTER FOREIGN TABLE darwin2_rbins_data.vernacular_names OWNER TO darwin2;

--
-- TOC entry 586 (class 1259 OID 1442059)
-- Name: zzz_franck_associate_file_to_record_march2018; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 (
    filename character varying,
    date_modified character varying,
    scientific_name character varying,
    unitid character varying,
    kindofunit character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'zzz_franck_associate_file_to_record_march2018'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 ALTER COLUMN filename OPTIONS (
    column_name 'filename'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 ALTER COLUMN date_modified OPTIONS (
    column_name 'date_modified'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 ALTER COLUMN scientific_name OPTIONS (
    column_name 'scientific_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 ALTER COLUMN unitid OPTIONS (
    column_name 'unitid'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 ALTER COLUMN kindofunit OPTIONS (
    column_name 'kindofunit'
);


ALTER FOREIGN TABLE darwin2_rbins_data.zzz_franck_associate_file_to_record_march2018 OWNER TO darwin2;

--
-- TOC entry 587 (class 1259 OID 1442062)
-- Name: zzz_rotifer_specimens; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens (
    id integer,
    category character varying,
    collection_ref integer,
    expedition_ref integer,
    gtu_ref integer,
    taxon_ref integer,
    litho_ref integer,
    chrono_ref integer,
    lithology_ref integer,
    mineral_ref integer,
    acquisition_category character varying,
    acquisition_date_mask integer,
    acquisition_date date,
    station_visible boolean,
    ig_ref integer,
    type character varying,
    type_group character varying,
    type_search character varying,
    sex character varying,
    stage character varying,
    state character varying,
    social_status character varying,
    rock_form character varying,
    specimen_part character varying,
    complete boolean,
    institution_ref integer,
    building character varying,
    floor character varying,
    room character varying,
    "row" character varying,
    shelf character varying,
    container character varying,
    sub_container character varying,
    container_type character varying,
    sub_container_type character varying,
    container_storage character varying,
    sub_container_storage character varying,
    surnumerary boolean,
    specimen_status character varying,
    specimen_count_min integer,
    specimen_count_max integer,
    object_name text,
    object_name_indexed text,
    spec_ident_ids integer[],
    spec_coll_ids integer[],
    spec_don_sel_ids integer[],
    collection_type character varying,
    collection_code character varying,
    collection_name character varying,
    collection_is_public boolean,
    collection_parent_ref integer,
    collection_path character varying,
    expedition_name character varying,
    expedition_name_indexed character varying,
    gtu_code character varying,
    gtu_from_date_mask integer,
    gtu_from_date timestamp without time zone,
    gtu_to_date_mask integer,
    gtu_to_date timestamp without time zone,
    gtu_tag_values_indexed character varying[],
    gtu_country_tag_value character varying,
    gtu_country_tag_indexed character varying[],
    gtu_province_tag_value character varying,
    gtu_province_tag_indexed character varying[],
    gtu_others_tag_value character varying,
    gtu_others_tag_indexed character varying[],
    gtu_elevation double precision,
    gtu_elevation_accuracy double precision,
    taxon_name character varying,
    taxon_name_indexed character varying,
    taxon_level_ref integer,
    taxon_level_name character varying,
    taxon_status character varying,
    taxon_path character varying,
    taxon_parent_ref integer,
    taxon_extinct boolean,
    litho_name character varying,
    litho_name_indexed character varying,
    litho_level_ref integer,
    litho_level_name character varying,
    litho_status character varying,
    litho_local boolean,
    litho_color character varying,
    litho_path character varying,
    litho_parent_ref integer,
    chrono_name character varying,
    chrono_name_indexed character varying,
    chrono_level_ref integer,
    chrono_level_name character varying,
    chrono_status character varying,
    chrono_local boolean,
    chrono_color character varying,
    chrono_path character varying,
    chrono_parent_ref integer,
    lithology_name character varying,
    lithology_name_indexed character varying,
    lithology_level_ref integer,
    lithology_level_name character varying,
    lithology_status character varying,
    lithology_local boolean,
    lithology_color character varying,
    lithology_path character varying,
    lithology_parent_ref integer,
    mineral_name character varying,
    mineral_name_indexed character varying,
    mineral_level_ref integer,
    mineral_level_name character varying,
    mineral_status character varying,
    mineral_local boolean,
    mineral_color character varying,
    mineral_path character varying,
    mineral_parent_ref integer,
    ig_num character varying,
    ig_num_indexed character varying,
    ig_date_mask integer,
    ig_date date,
    col text,
    gtu_location point
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'zzz_rotifer_specimens'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN category OPTIONS (
    column_name 'category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_ref OPTIONS (
    column_name 'collection_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN expedition_ref OPTIONS (
    column_name 'expedition_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_ref OPTIONS (
    column_name 'gtu_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_ref OPTIONS (
    column_name 'litho_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_ref OPTIONS (
    column_name 'chrono_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_ref OPTIONS (
    column_name 'lithology_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_ref OPTIONS (
    column_name 'mineral_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN acquisition_category OPTIONS (
    column_name 'acquisition_category'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN acquisition_date_mask OPTIONS (
    column_name 'acquisition_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN acquisition_date OPTIONS (
    column_name 'acquisition_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN station_visible OPTIONS (
    column_name 'station_visible'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN ig_ref OPTIONS (
    column_name 'ig_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN type_group OPTIONS (
    column_name 'type_group'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN type_search OPTIONS (
    column_name 'type_search'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN sex OPTIONS (
    column_name 'sex'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN stage OPTIONS (
    column_name 'stage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN state OPTIONS (
    column_name 'state'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN social_status OPTIONS (
    column_name 'social_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN rock_form OPTIONS (
    column_name 'rock_form'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN specimen_part OPTIONS (
    column_name 'specimen_part'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN complete OPTIONS (
    column_name 'complete'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN institution_ref OPTIONS (
    column_name 'institution_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN building OPTIONS (
    column_name 'building'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN floor OPTIONS (
    column_name 'floor'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN room OPTIONS (
    column_name 'room'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN "row" OPTIONS (
    column_name 'row'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN shelf OPTIONS (
    column_name 'shelf'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN container OPTIONS (
    column_name 'container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN sub_container OPTIONS (
    column_name 'sub_container'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN container_type OPTIONS (
    column_name 'container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN sub_container_type OPTIONS (
    column_name 'sub_container_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN container_storage OPTIONS (
    column_name 'container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN sub_container_storage OPTIONS (
    column_name 'sub_container_storage'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN surnumerary OPTIONS (
    column_name 'surnumerary'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN specimen_status OPTIONS (
    column_name 'specimen_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN specimen_count_min OPTIONS (
    column_name 'specimen_count_min'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN specimen_count_max OPTIONS (
    column_name 'specimen_count_max'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN object_name OPTIONS (
    column_name 'object_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN object_name_indexed OPTIONS (
    column_name 'object_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN spec_ident_ids OPTIONS (
    column_name 'spec_ident_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN spec_coll_ids OPTIONS (
    column_name 'spec_coll_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN spec_don_sel_ids OPTIONS (
    column_name 'spec_don_sel_ids'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_type OPTIONS (
    column_name 'collection_type'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_code OPTIONS (
    column_name 'collection_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_name OPTIONS (
    column_name 'collection_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_is_public OPTIONS (
    column_name 'collection_is_public'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_parent_ref OPTIONS (
    column_name 'collection_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN collection_path OPTIONS (
    column_name 'collection_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN expedition_name OPTIONS (
    column_name 'expedition_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN expedition_name_indexed OPTIONS (
    column_name 'expedition_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_code OPTIONS (
    column_name 'gtu_code'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_from_date_mask OPTIONS (
    column_name 'gtu_from_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_from_date OPTIONS (
    column_name 'gtu_from_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_to_date_mask OPTIONS (
    column_name 'gtu_to_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_to_date OPTIONS (
    column_name 'gtu_to_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_tag_values_indexed OPTIONS (
    column_name 'gtu_tag_values_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_country_tag_value OPTIONS (
    column_name 'gtu_country_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_country_tag_indexed OPTIONS (
    column_name 'gtu_country_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_province_tag_value OPTIONS (
    column_name 'gtu_province_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_province_tag_indexed OPTIONS (
    column_name 'gtu_province_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_others_tag_value OPTIONS (
    column_name 'gtu_others_tag_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_others_tag_indexed OPTIONS (
    column_name 'gtu_others_tag_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_elevation OPTIONS (
    column_name 'gtu_elevation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_elevation_accuracy OPTIONS (
    column_name 'gtu_elevation_accuracy'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_name OPTIONS (
    column_name 'taxon_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_name_indexed OPTIONS (
    column_name 'taxon_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_level_ref OPTIONS (
    column_name 'taxon_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_level_name OPTIONS (
    column_name 'taxon_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_status OPTIONS (
    column_name 'taxon_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_path OPTIONS (
    column_name 'taxon_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_parent_ref OPTIONS (
    column_name 'taxon_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN taxon_extinct OPTIONS (
    column_name 'taxon_extinct'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_name OPTIONS (
    column_name 'litho_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_name_indexed OPTIONS (
    column_name 'litho_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_level_ref OPTIONS (
    column_name 'litho_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_level_name OPTIONS (
    column_name 'litho_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_status OPTIONS (
    column_name 'litho_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_local OPTIONS (
    column_name 'litho_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_color OPTIONS (
    column_name 'litho_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_path OPTIONS (
    column_name 'litho_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN litho_parent_ref OPTIONS (
    column_name 'litho_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_name OPTIONS (
    column_name 'chrono_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_name_indexed OPTIONS (
    column_name 'chrono_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_level_ref OPTIONS (
    column_name 'chrono_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_level_name OPTIONS (
    column_name 'chrono_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_status OPTIONS (
    column_name 'chrono_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_local OPTIONS (
    column_name 'chrono_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_color OPTIONS (
    column_name 'chrono_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_path OPTIONS (
    column_name 'chrono_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN chrono_parent_ref OPTIONS (
    column_name 'chrono_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_name OPTIONS (
    column_name 'lithology_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_name_indexed OPTIONS (
    column_name 'lithology_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_level_ref OPTIONS (
    column_name 'lithology_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_level_name OPTIONS (
    column_name 'lithology_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_status OPTIONS (
    column_name 'lithology_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_local OPTIONS (
    column_name 'lithology_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_color OPTIONS (
    column_name 'lithology_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_path OPTIONS (
    column_name 'lithology_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN lithology_parent_ref OPTIONS (
    column_name 'lithology_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_name OPTIONS (
    column_name 'mineral_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_name_indexed OPTIONS (
    column_name 'mineral_name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_level_ref OPTIONS (
    column_name 'mineral_level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_level_name OPTIONS (
    column_name 'mineral_level_name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_status OPTIONS (
    column_name 'mineral_status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_local OPTIONS (
    column_name 'mineral_local'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_color OPTIONS (
    column_name 'mineral_color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_path OPTIONS (
    column_name 'mineral_path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN mineral_parent_ref OPTIONS (
    column_name 'mineral_parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN ig_num OPTIONS (
    column_name 'ig_num'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN ig_num_indexed OPTIONS (
    column_name 'ig_num_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN ig_date_mask OPTIONS (
    column_name 'ig_date_mask'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN ig_date OPTIONS (
    column_name 'ig_date'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN col OPTIONS (
    column_name 'col'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens ALTER COLUMN gtu_location OPTIONS (
    column_name 'gtu_location'
);


ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_specimens OWNER TO darwin2;

--
-- TOC entry 588 (class 1259 OID 1442065)
-- Name: zzz_rotifer_taxa; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa (
    name character varying,
    name_indexed character varying,
    level_ref integer,
    status character varying,
    local_naming boolean,
    color character varying,
    path character varying,
    parent_ref integer,
    id integer,
    extinct boolean
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'zzz_rotifer_taxa'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN name_indexed OPTIONS (
    column_name 'name_indexed'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN level_ref OPTIONS (
    column_name 'level_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN status OPTIONS (
    column_name 'status'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN local_naming OPTIONS (
    column_name 'local_naming'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN color OPTIONS (
    column_name 'color'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN path OPTIONS (
    column_name 'path'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN parent_ref OPTIONS (
    column_name 'parent_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa ALTER COLUMN extinct OPTIONS (
    column_name 'extinct'
);


ALTER FOREIGN TABLE darwin2_rbins_data.zzz_rotifer_taxa OWNER TO darwin2;

--
-- TOC entry 589 (class 1259 OID 1442068)
-- Name: zzz_taxa_imported_not_cleaned; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.zzz_taxa_imported_not_cleaned (
    taxon_ref integer,
    reason character varying
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'zzz_taxa_imported_not_cleaned'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_taxa_imported_not_cleaned ALTER COLUMN taxon_ref OPTIONS (
    column_name 'taxon_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_taxa_imported_not_cleaned ALTER COLUMN reason OPTIONS (
    column_name 'reason'
);


ALTER FOREIGN TABLE darwin2_rbins_data.zzz_taxa_imported_not_cleaned OWNER TO darwin2;

--
-- TOC entry 590 (class 1259 OID 1442071)
-- Name: zzz_users_tracking_archived; Type: FOREIGN TABLE; Schema: darwin2_rbins_data; Owner: darwin2
--

CREATE FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived (
    id bigint,
    referenced_relation character varying,
    record_id integer,
    user_ref integer,
    action character varying,
    old_value public.hstore,
    new_value public.hstore,
    modification_date_time timestamp without time zone,
    specimen_individual_ref bigint,
    specimen_ref bigint
)
SERVER darwin2_server
OPTIONS (
    schema_name 'darwin2',
    table_name 'zzz_users_tracking_archived'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN referenced_relation OPTIONS (
    column_name 'referenced_relation'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN record_id OPTIONS (
    column_name 'record_id'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN user_ref OPTIONS (
    column_name 'user_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN action OPTIONS (
    column_name 'action'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN old_value OPTIONS (
    column_name 'old_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN new_value OPTIONS (
    column_name 'new_value'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN modification_date_time OPTIONS (
    column_name 'modification_date_time'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN specimen_individual_ref OPTIONS (
    column_name 'specimen_individual_ref'
);
ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived ALTER COLUMN specimen_ref OPTIONS (
    column_name 'specimen_ref'
);


ALTER FOREIGN TABLE darwin2_rbins_data.zzz_users_tracking_archived OWNER TO darwin2;

--
-- TOC entry 591 (class 1259 OID 1442074)
-- Name: fix_taxonomy_mista; Type: TABLE; Schema: data_cleaning; Owner: darwin2
--

CREATE TABLE data_cleaning.fix_taxonomy_mista (
    name_in_darwin character varying,
    author character varying
);


ALTER TABLE data_cleaning.fix_taxonomy_mista OWNER TO darwin2;

--
-- TOC entry 592 (class 1259 OID 1442080)
-- Name: mv_overlap_expedition_collectors; Type: MATERIALIZED VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE MATERIALIZED VIEW data_cleaning.mv_overlap_expedition_collectors AS
 SELECT expeditions.id AS id_expedition,
    expeditions.name,
    count(DISTINCT specimens.id) AS cpt_spec_for_expedition,
    darwin2.fulltoindex((regexp_replace((expeditions.name)::text, '(\d+)([^[:space:]]+)(\s?[^[:space:]]*)'::text, '\1\3'::text))::character varying) AS fulltoindex,
    people.id AS people_id,
    people.formated_name,
    count(DISTINCT catalogue_people.record_id) AS cpt_spec_for_collector
   FROM (((darwin2.expeditions
     JOIN darwin2.people ON (((darwin2.fulltoindex((regexp_replace((expeditions.name)::text, '(\d+)([^[:space:]]+)(\s?[^[:space:]]*)'::text, '\1\3'::text))::character varying))::text = (darwin2.fulltoindex((regexp_replace((people.formated_name)::text, '(\d+)([^[:space:]]+)(\s?[^[:space:]]*)'::text, '\1\3'::text))::character varying))::text)))
     LEFT JOIN darwin2.specimens ON ((expeditions.id = specimens.expedition_ref)))
     LEFT JOIN darwin2.catalogue_people ON ((((catalogue_people.referenced_relation)::text = 'specimens'::text) AND ((catalogue_people.people_type)::text = 'collector'::text) AND (people.id = catalogue_people.people_ref))))
  GROUP BY expeditions.id, people.formated_name, people.id, expeditions.name
  WITH NO DATA;


ALTER TABLE data_cleaning.mv_overlap_expedition_collectors OWNER TO darwin2;

--
-- TOC entry 593 (class 1259 OID 1442088)
-- Name: mv_taxonomy_canonical_hierarchy; Type: MATERIALIZED VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE MATERIALIZED VIEW data_cleaning.mv_taxonomy_canonical_hierarchy AS
 SELECT taxonomy.name,
    taxonomy.name_indexed,
    taxonomy.level_ref,
    taxonomy.status,
    taxonomy.local_naming,
    taxonomy.color,
    taxonomy.path,
    taxonomy.parent_ref,
    taxonomy.metadata_ref,
    taxonomy.id,
    taxonomy.extinct,
    taxonomy.taxonomy_creation_date,
    taxonomy.import_ref,
    taxonomy.sensitive_info_withheld,
    taxonomy.is_reference_taxonomy,
    taxonomy.cites,
    (darwin2.fct_rmca_taxonomy_split_name_author(taxonomy.name, taxonomy.level_ref))[1] AS canonical,
    (darwin2.fct_rmca_taxonomy_split_name_author(taxonomy.name, taxonomy.level_ref))[2] AS name_author,
    darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_key(((((taxonomy.path)::text || ((taxonomy.id)::character varying)::text) || '/'::text))::character varying) AS taxon_hstore
   FROM darwin2.taxonomy
  WITH NO DATA;


ALTER TABLE data_cleaning.mv_taxonomy_canonical_hierarchy OWNER TO darwin2;

--
-- TOC entry 594 (class 1259 OID 1442096)
-- Name: mv_taxonomy_rbins_20201202_split_name_author; Type: MATERIALIZED VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE MATERIALIZED VIEW data_cleaning.mv_taxonomy_rbins_20201202_split_name_author AS
 SELECT a.name,
    a.name_indexed,
    a.level_ref,
    a.status,
    a.local_naming,
    a.color,
    a.path,
    a.parent_ref,
    a.id,
    a.extinct,
    a.taxonomy_creation_date,
    a.import_ref,
    a.sensitive_info_withheld,
    a.is_reference_taxonomy,
    a.metadata_ref,
    a.cites,
    (darwin2.fct_rmca_taxonomy_split_name_author(a.name, a.level_ref))[1] AS name_only,
    (darwin2.fct_rmca_taxonomy_split_name_author(a.name, a.level_ref))[2] AS author
   FROM darwin2.taxonomy a
  WITH NO DATA;


ALTER TABLE data_cleaning.mv_taxonomy_rbins_20201202_split_name_author OWNER TO darwin2;

--
-- TOC entry 595 (class 1259 OID 1442104)
-- Name: taxonomy_rmca_20201202; Type: TABLE; Schema: data_cleaning; Owner: darwin2
--

CREATE TABLE data_cleaning.taxonomy_rmca_20201202 (
    child_name_id bigint,
    name character varying,
    id integer,
    path character varying,
    level_ref integer,
    level_name character varying,
    level_order integer,
    full_path character varying,
    alpha_path character varying
);


ALTER TABLE data_cleaning.taxonomy_rmca_20201202 OWNER TO darwin2;

--
-- TOC entry 596 (class 1259 OID 1442110)
-- Name: mv_taxonomy_rmca_20201202_split_name_author; Type: MATERIALIZED VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE MATERIALIZED VIEW data_cleaning.mv_taxonomy_rmca_20201202_split_name_author AS
 SELECT a.child_name_id,
    a.name,
    a.id,
    a.path,
    a.level_ref,
    a.level_name,
    a.level_order,
    a.full_path,
    a.alpha_path,
    (darwin2.fct_rmca_taxonomy_split_name_author(a.name, a.level_ref))[1] AS name_only,
    (darwin2.fct_rmca_taxonomy_split_name_author(a.name, a.level_ref))[2] AS author
   FROM data_cleaning.taxonomy_rmca_20201202 a
  WITH NO DATA;


ALTER TABLE data_cleaning.mv_taxonomy_rmca_20201202_split_name_author OWNER TO darwin2;

--
-- TOC entry 597 (class 1259 OID 1442117)
-- Name: people_bck20200406; Type: TABLE; Schema: data_cleaning; Owner: darwin2
--

CREATE TABLE data_cleaning.people_bck20200406 (
    is_physical boolean,
    sub_type character varying,
    formated_name character varying,
    formated_name_indexed character varying,
    formated_name_unique character varying,
    title character varying,
    family_name character varying,
    given_name character varying,
    additional_names character varying,
    birth_date_mask integer,
    birth_date date,
    gender character(1),
    id integer,
    db_people_type integer,
    end_date_mask integer,
    end_date date,
    activity_date_from_mask integer,
    activity_date_from date,
    activity_date_to_mask integer,
    activity_date_to date,
    name_formated_indexed text,
    import_ref integer
);


ALTER TABLE data_cleaning.people_bck20200406 OWNER TO darwin2;

--
-- TOC entry 598 (class 1259 OID 1442123)
-- Name: v_mista_compare_collectors; Type: VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE VIEW data_cleaning.v_mista_compare_collectors AS
 WITH a AS (
         SELECT unnest((properties.lower_value)::character varying[]) AS name,
            properties.record_id,
            gtu.id,
            gtu.expedition_ref,
            array_agg(( SELECT darwin2.fulltoindex(people.formated_name) AS fulltoindex
                   FROM darwin2.people
                  WHERE (people.id = catalogue_people.people_ref))) AS list_people
           FROM ((darwin2.properties
             JOIN darwin2.gtu ON ((properties.record_id = gtu.id)))
             LEFT JOIN darwin2.catalogue_people ON ((((catalogue_people.referenced_relation)::text = 'expeditions'::text) AND (gtu.expedition_ref = catalogue_people.record_id))))
          WHERE (((properties.referenced_relation)::text = 'gtu'::text) AND ((properties.property_type)::text = 'collectors'::text) AND (gtu.import_ref = 1072))
          GROUP BY properties.lower_value, properties.record_id, gtu.id, gtu.expedition_ref
        ), b AS (
         SELECT DISTINCT btrim((a_1.name)::text) AS btrim,
            array_agg(DISTINCT people.id ORDER BY people.id) AS people_agg,
            array_agg(DISTINCT btrim((people.formated_name)::text)) AS people_array,
            a_1.expedition_ref,
            a_1.list_people
           FROM (a a_1
             LEFT JOIN darwin2.people ON (((darwin2.fulltoindex(a_1.name))::text = (darwin2.fulltoindex(people.formated_name))::text)))
          GROUP BY a_1.name, a_1.expedition_ref, a_1.list_people
        )
 SELECT DISTINCT a.name,
    a.expedition_ref,
    a.list_people,
    ( SELECT expeditions.name AS exp_name
           FROM darwin2.expeditions
          WHERE (expeditions.id = a.expedition_ref)) AS exp_name
   FROM a
  ORDER BY a.expedition_ref;


ALTER TABLE data_cleaning.v_mista_compare_collectors OWNER TO darwin2;

--
-- TOC entry 599 (class 1259 OID 1442128)
-- Name: v_mista_existing_expeditions_specimen; Type: VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE VIEW data_cleaning.v_mista_existing_expeditions_specimen AS
 SELECT expeditions.id,
    expeditions.name,
    expeditions.name_indexed,
    expeditions.expedition_from_date_mask,
    expeditions.expedition_from_date,
    expeditions.expedition_to_date_mask,
    expeditions.expedition_to_date,
    ( SELECT count(specimens.id) AS count
           FROM darwin2.specimens
          WHERE (specimens.expedition_ref = expeditions.id)) AS count_specimen
   FROM darwin2.expeditions
  WHERE (((expeditions.name)::text ~~* 'ANT%'::text) OR ((expeditions.name)::text ~~* 'ARC%'::text) OR ((expeditions.name)::text ~~* 'EAB%'::text) OR ((expeditions.name)::text ~~* 'polar%'::text))
  ORDER BY expeditions.name;


ALTER TABLE data_cleaning.v_mista_existing_expeditions_specimen OWNER TO darwin2;

--
-- TOC entry 600 (class 1259 OID 1442133)
-- Name: v_mista_existing_expeditions_specimen_log; Type: VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE VIEW data_cleaning.v_mista_existing_expeditions_specimen_log AS
 SELECT v_mista_existing_expeditions_specimen.id,
    v_mista_existing_expeditions_specimen.name,
    v_mista_existing_expeditions_specimen.name_indexed,
    v_mista_existing_expeditions_specimen.expedition_from_date_mask,
    v_mista_existing_expeditions_specimen.expedition_from_date,
    v_mista_existing_expeditions_specimen.expedition_to_date_mask,
    v_mista_existing_expeditions_specimen.expedition_to_date,
    v_mista_existing_expeditions_specimen.count_specimen,
    users_tracking.action,
    users_tracking.modification_date_time,
    COALESCE(users.formated_name, 'Franck or Jean-Marc'::character varying) AS "coalesce"
   FROM ((data_cleaning.v_mista_existing_expeditions_specimen
     LEFT JOIN darwin2.users_tracking ON (((v_mista_existing_expeditions_specimen.id = users_tracking.record_id) AND ((users_tracking.referenced_relation)::text = 'expeditions'::text))))
     LEFT JOIN darwin2.users ON ((users_tracking.user_ref = users.id)));


ALTER TABLE data_cleaning.v_mista_existing_expeditions_specimen_log OWNER TO darwin2;

--
-- TOC entry 601 (class 1259 OID 1442138)
-- Name: v_mista_fix_existing_expeditions; Type: VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE VIEW data_cleaning.v_mista_fix_existing_expeditions AS
 SELECT users_tracking.id,
    users_tracking.referenced_relation,
    users_tracking.record_id,
    users_tracking.user_ref,
    users_tracking.action,
    users_tracking.old_value,
    users_tracking.new_value,
    users_tracking.modification_date_time,
    ((users_tracking.new_value OPERATOR(public.-) users_tracking.old_value) OPERATOR(public.->) 'expedition_name'::text) AS new_exp,
    ((users_tracking.old_value OPERATOR(public.-) users_tracking.new_value) OPERATOR(public.->) 'expedition_name'::text) AS old_exp
   FROM darwin2.users_tracking
  WHERE ((users_tracking.modification_date_time < '2021-03-11 00:00:00'::timestamp without time zone) AND (users_tracking.modification_date_time > '2021-03-10 00:00:00'::timestamp without time zone) AND ((users_tracking.user_ref = 1) OR (users_tracking.user_ref = 47846)) AND ((users_tracking.referenced_relation)::text = 'specimens'::text))
  ORDER BY users_tracking.id DESC;


ALTER TABLE data_cleaning.v_mista_fix_existing_expeditions OWNER TO darwin2;

--
-- TOC entry 602 (class 1259 OID 1442143)
-- Name: v_mista_sort_collectors_in_gtu; Type: MATERIALIZED VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE MATERIALIZED VIEW data_cleaning.v_mista_sort_collectors_in_gtu AS
 SELECT a.collec_ind,
    a.lower_value,
    a.record_id,
    rank() OVER (PARTITION BY a.record_id ORDER BY ("position"((a.lower_value)::text, a.collec_ind))) AS rank
   FROM ( SELECT regexp_split_to_table((properties.lower_value)::text, ','::text) AS collec_ind,
            properties.referenced_relation,
            properties.record_id,
            properties.id,
            properties.property_type,
            properties.applies_to,
            properties.applies_to_indexed,
            properties.date_from_mask,
            properties.date_from,
            properties.date_to_mask,
            properties.date_to,
            properties.is_quantitative,
            properties.property_unit,
            properties.method,
            properties.method_indexed,
            properties.lower_value,
            properties.lower_value_unified,
            properties.upper_value,
            properties.upper_value_unified,
            properties.property_accuracy,
            properties.property_type_ref
           FROM darwin2.properties
          WHERE ((properties.record_id IN ( SELECT gtu.id
                   FROM darwin2.gtu
                  WHERE (gtu.import_ref = 1072))) AND ((properties.referenced_relation)::text = 'gtu'::text) AND ((properties.property_type)::text = 'collectors'::text))) a
  WITH NO DATA;


ALTER TABLE data_cleaning.v_mista_sort_collectors_in_gtu OWNER TO darwin2;

--
-- TOC entry 603 (class 1259 OID 1442151)
-- Name: v_taxonomy_transpose_ranks; Type: VIEW; Schema: data_cleaning; Owner: darwin2
--

CREATE VIEW data_cleaning.v_taxonomy_transpose_ranks AS
 SELECT mv_taxonomy_canonical_hierarchy.name,
    mv_taxonomy_canonical_hierarchy.name_indexed,
    mv_taxonomy_canonical_hierarchy.level_ref,
    mv_taxonomy_canonical_hierarchy.status,
    mv_taxonomy_canonical_hierarchy.local_naming,
    mv_taxonomy_canonical_hierarchy.color,
    mv_taxonomy_canonical_hierarchy.path,
    mv_taxonomy_canonical_hierarchy.parent_ref,
    mv_taxonomy_canonical_hierarchy.metadata_ref,
    mv_taxonomy_canonical_hierarchy.id,
    mv_taxonomy_canonical_hierarchy.extinct,
    mv_taxonomy_canonical_hierarchy.taxonomy_creation_date,
    mv_taxonomy_canonical_hierarchy.import_ref,
    mv_taxonomy_canonical_hierarchy.sensitive_info_withheld,
    mv_taxonomy_canonical_hierarchy.is_reference_taxonomy,
    mv_taxonomy_canonical_hierarchy.cites,
    mv_taxonomy_canonical_hierarchy.canonical,
    mv_taxonomy_canonical_hierarchy.name_author,
    mv_taxonomy_canonical_hierarchy.taxon_hstore,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '1'::text) AS domain,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '2'::text) AS kingdom,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '3'::text) AS super_phylum,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '4'::text) AS phylum,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '5'::text) AS sub_phylum,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '6'::text) AS infra_phylum,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '7'::text) AS super_cohort_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '8'::text) AS cohort_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '9'::text) AS sub_cohort_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '10'::text) AS infra_cohort_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '11'::text) AS super_class,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '12'::text) AS class,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '13'::text) AS sub_class,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '14'::text) AS infra_class,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '15'::text) AS super_division,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '16'::text) AS division,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '17'::text) AS sub_division,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '18'::text) AS infra_division,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '19'::text) AS super_legion,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '20'::text) AS legion,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '21'::text) AS sub_legion,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '22'::text) AS infra_legion,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '23'::text) AS super_cohort_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '24'::text) AS cohort_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '25'::text) AS sub_cohort_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '26'::text) AS infra_cohort_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '27'::text) AS super_order,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '28'::text) AS "order",
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '29'::text) AS sub_order,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '30'::text) AS infra_order,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '31'::text) AS section_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '32'::text) AS sub_section_zoology,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '33'::text) AS super_family,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '34'::text) AS family,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '35'::text) AS sub_family,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '36'::text) AS infra_family,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '37'::text) AS super_tribe,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '38'::text) AS tribe,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '39'::text) AS sub_tribe,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '40'::text) AS infra_tribe,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '41'::text) AS genus,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '42'::text) AS sub_genus,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '43'::text) AS section_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '44'::text) AS sub_section_botany,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '45'::text) AS serie,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '46'::text) AS sub_serie,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '47'::text) AS super_species,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '48'::text) AS species,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '49'::text) AS sub_species,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '50'::text) AS variety,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '51'::text) AS sub_variety,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '52'::text) AS form,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '53'::text) AS sub_form,
    (mv_taxonomy_canonical_hierarchy.taxon_hstore OPERATOR(public.->) '54'::text) AS abberans
   FROM data_cleaning.mv_taxonomy_canonical_hierarchy;


ALTER TABLE data_cleaning.v_taxonomy_transpose_ranks OWNER TO darwin2;

--
-- TOC entry 604 (class 1259 OID 1442156)
-- Name: mapping_geonames; Type: TABLE; Schema: georeferencing; Owner: darwin2
--

CREATE TABLE georeferencing.mapping_geonames (
    pk integer NOT NULL,
    gtu_refs integer[],
    group_name character varying,
    sub_group_name character varying,
    name character varying,
    count_specimens bigint,
    country character varying,
    country_iso character varying,
    geoname_id character varying,
    geoname_response json,
    geoname_type character varying,
    geoname_iso character varying,
    geoname_name character varying,
    geoname_lat character varying,
    geoname_long character varying
);


ALTER TABLE georeferencing.mapping_geonames OWNER TO darwin2;

--
-- TOC entry 605 (class 1259 OID 1442162)
-- Name: mapping_geonames_distinct_categories; Type: TABLE; Schema: georeferencing; Owner: darwin2
--

CREATE TABLE georeferencing.mapping_geonames_distinct_categories (
    sub_group_name character varying,
    sub_group_name_indexed character varying,
    geoname_type character varying,
    pk integer NOT NULL
);


ALTER TABLE georeferencing.mapping_geonames_distinct_categories OWNER TO darwin2;

--
-- TOC entry 606 (class 1259 OID 1442168)
-- Name: mapping_geonames_distinct_categories_pk_seq; Type: SEQUENCE; Schema: georeferencing; Owner: darwin2
--

CREATE SEQUENCE georeferencing.mapping_geonames_distinct_categories_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE georeferencing.mapping_geonames_distinct_categories_pk_seq OWNER TO darwin2;

--
-- TOC entry 9340 (class 0 OID 0)
-- Dependencies: 606
-- Name: mapping_geonames_distinct_categories_pk_seq; Type: SEQUENCE OWNED BY; Schema: georeferencing; Owner: darwin2
--

ALTER SEQUENCE georeferencing.mapping_geonames_distinct_categories_pk_seq OWNED BY georeferencing.mapping_geonames_distinct_categories.pk;


--
-- TOC entry 607 (class 1259 OID 1442170)
-- Name: mapping_geonames_pk_seq; Type: SEQUENCE; Schema: georeferencing; Owner: darwin2
--

CREATE SEQUENCE georeferencing.mapping_geonames_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE georeferencing.mapping_geonames_pk_seq OWNER TO darwin2;

--
-- TOC entry 9341 (class 0 OID 0)
-- Dependencies: 607
-- Name: mapping_geonames_pk_seq; Type: SEQUENCE OWNED BY; Schema: georeferencing; Owner: darwin2
--

ALTER SEQUENCE georeferencing.mapping_geonames_pk_seq OWNED BY georeferencing.mapping_geonames.pk;


--
-- TOC entry 608 (class 1259 OID 1442172)
-- Name: mv_mapping_darwin_categories_to_nima_tv; Type: MATERIALIZED VIEW; Schema: georeferencing; Owner: darwin2
--

CREATE MATERIALIZED VIEW georeferencing.mv_mapping_darwin_categories_to_nima_tv AS
 SELECT DISTINCT mapping_geonames_distinct_categories.sub_group_name,
    mapping_geonames_distinct_categories.sub_group_name_indexed,
    mv_tag_to_locations.geonames_type_mapped
   FROM (georeferencing.mapping_geonames_distinct_categories
     JOIN darwin2.mv_tag_to_locations ON (((mapping_geonames_distinct_categories.sub_group_name_indexed)::text = (mv_tag_to_locations.original_sub_type)::text)))
  WITH NO DATA;


ALTER TABLE georeferencing.mv_mapping_darwin_categories_to_nima_tv OWNER TO darwin2;

--
-- TOC entry 609 (class 1259 OID 1442179)
-- Name: t_gtu_country_to_geoname_iso; Type: TABLE; Schema: georeferencing; Owner: darwin2
--

CREATE TABLE georeferencing.t_gtu_country_to_geoname_iso (
    country text,
    specimen_count bigint,
    geoname_result json,
    iso text,
    pk integer NOT NULL
);


ALTER TABLE georeferencing.t_gtu_country_to_geoname_iso OWNER TO darwin2;

--
-- TOC entry 610 (class 1259 OID 1442185)
-- Name: t_gtu_to_geoname_iso_pk_seq; Type: SEQUENCE; Schema: georeferencing; Owner: darwin2
--

CREATE SEQUENCE georeferencing.t_gtu_to_geoname_iso_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE georeferencing.t_gtu_to_geoname_iso_pk_seq OWNER TO darwin2;

--
-- TOC entry 9342 (class 0 OID 0)
-- Dependencies: 610
-- Name: t_gtu_to_geoname_iso_pk_seq; Type: SEQUENCE OWNED BY; Schema: georeferencing; Owner: darwin2
--

ALTER SEQUENCE georeferencing.t_gtu_to_geoname_iso_pk_seq OWNED BY georeferencing.t_gtu_country_to_geoname_iso.pk;


--
-- TOC entry 611 (class 1259 OID 1442187)
-- Name: tv_nominatim_georeference_rivers; Type: TABLE; Schema: georeferencing; Owner: postgres
--

CREATE TABLE georeferencing.tv_nominatim_georeference_rivers (
    pk integer,
    gtu_refs integer[],
    group_name character varying,
    sub_group_name character varying,
    name character varying,
    count_specimens bigint,
    country character varying,
    country_iso character varying,
    geoname_type character varying,
    nominatim_result json,
    osm_result json,
    osm_id text,
    name_in_nominatim text,
    name_in_overpass text,
    osm_category text,
    osm_type text,
    longitude text,
    latitude text,
    geom public.geometry,
    geom_type text,
    wikidata_id text,
    date_query timestamp with time zone,
    url_nominatim character varying,
    url_osm_overpass character varying,
    pk_serial integer NOT NULL
);


ALTER TABLE georeferencing.tv_nominatim_georeference_rivers OWNER TO postgres;

--
-- TOC entry 612 (class 1259 OID 1442193)
-- Name: tv_nominatim_georeference_pk_serial_seq; Type: SEQUENCE; Schema: georeferencing; Owner: postgres
--

CREATE SEQUENCE georeferencing.tv_nominatim_georeference_pk_serial_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE georeferencing.tv_nominatim_georeference_pk_serial_seq OWNER TO postgres;

--
-- TOC entry 9344 (class 0 OID 0)
-- Dependencies: 612
-- Name: tv_nominatim_georeference_pk_serial_seq; Type: SEQUENCE OWNED BY; Schema: georeferencing; Owner: postgres
--

ALTER SEQUENCE georeferencing.tv_nominatim_georeference_pk_serial_seq OWNED BY georeferencing.tv_nominatim_georeference_rivers.pk_serial;


--
-- TOC entry 613 (class 1259 OID 1442195)
-- Name: v_georef_yves_2021; Type: VIEW; Schema: georeferencing; Owner: darwin2
--

CREATE VIEW georeferencing.v_georef_yves_2021 AS
 SELECT specimens.uuid,
    specimens.main_code_indexed,
    specimens.gtu_location,
    specimens.gtu_others_tag_value,
    specimens.gtu_tag_values_indexed,
    specimens.gtu_country_tag_value,
    specimens.gtu_ref,
    specimens.id,
    specimens.specimen_creation_date
   FROM darwin2.specimens
  WHERE (specimens.id IN ( SELECT darwin2.fct_rmca_dynamic_saved_search(1242, 47846) AS fct_rmca_dynamic_saved_search));


ALTER TABLE georeferencing.v_georef_yves_2021 OWNER TO darwin2;

--
-- TOC entry 614 (class 1259 OID 1442200)
-- Name: v_georef_yves_2021_distinct_and_split; Type: VIEW; Schema: georeferencing; Owner: darwin2
--

CREATE VIEW georeferencing.v_georef_yves_2021_distinct_and_split AS
 WITH a AS (
         SELECT DISTINCT tags.tag,
            tags.group_type,
            tags.sub_group_type,
            v_georef_yves_2021.gtu_others_tag_value,
            v_georef_yves_2021.gtu_tag_values_indexed,
            v_georef_yves_2021.gtu_country_tag_value,
            v_georef_yves_2021.gtu_ref
           FROM (georeferencing.v_georef_yves_2021
             LEFT JOIN darwin2.tags ON ((v_georef_yves_2021.gtu_ref = tags.gtu_ref)))
          WHERE ((lower((tags.sub_group_type)::text) <> 'country'::text) AND (lower((tags.group_type)::text) <> 'habitat'::text) AND (v_georef_yves_2021.gtu_location IS NULL))
          ORDER BY v_georef_yves_2021.gtu_country_tag_value, v_georef_yves_2021.gtu_ref
        ), b AS (
         SELECT a.tag,
            regexp_matches((a.tag)::text, '(between)(.+?)( and )(.+)$'::text) AS split,
            a.group_type,
            a.sub_group_type,
            a.gtu_others_tag_value,
            a.gtu_tag_values_indexed,
            a.gtu_country_tag_value,
            a.gtu_ref
           FROM a
        )
 SELECT a.tag,
    a.group_type,
    a.sub_group_type,
    a.gtu_others_tag_value,
    a.gtu_tag_values_indexed,
    a.gtu_country_tag_value,
    a.gtu_ref
   FROM a
  WHERE (lower((a.tag)::text) !~~ '%between%'::text)
UNION
 SELECT b.split[2] AS tag,
    b.group_type,
    b.sub_group_type,
    b.gtu_others_tag_value,
    b.gtu_tag_values_indexed,
    b.gtu_country_tag_value,
    b.gtu_ref
   FROM b
UNION
 SELECT b.split[4] AS tag,
    b.group_type,
    b.sub_group_type,
    b.gtu_others_tag_value,
    b.gtu_tag_values_indexed,
    b.gtu_country_tag_value,
    b.gtu_ref
   FROM b;


ALTER TABLE georeferencing.v_georef_yves_2021_distinct_and_split OWNER TO darwin2;

--
-- TOC entry 615 (class 1259 OID 1442205)
-- Name: v_nominatim_osm_darwin_rivers; Type: VIEW; Schema: georeferencing; Owner: postgres
--

CREATE VIEW georeferencing.v_nominatim_osm_darwin_rivers AS
 SELECT mapping_geonames.pk,
    mapping_geonames.gtu_refs,
    mapping_geonames.group_name,
    mapping_geonames.sub_group_name,
    mapping_geonames.name,
    mapping_geonames.count_specimens,
    mapping_geonames.country,
    mapping_geonames.country_iso,
    mapping_geonames.geoname_type,
    b.nominatim_result,
    b.osm_result,
    b.osm_id,
    b.name_in_nominatim,
    b.name_in_overpass,
    b.osm_category,
    b.osm_type,
    b.longitude,
    b.latitude,
    b.geom,
    b.geom_type,
    b.wikidata_id,
    b.date_query,
    b.url_nominatim,
    b.url_osm_overpass
   FROM (georeferencing.mapping_geonames
     LEFT JOIN LATERAL georeferencing.call_nominatim_service(mapping_geonames.name, mapping_geonames.country_iso, NULL::character varying, ARRAY['water'::text, 'river'::text]) b(nominatim_result, osm_result, osm_id, name_in_nominatim, name_in_overpass, osm_category, osm_type, longitude, latitude, geom, geom_type, wikidata_id, date_query, url_nominatim, url_osm_overpass) ON ((1 = 1)))
  WHERE (((mapping_geonames.geoname_type)::text = 'STM'::text) AND (mapping_geonames.name IS NOT NULL) AND (mapping_geonames.country_iso IS NOT NULL));


ALTER TABLE georeferencing.v_nominatim_osm_darwin_rivers OWNER TO postgres;

--
-- TOC entry 616 (class 1259 OID 1442210)
-- Name: v_report_on_nominatim_rivers; Type: VIEW; Schema: georeferencing; Owner: darwin2
--

CREATE VIEW georeferencing.v_report_on_nominatim_rivers AS
 SELECT tv_nominatim_georeference_rivers.pk,
    tv_nominatim_georeference_rivers.gtu_refs,
    tv_nominatim_georeference_rivers.group_name,
    tv_nominatim_georeference_rivers.sub_group_name,
    tv_nominatim_georeference_rivers.name,
    tv_nominatim_georeference_rivers.count_specimens,
    tv_nominatim_georeference_rivers.country,
    tv_nominatim_georeference_rivers.country_iso,
    count(tv_nominatim_georeference_rivers.osm_id) AS count_osm_found,
    min(tv_nominatim_georeference_rivers.osm_id) AS osm_id,
    min(tv_nominatim_georeference_rivers.name_in_nominatim) AS name_in_nominatim,
    min(tv_nominatim_georeference_rivers.osm_category) AS osm_category,
    min(tv_nominatim_georeference_rivers.osm_type) AS osm_type,
    min(tv_nominatim_georeference_rivers.longitude) AS longitude,
    min(tv_nominatim_georeference_rivers.latitude) AS latitude,
    min(tv_nominatim_georeference_rivers.wikidata_id) AS wikidata_id,
    min((tv_nominatim_georeference_rivers.url_nominatim)::text) AS url_nominatim,
    min((tv_nominatim_georeference_rivers.url_osm_overpass)::text) AS url_osm_overpass
   FROM georeferencing.tv_nominatim_georeference_rivers
  GROUP BY tv_nominatim_georeference_rivers.pk, tv_nominatim_georeference_rivers.gtu_refs, tv_nominatim_georeference_rivers.group_name, tv_nominatim_georeference_rivers.sub_group_name, tv_nominatim_georeference_rivers.name, tv_nominatim_georeference_rivers.count_specimens, tv_nominatim_georeference_rivers.country, tv_nominatim_georeference_rivers.country_iso;


ALTER TABLE georeferencing.v_report_on_nominatim_rivers OWNER TO darwin2;

--
-- TOC entry 617 (class 1259 OID 1442215)
-- Name: taxamatch; Type: TABLE; Schema: import; Owner: darwin2
--

CREATE TABLE import.taxamatch (
    taxon text,
    gbif_name_status text,
    gbif_match_type text,
    gbif_rank text,
    gbif_id text,
    gbif_matched text,
    gbif_kingdom text,
    gbif_phylum text,
    gbif_class text,
    gbif_order text,
    gbif_family text,
    gbif_genus text,
    gbif_species text,
    gbif_subspecies text,
    gbif_full_name text,
    gbif_author text,
    gbif_source text,
    gbif_reference text,
    rgb_match_type text,
    background_style text,
    gbif_url text,
    worms_id text,
    worms_scientific_name text,
    worms_author text,
    worms_status text,
    worms_accepted_name text,
    worms_accepted_author text,
    worms_phylum text,
    worms_class text,
    worms_order text,
    worms_family text,
    worms_genus text,
    worms_species text,
    worms_subspecies text,
    worms_is_marine text,
    worms_is_brackish text,
    worms_is_freshwater text,
    worms_is_terrestrial text,
    worms_lsid text,
    worms_url text
);


ALTER TABLE import.taxamatch OWNER TO darwin2;

--
-- TOC entry 618 (class 1259 OID 1442221)
-- Name: v_darwin_ipt_rbins; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.v_darwin_ipt_rbins AS
SELECT
    NULL::text AS ids,
    NULL::text AS type,
    NULL::text AS occurrence_id,
    NULL::timestamp without time zone AS ndwc_created,
    NULL::timestamp without time zone AS modified,
    NULL::text AS basis_of_record,
    NULL::text AS occurrence_status,
    NULL::text AS rights_holder,
    NULL::text AS institution_id,
    NULL::text AS old_institution_id,
    NULL::text AS institution_code,
    NULL::text AS owner_institution_code,
    NULL::character varying AS dataset_id,
    NULL::character varying AS dataset_name,
    NULL::text AS collection_code,
    NULL::character varying AS collection_name,
    NULL::text AS collection_id,
    NULL::text AS ndwc_collection_path,
    NULL::text AS catalog_number,
    NULL::text AS language,
    NULL::text AS license,
    NULL::character varying AS scientific_name,
    NULL::integer AS ndwc_local_taxon_id,
    NULL::character varying AS scientific_name_id,
    NULL::character varying AS taxon_id,
    NULL::character varying AS parent_name_usage,
    NULL::text AS kingdom,
    NULL::text AS phylum,
    NULL::text AS class,
    NULL::text AS ordo,
    NULL::text AS family,
    NULL::text AS genus,
    NULL::text AS subgenus,
    NULL::text AS specific_epithet,
    NULL::text AS infra_specific_epithet,
    NULL::text AS scientific_name_authorship,
    NULL::text AS nomenclatural_code,
    NULL::character varying AS taxonomic_status,
    NULL::text AS taxon_remarks,
    NULL::character varying AS taxon_rank,
    NULL::text AS identification_qualifier,
    NULL::character varying AS type_status,
    NULL::character varying AS ndwc_taxon_path,
    NULL::integer AS ndwc_taxon_ref,
    NULL::text AS recorded_by,
    NULL::timestamp without time zone AS date_identified,
    NULL::integer AS organism_quantity,
    NULL::text AS organism_quantity_type,
    NULL::character varying AS sex,
    NULL::character varying AS life_stage,
    NULL::text AS preparations,
    NULL::text AS disposition,
    NULL::text AS other_catalog_numbers,
    NULL::text AS associated_references,
    NULL::text AS information_withheld,
    NULL::text AS verbatim_location,
    NULL::text AS location,
    NULL::text AS ndwc_nice_verbatim_location,
    NULL::character varying AS location_id,
    NULL::text[] AS ndwc_geotypes,
    NULL::character varying AS ndwc_verbatim_country,
    NULL::integer AS ndwc_gtu_identifier,
    NULL::text AS country,
    NULL::text AS country_code,
    NULL::text AS water_body,
    NULL::text AS island_group,
    NULL::text AS island,
    NULL::double precision AS decimal_latitude,
    NULL::double precision AS decimal_longitude,
    NULL::numeric AS ndwc_tag_decimal_latitude,
    NULL::numeric AS ndwc_tag_decimal_longitude,
    NULL::double precision AS ndwc_gtu_decimal_latitude,
    NULL::double precision AS ndwc_gtu_decimal_longitude,
    NULL::text AS geodetic_datum,
    NULL::text AS verbatim_srs,
    NULL::double precision AS coordinate_uncertainty_in_meters,
    NULL::text AS footprint_wkt,
    NULL::text AS minimum_elevation_in_meters,
    NULL::text AS maximum_elevation_in_meters,
    NULL::text AS minimum_depth_in_meters,
    NULL::text AS maximum_depth_in_meters,
    NULL::text AS identified_by,
    NULL::text AS event_date,
    NULL::character varying AS field_number,
    NULL::text AS habitat;


ALTER TABLE ipt.v_darwin_ipt_rbins OWNER TO ipt_viewer;

--
-- TOC entry 619 (class 1259 OID 1442226)
-- Name: mv_darwin_ipt_rbins; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_darwin_ipt_rbins AS
 SELECT v_darwin_ipt_rbins.ids,
    v_darwin_ipt_rbins.type,
    v_darwin_ipt_rbins.occurrence_id,
    v_darwin_ipt_rbins.ndwc_created,
    v_darwin_ipt_rbins.modified,
    v_darwin_ipt_rbins.basis_of_record,
    v_darwin_ipt_rbins.occurrence_status,
    v_darwin_ipt_rbins.rights_holder,
    v_darwin_ipt_rbins.institution_id,
    v_darwin_ipt_rbins.old_institution_id,
    v_darwin_ipt_rbins.institution_code,
    v_darwin_ipt_rbins.owner_institution_code,
    v_darwin_ipt_rbins.dataset_id,
    v_darwin_ipt_rbins.dataset_name,
    v_darwin_ipt_rbins.collection_code,
    v_darwin_ipt_rbins.collection_name,
    v_darwin_ipt_rbins.collection_id,
    v_darwin_ipt_rbins.ndwc_collection_path,
    v_darwin_ipt_rbins.catalog_number,
    v_darwin_ipt_rbins.language,
    v_darwin_ipt_rbins.license,
    v_darwin_ipt_rbins.scientific_name,
    v_darwin_ipt_rbins.ndwc_local_taxon_id,
    v_darwin_ipt_rbins.scientific_name_id,
    v_darwin_ipt_rbins.taxon_id,
    v_darwin_ipt_rbins.parent_name_usage,
    v_darwin_ipt_rbins.kingdom,
    v_darwin_ipt_rbins.phylum,
    v_darwin_ipt_rbins.class,
    v_darwin_ipt_rbins.ordo,
    v_darwin_ipt_rbins.family,
    v_darwin_ipt_rbins.genus,
    v_darwin_ipt_rbins.subgenus,
    v_darwin_ipt_rbins.specific_epithet,
    v_darwin_ipt_rbins.infra_specific_epithet,
    v_darwin_ipt_rbins.scientific_name_authorship,
    v_darwin_ipt_rbins.nomenclatural_code,
    v_darwin_ipt_rbins.taxonomic_status,
    v_darwin_ipt_rbins.taxon_remarks,
    v_darwin_ipt_rbins.taxon_rank,
    v_darwin_ipt_rbins.identification_qualifier,
    v_darwin_ipt_rbins.type_status,
    v_darwin_ipt_rbins.ndwc_taxon_path,
    v_darwin_ipt_rbins.ndwc_taxon_ref,
    v_darwin_ipt_rbins.recorded_by,
    v_darwin_ipt_rbins.date_identified,
    v_darwin_ipt_rbins.organism_quantity,
    v_darwin_ipt_rbins.organism_quantity_type,
    v_darwin_ipt_rbins.sex,
    v_darwin_ipt_rbins.life_stage,
    v_darwin_ipt_rbins.preparations,
    v_darwin_ipt_rbins.disposition,
    v_darwin_ipt_rbins.other_catalog_numbers,
    v_darwin_ipt_rbins.associated_references,
    v_darwin_ipt_rbins.information_withheld,
    v_darwin_ipt_rbins.verbatim_location,
    v_darwin_ipt_rbins.location,
    v_darwin_ipt_rbins.ndwc_nice_verbatim_location,
    v_darwin_ipt_rbins.location_id,
    v_darwin_ipt_rbins.ndwc_geotypes,
    v_darwin_ipt_rbins.ndwc_verbatim_country,
    v_darwin_ipt_rbins.ndwc_gtu_identifier,
    v_darwin_ipt_rbins.country,
    v_darwin_ipt_rbins.country_code,
    v_darwin_ipt_rbins.water_body,
    v_darwin_ipt_rbins.island_group,
    v_darwin_ipt_rbins.island,
    v_darwin_ipt_rbins.decimal_latitude,
    v_darwin_ipt_rbins.decimal_longitude,
    v_darwin_ipt_rbins.ndwc_tag_decimal_latitude,
    v_darwin_ipt_rbins.ndwc_tag_decimal_longitude,
    v_darwin_ipt_rbins.ndwc_gtu_decimal_latitude,
    v_darwin_ipt_rbins.ndwc_gtu_decimal_longitude,
    v_darwin_ipt_rbins.geodetic_datum,
    v_darwin_ipt_rbins.verbatim_srs,
    v_darwin_ipt_rbins.coordinate_uncertainty_in_meters,
    v_darwin_ipt_rbins.footprint_wkt,
    v_darwin_ipt_rbins.minimum_elevation_in_meters,
    v_darwin_ipt_rbins.maximum_elevation_in_meters,
    v_darwin_ipt_rbins.minimum_depth_in_meters,
    v_darwin_ipt_rbins.maximum_depth_in_meters,
    v_darwin_ipt_rbins.identified_by,
    v_darwin_ipt_rbins.event_date,
    v_darwin_ipt_rbins.field_number,
    v_darwin_ipt_rbins.habitat
   FROM ipt.v_darwin_ipt_rbins
  WITH NO DATA;


ALTER TABLE ipt.mv_darwin_ipt_rbins OWNER TO ipt_viewer;

--
-- TOC entry 620 (class 1259 OID 1442234)
-- Name: be_rbins_darwin; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_darwin AS
 SELECT 'be_rbins_darwin'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM ipt.mv_darwin_ipt_rbins occ;


ALTER TABLE ipt.be_rbins_darwin OWNER TO ipt_viewer;

--
-- TOC entry 621 (class 1259 OID 1442239)
-- Name: mv_properties; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_properties AS
 SELECT DISTINCT 'gtu'::text AS source,
    p.record_id AS gtu_ref,
    s.id AS specimen_ref,
    p.property_type AS property_type_id_sloppy,
    pt.type AS property_type_id_internal,
    au.url AS property_type_id,
    darwin2.cleanup_sample_properties((p.lower_value)::text) AS value,
        CASE
            WHEN ((pt.type)::text ~~ 'sampling_depth%'::text) THEN 'm'::character varying
            WHEN ((pt.type)::text ~~ 'sampling_elevation%'::text) THEN 'm'::character varying
            WHEN ((p.property_unit)::text = ''::text) THEN NULL::character varying
            ELSE p.property_unit
        END AS unit,
    specimens_stable_ids.uuid
   FROM ((((((darwin2.properties p
     LEFT JOIN darwin2.property_type pt ON ((pt.id = p.property_type_ref)))
     LEFT JOIN darwin2.property_tag_authority pau ON ((pt.id = pau.property_type_id)))
     LEFT JOIN darwin2.tag_authority au ON ((au.id = pau.tag_authority_ref)))
     LEFT JOIN darwin2.gtu ON ((gtu.id = p.record_id)))
     LEFT JOIN darwin2.specimens s ON ((s.gtu_ref = gtu.id)))
     LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
  WHERE (((p.referenced_relation)::text = 'gtu'::text) AND ((p.lower_value)::text <> 'BLABLA'::text) AND ((pt.type)::text = ANY (ARRAY[('sampling_elevation'::character varying)::text, ('sampling_depth'::character varying)::text, ('bottom_depth'::character varying)::text, ('sampling_gear'::character varying)::text, ('sampling_elevation_max'::character varying)::text, ('sampling_elevation_min'::character varying)::text, ('sampling_elevation_start'::character varying)::text, ('sampling_elevation_end'::character varying)::text, ('sampling_depth_max'::character varying)::text, ('sampling_depth_min'::character varying)::text, ('sampling_depth_start'::character varying)::text, ('sampling_depth_end'::character varying)::text, ('trap_bait'::character varying)::text, ('trap_bait_status'::character varying)::text, ('trap_details'::character varying)::text])))
UNION
 SELECT 'specimens'::text AS source,
    q.gtu_ref,
    q.specimen_ref,
    q.property_type_id_sloppy,
    q.property_type_id_internal,
    q.property_type_id,
    string_agg(DISTINCT q.value, '; '::text) AS value,
    q.unit,
    q.uuid
   FROM ( SELECT DISTINCT NULL::integer AS gtu_ref,
            p.record_id AS specimen_ref,
            p.property_type AS property_type_id_sloppy,
            pt.type AS property_type_id_internal,
            au.url AS property_type_id,
            darwin2.cleanup_sample_properties((p.lower_value)::text) AS value,
                CASE
                    WHEN ((p.property_unit)::text = ''::text) THEN NULL::character varying
                    WHEN ((pt.type)::text ~~ 'sampling_depth%'::text) THEN 'm'::character varying
                    ELSE p.property_unit
                END AS unit,
            specimens_stable_ids.uuid
           FROM (((((darwin2.properties p
             LEFT JOIN darwin2.property_type pt ON ((pt.id = p.property_type_ref)))
             LEFT JOIN darwin2.property_tag_authority pau ON ((pt.id = pau.property_type_id)))
             LEFT JOIN darwin2.tag_authority au ON ((au.id = pau.tag_authority_ref)))
             LEFT JOIN darwin2.specimens s ON ((s.id = p.record_id)))
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
          WHERE (((p.referenced_relation)::text = 'specimens'::text) AND ((pt.type)::text = ANY (ARRAY[('sampling_depth'::character varying)::text, ('core_depth_start'::character varying)::text, ('core_depth_end'::character varying)::text, ('meteorite_fall_or_find'::character varying)::text, ('meteorite_fall_or_find'::character varying)::text, ('meteorite_fall_or_find'::character varying)::text, ('verbatimLocality'::character varying)::text, ('preparation'::character varying)::text, ('preparator'::character varying)::text, ('quality'::character varying)::text, ('body_length'::character varying)::text, ('body_weight'::character varying)::text])))) q
  GROUP BY q.gtu_ref, q.specimen_ref, q.property_type_id_sloppy, q.property_type_id_internal, q.property_type_id, q.unit, q.uuid
  WITH NO DATA;


ALTER TABLE ipt.mv_properties OWNER TO ipt_viewer;

--
-- TOC entry 622 (class 1259 OID 1442247)
-- Name: v_darwin_ipt_rbins_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.v_darwin_ipt_rbins_mof AS
 WITH sampling_depth_range_cte AS (
         SELECT DISTINCT ('prop_depth_range_'::text || mv_properties.source) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            NULL::text AS text,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id,
            mv_properties.value,
            mv_properties.value AS orig_value,
            'm'::text AS measurement_unit
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text = 'sampling_depth'::text) AND (mv_properties.value ~ '^\d+-\d+$'::text))
        )
 SELECT DISTINCT ON (q.occurrence_id, q.measurement_type, q.measurement_type_id, q.measurement_unit) q.source,
    q.occurrence_id,
    q.measurement_type,
    q.measurement_type_id,
    q.measurement_value,
    q.orig_value,
    q.measurement_unit,
        CASE q.measurement_unit
            WHEN 'm'::text THEN 'http://vocab.nerc.ac.uk/collection/P06/current/ULAA/'::text
            WHEN 'kg'::text THEN 'http://vocab.nerc.ac.uk/collection/P06/current/KGXX/'::text
            WHEN 'mm'::text THEN 'http://vocab.nerc.ac.uk/collection/P06/current/UXMM/'::text
            WHEN 'cm'::text THEN 'http://vocab.nerc.ac.uk/collection/P06/current/ULCM/'::text
            WHEN 'g'::text THEN 'http://vocab.nerc.ac.uk/collection/P06/current/UGRM/'::text
            ELSE NULL::text
        END AS measurement_unit_id,
    q.measurement_value_id
   FROM ( SELECT DISTINCT 'specimen_sex'::text AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((specimens_stable_ids.uuid)::character varying)::text) AS occurrence_id,
            'sex'::text AS measurement_type,
            'vocab.nerc.ac.uk/collection/P01/current/ENTSEX01'::text AS measurement_type_id,
            (s.sex)::text AS measurement_value,
            NULL::text AS orig_value,
            NULL::text AS measurement_unit,
                CASE
                    WHEN ((s.sex)::text = 'female'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S102'::character varying
                    WHEN ((s.sex)::text = 'male'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S103'::character varying
                    WHEN ((s.sex)::text = 'undefined'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S105'::character varying
                    WHEN ((s.sex)::text = 'unknown'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S104'::character varying
                    WHEN ((s.sex)::text = 'not stated'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S104'::character varying
                    WHEN ((s.sex)::text = 'mixed'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S108'::character varying
                    WHEN ((s.sex)::text = 'female & male'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S108'::character varying
                    WHEN ((s.sex)::text = 'non applicable'::text) THEN 'http://vocab.nerc.ac.uk/collection/S10/current/S104'::character varying
                    ELSE s.sex
                END AS measurement_value_id
           FROM (darwin2.specimens s
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
          WHERE (s.sex IS NOT NULL)
        UNION
         SELECT DISTINCT 'specimen_stage'::text AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((specimens_stable_ids.uuid)::character varying)::text) AS occurrence_id,
            'lifestage'::text AS measurement_type,
            'vocab.nerc.ac.uk/collection/P01/current/LSTAGE01'::text AS measurement_type_id,
            (s.stage)::text AS measurement_value,
            NULL::text AS orig_value,
            NULL::text AS measurement_unit,
                CASE
                    WHEN ((s.stage)::text = 'adult'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1116'::character varying
                    WHEN ((s.stage)::text = 'juvenile'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1127'::character varying
                    WHEN ((s.stage)::text = 'subadult'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    WHEN ((s.stage)::text = 'immature'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    WHEN ((s.stage)::text = 'neonatus'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1172'::character varying
                    WHEN ((s.stage)::text = 'larva'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1128'::character varying
                    WHEN ((s.stage)::text = 'egg'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1122'::character varying
                    WHEN ((s.stage)::text = 'undefined'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1152'::character varying
                    WHEN ((s.stage)::text = 'unknown'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1152'::character varying
                    WHEN ((s.stage)::text = 'not stated'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1152'::character varying
                    WHEN ((s.stage)::text = 'hypope'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    WHEN ((s.stage)::text = 'nymph'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    WHEN ((s.stage)::text = 'tritonymph'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    WHEN ((s.stage)::text = 'chick'::text) THEN 'http://vocab.nerc.ac.uk/collection/S11/current/S1171'::character varying
                    ELSE s.stage
                END AS measurement_value_id
           FROM (darwin2.specimens s
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
          WHERE (s.stage IS NOT NULL)
        UNION
         SELECT DISTINCT 'specimen_count'::text AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((specimens_stable_ids.uuid)::character varying)::text) AS occurrence_id,
            'count'::text AS measurement_type,
            'vocab.nerc.ac.uk/collection/P01/current/OCOUNT01'::text AS measurement_type_id,
                CASE COALESCE(s.specimen_count_max, s.specimen_count_min, 1)
                    WHEN 0 THEN '1'::text
                    ELSE (COALESCE(s.specimen_count_max, s.specimen_count_min, 1))::text
                END AS measurement_value,
            NULL::text AS orig_value,
            'Number of individuals in container'::text AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM (darwin2.specimens s
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
        UNION
         SELECT DISTINCT 'depth_gtu'::text AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((specimens_stable_ids.uuid)::character varying)::text) AS occurrence_id,
            'sampling_depth'::text AS measurement_type,
            'http://vocab.nerc.ac.uk/collection/P01/current/ADEPZZ01/'::text AS measurement_type_id,
            ((('-1'::integer)::double precision * g.elevation))::text AS measurement_value,
            (g.elevation)::text AS orig_value,
            'm'::text AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ((darwin2.gtu g
             LEFT JOIN darwin2.specimens s ON ((s.gtu_ref = g.id)))
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
          WHERE ((g.elevation IS NOT NULL) AND (g.elevation <= (0)::double precision) AND (g.elevation >= ('-10000'::integer)::double precision))
        UNION
         SELECT DISTINCT 'elevation_gtu'::text AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((specimens_stable_ids.uuid)::character varying)::text) AS occurrence_id,
            'sampling_elevation'::text AS measurement_type,
            'https://www.wikidata.org/wiki/Q2633778'::text AS measurement_type_id,
            (g.elevation)::text AS measurement_value,
            (g.elevation)::text AS orig_value,
            'm'::text AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ((darwin2.gtu g
             LEFT JOIN darwin2.specimens s ON ((s.gtu_ref = g.id)))
             LEFT JOIN darwin2.specimens_stable_ids ON ((s.id = specimens_stable_ids.specimen_ref)))
          WHERE ((g.elevation IS NOT NULL) AND (g.elevation >= (0)::double precision) AND (g.elevation <= (8000)::double precision))
        UNION
         SELECT DISTINCT (('depth_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            'm'::text AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text = 'sampling_depth'::text) AND (mv_properties.value ~ '^\d+$'::text) AND ((mv_properties.value)::double precision <= (10000)::double precision))
        UNION
         SELECT DISTINCT (('elevation_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            'm'::text AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text = 'sampling_elevation'::text) AND (mv_properties.value ~ '^\d+$'::text) AND ((mv_properties.value)::double precision <= (8000)::double precision))
        UNION
         SELECT DISTINCT (('length_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            mv_properties.unit AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text = 'body_length'::text) AND (mv_properties.unit IS NOT NULL) AND (mv_properties.value !~~ '%ha%'::text))
        UNION
         SELECT DISTINCT (('weight_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            mv_properties.unit AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text = 'body_weight'::text) AND (mv_properties.unit IS NOT NULL))
        UNION
         SELECT DISTINCT (('sampling_gear_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            mv_properties.unit AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE ((mv_properties.property_type_id_internal)::text = 'sampling_gear'::text)
        UNION
         SELECT DISTINCT (('else_'::text || mv_properties.source) || '_prop'::text) AS source,
            ('https://darwin.naturalsciences.be/uri/object/'::text || ((mv_properties.uuid)::character varying)::text) AS occurrence_id,
            mv_properties.property_type_id_internal AS measurement_type,
            mv_properties.property_type_id AS measurement_type_id,
            mv_properties.value AS measurement_value,
            mv_properties.value AS orig_value,
            mv_properties.unit AS measurement_unit,
            NULL::text AS measurement_value_id
           FROM ipt.mv_properties
          WHERE (((mv_properties.property_type_id_internal)::text <> ALL (ARRAY[('sampling_depth'::character varying)::text, ('sampling_elevation'::character varying)::text, ('body_length'::character varying)::text, ('body_weight'::character varying)::text, ('sampling_gear'::character varying)::text])) AND ((mv_properties.property_type_id_internal)::text <> ALL (ARRAY[('meteorite_fall_or_find'::character varying)::text, ('verbatimLocality'::character varying)::text, ('core_depth_start'::character varying)::text, ('core_depth_end'::character varying)::text])))
        UNION
         SELECT 'depth_range_prop'::text AS source,
            sampling_depth_range_cte.occurrence_id,
            'sampling_depth_min'::text AS text,
            'http://vocab.nerc.ac.uk/collection/P01/current/MINWDIST/'::text AS measurement_type_id,
            regexp_replace(sampling_depth_range_cte.value, '-(\d+)$'::text, ''::text) AS measurement_value,
            sampling_depth_range_cte.orig_value,
            sampling_depth_range_cte.measurement_unit,
            NULL::text AS measurement_value_id
           FROM sampling_depth_range_cte
        UNION
         SELECT 'prop_depth_range_prop'::text AS source,
            sampling_depth_range_cte.occurrence_id,
            'sampling_depth_max'::text AS text,
            'http://vocab.nerc.ac.uk/collection/P01/current/MAXWDIST/'::text AS measurement_type_id,
            regexp_replace(sampling_depth_range_cte.value, '^(\d+)-'::text, ''::text) AS measurement_value,
            sampling_depth_range_cte.orig_value,
            sampling_depth_range_cte.measurement_unit,
            NULL::character varying AS "varchar"
           FROM sampling_depth_range_cte) q
  WHERE ((q.occurrence_id IS NOT NULL) AND ((q.measurement_value_id IS NULL) OR ((q.measurement_value_id)::text ~~ 'http%'::text)))
  ORDER BY q.occurrence_id, q.measurement_type, q.measurement_type_id, q.measurement_unit, q.source DESC;


ALTER TABLE ipt.v_darwin_ipt_rbins_mof OWNER TO ipt_viewer;

--
-- TOC entry 623 (class 1259 OID 1442252)
-- Name: mv_darwin_ipt_rbins_mof; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_darwin_ipt_rbins_mof AS
 SELECT v_darwin_ipt_rbins_mof.source,
    v_darwin_ipt_rbins_mof.occurrence_id,
    v_darwin_ipt_rbins_mof.measurement_type,
    v_darwin_ipt_rbins_mof.measurement_type_id,
    v_darwin_ipt_rbins_mof.measurement_value,
    v_darwin_ipt_rbins_mof.orig_value,
    v_darwin_ipt_rbins_mof.measurement_unit,
    v_darwin_ipt_rbins_mof.measurement_unit_id,
    v_darwin_ipt_rbins_mof.measurement_value_id
   FROM ipt.v_darwin_ipt_rbins_mof
  WITH NO DATA;


ALTER TABLE ipt.mv_darwin_ipt_rbins_mof OWNER TO ipt_viewer;

--
-- TOC entry 624 (class 1259 OID 1442259)
-- Name: be_rbins_darwin_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_darwin_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM ipt.mv_darwin_ipt_rbins_mof mof;


ALTER TABLE ipt.be_rbins_darwin_mof OWNER TO ipt_viewer;

--
-- TOC entry 625 (class 1259 OID 1442263)
-- Name: be_rbins_entomology_coleoptera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_coleoptera AS
 SELECT 'be_rbins_entomology_coleoptera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Coleoptera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'coleoptera'::text);


ALTER TABLE ipt.be_rbins_entomology_coleoptera OWNER TO ipt_viewer;

--
-- TOC entry 626 (class 1259 OID 1442268)
-- Name: be_rbins_entomology_coleoptera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_coleoptera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_coleoptera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_coleoptera_mof OWNER TO ipt_viewer;

--
-- TOC entry 627 (class 1259 OID 1442273)
-- Name: be_rbins_entomology_diptera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_diptera AS
 SELECT 'be_rbins_entomology_diptera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Diptera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'diptera'::text);


ALTER TABLE ipt.be_rbins_entomology_diptera OWNER TO ipt_viewer;

--
-- TOC entry 628 (class 1259 OID 1442278)
-- Name: be_rbins_entomology_diptera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_diptera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_diptera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_diptera_mof OWNER TO ipt_viewer;

--
-- TOC entry 629 (class 1259 OID 1442283)
-- Name: be_rbins_entomology_heterocera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_heterocera AS
 SELECT 'be_rbins_entomology_heterocera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Heterocera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'heterocera'::text);


ALTER TABLE ipt.be_rbins_entomology_heterocera OWNER TO ipt_viewer;

--
-- TOC entry 630 (class 1259 OID 1442288)
-- Name: be_rbins_entomology_heterocera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_heterocera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_heterocera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_heterocera_mof OWNER TO ipt_viewer;

--
-- TOC entry 631 (class 1259 OID 1442293)
-- Name: be_rbins_entomology_hymenoptera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_hymenoptera AS
 SELECT 'be_rbins_entomology_hymenoptera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Hymenoptera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'hymenoptera'::text);


ALTER TABLE ipt.be_rbins_entomology_hymenoptera OWNER TO ipt_viewer;

--
-- TOC entry 632 (class 1259 OID 1442298)
-- Name: be_rbins_entomology_hymenoptera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_hymenoptera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_hymenoptera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_hymenoptera_mof OWNER TO ipt_viewer;

--
-- TOC entry 633 (class 1259 OID 1442303)
-- Name: be_rbins_entomology_orthoptera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_orthoptera AS
 SELECT 'be_rbins_entomology_orthoptera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Orthoptera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'orthoptera'::text);


ALTER TABLE ipt.be_rbins_entomology_orthoptera OWNER TO ipt_viewer;

--
-- TOC entry 634 (class 1259 OID 1442308)
-- Name: be_rbins_entomology_orthoptera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_orthoptera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_orthoptera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_orthoptera_mof OWNER TO ipt_viewer;

--
-- TOC entry 635 (class 1259 OID 1442313)
-- Name: be_rbins_entomology_rhopalocera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_rhopalocera AS
 SELECT 'be_rbins_entomology_rhopalocera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Rhopalocera Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'rhopalocera'::text);


ALTER TABLE ipt.be_rbins_entomology_rhopalocera OWNER TO ipt_viewer;

--
-- TOC entry 636 (class 1259 OID 1442318)
-- Name: be_rbins_entomology_rhopalocera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_entomology_rhopalocera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_entomology_rhopalocera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_entomology_rhopalocera_mof OWNER TO ipt_viewer;

--
-- TOC entry 637 (class 1259 OID 1442323)
-- Name: be_rbins_invertebrates_acari; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_acari AS
 SELECT 'be_rbins_invertebrates_acari'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Acari Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'acari'::text);


ALTER TABLE ipt.be_rbins_invertebrates_acari OWNER TO ipt_viewer;

--
-- TOC entry 638 (class 1259 OID 1442328)
-- Name: be_rbins_invertebrates_acari_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_acari_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_acari occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_acari_mof OWNER TO ipt_viewer;

--
-- TOC entry 639 (class 1259 OID 1442333)
-- Name: be_rbins_invertebrates_araneae; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_araneae AS
 SELECT 'be_rbins_invertebrates_araneae'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Araneae Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'araneae'::text);


ALTER TABLE ipt.be_rbins_invertebrates_araneae OWNER TO ipt_viewer;

--
-- TOC entry 640 (class 1259 OID 1442338)
-- Name: be_rbins_invertebrates_araneae_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_araneae_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_araneae occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_araneae_mof OWNER TO ipt_viewer;

--
-- TOC entry 641 (class 1259 OID 1442343)
-- Name: be_rbins_invertebrates_belgianmarineinvertebrates; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_belgianmarineinvertebrates AS
 SELECT 'be_rbins_invertebrates_belgianmarineinvertebrates'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Belgian Marine Invertebrates collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'belgianmarineinvertebrates'::text);


ALTER TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates OWNER TO ipt_viewer;

--
-- TOC entry 642 (class 1259 OID 1442348)
-- Name: be_rbins_invertebrates_belgianmarineinvertebrates_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_belgianmarineinvertebrates_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_belgianmarineinvertebrates occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates_mof OWNER TO ipt_viewer;

--
-- TOC entry 643 (class 1259 OID 1442353)
-- Name: be_rbins_invertebrates_brachiopoda; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_brachiopoda AS
 SELECT 'be_rbins_invertebrates_brachiopoda'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Brachiopoda collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'brachiopoda'::text);


ALTER TABLE ipt.be_rbins_invertebrates_brachiopoda OWNER TO ipt_viewer;

--
-- TOC entry 644 (class 1259 OID 1442358)
-- Name: be_rbins_invertebrates_brachiopoda_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_brachiopoda_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_brachiopoda occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_brachiopoda_mof OWNER TO ipt_viewer;

--
-- TOC entry 645 (class 1259 OID 1442363)
-- Name: be_rbins_invertebrates_bryozoa; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_bryozoa AS
 SELECT 'be_rbins_invertebrates_bryozoa'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Bryozoa collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'bryozoa'::text);


ALTER TABLE ipt.be_rbins_invertebrates_bryozoa OWNER TO ipt_viewer;

--
-- TOC entry 646 (class 1259 OID 1442368)
-- Name: be_rbins_invertebrates_bryozoa_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_bryozoa_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_bryozoa occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_bryozoa_mof OWNER TO ipt_viewer;

--
-- TOC entry 647 (class 1259 OID 1442373)
-- Name: be_rbins_invertebrates_cheliceratamarine; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_cheliceratamarine AS
 SELECT 'be_rbins_invertebrates_cheliceratamarine'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences marine Chelicerata collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'cheliceratamarine'::text);


ALTER TABLE ipt.be_rbins_invertebrates_cheliceratamarine OWNER TO ipt_viewer;

--
-- TOC entry 648 (class 1259 OID 1442378)
-- Name: be_rbins_invertebrates_cheliceratamarine_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_cheliceratamarine_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_cheliceratamarine occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_cheliceratamarine_mof OWNER TO ipt_viewer;

--
-- TOC entry 649 (class 1259 OID 1442383)
-- Name: be_rbins_invertebrates_cnidaria; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_cnidaria AS
 SELECT 'be_rbins_invertebrates_cnidaria'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Cnidaria collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'cnidaria'::text);


ALTER TABLE ipt.be_rbins_invertebrates_cnidaria OWNER TO ipt_viewer;

--
-- TOC entry 650 (class 1259 OID 1442388)
-- Name: be_rbins_invertebrates_cnidaria_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_cnidaria_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_cnidaria occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_cnidaria_mof OWNER TO ipt_viewer;

--
-- TOC entry 651 (class 1259 OID 1442393)
-- Name: be_rbins_invertebrates_crustacea; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_crustacea AS
 SELECT 'be_rbins_invertebrates_crustacea'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Crustacea collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'crustacea'::text);


ALTER TABLE ipt.be_rbins_invertebrates_crustacea OWNER TO ipt_viewer;

--
-- TOC entry 652 (class 1259 OID 1442398)
-- Name: be_rbins_invertebrates_crustacea_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_crustacea_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_crustacea occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_crustacea_mof OWNER TO ipt_viewer;

--
-- TOC entry 653 (class 1259 OID 1442403)
-- Name: be_rbins_invertebrates_echinodermata; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_echinodermata AS
 SELECT 'be_rbins_invertebrates_echinodermata'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Echinodermata collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'echinodermata'::text);


ALTER TABLE ipt.be_rbins_invertebrates_echinodermata OWNER TO ipt_viewer;

--
-- TOC entry 654 (class 1259 OID 1442408)
-- Name: be_rbins_invertebrates_echinodermata_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_echinodermata_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_echinodermata occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_echinodermata_mof OWNER TO ipt_viewer;

--
-- TOC entry 655 (class 1259 OID 1442413)
-- Name: be_rbins_invertebrates_mollusca; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_mollusca AS
 SELECT 'be_rbins_invertebrates_mollusca'::text AS dataset_id,
    '	Royal Belgian Institute of Natural Sciences Mollusca collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'mollusca'::text);


ALTER TABLE ipt.be_rbins_invertebrates_mollusca OWNER TO ipt_viewer;

--
-- TOC entry 656 (class 1259 OID 1442418)
-- Name: be_rbins_invertebrates_mollusca_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_mollusca_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_mollusca occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_mollusca_mof OWNER TO ipt_viewer;

--
-- TOC entry 657 (class 1259 OID 1442423)
-- Name: be_rbins_invertebrates_rotifera; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_rotifera AS
 SELECT 'be_rbins_invertebrates_rotifera'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Rotifera collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'rotifera'::text);


ALTER TABLE ipt.be_rbins_invertebrates_rotifera OWNER TO ipt_viewer;

--
-- TOC entry 658 (class 1259 OID 1442428)
-- Name: be_rbins_invertebrates_rotifera_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_invertebrates_rotifera_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_invertebrates_rotifera occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_invertebrates_rotifera_mof OWNER TO ipt_viewer;

--
-- TOC entry 659 (class 1259 OID 1442433)
-- Name: be_rbins_vertebrates_amphibia; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_amphibia AS
 SELECT 'be_rbins_vertebrates_amphibia'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Amphibia Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'amphibia'::text);


ALTER TABLE ipt.be_rbins_vertebrates_amphibia OWNER TO ipt_viewer;

--
-- TOC entry 660 (class 1259 OID 1442438)
-- Name: be_rbins_vertebrates_amphibia_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_amphibia_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_amphibia occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_amphibia_mof OWNER TO ipt_viewer;

--
-- TOC entry 661 (class 1259 OID 1442443)
-- Name: be_rbins_vertebrates_aves; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_aves AS
 SELECT 'be_rbins_vertebrates_aves'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Bird Collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'aves'::text);


ALTER TABLE ipt.be_rbins_vertebrates_aves OWNER TO ipt_viewer;

--
-- TOC entry 662 (class 1259 OID 1442448)
-- Name: be_rbins_vertebrates_aves_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_aves_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_aves occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_aves_mof OWNER TO ipt_viewer;

--
-- TOC entry 663 (class 1259 OID 1442453)
-- Name: be_rbins_vertebrates_mammalia; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_mammalia AS
 SELECT 'be_rbins_vertebrates_mammalia'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Mammalia collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'mammalia'::text);


ALTER TABLE ipt.be_rbins_vertebrates_mammalia OWNER TO ipt_viewer;

--
-- TOC entry 664 (class 1259 OID 1442458)
-- Name: be_rbins_vertebrates_mammalia_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_mammalia_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_mammalia occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_mammalia_mof OWNER TO ipt_viewer;

--
-- TOC entry 665 (class 1259 OID 1442463)
-- Name: be_rbins_vertebrates_pisces; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_pisces AS
 SELECT 'be_rbins_vertebrates_pisces'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Pisces collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'pisces'::text);


ALTER TABLE ipt.be_rbins_vertebrates_pisces OWNER TO ipt_viewer;

--
-- TOC entry 666 (class 1259 OID 1442468)
-- Name: be_rbins_vertebrates_pisces_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_pisces_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_pisces occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_pisces_mof OWNER TO ipt_viewer;

--
-- TOC entry 667 (class 1259 OID 1442473)
-- Name: be_rbins_vertebrates_reptilia; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_reptilia AS
 SELECT 'be_rbins_vertebrates_reptilia'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences Reptilia collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'reptilia'::text);


ALTER TABLE ipt.be_rbins_vertebrates_reptilia OWNER TO ipt_viewer;

--
-- TOC entry 668 (class 1259 OID 1442478)
-- Name: be_rbins_vertebrates_reptilia_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_reptilia_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_reptilia occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_reptilia_mof OWNER TO ipt_viewer;

--
-- TOC entry 669 (class 1259 OID 1442483)
-- Name: be_rbins_vertebrates_vertebratestypes; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_vertebratestypes AS
 SELECT 'be_rbins_vertebrates_vertebratestypes'::text AS dataset_id,
    'Royal Belgian Institute of Natural Sciences vertebrate types collection'::text AS dataset_name,
    occ.ids,
    occ.type,
    occ.occurrence_id,
    occ.ndwc_created,
    occ.modified,
    occ.basis_of_record,
    occ.occurrence_status,
    occ.rights_holder,
    occ.institution_id,
    occ.old_institution_id,
    occ.institution_code,
    occ.owner_institution_code,
    occ.collection_code,
    occ.collection_name,
    occ.collection_id,
    occ.ndwc_collection_path,
    occ.catalog_number,
    occ.language,
    occ.license,
    occ.scientific_name,
    occ.ndwc_local_taxon_id,
    occ.scientific_name_id,
    occ.taxon_id,
    occ.parent_name_usage,
    occ.kingdom,
    occ.phylum,
    occ.class,
    occ.ordo,
    occ.family,
    occ.genus,
    occ.subgenus,
    occ.specific_epithet,
    occ.infra_specific_epithet,
    occ.scientific_name_authorship,
    occ.nomenclatural_code,
    occ.taxonomic_status,
    occ.taxon_remarks,
    occ.taxon_rank,
    occ.identification_qualifier,
    occ.type_status,
    occ.ndwc_taxon_path,
    occ.ndwc_taxon_ref,
    occ.recorded_by,
    occ.date_identified,
    occ.organism_quantity,
    occ.organism_quantity_type,
    occ.sex,
    occ.life_stage,
    occ.preparations,
    occ.disposition,
    occ.other_catalog_numbers,
    occ.associated_references,
    occ.information_withheld,
    occ.verbatim_location,
    occ.location,
    occ.ndwc_nice_verbatim_location,
    occ.location_id,
    occ.ndwc_geotypes,
    occ.ndwc_verbatim_country,
    occ.ndwc_gtu_identifier,
    occ.country,
    occ.country_code,
    occ.water_body,
    occ.island_group,
    occ.island,
    occ.decimal_latitude,
    occ.decimal_longitude,
    occ.ndwc_tag_decimal_latitude,
    occ.ndwc_tag_decimal_longitude,
    occ.ndwc_gtu_decimal_latitude,
    occ.ndwc_gtu_decimal_longitude,
    occ.geodetic_datum,
    occ.verbatim_srs,
    occ.coordinate_uncertainty_in_meters,
    occ.footprint_wkt,
    occ.minimum_elevation_in_meters,
    occ.maximum_elevation_in_meters,
    occ.minimum_depth_in_meters,
    occ.maximum_depth_in_meters,
    occ.identified_by,
    occ.event_date,
    occ.field_number,
    occ.habitat
   FROM (ipt.mv_darwin_ipt_rbins occ
     LEFT JOIN darwin2.collections c ON ((occ.ndwc_collection_path ~~ (('%/'::text || c.id) || '/%'::text))))
  WHERE ((c.name_indexed)::text = 'vertebratestypes'::text);


ALTER TABLE ipt.be_rbins_vertebrates_vertebratestypes OWNER TO ipt_viewer;

--
-- TOC entry 670 (class 1259 OID 1442488)
-- Name: be_rbins_vertebrates_vertebratestypes_mof; Type: VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE VIEW ipt.be_rbins_vertebrates_vertebratestypes_mof AS
 SELECT mof.source,
    mof.occurrence_id,
    mof.measurement_type,
    mof.measurement_type_id,
    mof.measurement_value,
    mof.orig_value,
    mof.measurement_unit,
    mof.measurement_unit_id,
    mof.measurement_value_id
   FROM (ipt.mv_darwin_ipt_rbins_mof mof
     JOIN ipt.be_rbins_vertebrates_vertebratestypes occ ON ((occ.occurrence_id = mof.occurrence_id)));


ALTER TABLE ipt.be_rbins_vertebrates_vertebratestypes_mof OWNER TO ipt_viewer;

--
-- TOC entry 671 (class 1259 OID 1442493)
-- Name: mv_spatial; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_spatial AS
 WITH property_mess_cte AS (
         SELECT map.orig_property,
            map.mapped_property
           FROM ( VALUES ('Accuracy coordinates'::text,'coordinatePrecision'::text), ('Accuracy Coordinates'::text,'coordinatePrecision'::text), ('coordinates_original'::text,'verbatimCoordinates'::text), ('datum'::text,'datum'::text), ('ellipsoid'::text,'ellipsoid'::text), ('geo position'::text,'verbatimCoordinates'::text), ('gis_type'::text,'spatial_type'::text), ('km (offset from named place)'::text,'offset_from_location'::text), ('Lambert'::text,'lambert_coordinates_x_y'::text), ('latitude'::text,'decimal_latitude'::text), ('latitude1'::text,'decimal_start_latitude'::text), ('latitude2'::text,'decimal_end_latitude'::text), ('Latitude DMS (end of operation)'::text,'end_latitude'::text), ('Latitude DMS (start of operation)'::text,'start_latitude'::text), ('Locality'::text,'verbatimLocality'::text), ('longitude'::text,'decimal_longitude'::text), ('longitude1'::text,'decimal_start_longitude'::text), ('longitude2'::text,'decimal_end_longitude'::text), ('Longitude DMS (end of operation)'::text,'end_longitude'::text), ('Longitude DMS (start of operation)'::text,'start_longitude'::text), ('Named Place'::text,'verbatimLocality'::text), ('utm'::text,'utm_grid'::text)) map(orig_property, mapped_property)
        ), coordinates_cte AS (
         SELECT DISTINCT properties.record_id,
            cte.mapped_property AS property,
            properties.lower_value AS value,
            properties.applies_to
           FROM (darwin2.properties
             LEFT JOIN property_mess_cte cte ON ((cte.orig_property = (properties.property_type)::text)))
          WHERE (((properties.referenced_relation)::text = 'gtu'::text) AND ((properties.property_type)::text = ANY (ARRAY[('Accuracy coordinates'::character varying)::text, ('Accuracy Coordinates'::character varying)::text, ('coordinates_original'::character varying)::text, ('datum'::character varying)::text, ('ellipsoid'::character varying)::text, ('geo position'::character varying)::text, ('gis_type'::character varying)::text, ('km (offset from named place)'::character varying)::text, ('Lambert'::character varying)::text, ('latitude'::character varying)::text, ('latitude1'::character varying)::text, ('latitude2'::character varying)::text, ('Latitude DMS (end of operation)'::character varying)::text, ('Latitude DMS (start of operation)'::character varying)::text, ('Locality'::character varying)::text, ('longitude'::character varying)::text, ('longitude1'::character varying)::text, ('longitude2'::character varying)::text, ('Longitude DMS (end of operation)'::character varying)::text, ('Longitude DMS (start of operation)'::character varying)::text, ('Named Place'::character varying)::text, ('utm'::character varying)::text])))
          ORDER BY properties.record_id, cte.mapped_property
        )
 SELECT DISTINCT ON (q.gtu_ref) q.gtu_ref,
    q.source,
    q.decimal_start_latitude,
    q.decimal_start_longitude,
    q.decimal_end_latitude,
    q.decimal_end_longitude,
    q.datum,
    q.ellipsoid,
    q.verbatim_coordinates,
    q.coordinate_precision,
    q.lambert_coordinates_x_y
   FROM ( SELECT DISTINCT gtu.id AS gtu_ref,
            '1_prop_start_end_dms'::text AS source,
                CASE
                    WHEN (start_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((start_latitude.value)::text))
                END AS decimal_start_latitude,
                CASE
                    WHEN (start_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((start_longitude.value)::text))
                END AS decimal_start_longitude,
                CASE
                    WHEN ((end_longitude.value IS NULL) OR ((end_latitude.value)::text = (start_latitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((end_latitude.value)::text))
                END AS decimal_end_latitude,
                CASE
                    WHEN ((end_latitude.value IS NULL) OR ((end_longitude.value)::text = (start_longitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((end_longitude.value)::text))
                END AS decimal_end_longitude,
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((((darwin2.gtu
             LEFT JOIN coordinates_cte start_latitude ON (((gtu.id = start_latitude.record_id) AND (start_latitude.property = 'start_latitude'::text))))
             LEFT JOIN coordinates_cte end_latitude ON (((gtu.id = end_latitude.record_id) AND (end_latitude.property = 'end_latitude'::text))))
             LEFT JOIN coordinates_cte start_longitude ON (((gtu.id = start_longitude.record_id) AND (start_longitude.property = 'start_longitude'::text))))
             LEFT JOIN coordinates_cte end_longitude ON (((gtu.id = end_longitude.record_id) AND (end_longitude.property = 'end_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (start_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '1_prop_start_end'::text AS source,
                CASE
                    WHEN (decimal_start_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_start_latitude.value)::text))
                END AS decimal_start_latitude,
                CASE
                    WHEN (decimal_start_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_start_longitude.value)::text))
                END AS decimal_start_longitude,
                CASE
                    WHEN ((decimal_end_longitude.value IS NULL) OR ((decimal_end_latitude.value)::text = (decimal_start_latitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_end_latitude.value)::text))
                END AS decimal_end_latitude,
                CASE
                    WHEN ((decimal_end_latitude.value IS NULL) OR ((decimal_end_longitude.value)::text = (decimal_start_longitude.value)::text)) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_end_longitude.value)::text))
                END AS decimal_end_longitude,
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((((darwin2.gtu
             LEFT JOIN coordinates_cte decimal_start_latitude ON (((gtu.id = decimal_start_latitude.record_id) AND (decimal_start_latitude.property = 'decimal_start_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_start_longitude ON (((gtu.id = decimal_start_longitude.record_id) AND (decimal_start_longitude.property = 'decimal_start_longitude'::text))))
             LEFT JOIN coordinates_cte decimal_end_latitude ON (((gtu.id = decimal_end_latitude.record_id) AND (decimal_end_latitude.property = 'decimal_end_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_end_longitude ON (((gtu.id = decimal_end_longitude.record_id) AND (decimal_end_longitude.property = 'decimal_end_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (decimal_start_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '2_prop_lat_long'::text AS source,
                CASE
                    WHEN (decimal_longitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_latitude.value)::text))
                END AS decimal_latitude,
                CASE
                    WHEN (decimal_latitude.value IS NULL) THEN NULL::double precision
                    ELSE darwin2.dms2dd(darwin2.cleanupdms((decimal_longitude.value)::text))
                END AS decimal_longitude,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            verbatim_coordinates.value AS verbatim_coordinates,
            coordinate_precision.value AS coordinate_precision,
            lambert_coordinates_x_y.value AS lambert_coordinates_x_y
           FROM (((((((darwin2.gtu
             LEFT JOIN coordinates_cte decimal_latitude ON (((gtu.id = decimal_latitude.record_id) AND (decimal_latitude.property = 'decimal_latitude'::text))))
             LEFT JOIN coordinates_cte decimal_longitude ON (((gtu.id = decimal_longitude.record_id) AND (decimal_longitude.property = 'decimal_longitude'::text))))
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE (decimal_latitude.value IS NOT NULL)
        UNION
         SELECT DISTINCT gtu.id AS gtu_ref,
            '3_gtu_lat_long'::text AS source,
            (trunc((gtu.latitude)::numeric, 10))::double precision AS trunc,
            (trunc((gtu.longitude)::numeric, 10))::double precision AS trunc,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            datum.value AS datum,
            ellipsoid.value AS ellipsoid,
            string_agg((verbatim_coordinates.value)::text, ', '::text) AS verbatim_coordinates,
            string_agg((coordinate_precision.value)::text, ', '::text) AS coordinate_precision,
            string_agg((((lambert_coordinates_x_y.applies_to)::text || ': '::text) || (lambert_coordinates_x_y.value)::text), ', '::text ORDER BY lambert_coordinates_x_y.applies_to) AS lambert_coordinates_x_y
           FROM (((((darwin2.gtu
             LEFT JOIN coordinates_cte datum ON (((gtu.id = datum.record_id) AND (datum.property = 'datum'::text))))
             LEFT JOIN coordinates_cte ellipsoid ON (((gtu.id = ellipsoid.record_id) AND (ellipsoid.property = 'ellipsoid'::text))))
             LEFT JOIN coordinates_cte verbatim_coordinates ON (((gtu.id = verbatim_coordinates.record_id) AND (verbatim_coordinates.property = 'verbatimCoordinates'::text))))
             LEFT JOIN coordinates_cte coordinate_precision ON (((gtu.id = coordinate_precision.record_id) AND (coordinate_precision.property = 'coordinatePrecision'::text))))
             LEFT JOIN coordinates_cte lambert_coordinates_x_y ON (((gtu.id = lambert_coordinates_x_y.record_id) AND (lambert_coordinates_x_y.property = 'lambert_coordinates_x_y'::text))))
          WHERE ((gtu.latitude IS NOT NULL) OR (verbatim_coordinates.* IS NOT NULL))
          GROUP BY gtu.id, (trunc((gtu.latitude)::numeric, 10)), (trunc((gtu.longitude)::numeric, 10)), datum.value, ellipsoid.value) q
  ORDER BY q.gtu_ref, q.source, q.decimal_start_latitude, q.decimal_start_longitude, q.decimal_end_latitude, q.decimal_end_longitude
  WITH NO DATA;


ALTER TABLE ipt.mv_spatial OWNER TO ipt_viewer;

--
-- TOC entry 672 (class 1259 OID 1442501)
-- Name: mv_tag_to_locations; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_tag_to_locations AS
 SELECT DISTINCT t.id AS tag_identifier,
    t.gtu_ref AS gtu_identifier,
    tta.tag_group_distinct_ref AS distinct_tag_identifier,
    t.tag_value AS original_location,
    t.group_name_indexed AS original_type,
    t.sub_group_name_indexed AS original_sub_type,
    tcat_gn.gazetteer_type_mapped AS geonames_type_mapped,
    tcat_mrg.gazetteer_type_mapped AS marineregions_type_mapped,
    tcat_gn.priority,
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN countries.country_code_gn
            ELSE ta.code
        END AS gazetteer_code,
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN countries.country_url_gn
            ELSE ta.url
        END AS gazetteer_url,
    ta.pref_label AS gazetteer_pref_label,
    (
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN (countries.country_coord ->> 'latitude_wgs_84'::text)
            ELSE (prop_coordinates.coords ->> 'latitude_wgs_84'::text)
        END)::numeric AS latitude,
    (
        CASE
            WHEN (tcat_gn.gazetteer_type_mapped = 'PCLI'::text) THEN (countries.country_coord ->> 'longitude_wgs_84'::text)
            ELSE (prop_coordinates.coords ->> 'longitude_wgs_84'::text)
        END)::numeric AS longitude,
    countries.country_iso,
    countries.country_pref_label_gn AS country_pref_label
   FROM (((((((darwin2.tag_groups t
     LEFT JOIN darwin2.gtu ON ((t.gtu_ref = gtu.id)))
     LEFT JOIN darwin2.tag_tag_authority tta ON (((tta.tag_group_distinct_ref = t.tag_group_distinct_ref) AND ((t.sub_group_name_indexed)::text <> 'country'::text))))
     LEFT JOIN darwin2.tag_authority ta ON ((tta.tag_authority_ref = ta.id)))
     LEFT JOIN darwin2.tag_groups_authority_categories tcat_gn ON ((((tcat_gn.original_type)::text = (t.group_name_indexed)::text) AND ((tcat_gn.original_sub_type)::text = (t.sub_group_name_indexed)::text) AND (tcat_gn.authority = 'geonames.org'::text))))
     LEFT JOIN darwin2.tag_groups_authority_categories tcat_mrg ON ((((tcat_mrg.original_type)::text = (t.group_name_indexed)::text) AND ((tcat_mrg.original_sub_type)::text = (t.sub_group_name_indexed)::text) AND (tcat_mrg.authority = 'marineregions.org'::text))))
     LEFT JOIN ( SELECT DISTINCT props_lat.record_id,
            jsonb_object_agg(props_lat.property_type, props_lat.lower_value) AS coords
           FROM darwin2.properties props_lat
          WHERE (((props_lat.referenced_relation)::text = 'tag_authority'::text) AND (((props_lat.property_type)::text = 'latitude_wgs_84'::text) OR ((props_lat.property_type)::text = 'longitude_wgs_84'::text)))
          GROUP BY props_lat.record_id) prop_coordinates ON ((ta.id = prop_coordinates.record_id)))
     LEFT JOIN ( SELECT DISTINCT mv_tag_to_country.gtu_ref,
            mv_tag_to_country.tag_group_distinct_ref,
            mv_tag_to_country.country_iso,
            mv_tag_to_country.country_pref_label_gn,
            mv_tag_to_country.country_code_gn,
            mv_tag_to_country.country_url_gn,
            mv_tag_to_country.country_coord
           FROM ipt.mv_tag_to_country) countries ON ((countries.gtu_ref = t.gtu_ref)))
  WITH NO DATA;


ALTER TABLE ipt.mv_tag_to_locations OWNER TO ipt_viewer;

--
-- TOC entry 673 (class 1259 OID 1442509)
-- Name: names; Type: TABLE; Schema: mista_work; Owner: darwin2
--

CREATE TABLE mista_work.names (
    taxa character varying
);


ALTER TABLE mista_work.names OWNER TO darwin2;

--
-- TOC entry 674 (class 1259 OID 1442515)
-- Name: mv_names_parsed; Type: MATERIALIZED VIEW; Schema: mista_work; Owner: darwin2
--

CREATE MATERIALIZED VIEW mista_work.mv_names_parsed AS
 SELECT names.taxa,
    darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(names.taxa) AS canonical
   FROM mista_work.names
  WITH NO DATA;


ALTER TABLE mista_work.mv_names_parsed OWNER TO darwin2;

--
-- TOC entry 675 (class 1259 OID 1442522)
-- Name: mv_names_parsed_worms_ws; Type: MATERIALIZED VIEW; Schema: mista_work; Owner: darwin2
--

CREATE MATERIALIZED VIEW mista_work.mv_names_parsed_worms_ws AS
 SELECT mv_names_parsed.taxa,
    mv_names_parsed.canonical,
    fct_rmca_worms_webservice.worms_aphia_id,
    fct_rmca_worms_webservice.worms_scientific_name,
    fct_rmca_worms_webservice.worms_author,
    fct_rmca_worms_webservice.worms_status,
    fct_rmca_worms_webservice.worms_accepted_name,
    fct_rmca_worms_webservice.worms_accepted_author,
    fct_rmca_worms_webservice.worms_phylum,
    fct_rmca_worms_webservice.worms_class,
    fct_rmca_worms_webservice.worms_order,
    fct_rmca_worms_webservice.worms_family,
    fct_rmca_worms_webservice.worms_genus,
    fct_rmca_worms_webservice.worms_species,
    fct_rmca_worms_webservice.worms_subspecies,
    fct_rmca_worms_webservice.worms_is_marine,
    fct_rmca_worms_webservice.worms_is_brackish,
    fct_rmca_worms_webservice.worms_is_freshwater,
    fct_rmca_worms_webservice.worms_is_terrestrial,
    fct_rmca_worms_webservice.worms_lsid,
    fct_rmca_worms_webservice.worms_url
   FROM mista_work.mv_names_parsed,
    LATERAL data_cleaning.fct_rmca_worms_webservice(mv_names_parsed.canonical) fct_rmca_worms_webservice(worms_aphia_id, worms_scientific_name, worms_author, worms_status, worms_accepted_name, worms_accepted_author, worms_phylum, worms_class, worms_order, worms_family, worms_genus, worms_species, worms_subspecies, worms_is_marine, worms_is_brackish, worms_is_freshwater, worms_is_terrestrial, worms_lsid, worms_url)
  WITH NO DATA;


ALTER TABLE mista_work.mv_names_parsed_worms_ws OWNER TO darwin2;

--
-- TOC entry 676 (class 1259 OID 1442529)
-- Name: mv_taxonomy_parsed; Type: MATERIALIZED VIEW; Schema: mista_work; Owner: darwin2
--

CREATE MATERIALIZED VIEW mista_work.mv_taxonomy_parsed AS
 SELECT taxonomy.name,
    taxonomy.name_indexed,
    taxonomy.level_ref,
    taxonomy.status,
    taxonomy.local_naming,
    taxonomy.color,
    taxonomy.path,
    taxonomy.parent_ref,
    taxonomy.id,
    taxonomy.extinct,
    taxonomy.taxonomy_creation_date,
    taxonomy.import_ref,
    taxonomy.sensitive_info_withheld,
    taxonomy.is_reference_taxonomy,
    taxonomy.metadata_ref,
    taxonomy.cites,
    darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(taxonomy.name) AS canonical
   FROM darwin2.taxonomy
  WITH NO DATA;


ALTER TABLE mista_work.mv_taxonomy_parsed OWNER TO darwin2;

--
-- TOC entry 677 (class 1259 OID 1442536)
-- Name: v_mista_darwin_worms; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_darwin_worms AS
 SELECT DISTINCT ON ((upper(btrim((a.taxa)::text)))) a.taxa AS name_in_mista,
        CASE
            WHEN (a.worms_aphia_id IS NULL) THEN 'NOT_IN_WORMS'::text
            ELSE 'IN_WORMS'::text
        END AS worms_present,
        CASE
            WHEN ((a.worms_aphia_id IS NOT NULL) AND ((a.taxa)::text = (((a.worms_scientific_name)::text || ' '::text) || (a.worms_author)::text))) THEN 'SAME_AUTHOR'::text
            WHEN (a.worms_aphia_id IS NOT NULL) THEN 'DIFFERENT_AUTHOR'::text
            ELSE NULL::text
        END AS worms_match_type,
    a.taxa,
    a.canonical,
    a.worms_aphia_id,
    a.worms_scientific_name,
    a.worms_author,
    a.worms_status,
    a.worms_accepted_name,
    a.worms_accepted_author,
    a.worms_phylum,
    a.worms_class,
    a.worms_order,
    a.worms_family,
    a.worms_genus,
    a.worms_species,
    a.worms_subspecies,
    a.worms_is_marine,
    a.worms_is_brackish,
    a.worms_is_freshwater,
    a.worms_is_terrestrial,
    a.worms_lsid,
    a.worms_url,
        CASE
            WHEN (b.id IS NULL) THEN 'NOT_IN_DARWIN'::text
            ELSE 'IN_DARWIN'::text
        END AS darwin_present,
        CASE
            WHEN ((b.id IS NOT NULL) AND ((a.taxa)::text = (b.name)::text)) THEN 'SAME_AUTHOR'::text
            WHEN (b.id IS NOT NULL) THEN 'DIFFERENT_AUTHOR'::text
            ELSE NULL::text
        END AS darwin_match_type,
    b.id AS darwin_id,
    b.name AS darwin_name,
    b.name_author AS darwin_author,
    b.domain AS darwin_domain,
    b.phylum AS darwin_phylum,
    b.class AS darwin_class,
    b."order" AS darwin_order,
    b.family AS darwin_family,
        CASE
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL) AND (b.family !~~ ((a.worms_family)::text || '%'::text))) THEN 'DIFFERENT_FAMILIES'::text
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL)) THEN 'SAME_FAMILY'::text
            ELSE NULL::text
        END AS family_conflict,
        CASE
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL) AND (b."order" !~~ ((a.worms_order)::text || '%'::text))) THEN 'DIFFERENT_ORDER'::text
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL)) THEN 'SAME_ORDER'::text
            ELSE NULL::text
        END AS order_conflict,
        CASE
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL) AND (b.class !~~ ((a.worms_class)::text || '%'::text))) THEN 'DIFFERENT_CLASSES'::text
            WHEN ((a.worms_aphia_id IS NOT NULL) AND (b.id IS NOT NULL)) THEN 'SAME_CLASS'::text
            ELSE NULL::text
        END AS class_conflict
   FROM (mista_work.mv_names_parsed_worms_ws a
     LEFT JOIN data_cleaning.v_taxonomy_transpose_ranks b ON (((a.canonical)::text = (b.canonical)::text)))
  WHERE ((((b.name_author)::text <> 'cf.'::text) AND ((b.name_author)::text <> 'cf'::text)) OR (b.name_author IS NULL));


ALTER TABLE mista_work.v_mista_darwin_worms OWNER TO darwin2;

--
-- TOC entry 678 (class 1259 OID 1442541)
-- Name: v_mista_in_darwin; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_in_darwin AS
 SELECT a.taxa,
    a.canonical,
    btrim((b.name)::text) AS name_in_darwin,
    catalogue_levels.level_name,
        CASE
            WHEN (b.id IS NOT NULL) THEN 'FOUND_IN_DARWIN'::text
            ELSE 'NOT_FOUND'::text
        END AS in_darwin,
        CASE
            WHEN ((btrim((a.taxa)::text) <> btrim((b.name)::text)) AND (b.id IS NOT NULL)) THEN 'DIFFERENT_AUTHOR'::text
            WHEN ((btrim((a.taxa)::text) = btrim((b.name)::text)) AND (b.id IS NOT NULL)) THEN 'SAME_AUTHOR'::text
            ELSE NULL::text
        END AS match_type,
        CASE
            WHEN (b.id IS NOT NULL) THEN public.hstore_to_json((( SELECT public.hstore((array_agg((catalogue_levels_1.id)::character varying))::text[], (array_agg(NULL::character varying))::text[]) AS hstore
               FROM darwin2.catalogue_levels catalogue_levels_1
              WHERE ((catalogue_levels_1.level_type)::text = 'taxonomy'::text)) OPERATOR(public.||) darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_key(b.path)))
            ELSE public.hstore_to_json(NULL::public.hstore)
        END AS json
   FROM ((mista_work.mv_names_parsed a
     LEFT JOIN mista_work.mv_taxonomy_parsed b ON (((a.canonical)::text = (b.canonical)::text)))
     LEFT JOIN darwin2.catalogue_levels ON ((b.level_ref = catalogue_levels.id)))
  ORDER BY a.taxa;


ALTER TABLE mista_work.v_mista_in_darwin OWNER TO darwin2;

--
-- TOC entry 679 (class 1259 OID 1442546)
-- Name: v_mista_in_darwin_bad; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_in_darwin_bad AS
 SELECT a.taxa,
    darwin2.fct_rmca_sort_taxon_path_alphabetically(b.path, 1, true, false) AS fct_rmca_sort_taxon_path_alphabetically,
    b.level_ref
   FROM (mista_work.mv_names_parsed a
     LEFT JOIN mista_work.mv_taxonomy_parsed b ON (((a.canonical)::text = (b.canonical)::text)))
  ORDER BY a.taxa;


ALTER TABLE mista_work.v_mista_in_darwin_bad OWNER TO darwin2;

--
-- TOC entry 680 (class 1259 OID 1442551)
-- Name: v_mista_in_darwin_rank_unnest; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_in_darwin_rank_unnest AS
 SELECT aa.taxa,
    aa.path,
    aa.rank,
    aa.name,
    catalogue_levels.id AS level_ref
   FROM (( SELECT a.taxa,
            a.path,
            (regexp_matches(a.path, '\((\w+)\)'::text))[1] AS rank,
            btrim((regexp_matches(a.path, '(.+)\('::text))[1]) AS name
           FROM ( SELECT v_mista_in_darwin_bad.taxa,
                    regexp_split_to_table((v_mista_in_darwin_bad.fct_rmca_sort_taxon_path_alphabetically)::text, '/'::text) AS path
                   FROM mista_work.v_mista_in_darwin_bad) a) aa
     LEFT JOIN darwin2.catalogue_levels ON (((aa.rank = (catalogue_levels.level_name)::text) AND ((catalogue_levels.level_type)::text = 'taxonomy'::text))));


ALTER TABLE mista_work.v_mista_in_darwin_rank_unnest OWNER TO darwin2;

--
-- TOC entry 681 (class 1259 OID 1442556)
-- Name: v_mista_in_darwin_table; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_in_darwin_table AS
 SELECT v_mista_in_darwin.taxa,
    v_mista_in_darwin.canonical,
    v_mista_in_darwin.name_in_darwin,
    v_mista_in_darwin.level_name,
    v_mista_in_darwin.in_darwin,
    v_mista_in_darwin.match_type,
    (v_mista_in_darwin.json -> '1'::text) AS domain,
    (v_mista_in_darwin.json -> '2'::text) AS kingdom,
    (v_mista_in_darwin.json -> '3'::text) AS super_phylum,
    (v_mista_in_darwin.json -> '4'::text) AS phylum,
    (v_mista_in_darwin.json -> '5'::text) AS sub_phylum,
    (v_mista_in_darwin.json -> '6'::text) AS infra_phylum,
    (v_mista_in_darwin.json -> '11'::text) AS super_class,
    (v_mista_in_darwin.json -> '12'::text) AS class,
    (v_mista_in_darwin.json -> '13'::text) AS sub_class,
    (v_mista_in_darwin.json -> '14'::text) AS infra_class,
    (v_mista_in_darwin.json -> '27'::text) AS super_order,
    (v_mista_in_darwin.json -> '28'::text) AS "order",
    (v_mista_in_darwin.json -> '29'::text) AS sub_order,
    (v_mista_in_darwin.json -> '30'::text) AS infra_order,
    (v_mista_in_darwin.json -> '33'::text) AS super_family,
    (v_mista_in_darwin.json -> '34'::text) AS family,
    (v_mista_in_darwin.json -> '35'::text) AS sub_family,
    (v_mista_in_darwin.json -> '36'::text) AS infra_family,
    (v_mista_in_darwin.json -> '37'::text) AS super_tribe,
    (v_mista_in_darwin.json -> '38'::text) AS tribe,
    (v_mista_in_darwin.json -> '39'::text) AS sub_tribe,
    (v_mista_in_darwin.json -> '40'::text) AS infra_tribe,
    (v_mista_in_darwin.json -> '41'::text) AS genus,
    (v_mista_in_darwin.json -> '42'::text) AS sub_genus,
    (v_mista_in_darwin.json -> '48'::text) AS species,
    (v_mista_in_darwin.json -> '49'::text) AS sub_species,
    (v_mista_in_darwin.json -> '50'::text) AS variety,
    (v_mista_in_darwin.json -> '51'::text) AS sub_variety,
    (v_mista_in_darwin.json -> '52'::text) AS form,
    (v_mista_in_darwin.json -> '53'::text) AS sub_form,
    (v_mista_in_darwin.json -> '54'::text) AS abberans
   FROM mista_work.v_mista_in_darwin;


ALTER TABLE mista_work.v_mista_in_darwin_table OWNER TO darwin2;

--
-- TOC entry 682 (class 1259 OID 1442561)
-- Name: v_mista_taxon_to_json_bad; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_taxon_to_json_bad AS
 SELECT v_mista_in_darwin_rank_unnest.taxa,
    v_mista_in_darwin_rank_unnest.name AS name_in_darwin,
    v_mista_in_darwin_rank_unnest.rank,
    public.hstore_to_json((( SELECT public.hstore((array_agg((catalogue_levels.id)::character varying))::text[], (array_agg(NULL::character varying))::text[]) AS hstore
           FROM darwin2.catalogue_levels
          WHERE ((catalogue_levels.level_type)::text = 'taxonomy'::text)) OPERATOR(public.||) public.hstore((array_agg((v_mista_in_darwin_rank_unnest.level_ref)::character varying))::text[], array_agg(v_mista_in_darwin_rank_unnest.name)))) AS json
   FROM mista_work.v_mista_in_darwin_rank_unnest
  WHERE (v_mista_in_darwin_rank_unnest.level_ref IS NOT NULL)
  GROUP BY v_mista_in_darwin_rank_unnest.taxa, v_mista_in_darwin_rank_unnest.name, v_mista_in_darwin_rank_unnest.rank;


ALTER TABLE mista_work.v_mista_taxon_to_json_bad OWNER TO darwin2;

--
-- TOC entry 683 (class 1259 OID 1442566)
-- Name: v_mista_taxon_to_json_table_bad; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_mista_taxon_to_json_table_bad AS
 SELECT v_mista_taxon_to_json_bad.taxa,
    v_mista_taxon_to_json_bad.name_in_darwin,
    v_mista_taxon_to_json_bad.rank,
    (v_mista_taxon_to_json_bad.json -> '1'::text) AS domain,
    (v_mista_taxon_to_json_bad.json -> '2'::text) AS kingdom,
    (v_mista_taxon_to_json_bad.json -> '3'::text) AS super_phylum,
    (v_mista_taxon_to_json_bad.json -> '4'::text) AS phylum,
    (v_mista_taxon_to_json_bad.json -> '5'::text) AS sub_phylum,
    (v_mista_taxon_to_json_bad.json -> '6'::text) AS infra_phylum,
    (v_mista_taxon_to_json_bad.json -> '11'::text) AS super_class,
    (v_mista_taxon_to_json_bad.json -> '12'::text) AS class,
    (v_mista_taxon_to_json_bad.json -> '13'::text) AS sub_class,
    (v_mista_taxon_to_json_bad.json -> '14'::text) AS infra_class,
    (v_mista_taxon_to_json_bad.json -> '27'::text) AS super_order,
    (v_mista_taxon_to_json_bad.json -> '28'::text) AS "order",
    (v_mista_taxon_to_json_bad.json -> '29'::text) AS sub_order,
    (v_mista_taxon_to_json_bad.json -> '30'::text) AS infra_order,
    (v_mista_taxon_to_json_bad.json -> '33'::text) AS super_family,
    (v_mista_taxon_to_json_bad.json -> '34'::text) AS family,
    (v_mista_taxon_to_json_bad.json -> '35'::text) AS sub_family,
    (v_mista_taxon_to_json_bad.json -> '36'::text) AS infra_family,
    (v_mista_taxon_to_json_bad.json -> '37'::text) AS super_tribe,
    (v_mista_taxon_to_json_bad.json -> '38'::text) AS tribe,
    (v_mista_taxon_to_json_bad.json -> '39'::text) AS sub_tribe,
    (v_mista_taxon_to_json_bad.json -> '40'::text) AS infra_tribe,
    (v_mista_taxon_to_json_bad.json -> '41'::text) AS genus,
    (v_mista_taxon_to_json_bad.json -> '42'::text) AS sub_genus,
    (v_mista_taxon_to_json_bad.json -> '48'::text) AS species,
    (v_mista_taxon_to_json_bad.json -> '49'::text) AS sub_species,
    (v_mista_taxon_to_json_bad.json -> '50'::text) AS variety,
    (v_mista_taxon_to_json_bad.json -> '51'::text) AS sub_variety,
    (v_mista_taxon_to_json_bad.json -> '52'::text) AS form,
    (v_mista_taxon_to_json_bad.json -> '53'::text) AS sub_form,
    (v_mista_taxon_to_json_bad.json -> '54'::text) AS abberans
   FROM mista_work.v_mista_taxon_to_json_bad;


ALTER TABLE mista_work.v_mista_taxon_to_json_table_bad OWNER TO darwin2;

--
-- TOC entry 684 (class 1259 OID 1442571)
-- Name: v_pb_kerguelen82; Type: VIEW; Schema: mista_work; Owner: darwin2
--

CREATE VIEW mista_work.v_pb_kerguelen82 AS
SELECT
    NULL::integer AS id,
    NULL::character varying AS code,
    NULL::text AS string_agg,
    NULL::double precision AS longitude,
    NULL::double precision AS latitude;


ALTER TABLE mista_work.v_pb_kerguelen82 OWNER TO darwin2;

--
-- TOC entry 685 (class 1259 OID 1442575)
-- Name: v_count_specimens_per_taxa_collections_levels; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.v_count_specimens_per_taxa_collections_levels AS
 SELECT specimens.collection_ref,
    specimens.collection_path,
    specimens.collection_code,
    specimens.collection_name,
    specimens.taxon_ref,
    specimens.taxon_name,
    specimens.taxon_path,
    specimens.taxon_level_ref,
    v_rmca_collections_path_as_text.collection_path_text,
    v_rmca_collections_path_as_text.collection_path_code,
    v_rmca_collections_path_as_text.collection_path_indexed,
    NULLIF(darwin2.fct_rmca_sort_taxon_get_parent_level(specimens.taxon_ref, 34), '-1'::integer) AS family_ref,
    NULLIF(darwin2.fct_rmca_sort_taxon_get_parent_level(specimens.taxon_ref, 41), '-1'::integer) AS genus_ref,
    NULLIF(darwin2.fct_rmca_sort_taxon_get_parent_level(specimens.taxon_ref, 48), '-1'::integer) AS species_ref,
    count(specimens.id) AS count_ids
   FROM (darwin2.specimens
     JOIN darwin2.v_rmca_collections_path_as_text ON ((specimens.collection_ref = v_rmca_collections_path_as_text.id)))
  WHERE (specimens.taxon_ref IS NOT NULL)
  GROUP BY specimens.collection_ref, specimens.collection_path, specimens.collection_code, specimens.collection_name, specimens.taxon_ref, specimens.taxon_name, specimens.taxon_path, specimens.taxon_level_ref, v_rmca_collections_path_as_text.collection_path_text, v_rmca_collections_path_as_text.collection_path_code, v_rmca_collections_path_as_text.collection_path_indexed
  ORDER BY (count(specimens.id)) DESC;


ALTER TABLE naturalheritage.v_count_specimens_per_taxa_collections_levels OWNER TO darwin2;

--
-- TOC entry 686 (class 1259 OID 1442580)
-- Name: mv_count_specimens_per_taxa_collections_levels; Type: MATERIALIZED VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE MATERIALIZED VIEW naturalheritage.mv_count_specimens_per_taxa_collections_levels AS
 SELECT v_count_specimens_per_taxa_collections_levels.collection_ref,
    v_count_specimens_per_taxa_collections_levels.collection_path,
    v_count_specimens_per_taxa_collections_levels.collection_code,
    v_count_specimens_per_taxa_collections_levels.collection_name,
    v_count_specimens_per_taxa_collections_levels.taxon_ref,
    v_count_specimens_per_taxa_collections_levels.taxon_name,
    v_count_specimens_per_taxa_collections_levels.taxon_path,
    v_count_specimens_per_taxa_collections_levels.taxon_level_ref,
    v_count_specimens_per_taxa_collections_levels.collection_path_text,
    v_count_specimens_per_taxa_collections_levels.collection_path_code,
    v_count_specimens_per_taxa_collections_levels.collection_path_indexed,
    v_count_specimens_per_taxa_collections_levels.family_ref,
    v_count_specimens_per_taxa_collections_levels.genus_ref,
    v_count_specimens_per_taxa_collections_levels.species_ref,
    v_count_specimens_per_taxa_collections_levels.count_ids
   FROM naturalheritage.v_count_specimens_per_taxa_collections_levels
  WITH NO DATA;


ALTER TABLE naturalheritage.mv_count_specimens_per_taxa_collections_levels OWNER TO darwin2;

--
-- TOC entry 687 (class 1259 OID 1442587)
-- Name: v_rmca_collections_path_as_text_naturalheritage; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.v_rmca_collections_path_as_text_naturalheritage AS
 SELECT v_rmca_collections_path_as_text.id,
    v_rmca_collections_path_as_text.collection_type,
    v_rmca_collections_path_as_text.code,
    v_rmca_collections_path_as_text.name,
    v_rmca_collections_path_as_text.name_indexed,
    v_rmca_collections_path_as_text.institution_ref,
    v_rmca_collections_path_as_text.main_manager_ref,
    v_rmca_collections_path_as_text.parent_ref,
    v_rmca_collections_path_as_text.path,
    v_rmca_collections_path_as_text.code_auto_increment,
    v_rmca_collections_path_as_text.code_last_value,
    v_rmca_collections_path_as_text.code_prefix,
    v_rmca_collections_path_as_text.code_prefix_separator,
    v_rmca_collections_path_as_text.code_suffix,
    v_rmca_collections_path_as_text.code_suffix_separator,
    v_rmca_collections_path_as_text.is_public,
    v_rmca_collections_path_as_text.code_specimen_duplicate,
    v_rmca_collections_path_as_text.staff_ref,
    v_rmca_collections_path_as_text.code_auto_increment_for_insert_only,
    v_rmca_collections_path_as_text.code_mask,
    v_rmca_collections_path_as_text.allow_duplicates,
    v_rmca_collections_path_as_text.collection_path_text,
    (regexp_split_to_array(v_rmca_collections_path_as_text.collection_path_text, '/'::text))[1] AS main_collection,
    (regexp_split_to_array(v_rmca_collections_path_as_text.collection_path_text, '/'::text))[2] AS sub_collection
   FROM darwin2.v_rmca_collections_path_as_text;


ALTER TABLE naturalheritage.v_rmca_collections_path_as_text_naturalheritage OWNER TO darwin2;

--
-- TOC entry 688 (class 1259 OID 1442592)
-- Name: v_darwin_ipt_rbins_nh; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.v_darwin_ipt_rbins_nh AS
 WITH taxonomy_authority_cte AS (
         SELECT t.id AS taxonomy_ref,
            t.name,
            t.status AS taxonomic_status,
            tp.name AS parent_name_usage,
            taxa_gbif.url AS gbif_id,
            taxa_worms.urn AS worms_id,
            kingdom.name AS kingdom,
            phylum.name AS phylum,
            class.name AS class,
            ordo.name AS ordo,
            family.name AS family,
            genus.name AS genus,
            subgenus.name AS subgenus,
            t2.specific_epithet,
            t2.infra_specific_epithet,
                CASE
                    WHEN (t2.specific_epithet IS NOT NULL) THEN btrim("substring"((t.name)::text, ((strpos((t.name)::text, t2.specific_epithet) + char_length(t2.specific_epithet)) + 1)))
                    ELSE btrim("substring"((t.name)::text, ((strpos((t.name)::text, t2.infra_specific_epithet) + char_length(t2.infra_specific_epithet)) + 1)))
                END AS scientific_name_authorship
           FROM (((((((((((darwin2.taxonomy t
             LEFT JOIN darwin2.taxonomy tp ON ((tp.id = t.parent_ref)))
             LEFT JOIN ( SELECT t_1.id,
                        CASE t_1.level_ref
                            WHEN 48 THEN split_part((t_1.name)::text, ' '::text, 2)
                            ELSE NULL::text
                        END AS specific_epithet,
                        CASE t_1.level_ref
                            WHEN 49 THEN split_part((t_1.name)::text, ' '::text, 3)
                            ELSE NULL::text
                        END AS infra_specific_epithet
                   FROM darwin2.taxonomy t_1) t2 ON ((t2.id = t.id)))
             LEFT JOIN darwin2.taxonomy_authority taxa_gbif ON (((taxa_gbif.taxonomy_ref = t.id) AND (taxa_gbif.domain_ref = ( SELECT authority_domain.id
                   FROM darwin2.authority_domain
                  WHERE ((authority_domain.name)::text = 'gbif.org'::text))))))
             LEFT JOIN darwin2.taxonomy_authority taxa_worms ON (((taxa_worms.taxonomy_ref = t.id) AND (taxa_worms.domain_ref = ( SELECT authority_domain.id
                   FROM darwin2.authority_domain
                  WHERE ((authority_domain.name)::text = 'marinespecies.org'::text))))))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[2]) kingdom(r_start_id, id, name, level_ref, parent_ref) ON ((kingdom.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[4]) phylum(r_start_id, id, name, level_ref, parent_ref) ON ((phylum.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[12]) class(r_start_id, id, name, level_ref, parent_ref) ON ((class.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[28]) ordo(r_start_id, id, name, level_ref, parent_ref) ON ((ordo.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[34]) family(r_start_id, id, name, level_ref, parent_ref) ON ((family.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[41]) genus(r_start_id, id, name, level_ref, parent_ref) ON ((genus.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[42]) subgenus(r_start_id, id, name, level_ref, parent_ref) ON ((subgenus.r_start_id = t.id)))
          WHERE (t.level_ref = 48)
          ORDER BY t.id
        ), location_cte AS (
         SELECT q.gtu_ref,
            q.verbatim_location,
            q.location,
            q.ndwc_nice_verbatim_location,
            q.location_id,
            q.ndwc_geotypes,
            q.country,
            q.country_code,
            q.water_body,
            q.island_group,
            q.island,
            q.ndwc_tag_decimal_latitude,
            q.ndwc_tag_decimal_longitude,
            q.ndwc_gtu_decimal_latitude,
            q.ndwc_gtu_decimal_longitude,
            q.geodetic_datum,
            q.verbatim_srs,
            q.coordinate_uncertainty_in_meters,
            q.footprint_wkt,
                CASE
                    WHEN (q.ndwc_gtu_decimal_latitude IS NOT NULL) THEN q.ndwc_gtu_decimal_latitude
                    ELSE (
                    CASE
                        WHEN (q.ndwc_tag_decimal_latitude IS NOT NULL) THEN q.ndwc_tag_decimal_latitude
                        ELSE NULL::numeric
                    END)::double precision
                END AS decimal_latitude,
                CASE
                    WHEN (q.ndwc_gtu_decimal_longitude IS NOT NULL) THEN q.ndwc_gtu_decimal_longitude
                    ELSE (
                    CASE
                        WHEN (q.ndwc_tag_decimal_longitude IS NOT NULL) THEN q.ndwc_tag_decimal_longitude
                        ELSE NULL::numeric
                    END)::double precision
                END AS decimal_longitude,
                CASE
                    WHEN (q.ndwc_gtu_decimal_latitude IS NOT NULL) THEN 'Coordinates are based on original information found on the label or publication.'::text
                    ELSE
                    CASE
                        WHEN (q.ndwc_tag_decimal_latitude IS NOT NULL) THEN (((('No accurate coordinate information on the label. The coordinates have been geocoded from the location (see verbatimLocation) on the label by automated mapping+human verification to GeoNames.org ('::text || q.location) || ' maps to '::text) || (q.location_id)::text) || '). The mapping is done constrained by type and by country (if available), and assessed by probability. When multiple locations have been mapped for this specimen, the most precise is taken.'::text)
                        ELSE NULL::text
                    END
                END AS georeference_remarks
           FROM ( SELECT gtu_1.id AS gtu_ref,
                    string_agg(DISTINCT (tags.tag_value)::text, ', '::text) AS verbatim_location,
                    (array_agg((tag_geoname.gazetteer_pref_label)::text ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS location,
                    string_agg(DISTINCT (tag_geoname.gazetteer_pref_label)::text, ', '::text) AS ndwc_nice_verbatim_location,
                    (array_agg(tag_geoname.gazetteer_url ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS location_id,
                    array_agg(tag_geoname.geonames_type_mapped ORDER BY tag_geoname.priority, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label) AS ndwc_geotypes,
                    string_agg(DISTINCT (tag_geoname.country_pref_label)::text, ', '::text) AS country,
                    string_agg(DISTINCT tag_geoname.country_iso, ', '::text) AS country_code,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = ANY (ARRAY['CHN'::text, 'CHNL'::text, 'CNL'::text, 'CNLD'::text, 'CNLI'::text, 'CNLSB'::text, 'DLTA'::text, 'ESTY'::text, 'FJD'::text, 'GULF'::text, 'ISTH'::text, 'LGN'::text, 'LK'::text, 'LKC'::text, 'LKI'::text, 'LKN'::text, 'LKO'::text, 'LKS'::text, 'OCN'::text, 'RSV'::text, 'SBED'::text, 'SD'::text, 'SEA'::text, 'STM'::text, 'STMA'::text, 'STMD'::text, 'STMI'::text, 'STMM'::text, 'STMS'::text, 'STMSB'::text, 'STRT'::text, 'WTRC'::text])) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS water_body,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = 'ISLS'::text) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS island_group,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = ANY (ARRAY['ATOL'::text, 'ISL'::text, 'ISLET'::text])) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS island,
                    (array_agg(tag_geoname.latitude ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS ndwc_tag_decimal_latitude,
                    (array_agg(tag_geoname.longitude ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS ndwc_tag_decimal_longitude,
                    coordinates.decimal_start_latitude AS ndwc_gtu_decimal_latitude,
                    coordinates.decimal_start_longitude AS ndwc_gtu_decimal_longitude,
                        CASE coordinates.datum
                            WHEN 'ED50'::text THEN 'EPSG:4230'::text
                            WHEN 'WGS84'::text THEN 'EPSG:4326'::text
                            ELSE NULL::text
                        END AS geodetic_datum,
                    ((((coordinates.datum)::text || ' ('::text) || (coordinates.ellipsoid)::text) || ')'::text) AS verbatim_srs,
                        CASE
                            WHEN (coordinates.decimal_start_longitude IS NOT NULL) THEN gtu_1.lat_long_accuracy
                            ELSE (
                            CASE
                                WHEN ((array_agg(tag_geoname.longitude ORDER BY tag_geoname.priority DESC))[1] IS NOT NULL) THEN 999999
                                ELSE NULL::integer
                            END)::double precision
                        END AS coordinate_uncertainty_in_meters,
                        CASE
                            WHEN ((coordinates.decimal_start_longitude IS NOT NULL) AND (coordinates.decimal_start_latitude IS NOT NULL) AND (coordinates.decimal_end_longitude IS NOT NULL) AND (coordinates.decimal_end_latitude IS NOT NULL)) THEN (((((((('LINESTRING('::text || coordinates.decimal_start_longitude) || ' '::text) || coordinates.decimal_start_latitude) || ', '::text) || coordinates.decimal_end_longitude) || ' '::text) || coordinates.decimal_end_latitude) || ')'::text)
                            ELSE NULL::text
                        END AS footprint_wkt
                   FROM (((darwin2.gtu gtu_1
                     LEFT JOIN darwin2.tag_groups tags ON ((gtu_1.id = tags.gtu_ref)))
                     LEFT JOIN ipt.mv_tag_to_locations tag_geoname ON (((tag_geoname.tag_identifier = tags.id) AND (tag_geoname.geonames_type_mapped IS NOT NULL))))
                     LEFT JOIN ipt.mv_spatial coordinates ON ((coordinates.gtu_ref = gtu_1.id)))
                  WHERE (tag_geoname.geonames_type_mapped IS NOT NULL)
                  GROUP BY gtu_1.id, coordinates.decimal_start_latitude, coordinates.decimal_start_longitude, coordinates.decimal_end_latitude, coordinates.decimal_end_longitude, coordinates.datum, coordinates.ellipsoid, gtu_1.lat_long_accuracy
                  ORDER BY gtu_1.id) q
        )
 SELECT DISTINCT string_agg(DISTINCT ('https://darwin.naturalsciences.be/uri/object/'::text || (specimens_stable_ids.uuid)::text), ','::text) AS ids,
    specimens_stable_ids.uuid,
    specimens.id,
    'PhysicalObject'::text AS type,
    ('https://darwin.naturalsciences.be/uri/object/'::text || (specimens_stable_ids.uuid)::text) AS occurrence_id,
    min(specimens.specimen_creation_date) AS ndwc_created,
    max(GREATEST(specimen_auditing.modification_date_time, gtu_auditing.modification_date_time)) AS modified,
        CASE
            WHEN ((collections.code)::text = ANY (ARRAY[('paleo'::character varying)::text, ('IST'::character varying)::text, ('PalBot'::character varying)::text])) THEN 'FossilSpecimen'::text
            ELSE 'PreservedSpecimen'::text
        END AS basis_of_record,
    'present'::text AS occurrence_status,
    'Royal Belgian Institute of Natural Sciences'::text AS rights_holder,
    'https://www.wikidata.org/wiki/Q222297'::text AS institution_id,
    'http://biocol.org/urn:lsid:biocol.org:col:35271'::text AS old_institution_id,
    'RBINS-Scientific Heritage'::text AS institution_code,
    'RBINS'::text AS owner_institution_code,
    collections.name_indexed AS dataset_id,
    collections.main_collection AS collection_code,
    collections.sub_collection AS dataset_name,
    ('urn:catalog:RBINS:'::text || (collections.code)::text) AS collection_id,
    collections.name AS collection_name,
    (((collections.path)::text || collections.id) || '/'::text) AS ndwc_collection_path,
    string_agg(DISTINCT (((((COALESCE(codes.code_prefix, ''::character varying))::text || (COALESCE(codes.code_prefix_separator, ''::character varying))::text) || (COALESCE(codes.code, ''::character varying))::text) || (COALESCE(codes.code_suffix_separator, ''::character varying))::text) || (COALESCE(codes.code_suffix, ''::character varying))::text), ','::text) AS catalog_number,
    'en'::text AS language,
    'https://creativecommons.org/licenses/by-nc/4.0'::text AS license,
    specimens.taxon_name AS scientific_name,
    taxa.taxonomy_ref AS ndwc_local_taxon_id,
    taxa.worms_id AS scientific_name_id,
    taxa.gbif_id AS taxon_id,
    taxa.parent_name_usage,
    taxa.kingdom,
    taxa.phylum,
    taxa.class,
    taxa.ordo,
    taxa.family,
    taxa.genus,
    taxa.subgenus,
    taxa.specific_epithet,
    taxa.infra_specific_epithet,
    taxa.scientific_name_authorship,
    'ICZN'::text AS nomenclatural_code,
    taxa.taxonomic_status,
    replace(taxon_remarks.comment, '\r\n'::text, '.'::text) AS taxon_remarks,
    specimens.taxon_level_name AS taxon_rank,
    btrim("substring"((specimens.taxon_name)::text, ' spp\.+$| sp\.| aff\.+| cfr\.+| cf\.+'::text)) AS identification_qualifier,
    specimens.type AS type_status,
    specimens.taxon_path AS ndwc_taxon_path,
    specimens.taxon_ref AS ndwc_taxon_ref,
    ( SELECT string_agg((people.formated_name)::text, ', '::text ORDER BY people.id) AS string_agg
           FROM darwin2.people
          WHERE (people.id = ANY (specimens.spec_coll_ids))) AS recorded_by,
    max(identifications.notion_date) AS date_identified,
    COALESCE(specimens.specimen_count_max, specimens.specimen_count_min, 1) AS organism_quantity,
    'SpecimensInContainer'::text AS organism_quantity_type,
    specimens.sex,
    specimens.stage AS life_stage,
    (((COALESCE(('container type: '::text || (specimens.container_type)::text), ''::text) || COALESCE(('; sample preparator: '::text || string_agg(mof_preparator.measurement_value, ', '::text)), ''::text)) || COALESCE(('; sample preparation: '::text || string_agg(mof_preparation.measurement_value, ', '::text)), ''::text)) || COALESCE(('; preservation method: '::text || (specimens.container_storage)::text), ''::text)) AS preparations,
    (specimens.specimen_status)::text AS disposition,
    ('urn:catalog:RBINS:IG:'::text || (specimens.ig_num)::text) AS other_catalog_numbers,
    replace((COALESCE(string_agg(DISTINCT (b.title)::text, ', '::text), ''::text) || COALESCE((' '::text || string_agg(DISTINCT (b.abstract)::text, ', '::text)), ''::text)), '\r\n'::text, '.'::text) AS associated_references,
        CASE
            WHEN specimens.station_visible THEN NULL::text
            ELSE 'Precise location information withheld - country only'::text
        END AS information_withheld,
        CASE
            WHEN specimens.station_visible THEN locations.verbatim_location
            ELSE NULL::text
        END AS verbatim_location,
        CASE
            WHEN specimens.station_visible THEN locations.location
            ELSE NULL::text
        END AS location,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_nice_verbatim_location
            ELSE NULL::text
        END AS ndwc_nice_verbatim_location,
        CASE
            WHEN specimens.station_visible THEN locations.location_id
            ELSE NULL::character varying
        END AS location_id,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_geotypes
            ELSE NULL::text[]
        END AS ndwc_geotypes,
    specimens.gtu_country_tag_value AS ndwc_verbatim_country,
    specimens.gtu_ref AS ndwc_gtu_identifier,
    locations.country,
    locations.country_code,
        CASE
            WHEN specimens.station_visible THEN locations.water_body
            ELSE NULL::text
        END AS water_body,
        CASE
            WHEN specimens.station_visible THEN locations.island_group
            ELSE NULL::text
        END AS island_group,
        CASE
            WHEN specimens.station_visible THEN locations.island
            ELSE NULL::text
        END AS island,
        CASE
            WHEN specimens.station_visible THEN locations.decimal_latitude
            ELSE NULL::double precision
        END AS decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.decimal_longitude
            ELSE NULL::double precision
        END AS decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_tag_decimal_latitude
            ELSE NULL::numeric
        END AS ndwc_tag_decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_tag_decimal_longitude
            ELSE NULL::numeric
        END AS ndwc_tag_decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_gtu_decimal_latitude
            ELSE NULL::double precision
        END AS ndwc_gtu_decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_gtu_decimal_longitude
            ELSE NULL::double precision
        END AS ndwc_gtu_decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.geodetic_datum
            ELSE NULL::text
        END AS geodetic_datum,
        CASE
            WHEN specimens.station_visible THEN locations.verbatim_srs
            ELSE NULL::text
        END AS verbatim_srs,
        CASE
            WHEN specimens.station_visible THEN locations.coordinate_uncertainty_in_meters
            ELSE NULL::double precision
        END AS coordinate_uncertainty_in_meters,
        CASE
            WHEN specimens.station_visible THEN locations.footprint_wkt
            ELSE NULL::text
        END AS footprint_wkt,
    elevation.measurement_value AS minimum_elevation_in_meters,
    elevation.measurement_value AS maximum_elevation_in_meters,
        CASE
            WHEN (sampling_depth.measurement_value IS NOT NULL) THEN sampling_depth.measurement_value
            WHEN ((sampling_depth_max.measurement_value IS NOT NULL) AND (sampling_depth_min.measurement_value IS NULL)) THEN sampling_depth_max.measurement_value
            ELSE sampling_depth_min.measurement_value
        END AS minimum_depth_in_meters,
        CASE
            WHEN (sampling_depth.measurement_value IS NOT NULL) THEN sampling_depth.measurement_value
            WHEN ((sampling_depth_min.measurement_value IS NOT NULL) AND (sampling_depth_max.measurement_value IS NULL)) THEN sampling_depth_min.measurement_value
            ELSE sampling_depth_max.measurement_value
        END AS maximum_depth_in_meters,
    ( SELECT string_agg((people.formated_name)::text, ', '::text ORDER BY people.id) AS string_agg
           FROM darwin2.people
          WHERE (people.id = ANY (specimens.spec_ident_ids))) AS identified_by,
    (
        CASE
            WHEN (specimens.gtu_from_date_mask = 0) THEN
            CASE
                WHEN (specimens.gtu_to_date_mask <> 0) THEN replace((specimens.gtu_to_date)::text, '-xx'::text, ''::text)
                ELSE NULL::text
            END
            ELSE replace(darwin2.fct_mask_date(specimens.gtu_from_date, specimens.gtu_from_date_mask), '-xx'::text, ''::text)
        END ||
        CASE
            WHEN ((specimens.gtu_from_date = specimens.gtu_to_date) OR (specimens.gtu_to_date_mask = 0)) THEN ''::text
            ELSE ('/'::text || replace(darwin2.fct_mask_date(specimens.gtu_to_date, specimens.gtu_to_date_mask), '-xx'::text, ''::text))
        END) AS event_date,
    specimens.gtu_code AS field_number,
    NULL::text AS habitat
   FROM ((((((((((((((((((darwin2.specimens
     JOIN darwin2.specimens_stable_ids ON ((specimens.id = specimens_stable_ids.specimen_fk)))
     LEFT JOIN darwin2.users_tracking specimen_auditing ON (((specimen_auditing.record_id = specimens.id) AND ((specimen_auditing.referenced_relation)::text = 'specimens'::text))))
     LEFT JOIN naturalheritage.v_rmca_collections_path_as_text_naturalheritage collections ON ((specimens.collection_ref = collections.id)))
     LEFT JOIN darwin2.codes ON ((((codes.referenced_relation)::text = 'specimens'::text) AND ((codes.code_category)::text = 'main'::text) AND (specimens.id = codes.record_id))))
     LEFT JOIN darwin2.identifications ON ((((identifications.referenced_relation)::text = 'specimens'::text) AND (specimens.id = identifications.record_id) AND ((identifications.notion_concerned)::text = 'taxonomy'::text) AND (date_part('year'::text, identifications.notion_date) > (1800)::double precision))))
     LEFT JOIN darwin2.gtu ON ((specimens.gtu_ref = gtu.id)))
     LEFT JOIN darwin2.users_tracking gtu_auditing ON (((gtu_auditing.record_id = gtu.id) AND ((gtu_auditing.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN location_cte locations ON ((locations.gtu_ref = gtu.id)))
     LEFT JOIN taxonomy_authority_cte taxa ON ((taxa.taxonomy_ref = specimens.taxon_ref)))
     LEFT JOIN darwin2.catalogue_bibliography cb ON (((cb.record_id = specimens.id) AND ((cb.referenced_relation)::text = 'specimens'::text))))
     LEFT JOIN darwin2.bibliography b ON ((b.id = cb.bibliography_ref)))
     LEFT JOIN darwin2.comments taxon_remarks ON (((taxon_remarks.record_id = taxa.taxonomy_ref) AND ((taxon_remarks.referenced_relation)::text = 'taxonomy'::text) AND ((taxon_remarks.notion_concerned)::text = 'taxon information'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof elevation ON (((elevation.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (elevation.measurement_type = 'elevation'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth ON (((sampling_depth.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth.measurement_type = 'sampling_depth'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth_min ON (((sampling_depth_min.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth_min.measurement_type = 'sampling_depth_min'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth_max ON (((sampling_depth_max.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth_max.measurement_type = 'sampling_depth_max'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof mof_preparation ON (((mof_preparation.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (mof_preparation.measurement_type = 'preparation'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof mof_preparator ON (((mof_preparator.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (mof_preparator.measurement_type = 'preparator'::text))))
  WHERE (((collections.path)::text !~~ '/231%'::text) AND (specimens.taxon_name IS NOT NULL) AND (specimens.collection_is_public = true))
  GROUP BY specimens_stable_ids.uuid, specimens.id, collections.code, collections.name, collections.id, collections.path, collections.name_indexed, collections.main_collection, collections.sub_collection, specimens.taxon_name, taxa.worms_id, taxa.gbif_id, taxa.kingdom, taxa.phylum, taxa.class, taxa.ordo, taxa.family, taxa.genus, taxa.subgenus, taxa.specific_epithet, taxa.infra_specific_epithet, taxa.scientific_name_authorship, taxa.taxonomy_ref, taxa.parent_name_usage, taxa.taxonomic_status, specimens.taxon_level_name, specimens.spec_coll_ids, specimens.spec_ident_ids, specimens.station_visible, specimens.type, specimens.taxon_path, specimens.taxon_ref, specimens.specimen_count_max, specimens.specimen_count_min, specimens.sex, specimens.stage, specimens.container_type, specimens.container_storage, specimens.ig_num, specimens.gtu_country_tag_value, locations.verbatim_location, locations.country_code, locations.location, locations.ndwc_nice_verbatim_location, locations.location_id, locations.ndwc_geotypes, locations.country, locations.water_body, locations.island_group, locations.island, locations.decimal_latitude, locations.decimal_longitude, locations.ndwc_tag_decimal_latitude, locations.ndwc_tag_decimal_longitude, locations.ndwc_gtu_decimal_latitude, locations.ndwc_gtu_decimal_longitude, locations.geodetic_datum, locations.verbatim_srs, locations.coordinate_uncertainty_in_meters, locations.footprint_wkt, specimens.gtu_from_date_mask, specimens.gtu_from_date, specimens.gtu_to_date_mask, specimens.gtu_to_date, specimens.gtu_ref, specimens.gtu_code, specimens.specimen_status, taxon_remarks.comment, elevation.measurement_value, sampling_depth.measurement_value, sampling_depth_min.measurement_value, sampling_depth_max.measurement_value
  ORDER BY ('https://darwin.naturalsciences.be/uri/object/'::text || (specimens_stable_ids.uuid)::text);


ALTER TABLE naturalheritage.v_darwin_ipt_rbins_nh OWNER TO darwin2;

--
-- TOC entry 689 (class 1259 OID 1442597)
-- Name: mv_darwin_ipt_rbins_nh; Type: MATERIALIZED VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE MATERIALIZED VIEW naturalheritage.mv_darwin_ipt_rbins_nh AS
 SELECT v_darwin_ipt_rbins_nh.ids,
    v_darwin_ipt_rbins_nh.uuid,
    v_darwin_ipt_rbins_nh.id,
    v_darwin_ipt_rbins_nh.type,
    v_darwin_ipt_rbins_nh.occurrence_id,
    v_darwin_ipt_rbins_nh.ndwc_created,
    v_darwin_ipt_rbins_nh.modified,
    v_darwin_ipt_rbins_nh.basis_of_record,
    v_darwin_ipt_rbins_nh.occurrence_status,
    v_darwin_ipt_rbins_nh.rights_holder,
    v_darwin_ipt_rbins_nh.institution_id,
    v_darwin_ipt_rbins_nh.old_institution_id,
    v_darwin_ipt_rbins_nh.institution_code,
    v_darwin_ipt_rbins_nh.owner_institution_code,
    v_darwin_ipt_rbins_nh.dataset_id,
    v_darwin_ipt_rbins_nh.collection_code,
    v_darwin_ipt_rbins_nh.dataset_name,
    v_darwin_ipt_rbins_nh.collection_id,
    v_darwin_ipt_rbins_nh.collection_name,
    v_darwin_ipt_rbins_nh.ndwc_collection_path,
    v_darwin_ipt_rbins_nh.catalog_number,
    v_darwin_ipt_rbins_nh.language,
    v_darwin_ipt_rbins_nh.license,
    v_darwin_ipt_rbins_nh.scientific_name,
    v_darwin_ipt_rbins_nh.ndwc_local_taxon_id,
    v_darwin_ipt_rbins_nh.scientific_name_id,
    v_darwin_ipt_rbins_nh.taxon_id,
    v_darwin_ipt_rbins_nh.parent_name_usage,
    v_darwin_ipt_rbins_nh.kingdom,
    v_darwin_ipt_rbins_nh.phylum,
    v_darwin_ipt_rbins_nh.class,
    v_darwin_ipt_rbins_nh.ordo,
    v_darwin_ipt_rbins_nh.family,
    v_darwin_ipt_rbins_nh.genus,
    v_darwin_ipt_rbins_nh.subgenus,
    v_darwin_ipt_rbins_nh.specific_epithet,
    v_darwin_ipt_rbins_nh.infra_specific_epithet,
    v_darwin_ipt_rbins_nh.scientific_name_authorship,
    v_darwin_ipt_rbins_nh.nomenclatural_code,
    v_darwin_ipt_rbins_nh.taxonomic_status,
    v_darwin_ipt_rbins_nh.taxon_remarks,
    v_darwin_ipt_rbins_nh.taxon_rank,
    v_darwin_ipt_rbins_nh.identification_qualifier,
    v_darwin_ipt_rbins_nh.type_status,
    v_darwin_ipt_rbins_nh.ndwc_taxon_path,
    v_darwin_ipt_rbins_nh.ndwc_taxon_ref,
    v_darwin_ipt_rbins_nh.recorded_by,
    v_darwin_ipt_rbins_nh.date_identified,
    v_darwin_ipt_rbins_nh.organism_quantity,
    v_darwin_ipt_rbins_nh.organism_quantity_type,
    v_darwin_ipt_rbins_nh.sex,
    v_darwin_ipt_rbins_nh.life_stage,
    v_darwin_ipt_rbins_nh.preparations,
    v_darwin_ipt_rbins_nh.disposition,
    v_darwin_ipt_rbins_nh.other_catalog_numbers,
    v_darwin_ipt_rbins_nh.associated_references,
    v_darwin_ipt_rbins_nh.information_withheld,
    v_darwin_ipt_rbins_nh.verbatim_location,
    v_darwin_ipt_rbins_nh.location,
    v_darwin_ipt_rbins_nh.ndwc_nice_verbatim_location,
    v_darwin_ipt_rbins_nh.location_id,
    v_darwin_ipt_rbins_nh.ndwc_geotypes,
    v_darwin_ipt_rbins_nh.ndwc_verbatim_country,
    v_darwin_ipt_rbins_nh.ndwc_gtu_identifier,
    v_darwin_ipt_rbins_nh.country,
    v_darwin_ipt_rbins_nh.country_code,
    v_darwin_ipt_rbins_nh.water_body,
    v_darwin_ipt_rbins_nh.island_group,
    v_darwin_ipt_rbins_nh.island,
    v_darwin_ipt_rbins_nh.decimal_latitude,
    v_darwin_ipt_rbins_nh.decimal_longitude,
    v_darwin_ipt_rbins_nh.ndwc_tag_decimal_latitude,
    v_darwin_ipt_rbins_nh.ndwc_tag_decimal_longitude,
    v_darwin_ipt_rbins_nh.ndwc_gtu_decimal_latitude,
    v_darwin_ipt_rbins_nh.ndwc_gtu_decimal_longitude,
    v_darwin_ipt_rbins_nh.geodetic_datum,
    v_darwin_ipt_rbins_nh.verbatim_srs,
    v_darwin_ipt_rbins_nh.coordinate_uncertainty_in_meters,
    v_darwin_ipt_rbins_nh.footprint_wkt,
    v_darwin_ipt_rbins_nh.minimum_elevation_in_meters,
    v_darwin_ipt_rbins_nh.maximum_elevation_in_meters,
    v_darwin_ipt_rbins_nh.minimum_depth_in_meters,
    v_darwin_ipt_rbins_nh.maximum_depth_in_meters,
    v_darwin_ipt_rbins_nh.identified_by,
    v_darwin_ipt_rbins_nh.event_date,
    v_darwin_ipt_rbins_nh.field_number,
    v_darwin_ipt_rbins_nh.habitat
   FROM naturalheritage.v_darwin_ipt_rbins_nh
  WITH NO DATA;


ALTER TABLE naturalheritage.mv_darwin_ipt_rbins_nh OWNER TO darwin2;

--
-- TOC entry 690 (class 1259 OID 1442605)
-- Name: mv_darwin_ipt_rbins_nh_collection_stats; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.mv_darwin_ipt_rbins_nh_collection_stats AS
 SELECT DISTINCT mv_darwin_ipt_rbins_nh.collection_name,
    mv_darwin_ipt_rbins_nh.collection_id,
    mv_darwin_ipt_rbins_nh.dataset_name,
    count(*) AS counter
   FROM naturalheritage.mv_darwin_ipt_rbins_nh
  GROUP BY mv_darwin_ipt_rbins_nh.collection_name, mv_darwin_ipt_rbins_nh.collection_id, mv_darwin_ipt_rbins_nh.dataset_name;


ALTER TABLE naturalheritage.mv_darwin_ipt_rbins_nh_collection_stats OWNER TO darwin2;

--
-- TOC entry 691 (class 1259 OID 1442610)
-- Name: mvd_cetaf_rdf_view; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.mvd_cetaf_rdf_view AS
 SELECT mv_darwin_ipt_rbins_nh.uuid,
    mv_darwin_ipt_rbins_nh.uuid AS "SpecimenID",
    ('https://darwin.naturalsciences.be/uri/rdf/'::text || mv_darwin_ipt_rbins_nh.uuid) AS "RefUri",
    ('https://darwin.naturalsciences.be/search/view/uuid/'::text || mv_darwin_ipt_rbins_nh.uuid) AS "ObjectUri",
    ('https://darwin.naturalsciences.be/search/view/uuid/'::text || mv_darwin_ipt_rbins_nh.uuid) AS "ObjectURI",
    ((('CATALOG NUMBER :'::text || mv_darwin_ipt_rbins_nh.catalog_number) || ' TAXON : '::text) || (mv_darwin_ipt_rbins_nh.scientific_name)::text) AS "Title",
    ((('CATALOG NUMBER :'::text || mv_darwin_ipt_rbins_nh.catalog_number) || ' TAXON : '::text) || (mv_darwin_ipt_rbins_nh.scientific_name)::text) AS "TitleDescription",
    mv_darwin_ipt_rbins_nh.recorded_by AS collector,
    mv_darwin_ipt_rbins_nh.event_date AS "CollectionDate",
    mv_darwin_ipt_rbins_nh.modified,
    'specimens'::text AS "BaseOfRecord",
    'RBINS'::text AS "InstitutionCode",
    ((mv_darwin_ipt_rbins_nh.collection_code || ' '::text) || mv_darwin_ipt_rbins_nh.dataset_name) AS "CollectionName",
    mv_darwin_ipt_rbins_nh.catalog_number AS "CatalogNumber",
    mv_darwin_ipt_rbins_nh.family AS "Family",
    mv_darwin_ipt_rbins_nh.genus AS "Genus",
    mv_darwin_ipt_rbins_nh.specific_epithet AS "SpecificEpithet",
    mv_darwin_ipt_rbins_nh.location AS "HigherGeography",
    mv_darwin_ipt_rbins_nh.country AS "Country",
    mv_darwin_ipt_rbins_nh.verbatim_location AS "Locality",
    mv_darwin_ipt_rbins_nh.scientific_name AS "ScientificName"
   FROM naturalheritage.mv_darwin_ipt_rbins_nh
  WHERE (mv_darwin_ipt_rbins_nh.uuid IS NOT NULL);


ALTER TABLE naturalheritage.mvd_cetaf_rdf_view OWNER TO darwin2;

--
-- TOC entry 692 (class 1259 OID 1442615)
-- Name: v_count_specimens_per_taxa_collections; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.v_count_specimens_per_taxa_collections AS
 SELECT specimens.collection_ref,
    specimens.collection_path,
    specimens.collection_code,
    specimens.collection_name,
    specimens.taxon_ref,
    specimens.taxon_name,
    specimens.taxon_path,
    specimens.taxon_level_ref,
    v_rmca_collections_path_as_text.collection_path_text,
    v_rmca_collections_path_as_text.collection_path_code,
    v_rmca_collections_path_as_text.collection_path_indexed,
    count(specimens.id) AS count_ids
   FROM (darwin2.specimens
     JOIN darwin2.v_rmca_collections_path_as_text ON ((specimens.collection_ref = v_rmca_collections_path_as_text.id)))
  WHERE (specimens.taxon_ref IS NOT NULL)
  GROUP BY specimens.collection_ref, specimens.collection_path, specimens.collection_code, specimens.collection_name, specimens.taxon_ref, specimens.taxon_name, specimens.taxon_path, specimens.taxon_level_ref, v_rmca_collections_path_as_text.collection_path_text, v_rmca_collections_path_as_text.collection_path_code, v_rmca_collections_path_as_text.collection_path_indexed
  ORDER BY (count(specimens.id)) DESC;


ALTER TABLE naturalheritage.v_count_specimens_per_taxa_collections OWNER TO darwin2;

--
-- TOC entry 693 (class 1259 OID 1442620)
-- Name: v_darwin_ipt_rbins_nh_dwc_name_output; Type: VIEW; Schema: naturalheritage; Owner: darwin2
--

CREATE VIEW naturalheritage.v_darwin_ipt_rbins_nh_dwc_name_output AS
 SELECT mv_darwin_ipt_rbins_nh.ids AS id,
    mv_darwin_ipt_rbins_nh.uuid AS uuid_darwin,
    mv_darwin_ipt_rbins_nh.type,
    mv_darwin_ipt_rbins_nh.modified,
    mv_darwin_ipt_rbins_nh.language,
    mv_darwin_ipt_rbins_nh.license,
    mv_darwin_ipt_rbins_nh.rights_holder AS "rightsHolder",
    mv_darwin_ipt_rbins_nh.institution_id AS "institutionID",
    mv_darwin_ipt_rbins_nh.collection_id AS "collectionID",
    mv_darwin_ipt_rbins_nh.dataset_id AS "datasetID",
    mv_darwin_ipt_rbins_nh.institution_code AS "institutionCode",
    mv_darwin_ipt_rbins_nh.collection_code AS "collectionCode",
    mv_darwin_ipt_rbins_nh.dataset_name AS "datasetName",
    mv_darwin_ipt_rbins_nh.owner_institution_code AS "ownerInstitutionCode",
    mv_darwin_ipt_rbins_nh.basis_of_record AS "basisOfRecord",
    mv_darwin_ipt_rbins_nh.information_withheld AS "informationWithheld",
    mv_darwin_ipt_rbins_nh.occurrence_id AS "occurrenceID",
    mv_darwin_ipt_rbins_nh.catalog_number AS "catalogNumber",
    mv_darwin_ipt_rbins_nh.recorded_by AS "recordedBy",
    mv_darwin_ipt_rbins_nh.organism_quantity AS "organismQuantity",
    mv_darwin_ipt_rbins_nh.organism_quantity_type AS "organismQuantityType",
    mv_darwin_ipt_rbins_nh.sex,
    mv_darwin_ipt_rbins_nh.life_stage AS "lifeStage",
    mv_darwin_ipt_rbins_nh.occurrence_status AS "occurrenceStatus",
    mv_darwin_ipt_rbins_nh.preparations,
    mv_darwin_ipt_rbins_nh.disposition,
    mv_darwin_ipt_rbins_nh.other_catalog_numbers AS "otherCatalogNumbers",
    mv_darwin_ipt_rbins_nh.associated_references AS "associatedReferences",
    mv_darwin_ipt_rbins_nh.event_date AS "eventDate",
    mv_darwin_ipt_rbins_nh.habitat,
    mv_darwin_ipt_rbins_nh.field_number AS "fieldNumber",
    mv_darwin_ipt_rbins_nh.location_id AS "locationID",
    mv_darwin_ipt_rbins_nh.water_body AS "waterBody",
    mv_darwin_ipt_rbins_nh.island_group AS "islandGroup",
    mv_darwin_ipt_rbins_nh.island,
    mv_darwin_ipt_rbins_nh.country,
    mv_darwin_ipt_rbins_nh.country_code AS "countryCode",
    mv_darwin_ipt_rbins_nh.location AS locality,
    mv_darwin_ipt_rbins_nh.verbatim_location AS "verbatimLocality",
    mv_darwin_ipt_rbins_nh.minimum_depth_in_meters AS "minimumDepthInMeters",
    mv_darwin_ipt_rbins_nh.maximum_depth_in_meters AS "maximumDepthInMeters",
    mv_darwin_ipt_rbins_nh.verbatim_srs AS "verbatimSRS",
    mv_darwin_ipt_rbins_nh.decimal_latitude AS "decimalLatitude",
    mv_darwin_ipt_rbins_nh.decimal_longitude AS "decimalLongitude",
    mv_darwin_ipt_rbins_nh.geodetic_datum AS "geodeticDatum",
    mv_darwin_ipt_rbins_nh.coordinate_uncertainty_in_meters AS "coordinateUncertaintyInMeters",
    mv_darwin_ipt_rbins_nh.footprint_wkt AS "footprintWKT",
    mv_darwin_ipt_rbins_nh.identified_by AS "identifiedBy",
    mv_darwin_ipt_rbins_nh.date_identified AS "dateIdentified",
    mv_darwin_ipt_rbins_nh.identification_qualifier AS "identificationQualifier",
    mv_darwin_ipt_rbins_nh.type_status AS "typeStatus",
    mv_darwin_ipt_rbins_nh.taxon_id AS "taxonID",
    mv_darwin_ipt_rbins_nh.scientific_name_id AS "scientificNameID",
    mv_darwin_ipt_rbins_nh.scientific_name AS "scientificName",
    mv_darwin_ipt_rbins_nh.parent_name_usage AS "parentNameUsage",
    mv_darwin_ipt_rbins_nh.kingdom,
    mv_darwin_ipt_rbins_nh.phylum,
    mv_darwin_ipt_rbins_nh.class,
    mv_darwin_ipt_rbins_nh.ordo AS "order",
    mv_darwin_ipt_rbins_nh.family,
    mv_darwin_ipt_rbins_nh.genus,
    mv_darwin_ipt_rbins_nh.subgenus,
    mv_darwin_ipt_rbins_nh.specific_epithet AS "specificEpithet",
    mv_darwin_ipt_rbins_nh.infra_specific_epithet AS "infraspecificEpithet",
    mv_darwin_ipt_rbins_nh.taxon_rank AS "taxonRank",
    mv_darwin_ipt_rbins_nh.scientific_name_authorship AS "scientificNameAuthorship",
    mv_darwin_ipt_rbins_nh.nomenclatural_code AS "nomenclaturalCode",
    mv_darwin_ipt_rbins_nh.taxonomic_status AS "taxonomicStatus",
    mv_darwin_ipt_rbins_nh.taxon_remarks AS "taxonRemarks"
   FROM naturalheritage.mv_darwin_ipt_rbins_nh;


ALTER TABLE naturalheritage.v_darwin_ipt_rbins_nh_dwc_name_output OWNER TO darwin2;

--
-- TOC entry 694 (class 1259 OID 1442625)
-- Name: count_migration; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.count_migration (
    name character varying,
    operation character varying,
    count integer
);


ALTER TABLE public.count_migration OWNER TO postgres;

--
-- TOC entry 695 (class 1259 OID 1442631)
-- Name: gtu_for_normalization; Type: TABLE; Schema: public; Owner: darwin2
--

CREATE TABLE public.gtu_for_normalization (
    gtu_id integer[],
    code character varying,
    tag_values_indexed character varying[],
    latitude double precision,
    longitude double precision,
    lat_long_accuracy double precision,
    location character varying,
    elevation double precision,
    elevation_accuracy double precision,
    latitude_dms_degree integer,
    latitude_dms_minutes double precision,
    latitude_dms_seconds double precision,
    latitude_dms_direction integer,
    longitude_dms_degree integer,
    longitude_dms_minutes double precision,
    longitude_dms_seconds double precision,
    longitude_dms_direction integer,
    latitude_utm double precision,
    longitude_utm double precision,
    utm_zone character varying,
    coordinates_source character varying,
    elevation_unit character varying(4),
    gtu_creation_date timestamp without time zone,
    import_ref integer,
    iso3166 character varying,
    iso3166_subdivision character varying,
    comments text[],
    properties text[],
    ext_links text[],
    multimedias text[],
    tags text[],
    tag_groups text[]
);


ALTER TABLE public.gtu_for_normalization OWNER TO darwin2;

--
-- TOC entry 696 (class 1259 OID 1442637)
-- Name: labeling; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.labeling AS
 SELECT df.id AS unique_id,
    df.collection_ref AS collection,
    df.collection_name,
    df.collection_path,
        CASE
            WHEN ((COALESCE(df.specimen_part, ''::character varying))::text = ANY (ARRAY[('specimen'::character varying)::text, ('animal'::character varying)::text, ('undefined'::character varying)::text, ('unknown'::character varying)::text, (''::character varying)::text])) THEN ''::character varying
            ELSE df.specimen_part
        END AS part_item,
        CASE
            WHEN ((df.sex)::text = ANY (ARRAY[('undefined'::character varying)::text, ('unknown'::character varying)::text, ('not stated'::character varying)::text, ('non applicable'::character varying)::text])) THEN ''::text
            ELSE ((df.sex)::text ||
            CASE
                WHEN ((df.state)::text = 'not applicable'::text) THEN ''::text
                ELSE (' '::text || (df.state)::text)
            END)
        END AS part_sex_state,
        CASE
            WHEN ((df.type)::text = 'specimen'::text) THEN ''::character varying
            ELSE df.type
        END AS part_type,
        CASE
            WHEN ((df.stage)::text = ANY (ARRAY[('undefined'::character varying)::text, ('unknown'::character varying)::text, ('not stated'::character varying)::text])) THEN ''::character varying
            ELSE df.stage
        END AS part_stage,
        CASE
            WHEN (df.sub_container IS NULL) THEN
            CASE
                WHEN ((COALESCE(df.container_storage, ''::character varying))::text = ANY (ARRAY[('unknown'::character varying)::text, ('/'::character varying)::text, (''::character varying)::text])) THEN ''::character varying
                ELSE df.container_storage
            END
            ELSE ''::character varying
        END AS part_container_storage,
        CASE
            WHEN ((COALESCE(df.sub_container_storage, ''::character varying))::text = ANY (ARRAY[('unknown'::character varying)::text, ('/'::character varying)::text, (''::character varying)::text])) THEN ''::character varying
            ELSE COALESCE(df.sub_container_storage, ''::character varying)
        END AS part_sub_container_storage,
    ARRAY[darwin2.fulltoindex(df.specimen_part)] AS part,
    ARRAY[darwin2.fulltoindex(df.type)] AS type,
    df.sex,
    df.stage,
    (array_to_string(darwin2.labeling_code_for_indexation(df.id), ';'::text))::character varying AS code,
    ( SELECT codes.code_num
           FROM darwin2.codes
          WHERE (((codes.referenced_relation)::text = 'specimens'::text) AND (codes.record_id = df.id) AND ((codes.code_category)::text = 'main'::text) AND (COALESCE(upper((codes.code_prefix)::text), ''::text) <> 'RBINS'::text) AND (codes.code_num IS NOT NULL))
         LIMIT 1) AS code_num,
    darwin2.labeling_code_for_indexation(df.id) AS code_array,
    df.taxon_ref,
    df.taxon_name,
    df.taxon_name_indexed,
    df.taxon_path,
    ( SELECT phyl.name
           FROM (( SELECT (x.id)::integer AS id
                   FROM ( SELECT regexp_split_to_table((taxphyls.path)::text, '/'::text) AS id
                           FROM darwin2.taxonomy taxphyls
                          WHERE (taxphyls.id = df.taxon_ref)) x
                  WHERE (x.id <> ''::text)) y
             JOIN darwin2.taxonomy phyl ON (((y.id = phyl.id) AND (phyl.level_ref = 4))))) AS phyl,
    ( SELECT clas.name
           FROM (( SELECT (x.id)::integer AS id
                   FROM ( SELECT regexp_split_to_table((taxclass.path)::text, '/'::text) AS id
                           FROM darwin2.taxonomy taxclass
                          WHERE (taxclass.id = df.taxon_ref)) x
                  WHERE (x.id <> ''::text)) y
             JOIN darwin2.taxonomy clas ON (((y.id = clas.id) AND (clas.level_ref = 12))))) AS clas,
    ( SELECT ordo.name
           FROM (( SELECT (x.id)::integer AS id
                   FROM ( SELECT regexp_split_to_table((taxord.path)::text, '/'::text) AS id
                           FROM darwin2.taxonomy taxord
                          WHERE (taxord.id = df.taxon_ref)) x
                  WHERE (x.id <> ''::text)) y
             JOIN darwin2.taxonomy ordo ON (((y.id = ordo.id) AND (ordo.level_ref = 28))))) AS ordo,
    ( SELECT fam.name
           FROM (( SELECT (x.id)::integer AS id
                   FROM ( SELECT regexp_split_to_table((taxfam.path)::text, '/'::text) AS id
                           FROM darwin2.taxonomy taxfam
                          WHERE (taxfam.id = df.taxon_ref)) x
                  WHERE (x.id <> ''::text)) y
             JOIN darwin2.taxonomy fam ON (((y.id = fam.id) AND (fam.level_ref = 34))))) AS family,
    (( SELECT array_to_string(array_agg(ct.name), ' - '::text) AS array_to_string
           FROM (darwin2.taxonomy ct
             JOIN darwin2.classification_synonymies cs ON ((((cs.referenced_relation)::text = 'taxonomy'::text) AND (cs.record_id = ct.id) AND (cs.is_basionym = true))))
          WHERE (cs.group_id = ( SELECT classification_synonymies.group_id
                   FROM darwin2.classification_synonymies
                  WHERE (((classification_synonymies.referenced_relation)::text = 'taxonomy'::text) AND (classification_synonymies.record_id = df.taxon_ref) AND ((classification_synonymies.group_name)::text = 'rename'::text))))))::character varying AS current_name,
        CASE
            WHEN ((df.acquisition_category IS NOT NULL) AND (btrim((df.acquisition_category)::text) <> ''::text)) THEN df.acquisition_category
            ELSE ''::character varying
        END AS acquisition_category,
    df.gtu_ref,
    df.gtu_country_tag_value AS countries,
    df.gtu_country_tag_indexed AS countries_array,
    df.gtu_province_tag_value AS provinces,
    df.gtu_province_tag_indexed AS provinces_array,
    df.gtu_others_tag_value AS location,
    df.gtu_others_tag_indexed AS location_array,
        CASE
            WHEN (btrim((df.gtu_code)::text) = ANY (ARRAY[''::text, '/'::text, '0'::text, '0/'::text])) THEN ''::text
            ELSE btrim((df.gtu_code)::text)
        END AS location_code,
    (
        CASE
            WHEN (df.gtu_from_date_mask >= 32) THEN to_char(df.gtu_from_date, 'DD/MM/YYYY'::text)
            ELSE ''::text
        END ||
        CASE
            WHEN (df.gtu_to_date_mask >= 32) THEN (' - '::text || to_char(df.gtu_to_date, 'DD/MM/YYYY'::text))
            ELSE ''::text
        END) AS gtu_date,
        CASE
            WHEN (df.gtu_location IS NOT NULL) THEN ((trunc((df.gtu_location[0])::numeric, 6) || '/'::text) || trunc((df.gtu_location[1])::numeric, 6))
            ELSE ''::text
        END AS lat_long,
        CASE
            WHEN (df.gtu_elevation IS NOT NULL) THEN ((trunc((df.gtu_elevation)::numeric, 2) || ' m'::text) ||
            CASE
                WHEN (df.gtu_elevation_accuracy IS NOT NULL) THEN ((' +- '::text || trunc((df.gtu_elevation_accuracy)::numeric, 2)) || ' m'::text)
                ELSE ''::text
            END)
            ELSE ''::text
        END AS elevation,
    (( SELECT
                CASE
                    WHEN (length(regexp_replace(y.coll, '[^,]+'::text, ''::text, 'g'::text)) > 2) THEN (substr(y.coll, 1, (strpos(y.coll, ','::text) - 1)) || ' & al.'::text)
                    ELSE y.coll
                END AS coll
           FROM ( SELECT array_to_string(array_agg(x.people_list), ', '::text) AS coll
                   FROM ( SELECT DISTINCT btrim((peo.family_name)::text) AS people_list,
                            cp.order_by
                           FROM (darwin2.catalogue_people cp
                             JOIN darwin2.people peo ON ((cp.people_ref = peo.id)))
                          WHERE (((cp.people_type)::text = 'collector'::text) AND ((cp.referenced_relation)::text = 'specimens'::text) AND (cp.record_id = df.id) AND ((peo.family_name)::text <> ALL (ARRAY[('Unknown'::character varying)::text, ('/'::character varying)::text])))
                          ORDER BY cp.order_by) x) y))::character varying AS collectors,
    (( SELECT (
                CASE
                    WHEN (length(regexp_replace(y.identi, '[^,]+'::text, ''::text, 'g'::text)) > 2) THEN (substr(y.identi, 1, (strpos(y.identi, ','::text) - 1)) || ' & al.'::text)
                    ELSE y.identi
                END || y.identi_year)
           FROM ( SELECT array_to_string(array_agg(x.people_list), ', '::text) AS identi,
                        CASE
                            WHEN (max(x.ident_date) IS NOT NULL) THEN (', '::text || max(x.ident_date))
                            ELSE ''::text
                        END AS identi_year
                   FROM ( SELECT DISTINCT btrim((peo.family_name)::text) AS people_list,
                            cp.order_by,
                                CASE
                                    WHEN (ident.notion_date_mask <> 0) THEN date_part('year'::text, ident.notion_date)
                                    ELSE NULL::double precision
                                END AS ident_date
                           FROM ((darwin2.catalogue_people cp
                             JOIN darwin2.people peo ON ((cp.people_ref = peo.id)))
                             JOIN darwin2.identifications ident ON (((cp.record_id = ident.id) AND ((cp.referenced_relation)::text = 'identifications'::text) AND ((cp.people_type)::text = 'identifier'::text))))
                          WHERE (((ident.referenced_relation)::text = 'specimens'::text) AND (ident.record_id = df.id) AND ((peo.family_name)::text <> ALL (ARRAY[('Unknown'::character varying)::text, ('/'::character varying)::text])) AND (ident.notion_date = ( SELECT max(idt.notion_date) AS max
                                   FROM darwin2.identifications idt
                                  WHERE (((idt.referenced_relation)::text = (ident.referenced_relation)::text) AND (idt.record_id = ident.record_id)))))
                          ORDER BY cp.order_by) x) y))::character varying AS identifiers,
    ''::character varying AS part_identifiers,
    (( SELECT
                CASE
                    WHEN (length(regexp_replace(y.coll, '[^,]+'::text, ''::text, 'g'::text)) > 2) THEN (substr(y.coll, 1, (strpos(y.coll, ','::text) - 1)) || ' & al.'::text)
                    ELSE y.coll
                END AS coll
           FROM ( SELECT array_to_string(array_agg(x.people_list), ', '::text) AS coll
                   FROM ( SELECT DISTINCT btrim((peo.family_name)::text) AS people_list,
                            cp.order_by
                           FROM (darwin2.catalogue_people cp
                             JOIN darwin2.people peo ON ((cp.people_ref = peo.id)))
                          WHERE (((cp.people_type)::text = 'donator'::text) AND ((cp.referenced_relation)::text = 'specimens'::text) AND (cp.record_id = df.id) AND ((peo.family_name)::text <> ALL (ARRAY[('Unknown'::character varying)::text, ('/'::character varying)::text])))
                          ORDER BY cp.order_by) x) y))::character varying AS donators,
    COALESCE(df.ig_num, '-'::character varying) AS ig_num,
    df.ig_num_indexed,
    darwin2.convert_to_integer(COALESCE(df.ig_num, '-'::character varying)) AS ig_numeric,
        CASE
            WHEN ((df.specimen_count_min <> df.specimen_count_max) AND (df.specimen_count_min IS NOT NULL) AND (df.specimen_count_max IS NOT NULL)) THEN ((df.specimen_count_min || ' - '::text) || df.specimen_count_max)
            ELSE
            CASE
                WHEN (df.specimen_count_min IS NOT NULL) THEN (df.specimen_count_min)::text
                ELSE ''::text
            END
        END AS specimen_number,
    df.specimen_count_max AS specimen_number_max,
    df.room AS part_room,
    df."row" AS part_row,
    df.shelf AS part_shelf,
    df.container AS part_container,
    df.sub_container AS part_sub_container,
        CASE
            WHEN (EXISTS ( SELECT 1
               FROM darwin2.comments
              WHERE (((comments.referenced_relation)::text = 'specimens'::text) AND (comments.record_id = df.id)))) THEN 'Y'::text
            ELSE 'N'::text
        END AS comments
   FROM darwin2.specimens df;


ALTER TABLE public.labeling OWNER TO darwin2;

--
-- TOC entry 697 (class 1259 OID 1442642)
-- Name: metadata_tmp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.metadata_tmp (
    max integer
);


ALTER TABLE public.metadata_tmp OWNER TO postgres;

--
-- TOC entry 698 (class 1259 OID 1442645)
-- Name: v_group_gtus; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.v_group_gtus AS
 SELECT DISTINCT array_agg(a.gtu_id ORDER BY a.gtu_id) AS gtu_id,
    a.code,
    a.tag_values_indexed,
    a.latitude,
    a.longitude,
    a.lat_long_accuracy,
    a.location,
    a.elevation,
    a.elevation_accuracy,
    a.latitude_dms_degree,
    a.latitude_dms_minutes,
    a.latitude_dms_seconds,
    a.latitude_dms_direction,
    a.longitude_dms_degree,
    a.longitude_dms_minutes,
    a.longitude_dms_seconds,
    a.longitude_dms_direction,
    a.latitude_utm,
    a.longitude_utm,
    a.utm_zone,
    a.coordinates_source,
    a.gtu_creation_date,
    a.import_ref,
    a.comments,
    a.properties,
    a.ext_links,
    a.multimedias,
    a.tags,
    a.tag_groups
   FROM ( SELECT DISTINCT gtu.id AS gtu_id,
            gtu.code,
            gtu.gtu_from_date_mask,
            gtu.gtu_from_date,
            gtu.gtu_to_date_mask,
            gtu.gtu_to_date,
            gtu.tag_values_indexed,
            gtu.latitude,
            gtu.longitude,
            gtu.lat_long_accuracy,
            gtu.elevation,
            gtu.elevation_accuracy,
            (gtu.location)::character varying AS location,
            gtu.gtu_creation_date,
            gtu.import_ref,
            gtu.collector_refs,
            gtu.expedition_refs,
            gtu.collection_ref,
            gtu.latitude_dms_degree,
            gtu.latitude_dms_minutes,
            gtu.latitude_dms_seconds,
            gtu.latitude_dms_direction,
            gtu.longitude_dms_degree,
            gtu.longitude_dms_minutes,
            gtu.longitude_dms_seconds,
            gtu.longitude_dms_direction,
            gtu.latitude_utm,
            gtu.longitude_utm,
            gtu.utm_zone,
            gtu.coordinates_source,
            gtu.nagoya,
            array_agg(DISTINCT (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text)) ORDER BY (((COALESCE(comments.notion_concerned, ''::character varying))::text || COALESCE(comments.comment, ''::text)) || COALESCE(comments.comment_indexed, ''::text))) AS comments,
            array_agg(DISTINCT ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text) ORDER BY ((((((((((((((((COALESCE(properties.property_type, ''::character varying))::text || (COALESCE(properties.applies_to, ''::character varying))::text) || (COALESCE(properties.applies_to_indexed, ''::character varying))::text) || (COALESCE((properties.date_from_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_from)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to_mask)::character varying, ''::character varying))::text) || (COALESCE((properties.date_to)::character varying, ''::character varying))::text) || (COALESCE((properties.is_quantitative)::character varying, ''::character varying))::text) || (COALESCE(properties.property_unit, ''::character varying))::text) || (COALESCE(properties.method, ''::character varying))::text) || (COALESCE(properties.method_indexed, ''::character varying))::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || (COALESCE((properties.lower_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.upper_value, ''::character varying))::text) || (COALESCE((properties.upper_value_unified)::character varying, ''::character varying))::text) || (COALESCE(properties.property_accuracy, ''::character varying))::text)) AS properties,
            array_agg(DISTINCT ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text)) ORDER BY ((((COALESCE(ext_links.url, ''::character varying))::text || COALESCE(ext_links.comment, ''::text)) || COALESCE(ext_links.comment_indexed, ''::text)) || COALESCE(ext_links.type, ''::text))) AS ext_links,
            array_agg(DISTINCT ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text)) ORDER BY ((((((((((((((COALESCE((multimedia.is_digital)::character varying, ''::character varying))::text || (COALESCE(multimedia.type, ''::character varying))::text) || (COALESCE(multimedia.sub_type, ''::character varying))::text) || (COALESCE(multimedia.title, ''::character varying))::text) || (COALESCE(multimedia.description, ''::character varying))::text) || (COALESCE(multimedia.uri, ''::character varying))::text) || (COALESCE(multimedia.filename, ''::character varying))::text) || COALESCE(multimedia.search_indexed, ''::text)) || (COALESCE((multimedia.creation_date)::character varying, ''::character varying))::text) || (COALESCE((multimedia.creation_date_mask)::character varying, ''::character varying))::text) || (COALESCE(multimedia.mime_type, ''::character varying))::text) || (COALESCE((multimedia.visible)::character varying, ''::character varying))::text) || (COALESCE((multimedia.publishable)::character varying, ''::character varying))::text) || COALESCE(multimedia.extracted_info, ''::text))) AS multimedias,
            array_agg(DISTINCT ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text) ORDER BY ((((COALESCE(tags.group_type, ''::character varying))::text || (COALESCE(tags.sub_group_type, ''::character varying))::text) || (COALESCE(tags.tag, ''::character varying))::text) || (COALESCE(tags.tag_indexed, ''::character varying))::text)) AS tags,
            array_agg(DISTINCT (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text) ORDER BY (((((((COALESCE(tag_groups.group_name, ''::character varying))::text || (COALESCE(tag_groups.group_name_indexed, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name, ''::character varying))::text) || (COALESCE(tag_groups.sub_group_name_indexed, ''::character varying))::text) || COALESCE(tag_groups.international_name, ''::text)) || (COALESCE(tag_groups.color, ''::character varying))::text) || (COALESCE(tag_groups.tag_value, ''::character varying))::text)) AS tag_groups
           FROM ((((((darwin2.gtu
             LEFT JOIN darwin2.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.ext_links ON (((gtu.id = ext_links.record_id) AND ((ext_links.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
             LEFT JOIN darwin2.tags ON ((gtu.id = tags.gtu_ref)))
             LEFT JOIN darwin2.tag_groups ON ((gtu.id = tag_groups.gtu_ref)))
          GROUP BY gtu.id, gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, gtu.gtu_creation_date, gtu.import_ref, gtu.collector_refs, gtu.expedition_refs, gtu.collection_ref, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, gtu.nagoya) a
  GROUP BY a.code, a.gtu_from_date_mask, a.gtu_from_date, a.gtu_to_date_mask, a.gtu_to_date, a.tag_values_indexed, a.latitude, a.longitude, a.lat_long_accuracy, a.elevation, a.elevation_accuracy, a.location, a.gtu_creation_date, a.import_ref, a.collector_refs, a.expedition_refs, a.collection_ref, a.latitude_dms_degree, a.latitude_dms_minutes, a.latitude_dms_seconds, a.latitude_dms_direction, a.longitude_dms_degree, a.longitude_dms_minutes, a.longitude_dms_seconds, a.longitude_dms_direction, a.latitude_utm, a.longitude_utm, a.utm_zone, a.coordinates_source, a.nagoya, a.comments, a.properties, a.ext_links, a.multimedias, a.tags, a.tag_groups
  WITH NO DATA;


ALTER TABLE public.v_group_gtus OWNER TO postgres;

--
-- TOC entry 699 (class 1259 OID 1442653)
-- Name: v_gtu_for_normalization_correspondences; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.v_gtu_for_normalization_correspondences AS
 SELECT v_group_gtus.gtu_id,
    v_group_gtus.gtu_id[1] AS gtu_to_keep,
    v_group_gtus.gtu_id[2:10000] AS gtu_to_remove
   FROM public.v_group_gtus
  WHERE (array_length(v_group_gtus.gtu_id, 1) > 1);


ALTER TABLE public.v_gtu_for_normalization_correspondences OWNER TO postgres;

--
-- TOC entry 700 (class 1259 OID 1442657)
-- Name: v_normalize_comment_to_gtu; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_comment_to_gtu AS
 SELECT min(gtu.id) AS min_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    comments.id AS comment_id,
    comments.referenced_relation,
    comments.notion_concerned,
    comments.comment,
    comments.comment_indexed
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
  GROUP BY gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, comments.id, comments.referenced_relation, comments.notion_concerned, comments.comment, comments.comment_indexed;


ALTER TABLE public.v_normalize_comment_to_gtu OWNER TO darwin2;

--
-- TOC entry 701 (class 1259 OID 1442662)
-- Name: v_normalize_gtu_no_dates; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_gtu_no_dates AS
 SELECT DISTINCT min(gtu.id) AS lower_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location
   FROM darwin2_rbins_data.gtu
  GROUP BY gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying;


ALTER TABLE public.v_normalize_gtu_no_dates OWNER TO darwin2;

--
-- TOC entry 702 (class 1259 OID 1442666)
-- Name: v_normalize_gtu_no_dates_properties_comments_multimedia; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_gtu_no_dates_properties_comments_multimedia AS
 SELECT DISTINCT min(gtu.id) AS normalized_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    array_agg(properties.id ORDER BY gtu.id) AS property_ids,
    properties.property_type,
    properties.applies_to,
    properties.applies_to_indexed,
    properties.date_from_mask,
    properties.date_from,
    properties.date_to_mask,
    properties.date_to,
    properties.is_quantitative,
    properties.property_unit,
    properties.method,
    properties.method_indexed,
    properties.lower_value,
    properties.lower_value_unified,
    properties.upper_value,
    properties.upper_value_unified,
    properties.property_accuracy,
    array_agg(comments.id ORDER BY gtu.id) AS comment_ids,
    comments.referenced_relation,
    comments.notion_concerned,
    comments.comment,
    comments.comment_indexed,
    array_agg(multimedia.id ORDER BY gtu.id) AS multimedia_ids,
    multimedia.is_digital,
    multimedia.type,
    multimedia.sub_type,
    multimedia.title,
    multimedia.description,
    multimedia.uri,
    multimedia.filename,
    multimedia.creation_date,
    multimedia.creation_date_mask,
    multimedia.mime_type,
    multimedia.visible,
    multimedia.publishable,
    multimedia.search_indexed,
    multimedia.extracted_info
   FROM (((darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2_rbins_data.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2_rbins_data.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
  WHERE ((properties.id IS NOT NULL) OR (comments.id IS NOT NULL) OR (multimedia.id IS NOT NULL))
  GROUP BY gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, properties.id, properties.property_type, properties.applies_to, properties.applies_to_indexed, properties.date_from_mask, properties.date_from, properties.date_to_mask, properties.date_to, properties.is_quantitative, properties.property_unit, properties.method, properties.method_indexed, properties.lower_value, properties.lower_value_unified, properties.upper_value, properties.upper_value_unified, properties.property_accuracy, comments.id, comments.referenced_relation, comments.notion_concerned, comments.comment, comments.comment_indexed, multimedia.id, multimedia.is_digital, multimedia.type, multimedia.sub_type, multimedia.title, multimedia.description, multimedia.uri, multimedia.filename, multimedia.creation_date, multimedia.creation_date_mask, multimedia.mime_type, multimedia.visible, multimedia.publishable, multimedia.search_indexed, multimedia.extracted_info;


ALTER TABLE public.v_normalize_gtu_no_dates_properties_comments_multimedia OWNER TO darwin2;

--
-- TOC entry 703 (class 1259 OID 1442671)
-- Name: v_normalize_gtu_to_comments; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_gtu_to_comments AS
 SELECT DISTINCT min(gtu.id) AS normalized_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    array_agg(comments.id ORDER BY gtu.id) AS comment_ids,
    comments.referenced_relation,
    comments.notion_concerned,
    comments.comment,
    comments.comment_indexed
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.comments ON (((gtu.id = comments.record_id) AND ((comments.referenced_relation)::text = 'gtu'::text))))
  WHERE (comments.id IS NOT NULL)
  GROUP BY gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, comments.referenced_relation, comments.notion_concerned, comments.comment, comments.comment_indexed;


ALTER TABLE public.v_normalize_gtu_to_comments OWNER TO darwin2;

--
-- TOC entry 704 (class 1259 OID 1442676)
-- Name: v_normalize_gtu_to_multimedia; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_gtu_to_multimedia AS
 SELECT DISTINCT min(gtu.id) AS normalized_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    array_agg(multimedia.id ORDER BY gtu.id) AS multimedia_ids,
    multimedia.is_digital,
    multimedia.type,
    multimedia.sub_type,
    multimedia.title,
    multimedia.description,
    multimedia.uri,
    multimedia.filename,
    multimedia.creation_date,
    multimedia.creation_date_mask,
    multimedia.mime_type,
    multimedia.visible,
    multimedia.publishable,
    multimedia.search_indexed,
    multimedia.extracted_info
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
  WHERE (multimedia.id IS NOT NULL)
  GROUP BY gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, multimedia.is_digital, multimedia.type, multimedia.sub_type, multimedia.title, multimedia.description, multimedia.uri, multimedia.filename, multimedia.creation_date, multimedia.creation_date_mask, multimedia.mime_type, multimedia.visible, multimedia.publishable, multimedia.search_indexed, multimedia.extracted_info;


ALTER TABLE public.v_normalize_gtu_to_multimedia OWNER TO darwin2;

--
-- TOC entry 705 (class 1259 OID 1442681)
-- Name: v_normalize_gtu_to_properties; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_gtu_to_properties AS
 SELECT DISTINCT min(gtu.id) AS normalized_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    array_agg(properties.id ORDER BY gtu.id) AS property_ids,
    properties.property_type,
    properties.applies_to,
    properties.applies_to_indexed,
    properties.date_from_mask,
    properties.date_from,
    properties.date_to_mask,
    properties.date_to,
    properties.is_quantitative,
    properties.property_unit,
    properties.method,
    properties.method_indexed,
    properties.lower_value,
    properties.lower_value_unified,
    properties.upper_value,
    properties.upper_value_unified,
    properties.property_accuracy
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
  WHERE (properties.id IS NOT NULL)
  GROUP BY gtu.code, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, properties.property_type, properties.applies_to, properties.applies_to_indexed, properties.date_from_mask, properties.date_from, properties.date_to_mask, properties.date_to, properties.is_quantitative, properties.property_unit, properties.method, properties.method_indexed, properties.lower_value, properties.lower_value_unified, properties.upper_value, properties.upper_value_unified, properties.property_accuracy;


ALTER TABLE public.v_normalize_gtu_to_properties OWNER TO darwin2;

--
-- TOC entry 706 (class 1259 OID 1442686)
-- Name: v_normalize_multimedia_to_gtu; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_multimedia_to_gtu AS
 SELECT min(gtu.id) AS min_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    multimedia.id AS multimedia_id,
    multimedia.is_digital,
    multimedia.type,
    multimedia.sub_type,
    multimedia.title,
    multimedia.description,
    multimedia.uri,
    multimedia.filename,
    multimedia.creation_date,
    multimedia.creation_date_mask,
    multimedia.mime_type,
    multimedia.visible,
    multimedia.publishable,
    multimedia.search_indexed,
    multimedia.extracted_info
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.multimedia ON (((gtu.id = multimedia.record_id) AND ((multimedia.referenced_relation)::text = 'gtu'::text))))
  GROUP BY gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, multimedia.id, multimedia.is_digital, multimedia.type, multimedia.sub_type, multimedia.title, multimedia.description, multimedia.uri, multimedia.filename, multimedia.creation_date, multimedia.creation_date_mask, multimedia.mime_type, multimedia.visible, multimedia.publishable, multimedia.search_indexed, multimedia.extracted_info;


ALTER TABLE public.v_normalize_multimedia_to_gtu OWNER TO darwin2;

--
-- TOC entry 707 (class 1259 OID 1442691)
-- Name: v_normalize_properties_to_gtu; Type: VIEW; Schema: public; Owner: darwin2
--

CREATE VIEW public.v_normalize_properties_to_gtu AS
 SELECT min(gtu.id) AS min_id,
    array_agg(gtu.id ORDER BY gtu.id) AS list_ids,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    properties.id AS property_id,
    properties.property_type,
    properties.applies_to,
    properties.applies_to_indexed,
    properties.date_from_mask,
    properties.date_from,
    properties.date_to_mask,
    properties.date_to,
    properties.is_quantitative,
    properties.property_unit,
    properties.method,
    properties.method_indexed,
    properties.lower_value,
    properties.lower_value_unified,
    properties.upper_value,
    properties.upper_value_unified,
    properties.property_accuracy
   FROM (darwin2_rbins_data.gtu
     LEFT JOIN darwin2_rbins_data.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
  GROUP BY gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, properties.id, properties.property_type, properties.applies_to, properties.applies_to_indexed, properties.date_from_mask, properties.date_from, properties.date_to_mask, properties.date_to, properties.is_quantitative, properties.property_unit, properties.method, properties.method_indexed, properties.lower_value, properties.lower_value_unified, properties.upper_value, properties.upper_value_unified, properties.property_accuracy;


ALTER TABLE public.v_normalize_properties_to_gtu OWNER TO darwin2;

--
-- TOC entry 708 (class 1259 OID 1442696)
-- Name: belgian_rivers_osm_20200402; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.belgian_rivers_osm_20200402 (
    gid integer NOT NULL,
    geom public.geometry(LineString,4326),
    id character varying,
    "@id" character varying,
    boat character varying,
    name character varying,
    "natural" character varying,
    waterway character varying,
    "CEMT" character varying,
    "name:ru" character varying,
    "name:fr" character varying,
    "name:nl" character varying,
    tidal character varying,
    intermittent character varying,
    layer character varying,
    created_by character varying,
    tunnel character varying,
    wikidata character varying,
    alt_name character varying,
    "name:language" character varying,
    history character varying,
    description character varying,
    "ref:VHAG" character varying,
    wikipedia character varying,
    width character varying,
    note character varying,
    source character varying,
    "name:wa" character varying,
    "name:lb" character varying,
    "name:lt" character varying,
    admin_level character varying,
    boundary character varying,
    "name:de" character varying,
    "name:en" character varying,
    "name:he" character varying,
    "name:hu" character varying,
    motorboat character varying,
    "wikipedia:de" character varying,
    "wikipedia:en" character varying,
    "wikipedia:nl" character varying,
    "name:be" character varying,
    "name:et" character varying,
    "name:hy" character varying,
    "name:zh" character varying,
    fixme character varying,
    canoe character varying,
    "name:af" character varying,
    "name:ar" character varying,
    "name:bg" character varying,
    "name:bn" character varying,
    "name:br" character varying,
    "name:ca" character varying,
    "name:cs" character varying,
    "name:cy" character varying,
    "name:da" character varying,
    "name:el" character varying,
    "name:eo" character varying,
    "name:es" character varying,
    "name:eu" character varying,
    "name:fa" character varying,
    "name:fi" character varying,
    "name:fy" character varying,
    "name:gl" character varying,
    "name:hr" character varying,
    "name:it" character varying,
    "name:ja" character varying,
    "name:ka" character varying,
    "name:ko" character varying,
    "name:la" character varying,
    "name:li" character varying,
    "name:lv" character varying,
    "name:mk" character varying,
    "name:nn" character varying,
    "name:no" character varying,
    "name:oc" character varying,
    "name:pl" character varying,
    "name:pt" character varying,
    "name:ro" character varying,
    "name:sh" character varying,
    "name:si" character varying,
    "name:sk" character varying,
    "name:sr" character varying,
    "name:sv" character varying,
    "name:ta" character varying,
    "name:th" character varying,
    "name:tl" character varying,
    "name:tr" character varying,
    "name:uk" character varying,
    "name:vi" character varying,
    lock character varying,
    "seamark:type" character varying,
    maxheight character varying,
    short_name character varying,
    ref character varying,
    "lock:name" character varying,
    "lock:VHF_channel" character varying,
    "lock:phone" character varying,
    lock_name character varying,
    lock_ref character varying,
    covered character varying,
    "lock:height" character varying,
    lock_namur character varying,
    access character varying,
    water character varying,
    ship character varying,
    old_name character varying,
    "ref:fgkz" character varying,
    level character varying,
    "source:geometry" character varying,
    "source:geometry:date" date,
    location character varying,
    "seamark:distance_mark:category" character varying,
    "seamark:distance_mark:distance" character varying,
    "seamark:distance_mark:units" character varying,
    leisure character varying,
    man_made character varying,
    ford character varying,
    tourism character varying,
    "river:waterway_distance" character varying,
    "seamark:bridge:category" character varying,
    "seamark:bridge:clearance_height" character varying,
    "seamark:bridge:clearance_width" character varying,
    "seamark:name" character varying,
    "OnroerendErfgoed:criteria" character varying,
    "addr:city" character varying,
    "addr:street" character varying,
    heritage character varying,
    "heritage:operator" character varying,
    "heritage:website" character varying,
    "ref:OnroerendErfgoed" character varying,
    "bridge:support" character varying,
    highway character varying,
    sloped_curb character varying,
    ft_symbol character varying,
    "waterway:sign" character varying,
    height character varying,
    image character varying,
    historic character varying,
    "artist:wikidata" character varying,
    artist_name character varying,
    artwork_type character varying,
    "source:geometry:entity" character varying,
    "source:geometry:oidn" character varying,
    "source:geometry:uidn" character varying,
    harbour character varying,
    phone character varying,
    port_of_entry character varying,
    "seamark:harbour:category" character varying,
    karst character varying,
    bicycle character varying,
    foot character varying,
    horse character varying,
    motor_vehicle character varying,
    seasonal character varying,
    railway character varying,
    leaf_cycle character varying,
    leaf_type character varying
);


ALTER TABLE wfs.belgian_rivers_osm_20200402 OWNER TO postgres;

--
-- TOC entry 709 (class 1259 OID 1442702)
-- Name: belgian_rivers_osm_20200402_name_cluster; Type: TABLE; Schema: wfs; Owner: darwin2
--

CREATE TABLE wfs.belgian_rivers_osm_20200402_name_cluster (
    gid integer,
    cluster integer[],
    name character varying,
    geom public.geometry
);


ALTER TABLE wfs.belgian_rivers_osm_20200402_name_cluster OWNER TO darwin2;

--
-- TOC entry 710 (class 1259 OID 1442708)
-- Name: continents_esri; Type: TABLE; Schema: wfs; Owner: darwin2
--

CREATE TABLE wfs.continents_esri (
    gid integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    objectid bigint,
    name character varying(13),
    sqmi double precision,
    sqkm double precision,
    shape_length double precision,
    shape_area double precision
);


ALTER TABLE wfs.continents_esri OWNER TO darwin2;

--
-- TOC entry 711 (class 1259 OID 1442714)
-- Name: continents; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.continents AS
 SELECT continents_esri.gid,
    continents_esri.geom,
    continents_esri.objectid,
    continents_esri.name,
    continents_esri.sqmi,
    continents_esri.sqkm,
    continents_esri.shape_length,
    continents_esri.shape_area
   FROM wfs.continents_esri;


ALTER TABLE wfs.continents OWNER TO darwin2;

--
-- TOC entry 712 (class 1259 OID 1442718)
-- Name: continents_esri_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: darwin2
--

CREATE SEQUENCE wfs.continents_esri_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.continents_esri_gid_seq OWNER TO darwin2;

--
-- TOC entry 9409 (class 0 OID 0)
-- Dependencies: 712
-- Name: continents_esri_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: darwin2
--

ALTER SEQUENCE wfs.continents_esri_gid_seq OWNED BY wfs.continents_esri.gid;


--
-- TOC entry 713 (class 1259 OID 1442720)
-- Name: eez_archipelagic_waters_v3; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.eez_archipelagic_waters_v3 (
    gid integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    mrgid numeric,
    name character varying(80),
    pol_type character varying(80),
    mrgid_ter1 numeric,
    territory1 character varying(80),
    mrgid_sov1 numeric,
    sovereign1 character varying(80),
    iso_ter1 character varying(80),
    x_1 numeric,
    y_1 numeric,
    mrgid_eez numeric,
    area_km2 numeric,
    iso_sov1 character varying(80),
    un_sov1 bigint,
    un_ter1 bigint
);


ALTER TABLE wfs.eez_archipelagic_waters_v3 OWNER TO postgres;

--
-- TOC entry 714 (class 1259 OID 1442726)
-- Name: eez_archipelagic_waters_v3_id_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.eez_archipelagic_waters_v3_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.eez_archipelagic_waters_v3_id_seq OWNER TO postgres;

--
-- TOC entry 9411 (class 0 OID 0)
-- Dependencies: 714
-- Name: eez_archipelagic_waters_v3_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.eez_archipelagic_waters_v3_id_seq OWNED BY wfs.eez_archipelagic_waters_v3.gid;


--
-- TOC entry 715 (class 1259 OID 1442728)
-- Name: eez_internal_waters_v3; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.eez_internal_waters_v3 (
    gid integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    fid bigint,
    mrgid bigint,
    name character varying(80),
    pol_type character varying(80),
    mrgid_ter1 bigint,
    territory1 character varying(80),
    mrgid_sov1 bigint,
    sovereign1 character varying(80),
    iso_ter1 character varying(80),
    x_1 double precision,
    y_1 double precision,
    mrgid_eez bigint,
    area_km2 bigint,
    iso_sov1 character varying(80),
    un_sov1 bigint,
    un_ter1 bigint
);


ALTER TABLE wfs.eez_internal_waters_v3 OWNER TO postgres;

--
-- TOC entry 716 (class 1259 OID 1442734)
-- Name: eez_internal_waters_v3_id_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.eez_internal_waters_v3_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.eez_internal_waters_v3_id_seq OWNER TO postgres;

--
-- TOC entry 9413 (class 0 OID 0)
-- Dependencies: 716
-- Name: eez_internal_waters_v3_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.eez_internal_waters_v3_id_seq OWNED BY wfs.eez_internal_waters_v3.gid;


--
-- TOC entry 717 (class 1259 OID 1442736)
-- Name: exclusive_economical_zone_v11; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.exclusive_economical_zone_v11 (
    gid integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    mrgid numeric,
    name character varying(80),
    mrgid_ter1 numeric,
    pol_type character varying(80),
    mrgid_sov1 numeric,
    territory1 character varying(80),
    iso_ter1 character varying(80),
    sovereign1 character varying(80),
    mrgid_ter2 numeric,
    mrgid_sov2 numeric,
    territory2 character varying(80),
    iso_ter2 character varying(80),
    sovereign2 character varying(80),
    mrgid_ter3 numeric,
    mrgid_sov3 numeric,
    territory3 character varying(80),
    iso_ter3 character varying(80),
    sovereign3 character varying(80),
    x_1 numeric,
    y_1 numeric,
    mrgid_eez numeric,
    area_km2 numeric,
    iso_sov1 character varying(80),
    iso_sov2 character varying(80),
    iso_sov3 character varying(80),
    un_sov1 bigint,
    un_sov2 bigint,
    un_sov3 bigint,
    un_ter1 bigint,
    un_ter2 bigint,
    un_ter3 bigint
);


ALTER TABLE wfs.exclusive_economical_zone_v11 OWNER TO postgres;

--
-- TOC entry 718 (class 1259 OID 1442742)
-- Name: exclusive_economical_zone_v11_id_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.exclusive_economical_zone_v11_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.exclusive_economical_zone_v11_id_seq OWNER TO postgres;

--
-- TOC entry 9415 (class 0 OID 0)
-- Dependencies: 718
-- Name: exclusive_economical_zone_v11_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.exclusive_economical_zone_v11_id_seq OWNED BY wfs.exclusive_economical_zone_v11.gid;


--
-- TOC entry 719 (class 1259 OID 1442744)
-- Name: high_seas_v1; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.high_seas_v1 (
    id integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    fid bigint,
    gid integer,
    name character varying(254),
    mrgid bigint,
    source character varying(254),
    area_km2 bigint
);


ALTER TABLE wfs.high_seas_v1 OWNER TO postgres;

--
-- TOC entry 720 (class 1259 OID 1442750)
-- Name: high_Seas_v1_id_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs."high_Seas_v1_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs."high_Seas_v1_id_seq" OWNER TO postgres;

--
-- TOC entry 9417 (class 0 OID 0)
-- Dependencies: 720
-- Name: high_Seas_v1_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs."high_Seas_v1_id_seq" OWNED BY wfs.high_seas_v1.id;


--
-- TOC entry 721 (class 1259 OID 1442752)
-- Name: mv_exclusive_economical_zone_v11_buffer_1000m; Type: MATERIALIZED VIEW; Schema: wfs; Owner: darwin2
--

CREATE MATERIALIZED VIEW wfs.mv_exclusive_economical_zone_v11_buffer_1000m AS
 SELECT exclusive_economical_zone_v11.gid,
    (public.st_buffer((exclusive_economical_zone_v11.geom)::public.geography, (1000)::double precision))::public.geometry AS geom,
    exclusive_economical_zone_v11.mrgid,
    exclusive_economical_zone_v11.name,
    exclusive_economical_zone_v11.mrgid_ter1,
    exclusive_economical_zone_v11.pol_type,
    exclusive_economical_zone_v11.mrgid_sov1,
    exclusive_economical_zone_v11.territory1,
    exclusive_economical_zone_v11.iso_ter1,
    exclusive_economical_zone_v11.sovereign1,
    exclusive_economical_zone_v11.mrgid_ter2,
    exclusive_economical_zone_v11.mrgid_sov2,
    exclusive_economical_zone_v11.territory2,
    exclusive_economical_zone_v11.iso_ter2,
    exclusive_economical_zone_v11.sovereign2,
    exclusive_economical_zone_v11.mrgid_ter3,
    exclusive_economical_zone_v11.mrgid_sov3,
    exclusive_economical_zone_v11.territory3,
    exclusive_economical_zone_v11.iso_ter3,
    exclusive_economical_zone_v11.sovereign3,
    exclusive_economical_zone_v11.x_1,
    exclusive_economical_zone_v11.y_1,
    exclusive_economical_zone_v11.mrgid_eez,
    exclusive_economical_zone_v11.area_km2,
    exclusive_economical_zone_v11.iso_sov1,
    exclusive_economical_zone_v11.iso_sov2,
    exclusive_economical_zone_v11.iso_sov3,
    exclusive_economical_zone_v11.un_sov1,
    exclusive_economical_zone_v11.un_sov2,
    exclusive_economical_zone_v11.un_sov3,
    exclusive_economical_zone_v11.un_ter1,
    exclusive_economical_zone_v11.un_ter2,
    exclusive_economical_zone_v11.un_ter3
   FROM wfs.exclusive_economical_zone_v11
  WHERE (exclusive_economical_zone_v11.gid = 185)
  WITH NO DATA;


ALTER TABLE wfs.mv_exclusive_economical_zone_v11_buffer_1000m OWNER TO darwin2;

--
-- TOC entry 722 (class 1259 OID 1442760)
-- Name: mv_exclusive_economical_zone_v11_buffer_5000m; Type: MATERIALIZED VIEW; Schema: wfs; Owner: darwin2
--

CREATE MATERIALIZED VIEW wfs.mv_exclusive_economical_zone_v11_buffer_5000m AS
 SELECT exclusive_economical_zone_v11.gid,
    (public.st_buffer((exclusive_economical_zone_v11.geom)::public.geography, (5000)::double precision))::public.geometry AS geom,
    exclusive_economical_zone_v11.mrgid,
    exclusive_economical_zone_v11.name,
    exclusive_economical_zone_v11.mrgid_ter1,
    exclusive_economical_zone_v11.pol_type,
    exclusive_economical_zone_v11.mrgid_sov1,
    exclusive_economical_zone_v11.territory1,
    exclusive_economical_zone_v11.iso_ter1,
    exclusive_economical_zone_v11.sovereign1,
    exclusive_economical_zone_v11.mrgid_ter2,
    exclusive_economical_zone_v11.mrgid_sov2,
    exclusive_economical_zone_v11.territory2,
    exclusive_economical_zone_v11.iso_ter2,
    exclusive_economical_zone_v11.sovereign2,
    exclusive_economical_zone_v11.mrgid_ter3,
    exclusive_economical_zone_v11.mrgid_sov3,
    exclusive_economical_zone_v11.territory3,
    exclusive_economical_zone_v11.iso_ter3,
    exclusive_economical_zone_v11.sovereign3,
    exclusive_economical_zone_v11.x_1,
    exclusive_economical_zone_v11.y_1,
    exclusive_economical_zone_v11.mrgid_eez,
    exclusive_economical_zone_v11.area_km2,
    exclusive_economical_zone_v11.iso_sov1,
    exclusive_economical_zone_v11.iso_sov2,
    exclusive_economical_zone_v11.iso_sov3,
    exclusive_economical_zone_v11.un_sov1,
    exclusive_economical_zone_v11.un_sov2,
    exclusive_economical_zone_v11.un_sov3,
    exclusive_economical_zone_v11.un_ter1,
    exclusive_economical_zone_v11.un_ter2,
    exclusive_economical_zone_v11.un_ter3
   FROM wfs.exclusive_economical_zone_v11
  WHERE (exclusive_economical_zone_v11.gid = 185)
  WITH NO DATA;


ALTER TABLE wfs.mv_exclusive_economical_zone_v11_buffer_5000m OWNER TO darwin2;

--
-- TOC entry 723 (class 1259 OID 1442768)
-- Name: ne_10m_admin_0_countries; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_admin_0_countries (
    gid integer NOT NULL,
    featurecla character varying(15),
    scalerank smallint,
    labelrank smallint,
    sovereignt character varying(32),
    sov_a3 character varying(3),
    adm0_dif smallint,
    level smallint,
    type character varying(17),
    admin character varying(36),
    adm0_a3 character varying(3),
    geou_dif smallint,
    geounit character varying(36),
    gu_a3 character varying(3),
    su_dif smallint,
    subunit character varying(36),
    su_a3 character varying(3),
    brk_diff smallint,
    name character varying(25),
    name_long character varying(36),
    brk_a3 character varying(3),
    brk_name character varying(32),
    brk_group character varying(17),
    abbrev character varying(13),
    postal character varying(4),
    formal_en character varying(52),
    formal_fr character varying(35),
    name_ciawf character varying(45),
    note_adm0 character varying(22),
    note_brk character varying(63),
    name_sort character varying(36),
    name_alt character varying(19),
    mapcolor7 smallint,
    mapcolor8 smallint,
    mapcolor9 smallint,
    mapcolor13 smallint,
    pop_est numeric(10,0),
    pop_rank smallint,
    gdp_md_est double precision,
    pop_year smallint,
    lastcensus smallint,
    gdp_year smallint,
    economy character varying(26),
    income_grp character varying(23),
    wikipedia smallint,
    fips_10_ character varying(3),
    iso_a2 character varying(3),
    iso_a3 character varying(3),
    iso_a3_eh character varying(3),
    iso_n3 character varying(3),
    un_a3 character varying(4),
    wb_a2 character varying(3),
    wb_a3 character varying(3),
    woe_id integer,
    woe_id_eh integer,
    woe_note character varying(167),
    adm0_a3_is character varying(3),
    adm0_a3_us character varying(3),
    adm0_a3_un smallint,
    adm0_a3_wb smallint,
    continent character varying(23),
    region_un character varying(23),
    subregion character varying(25),
    region_wb character varying(26),
    name_len smallint,
    long_len smallint,
    abbrev_len smallint,
    tiny smallint,
    homepart smallint,
    min_zoom double precision,
    min_label double precision,
    max_label double precision,
    ne_id numeric(10,0),
    wikidataid character varying(8),
    name_ar character varying(72),
    name_bn character varying(148),
    name_de character varying(46),
    name_en character varying(44),
    name_es character varying(44),
    name_fr character varying(54),
    name_el character varying(88),
    name_hi character varying(126),
    name_hu character varying(52),
    name_id character varying(46),
    name_it character varying(48),
    name_ja character varying(63),
    name_ko character varying(47),
    name_nl character varying(49),
    name_pl character varying(47),
    name_pt character varying(43),
    name_ru character varying(86),
    name_sv character varying(57),
    name_tr character varying(42),
    name_vi character varying(56),
    name_zh character varying(36),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_admin_0_countries OWNER TO postgres;

--
-- TOC entry 724 (class 1259 OID 1442774)
-- Name: ne_10m_admin_1_states_provinces; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_admin_1_states_provinces (
    gid integer NOT NULL,
    featurecla character varying(20),
    scalerank smallint,
    adm1_code character varying(9),
    diss_me integer,
    iso_3166_2 character varying(8),
    wikipedia character varying(84),
    iso_a2 character varying(2),
    adm0_sr smallint,
    name character varying(44),
    name_alt character varying(129),
    name_local character varying(66),
    type character varying(38),
    type_en character varying(27),
    code_local character varying(5),
    code_hasc character varying(8),
    note character varying(114),
    hasc_maybe character varying(13),
    region character varying(43),
    region_cod character varying(15),
    provnum_ne integer,
    gadm_level smallint,
    check_me smallint,
    datarank smallint,
    abbrev character varying(9),
    postal character varying(3),
    area_sqkm smallint,
    sameascity smallint,
    labelrank smallint,
    name_len smallint,
    mapcolor9 smallint,
    mapcolor13 smallint,
    fips character varying(5),
    fips_alt character varying(9),
    woe_id integer,
    woe_label character varying(64),
    woe_name character varying(44),
    latitude double precision,
    longitude double precision,
    sov_a3 character varying(3),
    adm0_a3 character varying(3),
    adm0_label smallint,
    admin character varying(36),
    geonunit character varying(40),
    gu_a3 character varying(3),
    gn_id integer,
    gn_name character varying(72),
    gns_id integer,
    gns_name character varying(80),
    gn_level smallint,
    gn_region character varying(1),
    gn_a1_code character varying(10),
    region_sub character varying(41),
    sub_code character varying(5),
    gns_level smallint,
    gns_lang character varying(3),
    gns_adm1 character varying(4),
    gns_region character varying(4),
    min_label double precision,
    max_label double precision,
    min_zoom double precision,
    wikidataid character varying(9),
    name_ar character varying(85),
    name_bn character varying(128),
    name_de character varying(51),
    name_en character varying(47),
    name_es character varying(52),
    name_fr character varying(52),
    name_el character varying(82),
    name_hi character varying(134),
    name_hu character varying(41),
    name_id character varying(45),
    name_it character varying(49),
    name_ja character varying(93),
    name_ko character varying(58),
    name_nl character varying(44),
    name_pl character varying(45),
    name_pt character varying(43),
    name_ru character varying(91),
    name_sv character varying(48),
    name_tr character varying(44),
    name_vi character varying(49),
    name_zh character varying(61),
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_admin_1_states_provinces OWNER TO postgres;

--
-- TOC entry 725 (class 1259 OID 1442780)
-- Name: ne_10m_geography_marine_polys; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_geography_marine_polys (
    gid integer NOT NULL,
    featurecla character varying(32),
    name character varying(254),
    namealt character varying(254),
    changed character varying(50),
    note character varying(50),
    name_fr character varying(200),
    min_label double precision,
    max_label double precision,
    scalerank smallint,
    label character varying(254),
    wikidataid character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_de character varying(254),
    name_en character varying(254),
    name_es character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    name_zh character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_geography_marine_polys OWNER TO postgres;

--
-- TOC entry 726 (class 1259 OID 1442786)
-- Name: ne_10m_geography_regions_polys; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_geography_regions_polys (
    gid integer NOT NULL,
    featurecla character varying(32),
    name character varying(254),
    namealt character varying(254),
    region character varying(50),
    subregion character varying(50),
    min_label double precision,
    max_label double precision,
    scalerank smallint,
    label character varying(254),
    wikidataid character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_de character varying(254),
    name_en character varying(254),
    name_es character varying(254),
    name_fr character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    name_zh character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_geography_regions_polys OWNER TO postgres;

--
-- TOC entry 727 (class 1259 OID 1442792)
-- Name: osm_20200505_boundary_administrative_belgium; Type: TABLE; Schema: wfs; Owner: darwin2
--

CREATE TABLE wfs.osm_20200505_boundary_administrative_belgium (
    gid integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    full_id character varying,
    osm_id character varying,
    osm_type character varying,
    admin_level character varying,
    boundary character varying,
    name character varying,
    name_fr character varying,
    name_ru character varying,
    population character varying,
    ref_ins character varying,
    type character varying,
    wikidata character varying,
    wikipedia character varying,
    "iso3166-1" character varying,
    "iso3166-1_alpha2" character varying,
    "iso3166-1_alpha3" character varying,
    "iso3166-1_numeric" character varying,
    tmc_cid_58_tabcd_1_class character varying,
    tmc_cid_58_tabcd_1_lclversion character varying,
    tmc_cid_58_tabcd_1_locationcode character varying,
    alt_name_ay character varying,
    alt_name_bar character varying,
    alt_name_ckb character varying,
    alt_name_eo character varying,
    alt_name_frp character varying,
    alt_name_fur character varying,
    alt_name_fy character varying,
    alt_name_kbd character varying,
    alt_name_ksh character varying,
    alt_name_ku character varying,
    alt_name_la character varying,
    alt_name_li character varying,
    alt_name_mzn character varying,
    alt_name_qu character varying,
    alt_name_rw character varying,
    alt_name_so character varying,
    alt_name_war character varying,
    currency character varying,
    flag character varying,
    int_name character varying,
    name_ace character varying,
    name_ady character varying,
    name_af character varying,
    name_ak character varying,
    name_als character varying,
    name_am character varying,
    name_an character varying,
    name_ang character varying,
    name_ar character varying,
    name_arc character varying,
    name_arz character varying,
    name_ast character varying,
    name_av character varying,
    name_ay character varying,
    name_az character varying,
    name_azb character varying,
    name_ba character varying,
    name_bar character varying,
    "name_bat-smg" character varying,
    name_bcl character varying,
    name_be character varying,
    "name_be-tarask" character varying,
    name_bg character varying,
    name_bh character varying,
    name_bi character varying,
    name_bm character varying,
    name_bn character varying,
    name_bo character varying,
    name_bpy character varying,
    name_br character varying,
    name_bs character varying,
    name_bug character varying,
    name_bxr character varying,
    name_ca character varying,
    "name_cbk-zam" character varying,
    name_cdo character varying,
    name_ce character varying,
    name_ceb character varying,
    name_chr character varying,
    name_ckb character varying,
    name_co character varying,
    name_crh character varying,
    name_cs character varying,
    name_csb character varying,
    name_cu character varying,
    name_cv character varying,
    name_cy character varying,
    name_da character varying,
    name_de character varying,
    name_diq character varying,
    name_dsb character varying,
    name_dty character varying,
    name_dv character varying,
    name_dz character varying,
    name_ee character varying,
    name_el character varying,
    name_eml character varying,
    name_en character varying,
    name_eo character varying,
    name_es character varying,
    name_et character varying,
    name_eu character varying,
    name_ext character varying,
    name_fa character varying,
    name_ff character varying,
    name_fi character varying,
    "name_fiu-vro" character varying,
    name_fo character varying,
    name_frp character varying,
    name_frr character varying,
    name_fur character varying,
    name_fy character varying,
    name_ga character varying,
    name_gag character varying,
    name_gd character varying,
    name_gl character varying,
    name_gn character varying,
    name_gom character varying,
    name_gu character varying,
    name_gv character varying,
    name_ha character varying,
    name_hak character varying,
    name_haw character varying,
    name_he character varying,
    name_hi character varying,
    name_hif character varying,
    name_hr character varying,
    name_hsb character varying,
    name_ht character varying,
    name_hu character varying,
    name_hy character varying,
    name_ia character varying,
    name_id character varying,
    name_ie character varying,
    name_ig character varying,
    name_ilo character varying,
    name_io character varying,
    name_is character varying,
    name_it character varying,
    name_ja character varying,
    name_jam character varying,
    name_jbo character varying,
    name_jv character varying,
    name_ka character varying,
    name_kaa character varying,
    name_kab character varying,
    name_kbd character varying,
    name_kbp character varying,
    name_kg character varying,
    name_ki character varying,
    name_kk character varying,
    name_kl character varying,
    name_km character varying,
    name_kn character varying,
    name_ko character varying,
    name_koi character varying,
    name_krc character varying,
    name_ks character varying,
    name_ksh character varying,
    name_ku character varying,
    name_kv character varying,
    name_kw character varying,
    name_ky character varying,
    name_la character varying,
    name_lad character varying,
    name_lb character varying,
    name_lez character varying,
    name_lg character varying,
    name_li character varying,
    name_lij character varying,
    name_lmo character varying,
    name_ln character varying,
    name_lo character varying,
    name_lrc character varying,
    name_lt character varying,
    name_ltg character varying,
    name_lv character varying,
    name_lzh character varying,
    name_mai character varying,
    name_mdf character varying,
    name_mg character varying,
    name_mhr character varying,
    name_mi character varying,
    name_mk character varying,
    name_ml character varying,
    name_mn character varying,
    name_mr character varying,
    name_ms character varying,
    name_mt character varying,
    name_mwl character varying,
    name_my character varying,
    name_myv character varying,
    name_mzn character varying,
    name_na character varying,
    name_nah character varying,
    name_nan character varying,
    name_nap character varying,
    name_nb character varying,
    name_nds character varying,
    "name_nds-nl" character varying,
    name_ne character varying,
    name_new character varying,
    name_nl character varying,
    name_nn character varying,
    name_no character varying,
    name_nov character varying,
    name_nrm character varying,
    name_nso character varying,
    name_oc character varying,
    name_olo character varying,
    name_om character varying,
    name_or character varying,
    name_os character varying,
    name_pa character varying,
    name_pag character varying,
    name_pam character varying,
    name_pap character varying,
    name_pcd character varying,
    name_pdc character varying,
    name_pfl character varying,
    name_pi character varying,
    name_pih character varying,
    name_pl character varying,
    name_pms character varying,
    name_pnb character varying,
    name_pnt character varying,
    name_ps character varying,
    name_pt character varying,
    name_qu character varying,
    name_rm character varying,
    name_rmy character varying,
    name_rn character varying,
    name_ro character varying,
    "name_roa-rup" character varying,
    "name_roa-tara" character varying,
    name_rue character varying,
    name_rw character varying,
    name_sa character varying,
    name_sah character varying,
    name_sc character varying,
    name_scn character varying,
    name_sco character varying,
    name_sd character varying,
    name_se character varying,
    name_sg character varying,
    name_sh character varying,
    name_si character varying,
    name_sk character varying,
    name_sl character varying,
    name_sm character varying,
    name_sn character varying,
    name_so character varying,
    name_sq character varying,
    name_sr character varying,
    name_srn character varying,
    name_ss character varying,
    name_stq character varying,
    name_su character varying,
    name_sv character varying,
    name_sw character varying,
    name_szl character varying,
    name_ta character varying,
    name_te character varying,
    name_tet character varying,
    name_tg character varying,
    name_th character varying,
    name_ti character varying,
    name_tk character varying,
    name_tl character varying,
    name_to character varying,
    name_tok character varying,
    name_tpi character varying,
    name_tr character varying,
    name_ts character varying,
    name_tt character varying,
    name_tum character varying,
    name_tw character varying,
    name_tzl character varying,
    name_udm character varying,
    name_ug character varying,
    name_uk character varying,
    name_ur character varying,
    name_uz character varying,
    name_vec character varying,
    name_vep character varying,
    name_vi character varying,
    name_vls character varying,
    name_vo character varying,
    name_wa character varying,
    name_war character varying,
    name_wo character varying,
    name_wuu character varying,
    name_xal character varying,
    name_xmf character varying,
    name_yi character varying,
    name_yo character varying,
    name_yue character varying,
    name_zea character varying,
    name_zh character varying,
    name_zh_pinyin character varying,
    name_zu character varying,
    official_name character varying,
    official_name_af character varying,
    official_name_als character varying,
    official_name_am character varying,
    official_name_an character varying,
    official_name_ang character varying,
    official_name_ar character varying,
    official_name_arc character varying,
    official_name_ast character varying,
    official_name_av character varying,
    official_name_ay character varying,
    official_name_az character varying,
    official_name_azb character varying,
    "iso3166-2" character varying,
    alt_name_ar character varying,
    alt_name_mk character varying,
    border_type character varying,
    official_name_nl character varying,
    population_date character varying,
    source_population character varying,
    website character varying,
    wikipedia_fr character varying,
    default_language character varying,
    nat_name character varying,
    nat_name_ar character varying,
    nat_name_be character varying,
    nat_name_bg character varying,
    nat_name_ca character varying,
    nat_name_de character varying,
    nat_name_el character varying,
    nat_name_en character varying,
    nat_name_eo character varying,
    nat_name_fr character varying,
    nat_name_lb character varying,
    nat_name_li character varying,
    nat_name_mk character varying,
    nat_name_nl character varying,
    nat_name_os character varying,
    nat_name_pl character varying,
    nat_name_ru character varying,
    nat_name_sk character varying,
    nat_name_tr character varying,
    nat_name_vls character varying,
    nat_name_wa character varying,
    source_name_br character varying,
    alt_name character varying,
    alt_name_de character varying,
    alt_name_fr character varying,
    alt_name_nl character varying,
    alt_name_pl character varying,
    wikipedia_de character varying,
    postal_code character varying,
    website_fr character varying,
    website_nl character varying,
    wikipedia_nl character varying,
    addr_postcode character varying,
    alt_name_ru character varying,
    old_ref_ins character varying,
    old_name character varying,
    loc_name character varying,
    nat_name_es character varying,
    alt_name_wa character varying,
    reg_name character varying,
    old_name_fr character varying,
    image character varying,
    old_name_nl character varying,
    border character varying,
    old_name_la character varying,
    source_ref character varying,
    place character varying,
    old_name_de character varying,
    url character varying,
    local_name character varying,
    wikimedia_commons character varying,
    name_kmr character varying,
    short_name character varying,
    addr_city character varying,
    "name_fr-lor" character varying,
    official_name_fr character varying,
    description character varying,
    ref character varying,
    description_nl character varying,
    source_note character varying,
    authoritative character varying,
    bag_bronwoonplaats character varying,
    start_date character varying,
    historic character varying
);


ALTER TABLE wfs.osm_20200505_boundary_administrative_belgium OWNER TO darwin2;

--
-- TOC entry 728 (class 1259 OID 1442798)
-- Name: wfs_translation; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.wfs_translation AS
 SELECT a.gid,
    a.source_table,
    a.wikidataid,
    a.name,
    a.translated_name,
    darwin2.fulltoindex(a.translated_name, true) AS translated_name_indexed,
    a.language
   FROM ( SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ar AS translated_name,
            'ar'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_bn AS translated_name,
            'bn'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_de AS translated_name,
            'de'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_en AS translated_name,
            'en'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_es AS translated_name,
            'es'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_fr AS translated_name,
            'fr'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_el AS translated_name,
            'el'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_hi AS translated_name,
            'hi'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_hu AS translated_name,
            'hu'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_id AS translated_name,
            'id'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_it AS translated_name,
            'it'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ja AS translated_name,
            'ja'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ko AS translated_name,
            'ko'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_nl AS translated_name,
            'nl'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_pl AS translated_name,
            'pl'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_pt AS translated_name,
            'pt'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ru AS translated_name,
            'ru'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_sv AS translated_name,
            'sv'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_tr AS translated_name,
            'tr'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_vi AS translated_name,
            'vi'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_zh AS translated_name,
            'zh'::text AS language
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ar AS translated_name,
            'ar'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_bn AS translated_name,
            'bn'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_de AS translated_name,
            'de'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_en AS translated_name,
            'en'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_es AS translated_name,
            'es'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_fr AS translated_name,
            'fr'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_el AS translated_name,
            'el'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_hi AS translated_name,
            'hi'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_hu AS translated_name,
            'hu'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_id AS translated_name,
            'id'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_it AS translated_name,
            'it'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ja AS translated_name,
            'ja'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ko AS translated_name,
            'ko'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_nl AS translated_name,
            'nl'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_pl AS translated_name,
            'pl'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_pt AS translated_name,
            'pt'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ru AS translated_name,
            'ru'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_sv AS translated_name,
            'sv'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_tr AS translated_name,
            'tr'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_vi AS translated_name,
            'vi'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_zh AS translated_name,
            'zh'::text AS language
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_ar AS translated_name,
            'ar'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_bn AS translated_name,
            'bn'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_de AS translated_name,
            'de'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_en AS translated_name,
            'en'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_es AS translated_name,
            'es'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_fr AS translated_name,
            'fr'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_el AS translated_name,
            'el'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_hi AS translated_name,
            'hi'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_hu AS translated_name,
            'hu'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_id AS translated_name,
            'id'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_it AS translated_name,
            'it'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_ja AS translated_name,
            'ja'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_ko AS translated_name,
            'ko'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_nl AS translated_name,
            'nl'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_pl AS translated_name,
            'pl'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_pt AS translated_name,
            'pt'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_ru AS translated_name,
            'ru'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_sv AS translated_name,
            'sv'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_tr AS translated_name,
            'tr'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_vi AS translated_name,
            'vi'::text AS language
           FROM wfs.ne_10m_geography_marine_polys
        UNION
         SELECT ne_10m_geography_marine_polys.gid,
            'ne_10m_geography_marine_polys'::text AS source_table,
            ne_10m_geography_marine_polys.wikidataid,
            ne_10m_geography_marine_polys.name,
            ne_10m_geography_marine_polys.name_zh AS translated_name,
            'zh'::text AS language
           FROM wfs.ne_10m_geography_marine_polys) a
  WHERE (btrim((COALESCE(a.translated_name))::text) <> ''::text)
UNION
 SELECT a.gid,
    a.source_table,
    a.wikidata AS wikidataid,
    a.name,
    a.translated_name,
    darwin2.fulltoindex(a.translated_name, true) AS translated_name_indexed,
    a.language
   FROM ( SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS source_table,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fr" AS translated_name,
            'gr'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:nl",
            'nl'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:wa" AS name_translated,
            'wa'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lb",
            'lb'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lt",
            'lt'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:de",
            'de'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:en",
            'en'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:he",
            'he'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hu",
            'hu'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:be",
            'be'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:et",
            'et'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hy",
            'hy'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:zh",
            'zh'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:af",
            'af'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ar",
            'ar'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:bg",
            'bg'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:bn",
            'bn'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:br",
            'br'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ca",
            'ca'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:cs",
            'cs'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:cy",
            'cy'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:da",
            'da'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:el",
            'el'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:eo",
            'eo'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:es",
            'es'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:eu",
            'eu'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fa",
            'fa'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fi",
            'fi'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fy",
            'fy'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:gl",
            'gl'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hr",
            'hr'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:it",
            'it'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ja",
            'ja'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ka",
            'ka'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ko",
            'ko'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:la",
            'la'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:li",
            'li'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lv",
            'lv'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:mk",
            'mk'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:nn",
            'nn'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:no",
            'no'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:oc",
            'oc'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:pl",
            'pl'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:pt",
            'pt'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ro",
            'ro'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sh",
            'sh'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:si",
            'si'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sk",
            'sk'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sr",
            'sr'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sv",
            'sv'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ta",
            'ta'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:th",
            'th'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:tl",
            'tl'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:tr",
            'tr'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:uk",
            'uk'::text AS language
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:vi",
            'vi'::text AS language
           FROM wfs.belgian_rivers_osm_20200402) a
  WHERE (btrim((COALESCE(a.translated_name, ''::character varying))::text) <> ''::text)
UNION
 SELECT c.gid,
    c.source_table,
    c.wikidata AS wikidataid,
    c.name,
    c.translated_name,
    darwin2.fulltoindex(c.translated_name, true) AS translated_name_indexed,
    c.language
   FROM ( SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS source_table,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fr AS translated_name,
            'fr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ru,
            'ru'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_af,
            'af'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ak,
            'ak'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_als,
            'als'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_am,
            'am'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_an,
            'an'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ang,
            'ang'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ar,
            'ar'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_arc,
            'arc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_arz,
            'arz'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ast,
            'ast'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_av,
            'av'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ay,
            'ay'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_az,
            'az'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_azb,
            'azb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ba,
            'ba'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bar,
            'bar'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_bat-smg",
            'bat-smg"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bcl,
            'bcl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_be,
            'be'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_be-tarask",
            'be-tarask"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bg,
            'bg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bh,
            'bh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bi,
            'bi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bm,
            'bm'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bn,
            'bn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bo,
            'bo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bpy,
            'bpy'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_br,
            'br'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bs,
            'bs'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bug,
            'bug'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bxr,
            'bxr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ca,
            'ca'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_cbk-zam",
            'cbk-zam"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cdo,
            'cdo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ce,
            'ce'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ceb,
            'ceb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_chr,
            'chr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ckb,
            'ckb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_co,
            'co'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_crh,
            'crh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cs,
            'cs'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_csb,
            'csb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cu,
            'cu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cv,
            'cv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cy,
            'cy'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_da,
            'da'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_de,
            'de'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_diq,
            'diq'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dsb,
            'dsb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dty,
            'dty'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dv,
            'dv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dz,
            'dz'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ee,
            'ee'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_el,
            'el'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eml,
            'eml'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_en,
            'en'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eo,
            'eo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_es,
            'es'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_et,
            'et'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eu,
            'eu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ext,
            'ext'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fa,
            'fa'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ff,
            'ff'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fi,
            'fi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_fiu-vro",
            'fiu-vro"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fo,
            'fo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_frp,
            'frp'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_frr,
            'frr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fur,
            'fur'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fy,
            'fy'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ga,
            'ga'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gag,
            'gag'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gd,
            'gd'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gl,
            'gl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gn,
            'gn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gom,
            'gom'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gu,
            'gu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gv,
            'gv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ha,
            'ha'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hak,
            'hak'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_haw,
            'haw'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_he,
            'he'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hi,
            'hi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hif,
            'hif'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hr,
            'hr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hsb,
            'hsb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ht,
            'ht'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hu,
            'hu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hy,
            'hy'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ia,
            'ia'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_id,
            'id'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ie,
            'ie'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ig,
            'ig'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ilo,
            'ilo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_io,
            'io'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_is,
            'is'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_it,
            'it'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ja,
            'ja'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jam,
            'jam'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jbo,
            'jbo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jv,
            'jv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ka,
            'ka'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kaa,
            'kaa'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kab,
            'kab'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kbd,
            'kbd'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kbp,
            'kbp'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kg,
            'kg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ki,
            'ki'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kk,
            'kk'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kl,
            'kl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_km,
            'km'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kn,
            'kn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ko,
            'ko'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_koi,
            'koi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_krc,
            'krc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ks,
            'ks'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ksh,
            'ksh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ku,
            'ku'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kv,
            'kv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kw,
            'kw'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ky,
            'ky'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_la,
            'la'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lad,
            'lad'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lb,
            'lb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lez,
            'lez'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lg,
            'lg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_li,
            'li'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lij,
            'lij'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lmo,
            'lmo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ln,
            'ln'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lo,
            'lo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lrc,
            'lrc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lt,
            'lt'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ltg,
            'ltg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lv,
            'lv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lzh,
            'lzh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mai,
            'mai'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mdf,
            'mdf'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mg,
            'mg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mhr,
            'mhr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mi,
            'mi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mk,
            'mk'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ml,
            'ml'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mn,
            'mn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mr,
            'mr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ms,
            'ms'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mt,
            'mt'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mwl,
            'mwl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_my,
            'my'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_myv,
            'myv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mzn,
            'mzn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_na,
            'na'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nah,
            'nah'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nan,
            'nan'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nap,
            'nap'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nb,
            'nb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nds,
            'nds'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_nds-nl",
            'nds-nl"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ne,
            'ne'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_new,
            'new'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nl,
            'nl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nn,
            'nn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_no,
            'no'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nov,
            'nov'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nrm,
            'nrm'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nso,
            'nso'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_oc,
            'oc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_olo,
            'olo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_om,
            'om'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_or,
            'or'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_os,
            'os'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pa,
            'pa'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pag,
            'pag'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pam,
            'pam'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pap,
            'pap'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pcd,
            'pcd'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pdc,
            'pdc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pfl,
            'pfl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pi,
            'pi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pih,
            'pih'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pl,
            'pl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pms,
            'pms'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pnb,
            'pnb'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pnt,
            'pnt'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ps,
            'ps'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pt,
            'pt'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_qu,
            'qu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rm,
            'rm'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rmy,
            'rmy'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rn,
            'rn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ro,
            'ro'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_roa-rup",
            'roa-rup"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_roa-tara",
            'roa-tara"'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rue,
            'rue'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rw,
            'rw'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sa,
            'sa'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sah,
            'sah'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sc,
            'sc'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_scn,
            'scn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sco,
            'sco'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sd,
            'sd'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_se,
            'se'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sg,
            'sg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sh,
            'sh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_si,
            'si'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sk,
            'sk'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sl,
            'sl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sm,
            'sm'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sn,
            'sn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_so,
            'so'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sq,
            'sq'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sr,
            'sr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_srn,
            'srn'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ss,
            'ss'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_stq,
            'stq'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_su,
            'su'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sv,
            'sv'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sw,
            'sw'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_szl,
            'szl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ta,
            'ta'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_te,
            'te'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tet,
            'tet'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tg,
            'tg'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_th,
            'th'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ti,
            'ti'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tk,
            'tk'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tl,
            'tl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_to,
            'to'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tok,
            'tok'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tpi,
            'tpi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tr,
            'tr'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ts,
            'ts'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tt,
            'tt'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tum,
            'tum'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tw,
            'tw'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tzl,
            'tzl'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_udm,
            'udm'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ug,
            'ug'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_uk,
            'uk'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ur,
            'ur'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_uz,
            'uz'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vec,
            'vec'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vep,
            'vep'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vi,
            'vi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vls,
            'vls'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vo,
            'vo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wa,
            'wa'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_war,
            'war'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wo,
            'wo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wuu,
            'wuu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_xal,
            'xal'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_xmf,
            'xmf'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yi,
            'yi'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yo,
            'yo'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yue,
            'yue'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zea,
            'zea'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zh,
            'zh'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
            'zh_pinyin'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zu,
            'zu'::text AS language
           FROM wfs.osm_20200505_boundary_administrative_belgium) c
  WHERE (btrim((COALESCE(c.translated_name, ''::character varying))::text) <> ''::text)
UNION
 SELECT d.gid,
    d.source_table,
    d.wikidataid,
    d.name,
    d.translated_name,
    darwin2.fulltoindex(d.translated_name, true) AS translated_name_indexed,
    d.language
   FROM ( SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ar AS translated_name,
            'ar'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_bn,
            'bn'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_de,
            'de'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_en,
            'en'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_es,
            'es'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_fr,
            'fr'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_el,
            'el'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_hi,
            'hi'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_hu,
            'hu'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_id,
            'id'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_it,
            'it'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ja,
            'ja'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ko,
            'ko'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_nl,
            'nl'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_pl,
            'pl'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_pt,
            'pt'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ru,
            'ru'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_sv,
            'sv'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_tr,
            'tr'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_vi,
            'vi'::text AS language
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_zh,
            'zu'::text AS language
           FROM wfs.ne_10m_admin_0_countries) d
  WHERE (btrim((COALESCE(d.translated_name))::text, ''::text) <> ''::text);


ALTER TABLE wfs.wfs_translation OWNER TO darwin2;

--
-- TOC entry 729 (class 1259 OID 1442803)
-- Name: mv_wfs_translation; Type: MATERIALIZED VIEW; Schema: wfs; Owner: darwin2
--

CREATE MATERIALIZED VIEW wfs.mv_wfs_translation AS
 SELECT wfs_translation.gid,
    wfs_translation.source_table,
    wfs_translation.wikidataid,
    wfs_translation.name,
    wfs_translation.translated_name,
    wfs_translation.translated_name_indexed,
    wfs_translation.language
   FROM wfs.wfs_translation
  WITH NO DATA;


ALTER TABLE wfs.mv_wfs_translation OWNER TO darwin2;

--
-- TOC entry 730 (class 1259 OID 1442810)
-- Name: ne_10m_admin_0_countries_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_admin_0_countries_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_admin_0_countries_gid_seq OWNER TO postgres;

--
-- TOC entry 9422 (class 0 OID 0)
-- Dependencies: 730
-- Name: ne_10m_admin_0_countries_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_admin_0_countries_gid_seq OWNED BY wfs.ne_10m_admin_0_countries.gid;


--
-- TOC entry 731 (class 1259 OID 1442812)
-- Name: ne_10m_admin_0_countries_lakes; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_admin_0_countries_lakes (
    gid integer NOT NULL,
    featurecla character varying(15),
    scalerank smallint,
    labelrank smallint,
    sovereignt character varying(32),
    sov_a3 character varying(3),
    adm0_dif smallint,
    level smallint,
    type character varying(17),
    admin character varying(36),
    adm0_a3 character varying(3),
    geou_dif smallint,
    geounit character varying(36),
    gu_a3 character varying(3),
    su_dif smallint,
    subunit character varying(36),
    su_a3 character varying(3),
    brk_diff smallint,
    name character varying(25),
    name_long character varying(36),
    brk_a3 character varying(3),
    brk_name character varying(32),
    brk_group character varying(17),
    abbrev character varying(13),
    postal character varying(4),
    formal_en character varying(52),
    formal_fr character varying(35),
    name_ciawf character varying(45),
    note_adm0 character varying(22),
    note_brk character varying(63),
    name_sort character varying(36),
    name_alt character varying(19),
    mapcolor7 smallint,
    mapcolor8 smallint,
    mapcolor9 smallint,
    mapcolor13 smallint,
    pop_est numeric(10,0),
    pop_rank smallint,
    gdp_md_est double precision,
    pop_year smallint,
    lastcensus smallint,
    gdp_year smallint,
    economy character varying(26),
    income_grp character varying(23),
    wikipedia smallint,
    fips_10_ character varying(3),
    iso_a2 character varying(3),
    iso_a3 character varying(3),
    iso_a3_eh character varying(3),
    iso_n3 character varying(3),
    un_a3 character varying(4),
    wb_a2 character varying(3),
    wb_a3 character varying(3),
    woe_id integer,
    woe_id_eh integer,
    woe_note character varying(167),
    adm0_a3_is character varying(3),
    adm0_a3_us character varying(3),
    adm0_a3_un smallint,
    adm0_a3_wb smallint,
    continent character varying(23),
    region_un character varying(23),
    subregion character varying(25),
    region_wb character varying(26),
    name_len smallint,
    long_len smallint,
    abbrev_len smallint,
    tiny smallint,
    homepart smallint,
    min_zoom double precision,
    min_label double precision,
    max_label double precision,
    ne_id numeric(10,0),
    wikidataid character varying(8),
    name_ar character varying(72),
    name_bn character varying(148),
    name_de character varying(46),
    name_en character varying(44),
    name_es character varying(44),
    name_fr character varying(54),
    name_el character varying(88),
    name_hi character varying(126),
    name_hu character varying(52),
    name_id character varying(46),
    name_it character varying(48),
    name_ja character varying(63),
    name_ko character varying(47),
    name_nl character varying(49),
    name_pl character varying(47),
    name_pt character varying(43),
    name_ru character varying(86),
    name_sv character varying(57),
    name_tr character varying(42),
    name_vi character varying(56),
    name_zh character varying(36),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_admin_0_countries_lakes OWNER TO postgres;

--
-- TOC entry 732 (class 1259 OID 1442818)
-- Name: ne_10m_admin_0_countries_lakes_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_admin_0_countries_lakes_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_admin_0_countries_lakes_gid_seq OWNER TO postgres;

--
-- TOC entry 9424 (class 0 OID 0)
-- Dependencies: 732
-- Name: ne_10m_admin_0_countries_lakes_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_admin_0_countries_lakes_gid_seq OWNED BY wfs.ne_10m_admin_0_countries_lakes.gid;


--
-- TOC entry 733 (class 1259 OID 1442820)
-- Name: ne_10m_admin_1_states_provinces_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_admin_1_states_provinces_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_admin_1_states_provinces_gid_seq OWNER TO postgres;

--
-- TOC entry 9425 (class 0 OID 0)
-- Dependencies: 733
-- Name: ne_10m_admin_1_states_provinces_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_admin_1_states_provinces_gid_seq OWNED BY wfs.ne_10m_admin_1_states_provinces.gid;


--
-- TOC entry 734 (class 1259 OID 1442822)
-- Name: ne_10m_admin_1_states_provinces_lakes; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_admin_1_states_provinces_lakes (
    gid integer NOT NULL,
    featurecla character varying(20),
    scalerank smallint,
    adm1_code character varying(9),
    diss_me integer,
    iso_3166_2 character varying(8),
    wikipedia character varying(84),
    iso_a2 character varying(2),
    adm0_sr smallint,
    name character varying(44),
    name_alt character varying(129),
    name_local character varying(66),
    type character varying(38),
    type_en character varying(27),
    code_local character varying(5),
    code_hasc character varying(8),
    note character varying(114),
    hasc_maybe character varying(13),
    region character varying(43),
    region_cod character varying(15),
    provnum_ne integer,
    gadm_level smallint,
    check_me smallint,
    datarank smallint,
    abbrev character varying(9),
    postal character varying(3),
    area_sqkm smallint,
    sameascity smallint,
    labelrank smallint,
    name_len smallint,
    mapcolor9 smallint,
    mapcolor13 smallint,
    fips character varying(5),
    fips_alt character varying(9),
    woe_id integer,
    woe_label character varying(64),
    woe_name character varying(44),
    latitude double precision,
    longitude double precision,
    sov_a3 character varying(3),
    adm0_a3 character varying(3),
    adm0_label smallint,
    admin character varying(36),
    geonunit character varying(40),
    gu_a3 character varying(3),
    gn_id integer,
    gn_name character varying(72),
    gns_id integer,
    gns_name character varying(80),
    gn_level smallint,
    gn_region character varying(1),
    gn_a1_code character varying(10),
    region_sub character varying(41),
    sub_code character varying(5),
    gns_level smallint,
    gns_lang character varying(3),
    gns_adm1 character varying(4),
    gns_region character varying(4),
    min_label double precision,
    max_label double precision,
    min_zoom double precision,
    wikidataid character varying(9),
    name_ar character varying(85),
    name_bn character varying(128),
    name_de character varying(51),
    name_en character varying(47),
    name_es character varying(52),
    name_fr character varying(52),
    name_el character varying(82),
    name_hi character varying(134),
    name_hu character varying(41),
    name_id character varying(45),
    name_it character varying(49),
    name_ja character varying(93),
    name_ko character varying(58),
    name_nl character varying(44),
    name_pl character varying(45),
    name_pt character varying(43),
    name_ru character varying(91),
    name_sv character varying(48),
    name_tr character varying(44),
    name_vi character varying(49),
    name_zh character varying(61),
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_admin_1_states_provinces_lakes OWNER TO postgres;

--
-- TOC entry 735 (class 1259 OID 1442828)
-- Name: ne_10m_admin_1_states_provinces_lakes_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_admin_1_states_provinces_lakes_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_admin_1_states_provinces_lakes_gid_seq OWNER TO postgres;

--
-- TOC entry 9427 (class 0 OID 0)
-- Dependencies: 735
-- Name: ne_10m_admin_1_states_provinces_lakes_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_admin_1_states_provinces_lakes_gid_seq OWNED BY wfs.ne_10m_admin_1_states_provinces_lakes.gid;


--
-- TOC entry 736 (class 1259 OID 1442830)
-- Name: ne_10m_geography_marine_polys_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_geography_marine_polys_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_geography_marine_polys_gid_seq OWNER TO postgres;

--
-- TOC entry 9428 (class 0 OID 0)
-- Dependencies: 736
-- Name: ne_10m_geography_marine_polys_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_geography_marine_polys_gid_seq OWNED BY wfs.ne_10m_geography_marine_polys.gid;


--
-- TOC entry 737 (class 1259 OID 1442832)
-- Name: ne_10m_geography_regions_polys_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_geography_regions_polys_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_geography_regions_polys_gid_seq OWNER TO postgres;

--
-- TOC entry 9429 (class 0 OID 0)
-- Dependencies: 737
-- Name: ne_10m_geography_regions_polys_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_geography_regions_polys_gid_seq OWNED BY wfs.ne_10m_geography_regions_polys.gid;


--
-- TOC entry 738 (class 1259 OID 1442834)
-- Name: ne_10m_lakes; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_lakes (
    gid integer NOT NULL,
    featurecla character varying(32),
    scalerank numeric(10,0),
    name character varying(254),
    name_abb character varying(25),
    name_alt character varying(254),
    note character varying(100),
    delta character varying(100),
    dam_name character varying(254),
    year integer,
    admin character varying(50),
    min_zoom double precision,
    min_label double precision,
    label character varying(254),
    wikidataid character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_de character varying(254),
    name_en character varying(254),
    name_es character varying(254),
    name_fr character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    name_zh character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_lakes OWNER TO postgres;

--
-- TOC entry 739 (class 1259 OID 1442840)
-- Name: ne_10m_lakes_europes; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_lakes_europes (
    gid integer NOT NULL,
    id numeric,
    name character varying(100),
    lge_id character varying(2),
    pfafstette numeric,
    lke_type character varying(1),
    altitude numeric(10,0),
    objectid numeric(10,0),
    scalerank numeric(10,0),
    featurecla character varying(30),
    note character varying(50),
    funkyname smallint,
    min_zoom double precision,
    min_label double precision,
    label character varying(254),
    wikidataid character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_de character varying(254),
    name_en character varying(254),
    name_es character varying(254),
    name_fr character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    name_zh character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_lakes_europes OWNER TO postgres;

--
-- TOC entry 740 (class 1259 OID 1442846)
-- Name: ne_10m_lakes_europes_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_lakes_europes_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_lakes_europes_gid_seq OWNER TO postgres;

--
-- TOC entry 9432 (class 0 OID 0)
-- Dependencies: 740
-- Name: ne_10m_lakes_europes_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_lakes_europes_gid_seq OWNED BY wfs.ne_10m_lakes_europes.gid;


--
-- TOC entry 741 (class 1259 OID 1442848)
-- Name: ne_10m_lakes_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_lakes_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_lakes_gid_seq OWNER TO postgres;

--
-- TOC entry 9433 (class 0 OID 0)
-- Dependencies: 741
-- Name: ne_10m_lakes_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_lakes_gid_seq OWNED BY wfs.ne_10m_lakes.gid;


--
-- TOC entry 742 (class 1259 OID 1442850)
-- Name: ne_10m_lakes_north_america; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_lakes_north_america (
    gid integer NOT NULL,
    uident numeric,
    featurecla character varying(50),
    name character varying(100),
    name_alt character varying(100),
    note character varying(100),
    scalerank numeric(10,0),
    min_zoom double precision,
    min_label double precision,
    label character varying(254),
    wikidataid character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_de character varying(254),
    name_en character varying(254),
    name_es character varying(254),
    name_fr character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    name_zh character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_lakes_north_america OWNER TO postgres;

--
-- TOC entry 743 (class 1259 OID 1442856)
-- Name: ne_10m_lakes_north_america_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_lakes_north_america_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_lakes_north_america_gid_seq OWNER TO postgres;

--
-- TOC entry 9435 (class 0 OID 0)
-- Dependencies: 743
-- Name: ne_10m_lakes_north_america_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_lakes_north_america_gid_seq OWNED BY wfs.ne_10m_lakes_north_america.gid;


--
-- TOC entry 744 (class 1259 OID 1442858)
-- Name: ne_10m_populated_places; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_populated_places (
    gid integer NOT NULL,
    scalerank smallint,
    natscale smallint,
    labelrank smallint,
    featurecla character varying(50),
    name character varying(100),
    namepar character varying(254),
    namealt character varying(254),
    diffascii smallint,
    nameascii character varying(100),
    adm0cap numeric,
    capin character varying(15),
    worldcity numeric,
    megacity smallint,
    sov0name character varying(100),
    sov_a3 character varying(3),
    adm0name character varying(50),
    adm0_a3 character varying(3),
    adm1name character varying(50),
    iso_a2 character varying(5),
    note character varying(254),
    latitude numeric,
    longitude numeric,
    changed numeric,
    namediff smallint,
    diffnote character varying(254),
    pop_max integer,
    pop_min integer,
    pop_other integer,
    rank_max integer,
    rank_min integer,
    geonameid numeric,
    meganame character varying(50),
    ls_name character varying(41),
    ls_match smallint,
    checkme smallint,
    max_pop10 numeric,
    max_pop20 numeric,
    max_pop50 numeric,
    max_pop300 numeric,
    max_pop310 numeric,
    max_natsca numeric,
    min_areakm numeric,
    max_areakm numeric,
    min_areami numeric,
    max_areami numeric,
    min_perkm numeric,
    max_perkm numeric,
    min_permi numeric,
    max_permi numeric,
    min_bbxmin numeric,
    max_bbxmin numeric,
    min_bbxmax numeric,
    max_bbxmax numeric,
    min_bbymin numeric,
    max_bbymin numeric,
    min_bbymax numeric,
    max_bbymax numeric,
    mean_bbxc numeric,
    mean_bbyc numeric,
    compare smallint,
    gn_ascii character varying(254),
    feature_cl character varying(254),
    feature_co character varying(254),
    admin1_cod numeric,
    gn_pop numeric,
    elevation numeric,
    gtopo30 numeric,
    timezone character varying(254),
    geonamesno character varying(100),
    un_fid integer,
    un_adm0 character varying(254),
    un_lat numeric,
    un_long numeric,
    pop1950 numeric,
    pop1955 numeric,
    pop1960 numeric,
    pop1965 numeric,
    pop1970 numeric,
    pop1975 numeric,
    pop1980 numeric,
    pop1985 numeric,
    pop1990 numeric,
    pop1995 numeric,
    pop2000 numeric,
    pop2005 numeric,
    pop2010 numeric,
    pop2015 numeric,
    pop2020 numeric,
    pop2025 numeric,
    pop2050 numeric,
    cityalt character varying(50),
    min_zoom double precision,
    wikidataid character varying(30),
    wof_id double precision,
    capalt smallint,
    name_en character varying(254),
    name_de character varying(254),
    name_es character varying(254),
    name_fr character varying(254),
    name_pt character varying(254),
    name_ru character varying(254),
    name_zh character varying(254),
    label character varying(254),
    name_ar character varying(254),
    name_bn character varying(254),
    name_el character varying(254),
    name_hi character varying(254),
    name_hu character varying(254),
    name_id character varying(254),
    name_it character varying(254),
    name_ja character varying(254),
    name_ko character varying(254),
    name_nl character varying(254),
    name_pl character varying(254),
    name_sv character varying(254),
    name_tr character varying(254),
    name_vi character varying(254),
    wdid_score smallint,
    ne_id numeric(10,0),
    geom public.geometry(Point,4326)
);


ALTER TABLE wfs.ne_10m_populated_places OWNER TO postgres;

--
-- TOC entry 745 (class 1259 OID 1442864)
-- Name: ne_10m_populated_places_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_populated_places_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_populated_places_gid_seq OWNER TO postgres;

--
-- TOC entry 9437 (class 0 OID 0)
-- Dependencies: 745
-- Name: ne_10m_populated_places_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_populated_places_gid_seq OWNED BY wfs.ne_10m_populated_places.gid;


--
-- TOC entry 746 (class 1259 OID 1442866)
-- Name: ne_10m_reefs; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_reefs (
    gid integer NOT NULL,
    scalerank numeric(10,0),
    featurecla character varying(32),
    min_zoom double precision,
    geom public.geometry(MultiLineString,4326)
);


ALTER TABLE wfs.ne_10m_reefs OWNER TO postgres;

--
-- TOC entry 747 (class 1259 OID 1442872)
-- Name: ne_10m_reefs_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_reefs_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_reefs_gid_seq OWNER TO postgres;

--
-- TOC entry 9439 (class 0 OID 0)
-- Dependencies: 747
-- Name: ne_10m_reefs_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_reefs_gid_seq OWNED BY wfs.ne_10m_reefs.gid;


--
-- TOC entry 748 (class 1259 OID 1442874)
-- Name: ne_10m_urban_areas_landscan; Type: TABLE; Schema: wfs; Owner: postgres
--

CREATE TABLE wfs.ne_10m_urban_areas_landscan (
    gid integer NOT NULL,
    name character varying(41),
    max_pop_al numeric,
    max_pop_20 numeric,
    max_pop_50 numeric,
    max_pop_30 numeric,
    max_pop_31 numeric,
    max_natsca numeric,
    min_areakm numeric,
    max_areakm numeric,
    min_areami numeric,
    max_areami numeric,
    min_perkm numeric,
    max_perkm numeric,
    min_permi numeric,
    max_permi numeric,
    min_bb_xmi numeric,
    max_bb_xmi numeric,
    min_bb_xma numeric,
    max_bb_xma numeric,
    min_bb_ymi numeric,
    max_bb_ymi numeric,
    min_bb_yma numeric,
    max_bb_yma numeric,
    mean_bb_xc numeric,
    mean_bb_yc numeric,
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE wfs.ne_10m_urban_areas_landscan OWNER TO postgres;

--
-- TOC entry 749 (class 1259 OID 1442880)
-- Name: ne_10m_urban_areas_landscan_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs.ne_10m_urban_areas_landscan_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.ne_10m_urban_areas_landscan_gid_seq OWNER TO postgres;

--
-- TOC entry 9441 (class 0 OID 0)
-- Dependencies: 749
-- Name: ne_10m_urban_areas_landscan_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs.ne_10m_urban_areas_landscan_gid_seq OWNED BY wfs.ne_10m_urban_areas_landscan.gid;


--
-- TOC entry 750 (class 1259 OID 1442882)
-- Name: nominatim_osm_darwin_rivers; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.nominatim_osm_darwin_rivers AS
 SELECT tv_nominatim_georeference_rivers.pk,
    tv_nominatim_georeference_rivers.gtu_refs,
    tv_nominatim_georeference_rivers.group_name,
    tv_nominatim_georeference_rivers.sub_group_name,
    tv_nominatim_georeference_rivers.name,
    tv_nominatim_georeference_rivers.count_specimens,
    tv_nominatim_georeference_rivers.country,
    tv_nominatim_georeference_rivers.country_iso,
    tv_nominatim_georeference_rivers.geoname_type,
    tv_nominatim_georeference_rivers.nominatim_result,
    tv_nominatim_georeference_rivers.osm_result,
    tv_nominatim_georeference_rivers.osm_id,
    tv_nominatim_georeference_rivers.name_in_nominatim,
    tv_nominatim_georeference_rivers.name_in_overpass,
    tv_nominatim_georeference_rivers.osm_category,
    tv_nominatim_georeference_rivers.osm_type,
    tv_nominatim_georeference_rivers.longitude,
    tv_nominatim_georeference_rivers.latitude,
    tv_nominatim_georeference_rivers.geom,
    tv_nominatim_georeference_rivers.geom_type,
    tv_nominatim_georeference_rivers.wikidata_id,
    tv_nominatim_georeference_rivers.date_query,
    tv_nominatim_georeference_rivers.url_nominatim,
    tv_nominatim_georeference_rivers.url_osm_overpass,
    tv_nominatim_georeference_rivers.pk_serial
   FROM georeferencing.tv_nominatim_georeference_rivers
  WHERE (tv_nominatim_georeference_rivers.geom IS NOT NULL);


ALTER TABLE wfs.nominatim_osm_darwin_rivers OWNER TO darwin2;

--
-- TOC entry 751 (class 1259 OID 1442887)
-- Name: osm_20200505_boundary_administrative_belgium_id_seq; Type: SEQUENCE; Schema: wfs; Owner: darwin2
--

CREATE SEQUENCE wfs.osm_20200505_boundary_administrative_belgium_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.osm_20200505_boundary_administrative_belgium_id_seq OWNER TO darwin2;

--
-- TOC entry 9442 (class 0 OID 0)
-- Dependencies: 751
-- Name: osm_20200505_boundary_administrative_belgium_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: darwin2
--

ALTER SEQUENCE wfs.osm_20200505_boundary_administrative_belgium_id_seq OWNED BY wfs.osm_20200505_boundary_administrative_belgium.gid;


--
-- TOC entry 752 (class 1259 OID 1442889)
-- Name: osm_belgium_20200505_1_regions; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_1_regions AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '4'::text);


ALTER TABLE wfs.osm_belgium_20200505_1_regions OWNER TO darwin2;

--
-- TOC entry 753 (class 1259 OID 1442894)
-- Name: osm_belgium_20200505_2_provinces; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_2_provinces AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '6'::text);


ALTER TABLE wfs.osm_belgium_20200505_2_provinces OWNER TO darwin2;

--
-- TOC entry 754 (class 1259 OID 1442899)
-- Name: osm_belgium_20200505_3_arrondissements; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_3_arrondissements AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '7'::text);


ALTER TABLE wfs.osm_belgium_20200505_3_arrondissements OWNER TO darwin2;

--
-- TOC entry 755 (class 1259 OID 1442904)
-- Name: osm_belgium_20200505_4_municipalities; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_4_municipalities AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '8'::text);


ALTER TABLE wfs.osm_belgium_20200505_4_municipalities OWNER TO darwin2;

--
-- TOC entry 756 (class 1259 OID 1442909)
-- Name: osm_belgium_20200505_5_old_muncipalities; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_5_old_muncipalities AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '9'::text);


ALTER TABLE wfs.osm_belgium_20200505_5_old_muncipalities OWNER TO darwin2;

--
-- TOC entry 757 (class 1259 OID 1442914)
-- Name: osm_belgium_20200505_6_quartiers; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_6_quartiers AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '10'::text);


ALTER TABLE wfs.osm_belgium_20200505_6_quartiers OWNER TO darwin2;

--
-- TOC entry 758 (class 1259 OID 1442919)
-- Name: osm_belgium_20200505_7_quartiers_2; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.osm_belgium_20200505_7_quartiers_2 AS
 SELECT osm_20200505_boundary_administrative_belgium.gid,
    osm_20200505_boundary_administrative_belgium.geom,
    osm_20200505_boundary_administrative_belgium.full_id,
    osm_20200505_boundary_administrative_belgium.osm_id,
    osm_20200505_boundary_administrative_belgium.osm_type,
    osm_20200505_boundary_administrative_belgium.admin_level,
    osm_20200505_boundary_administrative_belgium.boundary,
    osm_20200505_boundary_administrative_belgium.name,
    osm_20200505_boundary_administrative_belgium.name_fr,
    osm_20200505_boundary_administrative_belgium.name_ru,
    osm_20200505_boundary_administrative_belgium.population,
    osm_20200505_boundary_administrative_belgium.ref_ins,
    osm_20200505_boundary_administrative_belgium.type,
    osm_20200505_boundary_administrative_belgium.wikidata,
    osm_20200505_boundary_administrative_belgium.wikipedia,
    osm_20200505_boundary_administrative_belgium."iso3166-1",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha2",
    osm_20200505_boundary_administrative_belgium."iso3166-1_alpha3",
    osm_20200505_boundary_administrative_belgium."iso3166-1_numeric",
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_class,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_lclversion,
    osm_20200505_boundary_administrative_belgium.tmc_cid_58_tabcd_1_locationcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ay,
    osm_20200505_boundary_administrative_belgium.alt_name_bar,
    osm_20200505_boundary_administrative_belgium.alt_name_ckb,
    osm_20200505_boundary_administrative_belgium.alt_name_eo,
    osm_20200505_boundary_administrative_belgium.alt_name_frp,
    osm_20200505_boundary_administrative_belgium.alt_name_fur,
    osm_20200505_boundary_administrative_belgium.alt_name_fy,
    osm_20200505_boundary_administrative_belgium.alt_name_kbd,
    osm_20200505_boundary_administrative_belgium.alt_name_ksh,
    osm_20200505_boundary_administrative_belgium.alt_name_ku,
    osm_20200505_boundary_administrative_belgium.alt_name_la,
    osm_20200505_boundary_administrative_belgium.alt_name_li,
    osm_20200505_boundary_administrative_belgium.alt_name_mzn,
    osm_20200505_boundary_administrative_belgium.alt_name_qu,
    osm_20200505_boundary_administrative_belgium.alt_name_rw,
    osm_20200505_boundary_administrative_belgium.alt_name_so,
    osm_20200505_boundary_administrative_belgium.alt_name_war,
    osm_20200505_boundary_administrative_belgium.currency,
    osm_20200505_boundary_administrative_belgium.flag,
    osm_20200505_boundary_administrative_belgium.int_name,
    osm_20200505_boundary_administrative_belgium.name_ace,
    osm_20200505_boundary_administrative_belgium.name_ady,
    osm_20200505_boundary_administrative_belgium.name_af,
    osm_20200505_boundary_administrative_belgium.name_ak,
    osm_20200505_boundary_administrative_belgium.name_als,
    osm_20200505_boundary_administrative_belgium.name_am,
    osm_20200505_boundary_administrative_belgium.name_an,
    osm_20200505_boundary_administrative_belgium.name_ang,
    osm_20200505_boundary_administrative_belgium.name_ar,
    osm_20200505_boundary_administrative_belgium.name_arc,
    osm_20200505_boundary_administrative_belgium.name_arz,
    osm_20200505_boundary_administrative_belgium.name_ast,
    osm_20200505_boundary_administrative_belgium.name_av,
    osm_20200505_boundary_administrative_belgium.name_ay,
    osm_20200505_boundary_administrative_belgium.name_az,
    osm_20200505_boundary_administrative_belgium.name_azb,
    osm_20200505_boundary_administrative_belgium.name_ba,
    osm_20200505_boundary_administrative_belgium.name_bar,
    osm_20200505_boundary_administrative_belgium."name_bat-smg",
    osm_20200505_boundary_administrative_belgium.name_bcl,
    osm_20200505_boundary_administrative_belgium.name_be,
    osm_20200505_boundary_administrative_belgium."name_be-tarask",
    osm_20200505_boundary_administrative_belgium.name_bg,
    osm_20200505_boundary_administrative_belgium.name_bh,
    osm_20200505_boundary_administrative_belgium.name_bi,
    osm_20200505_boundary_administrative_belgium.name_bm,
    osm_20200505_boundary_administrative_belgium.name_bn,
    osm_20200505_boundary_administrative_belgium.name_bo,
    osm_20200505_boundary_administrative_belgium.name_bpy,
    osm_20200505_boundary_administrative_belgium.name_br,
    osm_20200505_boundary_administrative_belgium.name_bs,
    osm_20200505_boundary_administrative_belgium.name_bug,
    osm_20200505_boundary_administrative_belgium.name_bxr,
    osm_20200505_boundary_administrative_belgium.name_ca,
    osm_20200505_boundary_administrative_belgium."name_cbk-zam",
    osm_20200505_boundary_administrative_belgium.name_cdo,
    osm_20200505_boundary_administrative_belgium.name_ce,
    osm_20200505_boundary_administrative_belgium.name_ceb,
    osm_20200505_boundary_administrative_belgium.name_chr,
    osm_20200505_boundary_administrative_belgium.name_ckb,
    osm_20200505_boundary_administrative_belgium.name_co,
    osm_20200505_boundary_administrative_belgium.name_crh,
    osm_20200505_boundary_administrative_belgium.name_cs,
    osm_20200505_boundary_administrative_belgium.name_csb,
    osm_20200505_boundary_administrative_belgium.name_cu,
    osm_20200505_boundary_administrative_belgium.name_cv,
    osm_20200505_boundary_administrative_belgium.name_cy,
    osm_20200505_boundary_administrative_belgium.name_da,
    osm_20200505_boundary_administrative_belgium.name_de,
    osm_20200505_boundary_administrative_belgium.name_diq,
    osm_20200505_boundary_administrative_belgium.name_dsb,
    osm_20200505_boundary_administrative_belgium.name_dty,
    osm_20200505_boundary_administrative_belgium.name_dv,
    osm_20200505_boundary_administrative_belgium.name_dz,
    osm_20200505_boundary_administrative_belgium.name_ee,
    osm_20200505_boundary_administrative_belgium.name_el,
    osm_20200505_boundary_administrative_belgium.name_eml,
    osm_20200505_boundary_administrative_belgium.name_en,
    osm_20200505_boundary_administrative_belgium.name_eo,
    osm_20200505_boundary_administrative_belgium.name_es,
    osm_20200505_boundary_administrative_belgium.name_et,
    osm_20200505_boundary_administrative_belgium.name_eu,
    osm_20200505_boundary_administrative_belgium.name_ext,
    osm_20200505_boundary_administrative_belgium.name_fa,
    osm_20200505_boundary_administrative_belgium.name_ff,
    osm_20200505_boundary_administrative_belgium.name_fi,
    osm_20200505_boundary_administrative_belgium."name_fiu-vro",
    osm_20200505_boundary_administrative_belgium.name_fo,
    osm_20200505_boundary_administrative_belgium.name_frp,
    osm_20200505_boundary_administrative_belgium.name_frr,
    osm_20200505_boundary_administrative_belgium.name_fur,
    osm_20200505_boundary_administrative_belgium.name_fy,
    osm_20200505_boundary_administrative_belgium.name_ga,
    osm_20200505_boundary_administrative_belgium.name_gag,
    osm_20200505_boundary_administrative_belgium.name_gd,
    osm_20200505_boundary_administrative_belgium.name_gl,
    osm_20200505_boundary_administrative_belgium.name_gn,
    osm_20200505_boundary_administrative_belgium.name_gom,
    osm_20200505_boundary_administrative_belgium.name_gu,
    osm_20200505_boundary_administrative_belgium.name_gv,
    osm_20200505_boundary_administrative_belgium.name_ha,
    osm_20200505_boundary_administrative_belgium.name_hak,
    osm_20200505_boundary_administrative_belgium.name_haw,
    osm_20200505_boundary_administrative_belgium.name_he,
    osm_20200505_boundary_administrative_belgium.name_hi,
    osm_20200505_boundary_administrative_belgium.name_hif,
    osm_20200505_boundary_administrative_belgium.name_hr,
    osm_20200505_boundary_administrative_belgium.name_hsb,
    osm_20200505_boundary_administrative_belgium.name_ht,
    osm_20200505_boundary_administrative_belgium.name_hu,
    osm_20200505_boundary_administrative_belgium.name_hy,
    osm_20200505_boundary_administrative_belgium.name_ia,
    osm_20200505_boundary_administrative_belgium.name_id,
    osm_20200505_boundary_administrative_belgium.name_ie,
    osm_20200505_boundary_administrative_belgium.name_ig,
    osm_20200505_boundary_administrative_belgium.name_ilo,
    osm_20200505_boundary_administrative_belgium.name_io,
    osm_20200505_boundary_administrative_belgium.name_is,
    osm_20200505_boundary_administrative_belgium.name_it,
    osm_20200505_boundary_administrative_belgium.name_ja,
    osm_20200505_boundary_administrative_belgium.name_jam,
    osm_20200505_boundary_administrative_belgium.name_jbo,
    osm_20200505_boundary_administrative_belgium.name_jv,
    osm_20200505_boundary_administrative_belgium.name_ka,
    osm_20200505_boundary_administrative_belgium.name_kaa,
    osm_20200505_boundary_administrative_belgium.name_kab,
    osm_20200505_boundary_administrative_belgium.name_kbd,
    osm_20200505_boundary_administrative_belgium.name_kbp,
    osm_20200505_boundary_administrative_belgium.name_kg,
    osm_20200505_boundary_administrative_belgium.name_ki,
    osm_20200505_boundary_administrative_belgium.name_kk,
    osm_20200505_boundary_administrative_belgium.name_kl,
    osm_20200505_boundary_administrative_belgium.name_km,
    osm_20200505_boundary_administrative_belgium.name_kn,
    osm_20200505_boundary_administrative_belgium.name_ko,
    osm_20200505_boundary_administrative_belgium.name_koi,
    osm_20200505_boundary_administrative_belgium.name_krc,
    osm_20200505_boundary_administrative_belgium.name_ks,
    osm_20200505_boundary_administrative_belgium.name_ksh,
    osm_20200505_boundary_administrative_belgium.name_ku,
    osm_20200505_boundary_administrative_belgium.name_kv,
    osm_20200505_boundary_administrative_belgium.name_kw,
    osm_20200505_boundary_administrative_belgium.name_ky,
    osm_20200505_boundary_administrative_belgium.name_la,
    osm_20200505_boundary_administrative_belgium.name_lad,
    osm_20200505_boundary_administrative_belgium.name_lb,
    osm_20200505_boundary_administrative_belgium.name_lez,
    osm_20200505_boundary_administrative_belgium.name_lg,
    osm_20200505_boundary_administrative_belgium.name_li,
    osm_20200505_boundary_administrative_belgium.name_lij,
    osm_20200505_boundary_administrative_belgium.name_lmo,
    osm_20200505_boundary_administrative_belgium.name_ln,
    osm_20200505_boundary_administrative_belgium.name_lo,
    osm_20200505_boundary_administrative_belgium.name_lrc,
    osm_20200505_boundary_administrative_belgium.name_lt,
    osm_20200505_boundary_administrative_belgium.name_ltg,
    osm_20200505_boundary_administrative_belgium.name_lv,
    osm_20200505_boundary_administrative_belgium.name_lzh,
    osm_20200505_boundary_administrative_belgium.name_mai,
    osm_20200505_boundary_administrative_belgium.name_mdf,
    osm_20200505_boundary_administrative_belgium.name_mg,
    osm_20200505_boundary_administrative_belgium.name_mhr,
    osm_20200505_boundary_administrative_belgium.name_mi,
    osm_20200505_boundary_administrative_belgium.name_mk,
    osm_20200505_boundary_administrative_belgium.name_ml,
    osm_20200505_boundary_administrative_belgium.name_mn,
    osm_20200505_boundary_administrative_belgium.name_mr,
    osm_20200505_boundary_administrative_belgium.name_ms,
    osm_20200505_boundary_administrative_belgium.name_mt,
    osm_20200505_boundary_administrative_belgium.name_mwl,
    osm_20200505_boundary_administrative_belgium.name_my,
    osm_20200505_boundary_administrative_belgium.name_myv,
    osm_20200505_boundary_administrative_belgium.name_mzn,
    osm_20200505_boundary_administrative_belgium.name_na,
    osm_20200505_boundary_administrative_belgium.name_nah,
    osm_20200505_boundary_administrative_belgium.name_nan,
    osm_20200505_boundary_administrative_belgium.name_nap,
    osm_20200505_boundary_administrative_belgium.name_nb,
    osm_20200505_boundary_administrative_belgium.name_nds,
    osm_20200505_boundary_administrative_belgium."name_nds-nl",
    osm_20200505_boundary_administrative_belgium.name_ne,
    osm_20200505_boundary_administrative_belgium.name_new,
    osm_20200505_boundary_administrative_belgium.name_nl,
    osm_20200505_boundary_administrative_belgium.name_nn,
    osm_20200505_boundary_administrative_belgium.name_no,
    osm_20200505_boundary_administrative_belgium.name_nov,
    osm_20200505_boundary_administrative_belgium.name_nrm,
    osm_20200505_boundary_administrative_belgium.name_nso,
    osm_20200505_boundary_administrative_belgium.name_oc,
    osm_20200505_boundary_administrative_belgium.name_olo,
    osm_20200505_boundary_administrative_belgium.name_om,
    osm_20200505_boundary_administrative_belgium.name_or,
    osm_20200505_boundary_administrative_belgium.name_os,
    osm_20200505_boundary_administrative_belgium.name_pa,
    osm_20200505_boundary_administrative_belgium.name_pag,
    osm_20200505_boundary_administrative_belgium.name_pam,
    osm_20200505_boundary_administrative_belgium.name_pap,
    osm_20200505_boundary_administrative_belgium.name_pcd,
    osm_20200505_boundary_administrative_belgium.name_pdc,
    osm_20200505_boundary_administrative_belgium.name_pfl,
    osm_20200505_boundary_administrative_belgium.name_pi,
    osm_20200505_boundary_administrative_belgium.name_pih,
    osm_20200505_boundary_administrative_belgium.name_pl,
    osm_20200505_boundary_administrative_belgium.name_pms,
    osm_20200505_boundary_administrative_belgium.name_pnb,
    osm_20200505_boundary_administrative_belgium.name_pnt,
    osm_20200505_boundary_administrative_belgium.name_ps,
    osm_20200505_boundary_administrative_belgium.name_pt,
    osm_20200505_boundary_administrative_belgium.name_qu,
    osm_20200505_boundary_administrative_belgium.name_rm,
    osm_20200505_boundary_administrative_belgium.name_rmy,
    osm_20200505_boundary_administrative_belgium.name_rn,
    osm_20200505_boundary_administrative_belgium.name_ro,
    osm_20200505_boundary_administrative_belgium."name_roa-rup",
    osm_20200505_boundary_administrative_belgium."name_roa-tara",
    osm_20200505_boundary_administrative_belgium.name_rue,
    osm_20200505_boundary_administrative_belgium.name_rw,
    osm_20200505_boundary_administrative_belgium.name_sa,
    osm_20200505_boundary_administrative_belgium.name_sah,
    osm_20200505_boundary_administrative_belgium.name_sc,
    osm_20200505_boundary_administrative_belgium.name_scn,
    osm_20200505_boundary_administrative_belgium.name_sco,
    osm_20200505_boundary_administrative_belgium.name_sd,
    osm_20200505_boundary_administrative_belgium.name_se,
    osm_20200505_boundary_administrative_belgium.name_sg,
    osm_20200505_boundary_administrative_belgium.name_sh,
    osm_20200505_boundary_administrative_belgium.name_si,
    osm_20200505_boundary_administrative_belgium.name_sk,
    osm_20200505_boundary_administrative_belgium.name_sl,
    osm_20200505_boundary_administrative_belgium.name_sm,
    osm_20200505_boundary_administrative_belgium.name_sn,
    osm_20200505_boundary_administrative_belgium.name_so,
    osm_20200505_boundary_administrative_belgium.name_sq,
    osm_20200505_boundary_administrative_belgium.name_sr,
    osm_20200505_boundary_administrative_belgium.name_srn,
    osm_20200505_boundary_administrative_belgium.name_ss,
    osm_20200505_boundary_administrative_belgium.name_stq,
    osm_20200505_boundary_administrative_belgium.name_su,
    osm_20200505_boundary_administrative_belgium.name_sv,
    osm_20200505_boundary_administrative_belgium.name_sw,
    osm_20200505_boundary_administrative_belgium.name_szl,
    osm_20200505_boundary_administrative_belgium.name_ta,
    osm_20200505_boundary_administrative_belgium.name_te,
    osm_20200505_boundary_administrative_belgium.name_tet,
    osm_20200505_boundary_administrative_belgium.name_tg,
    osm_20200505_boundary_administrative_belgium.name_th,
    osm_20200505_boundary_administrative_belgium.name_ti,
    osm_20200505_boundary_administrative_belgium.name_tk,
    osm_20200505_boundary_administrative_belgium.name_tl,
    osm_20200505_boundary_administrative_belgium.name_to,
    osm_20200505_boundary_administrative_belgium.name_tok,
    osm_20200505_boundary_administrative_belgium.name_tpi,
    osm_20200505_boundary_administrative_belgium.name_tr,
    osm_20200505_boundary_administrative_belgium.name_ts,
    osm_20200505_boundary_administrative_belgium.name_tt,
    osm_20200505_boundary_administrative_belgium.name_tum,
    osm_20200505_boundary_administrative_belgium.name_tw,
    osm_20200505_boundary_administrative_belgium.name_tzl,
    osm_20200505_boundary_administrative_belgium.name_udm,
    osm_20200505_boundary_administrative_belgium.name_ug,
    osm_20200505_boundary_administrative_belgium.name_uk,
    osm_20200505_boundary_administrative_belgium.name_ur,
    osm_20200505_boundary_administrative_belgium.name_uz,
    osm_20200505_boundary_administrative_belgium.name_vec,
    osm_20200505_boundary_administrative_belgium.name_vep,
    osm_20200505_boundary_administrative_belgium.name_vi,
    osm_20200505_boundary_administrative_belgium.name_vls,
    osm_20200505_boundary_administrative_belgium.name_vo,
    osm_20200505_boundary_administrative_belgium.name_wa,
    osm_20200505_boundary_administrative_belgium.name_war,
    osm_20200505_boundary_administrative_belgium.name_wo,
    osm_20200505_boundary_administrative_belgium.name_wuu,
    osm_20200505_boundary_administrative_belgium.name_xal,
    osm_20200505_boundary_administrative_belgium.name_xmf,
    osm_20200505_boundary_administrative_belgium.name_yi,
    osm_20200505_boundary_administrative_belgium.name_yo,
    osm_20200505_boundary_administrative_belgium.name_yue,
    osm_20200505_boundary_administrative_belgium.name_zea,
    osm_20200505_boundary_administrative_belgium.name_zh,
    osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
    osm_20200505_boundary_administrative_belgium.name_zu,
    osm_20200505_boundary_administrative_belgium.official_name,
    osm_20200505_boundary_administrative_belgium.official_name_af,
    osm_20200505_boundary_administrative_belgium.official_name_als,
    osm_20200505_boundary_administrative_belgium.official_name_am,
    osm_20200505_boundary_administrative_belgium.official_name_an,
    osm_20200505_boundary_administrative_belgium.official_name_ang,
    osm_20200505_boundary_administrative_belgium.official_name_ar,
    osm_20200505_boundary_administrative_belgium.official_name_arc,
    osm_20200505_boundary_administrative_belgium.official_name_ast,
    osm_20200505_boundary_administrative_belgium.official_name_av,
    osm_20200505_boundary_administrative_belgium.official_name_ay,
    osm_20200505_boundary_administrative_belgium.official_name_az,
    osm_20200505_boundary_administrative_belgium.official_name_azb,
    osm_20200505_boundary_administrative_belgium."iso3166-2",
    osm_20200505_boundary_administrative_belgium.alt_name_ar,
    osm_20200505_boundary_administrative_belgium.alt_name_mk,
    osm_20200505_boundary_administrative_belgium.border_type,
    osm_20200505_boundary_administrative_belgium.official_name_nl,
    osm_20200505_boundary_administrative_belgium.population_date,
    osm_20200505_boundary_administrative_belgium.source_population,
    osm_20200505_boundary_administrative_belgium.website,
    osm_20200505_boundary_administrative_belgium.wikipedia_fr,
    osm_20200505_boundary_administrative_belgium.default_language,
    osm_20200505_boundary_administrative_belgium.nat_name,
    osm_20200505_boundary_administrative_belgium.nat_name_ar,
    osm_20200505_boundary_administrative_belgium.nat_name_be,
    osm_20200505_boundary_administrative_belgium.nat_name_bg,
    osm_20200505_boundary_administrative_belgium.nat_name_ca,
    osm_20200505_boundary_administrative_belgium.nat_name_de,
    osm_20200505_boundary_administrative_belgium.nat_name_el,
    osm_20200505_boundary_administrative_belgium.nat_name_en,
    osm_20200505_boundary_administrative_belgium.nat_name_eo,
    osm_20200505_boundary_administrative_belgium.nat_name_fr,
    osm_20200505_boundary_administrative_belgium.nat_name_lb,
    osm_20200505_boundary_administrative_belgium.nat_name_li,
    osm_20200505_boundary_administrative_belgium.nat_name_mk,
    osm_20200505_boundary_administrative_belgium.nat_name_nl,
    osm_20200505_boundary_administrative_belgium.nat_name_os,
    osm_20200505_boundary_administrative_belgium.nat_name_pl,
    osm_20200505_boundary_administrative_belgium.nat_name_ru,
    osm_20200505_boundary_administrative_belgium.nat_name_sk,
    osm_20200505_boundary_administrative_belgium.nat_name_tr,
    osm_20200505_boundary_administrative_belgium.nat_name_vls,
    osm_20200505_boundary_administrative_belgium.nat_name_wa,
    osm_20200505_boundary_administrative_belgium.source_name_br,
    osm_20200505_boundary_administrative_belgium.alt_name,
    osm_20200505_boundary_administrative_belgium.alt_name_de,
    osm_20200505_boundary_administrative_belgium.alt_name_fr,
    osm_20200505_boundary_administrative_belgium.alt_name_nl,
    osm_20200505_boundary_administrative_belgium.alt_name_pl,
    osm_20200505_boundary_administrative_belgium.wikipedia_de,
    osm_20200505_boundary_administrative_belgium.postal_code,
    osm_20200505_boundary_administrative_belgium.website_fr,
    osm_20200505_boundary_administrative_belgium.website_nl,
    osm_20200505_boundary_administrative_belgium.wikipedia_nl,
    osm_20200505_boundary_administrative_belgium.addr_postcode,
    osm_20200505_boundary_administrative_belgium.alt_name_ru,
    osm_20200505_boundary_administrative_belgium.old_ref_ins,
    osm_20200505_boundary_administrative_belgium.old_name,
    osm_20200505_boundary_administrative_belgium.loc_name,
    osm_20200505_boundary_administrative_belgium.nat_name_es,
    osm_20200505_boundary_administrative_belgium.alt_name_wa,
    osm_20200505_boundary_administrative_belgium.reg_name,
    osm_20200505_boundary_administrative_belgium.old_name_fr,
    osm_20200505_boundary_administrative_belgium.image,
    osm_20200505_boundary_administrative_belgium.old_name_nl,
    osm_20200505_boundary_administrative_belgium.border,
    osm_20200505_boundary_administrative_belgium.old_name_la,
    osm_20200505_boundary_administrative_belgium.source_ref,
    osm_20200505_boundary_administrative_belgium.place,
    osm_20200505_boundary_administrative_belgium.old_name_de,
    osm_20200505_boundary_administrative_belgium.url,
    osm_20200505_boundary_administrative_belgium.local_name,
    osm_20200505_boundary_administrative_belgium.wikimedia_commons,
    osm_20200505_boundary_administrative_belgium.name_kmr,
    osm_20200505_boundary_administrative_belgium.short_name,
    osm_20200505_boundary_administrative_belgium.addr_city,
    osm_20200505_boundary_administrative_belgium."name_fr-lor",
    osm_20200505_boundary_administrative_belgium.official_name_fr,
    osm_20200505_boundary_administrative_belgium.description,
    osm_20200505_boundary_administrative_belgium.ref,
    osm_20200505_boundary_administrative_belgium.description_nl,
    osm_20200505_boundary_administrative_belgium.source_note,
    osm_20200505_boundary_administrative_belgium.authoritative,
    osm_20200505_boundary_administrative_belgium.bag_bronwoonplaats,
    osm_20200505_boundary_administrative_belgium.start_date,
    osm_20200505_boundary_administrative_belgium.historic
   FROM wfs.osm_20200505_boundary_administrative_belgium
  WHERE ((osm_20200505_boundary_administrative_belgium.admin_level)::text = '11'::text);


ALTER TABLE wfs.osm_belgium_20200505_7_quartiers_2 OWNER TO darwin2;

--
-- TOC entry 759 (class 1259 OID 1442924)
-- Name: osm_belgium_20200505_8_villages; Type: TABLE; Schema: wfs; Owner: darwin2
--

CREATE TABLE wfs.osm_belgium_20200505_8_villages (
    gid integer NOT NULL,
    geom public.geometry(Point,4326),
    full_id character varying,
    osm_id character varying,
    osm_type character varying,
    name character varying,
    name_de character varying,
    name_fr character varying,
    name_nl character varying,
    name_ru character varying,
    place character varying,
    wikidata character varying,
    wikipedia character varying,
    old_name character varying,
    postal_code character varying,
    name_wa character varying,
    alt_name character varying,
    name_lb character varying,
    population character varying,
    population_date character varying,
    ref_ins character varying,
    website character varying,
    name_li character varying,
    wikipedia_fr character varying,
    alt_name_nl character varying,
    name_vls character varying,
    old_name_nl character varying,
    name_lt character varying,
    "name_fr-lor" character varying,
    old_name_fr character varying,
    loc_name character varying,
    name_en character varying,
    alt_name_fr character varying,
    addr_postcode character varying,
    operator character varying,
    url character varying,
    population_note character varying,
    alt_name_de character varying,
    name_bg character varying,
    name_fa character varying,
    name_zh character varying,
    ele character varying,
    name_oc character varying,
    name_pcd character varying,
    alt_name_lb character varying,
    wikipedia_it character varying,
    source_ele character varying,
    admin_level character varying,
    addr_city character varying,
    wikipedia_nl character varying,
    description character varying,
    geonameid character varying,
    alt_name_wa character varying,
    name_mk character varying,
    alt_name_li character varying,
    name_ksh character varying,
    reg_name character varying,
    comment character varying,
    name_gan character varying,
    wikipedia_en character varying,
    access character varying,
    name_uk character varying,
    name_ab character varying,
    int_name character varying,
    ref_locode character varying,
    old_name_vls character varying,
    source_population character varying,
    name_it character varying,
    bus character varying,
    public_transport character varying,
    backrest character varying,
    name_1 character varying
);


ALTER TABLE wfs.osm_belgium_20200505_8_villages OWNER TO darwin2;

--
-- TOC entry 760 (class 1259 OID 1442930)
-- Name: t_osm_belgium_20200505_8_villages_id_seq; Type: SEQUENCE; Schema: wfs; Owner: darwin2
--

CREATE SEQUENCE wfs.t_osm_belgium_20200505_8_villages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs.t_osm_belgium_20200505_8_villages_id_seq OWNER TO darwin2;

--
-- TOC entry 9443 (class 0 OID 0)
-- Dependencies: 760
-- Name: t_osm_belgium_20200505_8_villages_id_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: darwin2
--

ALTER SEQUENCE wfs.t_osm_belgium_20200505_8_villages_id_seq OWNED BY wfs.osm_belgium_20200505_8_villages.gid;


--
-- TOC entry 761 (class 1259 OID 1442932)
-- Name: tdwg_level_1; Type: TABLE; Schema: wfs; Owner: darwin2
--

CREATE TABLE wfs.tdwg_level_1 (
    gid bigint NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    code bigint,
    count bigint,
    name character varying(254)
);


ALTER TABLE wfs.tdwg_level_1 OWNER TO darwin2;

--
-- TOC entry 762 (class 1259 OID 1442938)
-- Name: v_belgian_rivers_osm_20200402_name_cluster; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_belgian_rivers_osm_20200402_name_cluster AS
 WITH a AS (
         SELECT belgian_rivers_osm_20200402.gid,
            belgian_rivers_osm_20200402.geom,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402.id
           FROM wfs.belgian_rivers_osm_20200402
          ORDER BY belgian_rivers_osm_20200402.name
        ), b AS (
         SELECT b.gid,
            b.geom,
            b.name,
            a.gid AS neighbour
           FROM (wfs.belgian_rivers_osm_20200402 b
             LEFT JOIN a ON ((public.st_intersects(b.geom, a.geom) AND (a.gid <> b.gid) AND (a.gid > b.gid) AND ((a.name)::text = (b.name)::text))))
          ORDER BY b.name, b.gid
        ), c AS (
         SELECT b.gid,
            b.geom,
            b.name,
            b.neighbour,
            min(b.gid) OVER (PARTITION BY b.name) AS min
           FROM b
        ), d AS (
         SELECT c.min AS gid,
            (c.min || array_agg(DISTINCT c.neighbour)) AS cluster,
            c.name,
            public.st_union(c.geom) AS geom
           FROM c
          WHERE (c.neighbour IS NOT NULL)
          GROUP BY c.min, c.name
        ), e AS (
         SELECT c.gid,
            array_agg(DISTINCT c.neighbour) AS array_agg,
            c.name,
            c.geom
           FROM c
          WHERE (c.neighbour IS NULL)
          GROUP BY c.gid, c.name, c.geom
        )
 SELECT f.gid,
    f.cluster,
    f.name,
    f.geom
   FROM ( SELECT d.gid,
            d.cluster,
            d.name,
            d.geom
           FROM d
        UNION
         SELECT belgian_rivers_osm_20200402.gid,
            NULL::integer[] AS int4,
            belgian_rivers_osm_20200402.name,
            public.st_multi(belgian_rivers_osm_20200402.geom) AS st_multi
           FROM wfs.belgian_rivers_osm_20200402
          WHERE (NOT (belgian_rivers_osm_20200402.gid IN ( SELECT unnest(d.cluster) AS unnest
                   FROM d
                  WHERE (d.cluster IS NOT NULL))))) f
  ORDER BY f.name, f.gid;


ALTER TABLE wfs.v_belgian_rivers_osm_20200402_name_cluster OWNER TO darwin2;

--
-- TOC entry 763 (class 1259 OID 1442943)
-- Name: v_exclusive_economical_zone_v11_buffer_5000m; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_exclusive_economical_zone_v11_buffer_5000m AS
 SELECT exclusive_economical_zone_v11.gid,
    public.st_buffer((exclusive_economical_zone_v11.geom)::public.geography, (5000)::double precision) AS geom,
    exclusive_economical_zone_v11.mrgid,
    exclusive_economical_zone_v11.name,
    exclusive_economical_zone_v11.mrgid_ter1,
    exclusive_economical_zone_v11.pol_type,
    exclusive_economical_zone_v11.mrgid_sov1,
    exclusive_economical_zone_v11.territory1,
    exclusive_economical_zone_v11.iso_ter1,
    exclusive_economical_zone_v11.sovereign1,
    exclusive_economical_zone_v11.mrgid_ter2,
    exclusive_economical_zone_v11.mrgid_sov2,
    exclusive_economical_zone_v11.territory2,
    exclusive_economical_zone_v11.iso_ter2,
    exclusive_economical_zone_v11.sovereign2,
    exclusive_economical_zone_v11.mrgid_ter3,
    exclusive_economical_zone_v11.mrgid_sov3,
    exclusive_economical_zone_v11.territory3,
    exclusive_economical_zone_v11.iso_ter3,
    exclusive_economical_zone_v11.sovereign3,
    exclusive_economical_zone_v11.x_1,
    exclusive_economical_zone_v11.y_1,
    exclusive_economical_zone_v11.mrgid_eez,
    exclusive_economical_zone_v11.area_km2,
    exclusive_economical_zone_v11.iso_sov1,
    exclusive_economical_zone_v11.iso_sov2,
    exclusive_economical_zone_v11.iso_sov3,
    exclusive_economical_zone_v11.un_sov1,
    exclusive_economical_zone_v11.un_sov2,
    exclusive_economical_zone_v11.un_sov3,
    exclusive_economical_zone_v11.un_ter1,
    exclusive_economical_zone_v11.un_ter2,
    exclusive_economical_zone_v11.un_ter3
   FROM wfs.exclusive_economical_zone_v11;


ALTER TABLE wfs.v_exclusive_economical_zone_v11_buffer_5000m OWNER TO darwin2;

--
-- TOC entry 764 (class 1259 OID 1442948)
-- Name: v_ne_10_m_regions_archipels; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_archipels AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Island group'::text);


ALTER TABLE wfs.v_ne_10_m_regions_archipels OWNER TO darwin2;

--
-- TOC entry 765 (class 1259 OID 1442953)
-- Name: v_ne_10_m_regions_areas; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_areas AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Geoarea'::text);


ALTER TABLE wfs.v_ne_10_m_regions_areas OWNER TO darwin2;

--
-- TOC entry 766 (class 1259 OID 1442958)
-- Name: v_ne_10_m_regions_basins; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_basins AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Basin'::text);


ALTER TABLE wfs.v_ne_10_m_regions_basins OWNER TO darwin2;

--
-- TOC entry 767 (class 1259 OID 1442963)
-- Name: v_ne_10_m_regions_coast; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_coast AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Coast'::text);


ALTER TABLE wfs.v_ne_10_m_regions_coast OWNER TO darwin2;

--
-- TOC entry 768 (class 1259 OID 1442968)
-- Name: v_ne_10_m_regions_continents; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_continents AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Continent'::text);


ALTER TABLE wfs.v_ne_10_m_regions_continents OWNER TO darwin2;

--
-- TOC entry 769 (class 1259 OID 1442973)
-- Name: v_ne_10_m_regions_delta; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_delta AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Delta'::text);


ALTER TABLE wfs.v_ne_10_m_regions_delta OWNER TO darwin2;

--
-- TOC entry 770 (class 1259 OID 1442978)
-- Name: v_ne_10_m_regions_depressions; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_depressions AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Depression'::text);


ALTER TABLE wfs.v_ne_10_m_regions_depressions OWNER TO darwin2;

--
-- TOC entry 771 (class 1259 OID 1442983)
-- Name: v_ne_10_m_regions_deserts; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_deserts AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Desert'::text);


ALTER TABLE wfs.v_ne_10_m_regions_deserts OWNER TO darwin2;

--
-- TOC entry 772 (class 1259 OID 1442988)
-- Name: v_ne_10_m_regions_foothills; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_foothills AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Foothills'::text);


ALTER TABLE wfs.v_ne_10_m_regions_foothills OWNER TO darwin2;

--
-- TOC entry 773 (class 1259 OID 1442993)
-- Name: v_ne_10_m_regions_gorges; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_gorges AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Gorge'::text);


ALTER TABLE wfs.v_ne_10_m_regions_gorges OWNER TO darwin2;

--
-- TOC entry 774 (class 1259 OID 1442998)
-- Name: v_ne_10_m_regions_islands; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_islands AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Island'::text);


ALTER TABLE wfs.v_ne_10_m_regions_islands OWNER TO darwin2;

--
-- TOC entry 775 (class 1259 OID 1443003)
-- Name: v_ne_10_m_regions_isthmus; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_isthmus AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Isthmus'::text);


ALTER TABLE wfs.v_ne_10_m_regions_isthmus OWNER TO darwin2;

--
-- TOC entry 776 (class 1259 OID 1443008)
-- Name: v_ne_10_m_regions_lakes; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_lakes AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Lake'::text);


ALTER TABLE wfs.v_ne_10_m_regions_lakes OWNER TO darwin2;

--
-- TOC entry 777 (class 1259 OID 1443013)
-- Name: v_ne_10_m_regions_lowlands; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_lowlands AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Lowland'::text);


ALTER TABLE wfs.v_ne_10_m_regions_lowlands OWNER TO darwin2;

--
-- TOC entry 778 (class 1259 OID 1443018)
-- Name: v_ne_10_m_regions_montainranges; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_montainranges AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Range/mtn'::text);


ALTER TABLE wfs.v_ne_10_m_regions_montainranges OWNER TO darwin2;

--
-- TOC entry 779 (class 1259 OID 1443023)
-- Name: v_ne_10_m_regions_pen_capes; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_pen_capes AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Pen/cape'::text);


ALTER TABLE wfs.v_ne_10_m_regions_pen_capes OWNER TO darwin2;

--
-- TOC entry 780 (class 1259 OID 1443028)
-- Name: v_ne_10_m_regions_peninsula; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_peninsula AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Peninsula'::text);


ALTER TABLE wfs.v_ne_10_m_regions_peninsula OWNER TO darwin2;

--
-- TOC entry 781 (class 1259 OID 1443033)
-- Name: v_ne_10_m_regions_plains; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_plains AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Plain'::text);


ALTER TABLE wfs.v_ne_10_m_regions_plains OWNER TO darwin2;

--
-- TOC entry 782 (class 1259 OID 1443038)
-- Name: v_ne_10_m_regions_plateaux; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_plateaux AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Plateau'::text);


ALTER TABLE wfs.v_ne_10_m_regions_plateaux OWNER TO darwin2;

--
-- TOC entry 783 (class 1259 OID 1443043)
-- Name: v_ne_10_m_regions_tundra; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_tundra AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Tundra'::text);


ALTER TABLE wfs.v_ne_10_m_regions_tundra OWNER TO darwin2;

--
-- TOC entry 784 (class 1259 OID 1443048)
-- Name: v_ne_10_m_regions_valleys; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_valleys AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Valley'::text);


ALTER TABLE wfs.v_ne_10_m_regions_valleys OWNER TO darwin2;

--
-- TOC entry 785 (class 1259 OID 1443053)
-- Name: v_ne_10_m_regions_wetlands; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.v_ne_10_m_regions_wetlands AS
 SELECT ne_10m_geography_regions_polys.gid,
    ne_10m_geography_regions_polys.featurecla,
    ne_10m_geography_regions_polys.name,
    ne_10m_geography_regions_polys.namealt,
    ne_10m_geography_regions_polys.region,
    ne_10m_geography_regions_polys.subregion,
    ne_10m_geography_regions_polys.min_label,
    ne_10m_geography_regions_polys.max_label,
    ne_10m_geography_regions_polys.scalerank,
    ne_10m_geography_regions_polys.label,
    ne_10m_geography_regions_polys.wikidataid,
    ne_10m_geography_regions_polys.name_ar,
    ne_10m_geography_regions_polys.name_bn,
    ne_10m_geography_regions_polys.name_de,
    ne_10m_geography_regions_polys.name_en,
    ne_10m_geography_regions_polys.name_es,
    ne_10m_geography_regions_polys.name_fr,
    ne_10m_geography_regions_polys.name_el,
    ne_10m_geography_regions_polys.name_hi,
    ne_10m_geography_regions_polys.name_hu,
    ne_10m_geography_regions_polys.name_id,
    ne_10m_geography_regions_polys.name_it,
    ne_10m_geography_regions_polys.name_ja,
    ne_10m_geography_regions_polys.name_ko,
    ne_10m_geography_regions_polys.name_nl,
    ne_10m_geography_regions_polys.name_pl,
    ne_10m_geography_regions_polys.name_pt,
    ne_10m_geography_regions_polys.name_ru,
    ne_10m_geography_regions_polys.name_sv,
    ne_10m_geography_regions_polys.name_tr,
    ne_10m_geography_regions_polys.name_vi,
    ne_10m_geography_regions_polys.name_zh,
    ne_10m_geography_regions_polys.wdid_score,
    ne_10m_geography_regions_polys.ne_id,
    ne_10m_geography_regions_polys.geom
   FROM wfs.ne_10m_geography_regions_polys
  WHERE ((ne_10m_geography_regions_polys.featurecla)::text = 'Wetlands'::text);


ALTER TABLE wfs.v_ne_10_m_regions_wetlands OWNER TO darwin2;

--
-- TOC entry 786 (class 1259 OID 1443058)
-- Name: wfs.belgian_rivers_osm_20200402_gid_seq; Type: SEQUENCE; Schema: wfs; Owner: postgres
--

CREATE SEQUENCE wfs."wfs.belgian_rivers_osm_20200402_gid_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wfs."wfs.belgian_rivers_osm_20200402_gid_seq" OWNER TO postgres;

--
-- TOC entry 9444 (class 0 OID 0)
-- Dependencies: 786
-- Name: wfs.belgian_rivers_osm_20200402_gid_seq; Type: SEQUENCE OWNED BY; Schema: wfs; Owner: postgres
--

ALTER SEQUENCE wfs."wfs.belgian_rivers_osm_20200402_gid_seq" OWNED BY wfs.belgian_rivers_osm_20200402.gid;


--
-- TOC entry 787 (class 1259 OID 1443060)
-- Name: wfs_translation_geom; Type: VIEW; Schema: wfs; Owner: darwin2
--

CREATE VIEW wfs.wfs_translation_geom AS
 SELECT a.gid,
    a.source_table,
    a.wikidataid,
    a.name,
    a.translated_name,
    darwin2.fulltoindex(a.translated_name, true) AS translated_name_indexed,
    a.language,
    a.geom
   FROM ( SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ar AS translated_name,
            'ar'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_bn AS translated_name,
            'bn'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_de AS translated_name,
            'de'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_en AS translated_name,
            'en'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_es AS translated_name,
            'es'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_fr AS translated_name,
            'fr'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_el AS translated_name,
            'el'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_hi AS translated_name,
            'hi'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_hu AS translated_name,
            'hu'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_id AS translated_name,
            'id'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_it AS translated_name,
            'it'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ja AS translated_name,
            'ja'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ko AS translated_name,
            'ko'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_nl AS translated_name,
            'nl'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_pl AS translated_name,
            'pl'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_pt AS translated_name,
            'pt'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_ru AS translated_name,
            'ru'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_sv AS translated_name,
            'sv'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_tr AS translated_name,
            'tr'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_vi AS translated_name,
            'vi'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_admin_1_states_provinces.gid,
            'ne_10m_admin_1_states_provinces'::text AS source_table,
            ne_10m_admin_1_states_provinces.wikidataid,
            ne_10m_admin_1_states_provinces.name,
            ne_10m_admin_1_states_provinces.name_zh AS translated_name,
            'zh'::text AS language,
            ne_10m_admin_1_states_provinces.geom
           FROM wfs.ne_10m_admin_1_states_provinces
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ar AS translated_name,
            'ar'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_bn AS translated_name,
            'bn'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_de AS translated_name,
            'de'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_en AS translated_name,
            'en'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_es AS translated_name,
            'es'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_fr AS translated_name,
            'fr'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_el AS translated_name,
            'el'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_hi AS translated_name,
            'hi'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_hu AS translated_name,
            'hu'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_id AS translated_name,
            'id'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_it AS translated_name,
            'it'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ja AS translated_name,
            'ja'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ko AS translated_name,
            'ko'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_nl AS translated_name,
            'nl'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_pl AS translated_name,
            'pl'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_pt AS translated_name,
            'pt'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_ru AS translated_name,
            'ru'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_sv AS translated_name,
            'sv'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_tr AS translated_name,
            'tr'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_vi AS translated_name,
            'vi'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys
        UNION
         SELECT ne_10m_geography_regions_polys.gid,
            'ne_10m_geography_regions_polys'::text AS source_table,
            ne_10m_geography_regions_polys.wikidataid,
            ne_10m_geography_regions_polys.name,
            ne_10m_geography_regions_polys.name_zh AS translated_name,
            'zh'::text AS language,
            ne_10m_geography_regions_polys.geom
           FROM wfs.ne_10m_geography_regions_polys) a
  WHERE (btrim((COALESCE(a.translated_name))::text) <> ''::text)
UNION
 SELECT a.gid,
    a.source_table,
    a.wikidata AS wikidataid,
    a.name,
    a.translated_name,
    darwin2.fulltoindex(a.translated_name, true) AS translated_name_indexed,
    a.language,
    a.geom
   FROM ( SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS source_table,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fr" AS translated_name,
            'gr'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:nl",
            'nl'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:wa" AS name_translated,
            'wa'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lb",
            'lb'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lt",
            'lt'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:de",
            'de'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:en",
            'en'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:he",
            'he'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hu",
            'hu'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:be",
            'be'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:et",
            'et'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hy",
            'hy'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:zh",
            'zh'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:af",
            'af'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ar",
            'ar'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:bg",
            'bg'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:bn",
            'bn'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:br",
            'br'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ca",
            'ca'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:cs",
            'cs'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:cy",
            'cy'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:da",
            'da'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:el",
            'el'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:eo",
            'eo'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:es",
            'es'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:eu",
            'eu'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fa",
            'fa'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fi",
            'fi'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:fy",
            'fy'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:gl",
            'gl'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:hr",
            'hr'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:it",
            'it'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ja",
            'ja'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ka",
            'ka'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ko",
            'ko'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:la",
            'la'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:li",
            'li'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:lv",
            'lv'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:mk",
            'mk'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:nn",
            'nn'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:no",
            'no'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:oc",
            'oc'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:pl",
            'pl'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:pt",
            'pt'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ro",
            'ro'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sh",
            'sh'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:si",
            'si'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sk",
            'sk'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sr",
            'sr'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:sv",
            'sv'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:ta",
            'ta'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:th",
            'th'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:tl",
            'tl'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:tr",
            'tr'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:uk",
            'uk'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402
        UNION
         SELECT DISTINCT belgian_rivers_osm_20200402.gid,
            'belgian_rivers_osm_20200402'::text AS text,
            belgian_rivers_osm_20200402.wikidata,
            belgian_rivers_osm_20200402.name,
            belgian_rivers_osm_20200402."name:vi",
            'vi'::text AS language,
            belgian_rivers_osm_20200402.geom
           FROM wfs.belgian_rivers_osm_20200402) a
  WHERE (btrim((COALESCE(a.translated_name, ''::character varying))::text) <> ''::text)
UNION
 SELECT c.gid,
    c.source_table,
    c.wikidata AS wikidataid,
    c.name,
    c.translated_name,
    darwin2.fulltoindex(c.translated_name, true) AS translated_name_indexed,
    c.language,
    c.geom
   FROM ( SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS source_table,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fr AS translated_name,
            'fr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ru,
            'ru'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_af,
            'af'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ak,
            'ak'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_als,
            'als'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_am,
            'am'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_an,
            'an'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ang,
            'ang'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ar,
            'ar'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_arc,
            'arc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_arz,
            'arz'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ast,
            'ast'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_av,
            'av'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ay,
            'ay'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_az,
            'az'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_azb,
            'azb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ba,
            'ba'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bar,
            'bar'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_bat-smg",
            'bat-smg"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bcl,
            'bcl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_be,
            'be'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_be-tarask",
            'be-tarask"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bg,
            'bg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bh,
            'bh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bi,
            'bi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bm,
            'bm'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bn,
            'bn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bo,
            'bo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bpy,
            'bpy'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_br,
            'br'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bs,
            'bs'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bug,
            'bug'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_bxr,
            'bxr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ca,
            'ca'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_cbk-zam",
            'cbk-zam"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cdo,
            'cdo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ce,
            'ce'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ceb,
            'ceb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_chr,
            'chr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ckb,
            'ckb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_co,
            'co'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_crh,
            'crh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cs,
            'cs'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_csb,
            'csb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cu,
            'cu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cv,
            'cv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_cy,
            'cy'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_da,
            'da'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_de,
            'de'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_diq,
            'diq'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dsb,
            'dsb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dty,
            'dty'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dv,
            'dv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_dz,
            'dz'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ee,
            'ee'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_el,
            'el'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eml,
            'eml'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_en,
            'en'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eo,
            'eo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_es,
            'es'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_et,
            'et'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_eu,
            'eu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ext,
            'ext'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fa,
            'fa'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ff,
            'ff'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fi,
            'fi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_fiu-vro",
            'fiu-vro"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fo,
            'fo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_frp,
            'frp'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_frr,
            'frr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fur,
            'fur'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_fy,
            'fy'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ga,
            'ga'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gag,
            'gag'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gd,
            'gd'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gl,
            'gl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gn,
            'gn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gom,
            'gom'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gu,
            'gu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_gv,
            'gv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ha,
            'ha'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hak,
            'hak'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_haw,
            'haw'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_he,
            'he'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hi,
            'hi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hif,
            'hif'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hr,
            'hr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hsb,
            'hsb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ht,
            'ht'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hu,
            'hu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_hy,
            'hy'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ia,
            'ia'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_id,
            'id'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ie,
            'ie'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ig,
            'ig'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ilo,
            'ilo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_io,
            'io'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_is,
            'is'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_it,
            'it'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ja,
            'ja'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jam,
            'jam'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jbo,
            'jbo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_jv,
            'jv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ka,
            'ka'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kaa,
            'kaa'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kab,
            'kab'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kbd,
            'kbd'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kbp,
            'kbp'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kg,
            'kg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ki,
            'ki'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kk,
            'kk'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kl,
            'kl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_km,
            'km'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kn,
            'kn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ko,
            'ko'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_koi,
            'koi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_krc,
            'krc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ks,
            'ks'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ksh,
            'ksh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ku,
            'ku'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kv,
            'kv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_kw,
            'kw'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ky,
            'ky'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_la,
            'la'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lad,
            'lad'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lb,
            'lb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lez,
            'lez'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lg,
            'lg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_li,
            'li'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lij,
            'lij'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lmo,
            'lmo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ln,
            'ln'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lo,
            'lo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lrc,
            'lrc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lt,
            'lt'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ltg,
            'ltg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lv,
            'lv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_lzh,
            'lzh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mai,
            'mai'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mdf,
            'mdf'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mg,
            'mg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mhr,
            'mhr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mi,
            'mi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mk,
            'mk'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ml,
            'ml'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mn,
            'mn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mr,
            'mr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ms,
            'ms'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mt,
            'mt'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mwl,
            'mwl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_my,
            'my'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_myv,
            'myv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_mzn,
            'mzn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_na,
            'na'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nah,
            'nah'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nan,
            'nan'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nap,
            'nap'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nb,
            'nb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nds,
            'nds'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_nds-nl",
            'nds-nl"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ne,
            'ne'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_new,
            'new'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nl,
            'nl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nn,
            'nn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_no,
            'no'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nov,
            'nov'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nrm,
            'nrm'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_nso,
            'nso'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_oc,
            'oc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_olo,
            'olo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_om,
            'om'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_or,
            'or'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_os,
            'os'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pa,
            'pa'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pag,
            'pag'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pam,
            'pam'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pap,
            'pap'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pcd,
            'pcd'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pdc,
            'pdc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pfl,
            'pfl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pi,
            'pi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pih,
            'pih'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pl,
            'pl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pms,
            'pms'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pnb,
            'pnb'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pnt,
            'pnt'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ps,
            'ps'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_pt,
            'pt'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_qu,
            'qu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rm,
            'rm'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rmy,
            'rmy'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rn,
            'rn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ro,
            'ro'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_roa-rup",
            'roa-rup"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium."name_roa-tara",
            'roa-tara"'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rue,
            'rue'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_rw,
            'rw'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sa,
            'sa'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sah,
            'sah'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sc,
            'sc'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_scn,
            'scn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sco,
            'sco'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sd,
            'sd'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_se,
            'se'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sg,
            'sg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sh,
            'sh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_si,
            'si'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sk,
            'sk'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sl,
            'sl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sm,
            'sm'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sn,
            'sn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_so,
            'so'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sq,
            'sq'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sr,
            'sr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_srn,
            'srn'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ss,
            'ss'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_stq,
            'stq'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_su,
            'su'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sv,
            'sv'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_sw,
            'sw'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_szl,
            'szl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ta,
            'ta'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_te,
            'te'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tet,
            'tet'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tg,
            'tg'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_th,
            'th'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ti,
            'ti'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tk,
            'tk'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tl,
            'tl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_to,
            'to'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tok,
            'tok'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tpi,
            'tpi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tr,
            'tr'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ts,
            'ts'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tt,
            'tt'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tum,
            'tum'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tw,
            'tw'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_tzl,
            'tzl'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_udm,
            'udm'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ug,
            'ug'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_uk,
            'uk'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_ur,
            'ur'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_uz,
            'uz'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vec,
            'vec'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vep,
            'vep'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vi,
            'vi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vls,
            'vls'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_vo,
            'vo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wa,
            'wa'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_war,
            'war'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wo,
            'wo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_wuu,
            'wuu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_xal,
            'xal'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_xmf,
            'xmf'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yi,
            'yi'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yo,
            'yo'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_yue,
            'yue'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zea,
            'zea'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zh,
            'zh'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zh_pinyin,
            'zh_pinyin'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium
        UNION
         SELECT DISTINCT osm_20200505_boundary_administrative_belgium.gid,
            'belgian_administrative'::text AS text,
            osm_20200505_boundary_administrative_belgium.wikidata,
            osm_20200505_boundary_administrative_belgium.name,
            osm_20200505_boundary_administrative_belgium.name_zu,
            'zu'::text AS language,
            osm_20200505_boundary_administrative_belgium.geom
           FROM wfs.osm_20200505_boundary_administrative_belgium) c
  WHERE (btrim((COALESCE(c.translated_name, ''::character varying))::text) <> ''::text)
UNION
 SELECT d.gid,
    d.source_table,
    d.wikidataid,
    d.name,
    d.translated_name,
    darwin2.fulltoindex(d.translated_name, true) AS translated_name_indexed,
    d.language,
    d.geom
   FROM ( SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ar AS translated_name,
            'ar'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_bn,
            'bn'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_de,
            'de'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_en,
            'en'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_es,
            'es'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_fr,
            'fr'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_el,
            'el'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_hi,
            'hi'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_hu,
            'hu'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_id,
            'id'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_it,
            'it'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ja,
            'ja'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ko,
            'ko'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_nl,
            'nl'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_pl,
            'pl'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_pt,
            'pt'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_ru,
            'ru'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_sv,
            'sv'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_tr,
            'tr'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_vi,
            'vi'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries
        UNION
         SELECT DISTINCT ne_10m_admin_0_countries.gid,
            'ne_10m_admin_0_countries'::text AS source_table,
            ne_10m_admin_0_countries.wikidataid,
            ne_10m_admin_0_countries.name,
            ne_10m_admin_0_countries.name_zh,
            'zu'::text AS language,
            ne_10m_admin_0_countries.geom
           FROM wfs.ne_10m_admin_0_countries) d
  WHERE (btrim((COALESCE(d.translated_name))::text, ''::text) <> ''::text);


ALTER TABLE wfs.wfs_translation_geom OWNER TO darwin2;

--
-- TOC entry 6574 (class 2604 OID 1443065)
-- Name: authority_domain id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.authority_domain ALTER COLUMN id SET DEFAULT nextval('darwin2.authority_domain_id_seq'::regclass);


--
-- TOC entry 6576 (class 2604 OID 1443066)
-- Name: bibliography id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.bibliography ALTER COLUMN id SET DEFAULT nextval('darwin2.bibliography_id_seq'::regclass);


--
-- TOC entry 6577 (class 2604 OID 1443067)
-- Name: catalogue_bibliography id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_bibliography ALTER COLUMN id SET DEFAULT nextval('darwin2.catalogue_bibliography_id_seq'::regclass);


--
-- TOC entry 6592 (class 2604 OID 1443068)
-- Name: chronostratigraphy status; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy ALTER COLUMN status SET DEFAULT 'valid'::character varying;


--
-- TOC entry 6593 (class 2604 OID 1443069)
-- Name: chronostratigraphy local_naming; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy ALTER COLUMN local_naming SET DEFAULT false;


--
-- TOC entry 6594 (class 2604 OID 1443070)
-- Name: chronostratigraphy path; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy ALTER COLUMN path SET DEFAULT '/'::character varying;


--
-- TOC entry 6603 (class 2604 OID 1443071)
-- Name: classification_synonymies_history id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.classification_synonymies_history ALTER COLUMN id SET DEFAULT nextval('darwin2.classification_synonymies_history_id_seq'::regclass);


--
-- TOC entry 6672 (class 2604 OID 1443072)
-- Name: identifiers id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.identifiers ALTER COLUMN id SET DEFAULT nextval('darwin2.identifiers_id_seq'::regclass);


--
-- TOC entry 6699 (class 2604 OID 1443073)
-- Name: lithology status; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology ALTER COLUMN status SET DEFAULT 'valid'::character varying;


--
-- TOC entry 6700 (class 2604 OID 1443074)
-- Name: lithology local_naming; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology ALTER COLUMN local_naming SET DEFAULT false;


--
-- TOC entry 6698 (class 2604 OID 1443075)
-- Name: lithology path; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology ALTER COLUMN path SET DEFAULT '/'::character varying;


--
-- TOC entry 6703 (class 2604 OID 1443076)
-- Name: lithostratigraphy status; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy ALTER COLUMN status SET DEFAULT 'valid'::character varying;


--
-- TOC entry 6704 (class 2604 OID 1443077)
-- Name: lithostratigraphy local_naming; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy ALTER COLUMN local_naming SET DEFAULT false;


--
-- TOC entry 6705 (class 2604 OID 1443078)
-- Name: lithostratigraphy path; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy ALTER COLUMN path SET DEFAULT '/'::character varying;


--
-- TOC entry 6708 (class 2604 OID 1443079)
-- Name: loan_history id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_history ALTER COLUMN id SET DEFAULT nextval('darwin2.loan_history_id_seq'::regclass);


--
-- TOC entry 6723 (class 2604 OID 1443080)
-- Name: mineralogy status; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy ALTER COLUMN status SET DEFAULT 'valid'::character varying;


--
-- TOC entry 6724 (class 2604 OID 1443081)
-- Name: mineralogy local_naming; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy ALTER COLUMN local_naming SET DEFAULT false;


--
-- TOC entry 6725 (class 2604 OID 1443082)
-- Name: mineralogy path; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy ALTER COLUMN path SET DEFAULT '/'::character varying;


--
-- TOC entry 6735 (class 2604 OID 1443083)
-- Name: multimedia_todelete id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.multimedia_todelete ALTER COLUMN id SET DEFAULT nextval('darwin2.multimedia_todelete_id_seq'::regclass);


--
-- TOC entry 6820 (class 2604 OID 1443084)
-- Name: people is_physical; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people ALTER COLUMN is_physical SET DEFAULT true;


--
-- TOC entry 6821 (class 2604 OID 1443085)
-- Name: people title; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people ALTER COLUMN title SET DEFAULT ''::character varying;


--
-- TOC entry 6822 (class 2604 OID 1443086)
-- Name: people birth_date_mask; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people ALTER COLUMN birth_date_mask SET DEFAULT 0;


--
-- TOC entry 6823 (class 2604 OID 1443087)
-- Name: people birth_date; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people ALTER COLUMN birth_date SET DEFAULT '0001-01-01'::date;


--
-- TOC entry 6840 (class 2604 OID 1443088)
-- Name: people_sub_types id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_sub_types ALTER COLUMN id SET DEFAULT nextval('darwin2.people_sub_types_id_seq'::regclass);


--
-- TOC entry 6643 (class 2604 OID 1443089)
-- Name: properties id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.properties ALTER COLUMN id SET DEFAULT nextval('darwin2.properties_id_seq'::regclass);


--
-- TOC entry 6843 (class 2604 OID 1443090)
-- Name: property_type id; Type: DEFAULT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.property_type ALTER COLUMN id SET DEFAULT nextval('darwin2.property_type_id_seq'::regclass);


--
-- TOC entry 6845 (class 2604 OID 1443091)
-- Name: reports id; Type: DEFAULT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.reports ALTER COLUMN id SET DEFAULT nextval('darwin2.reports_id_seq'::regclass);


--
-- TOC entry 6774 (class 2604 OID 1443092)
-- Name: specimens id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens ALTER COLUMN id SET DEFAULT nextval('darwin2.specimens_id_seq'::regclass);


--
-- TOC entry 6851 (class 2604 OID 1443093)
-- Name: specimens_relationships id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships ALTER COLUMN id SET DEFAULT nextval('darwin2.specimens_relationships_id_seq'::regclass);


--
-- TOC entry 6853 (class 2604 OID 1443094)
-- Name: specimens_stable_ids id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_stable_ids ALTER COLUMN id SET DEFAULT nextval('darwin2.specimens_stable_ids_id_seq'::regclass);


--
-- TOC entry 6857 (class 2604 OID 1443095)
-- Name: staging_catalogue id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_catalogue ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_catalogue_id_seq'::regclass);


--
-- TOC entry 6858 (class 2604 OID 1443096)
-- Name: staging_collecting_methods id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_collecting_methods ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_collecting_methods_id_seq'::regclass);


--
-- TOC entry 6866 (class 2604 OID 1443097)
-- Name: staging_gtu_tag_groups id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu_tag_groups ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_gtu_tag_groups_id_seq'::regclass);


--
-- TOC entry 6867 (class 2604 OID 1443098)
-- Name: staging_info id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_info ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_info_id_seq'::regclass);


--
-- TOC entry 6875 (class 2604 OID 1443099)
-- Name: staging_multimedia id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_multimedia ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_multimedia_id_seq'::regclass);


--
-- TOC entry 6882 (class 2604 OID 1443100)
-- Name: staging_relationship id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship ALTER COLUMN id SET DEFAULT nextval('darwin2.staging_relationship_id_seq'::regclass);


--
-- TOC entry 6736 (class 2604 OID 1443101)
-- Name: tag_authority id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_authority ALTER COLUMN id SET DEFAULT nextval('darwin2.tag_authority_id_seq'::regclass);


--
-- TOC entry 6885 (class 2604 OID 1443102)
-- Name: tag_group_distinct id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_group_distinct ALTER COLUMN id SET DEFAULT nextval('darwin2.tag_group_distinct_id_seq'::regclass);


--
-- TOC entry 6661 (class 2604 OID 1443103)
-- Name: tags id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tags ALTER COLUMN id SET DEFAULT nextval('darwin2.tags_id_seq'::regclass);


--
-- TOC entry 6782 (class 2604 OID 1443104)
-- Name: taxonomy status; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy ALTER COLUMN status SET DEFAULT 'valid'::character varying;


--
-- TOC entry 6783 (class 2604 OID 1443105)
-- Name: taxonomy local_naming; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy ALTER COLUMN local_naming SET DEFAULT false;


--
-- TOC entry 6784 (class 2604 OID 1443106)
-- Name: taxonomy path; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy ALTER COLUMN path SET DEFAULT '/'::character varying;


--
-- TOC entry 6886 (class 2604 OID 1443107)
-- Name: taxonomy_authority id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_authority ALTER COLUMN id SET DEFAULT nextval('darwin2.taxonomy_authority_id_seq'::regclass);


--
-- TOC entry 6887 (class 2604 OID 1443108)
-- Name: taxonomy_metadata id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_metadata ALTER COLUMN id SET DEFAULT nextval('darwin2.taxonomy_metadata_id_seq'::regclass);


--
-- TOC entry 6660 (class 2604 OID 1443109)
-- Name: temporal_information id; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.temporal_information ALTER COLUMN id SET DEFAULT nextval('darwin2.temporal_information_id_seq'::regclass);


--
-- TOC entry 6892 (class 2604 OID 1443110)
-- Name: users is_physical; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users ALTER COLUMN is_physical SET DEFAULT true;


--
-- TOC entry 6893 (class 2604 OID 1443111)
-- Name: users title; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users ALTER COLUMN title SET DEFAULT ''::character varying;


--
-- TOC entry 6894 (class 2604 OID 1443112)
-- Name: users birth_date_mask; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users ALTER COLUMN birth_date_mask SET DEFAULT 0;


--
-- TOC entry 6895 (class 2604 OID 1443113)
-- Name: users birth_date; Type: DEFAULT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users ALTER COLUMN birth_date SET DEFAULT '0001-01-01'::date;


--
-- TOC entry 6907 (class 2604 OID 1443114)
-- Name: vernacular_names id; Type: DEFAULT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.vernacular_names ALTER COLUMN id SET DEFAULT nextval('darwin2.vernacular_names_id_seq'::regclass);


--
-- TOC entry 6908 (class 2604 OID 1443115)
-- Name: mapping_geonames pk; Type: DEFAULT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.mapping_geonames ALTER COLUMN pk SET DEFAULT nextval('georeferencing.mapping_geonames_pk_seq'::regclass);


--
-- TOC entry 6909 (class 2604 OID 1443116)
-- Name: mapping_geonames_distinct_categories pk; Type: DEFAULT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.mapping_geonames_distinct_categories ALTER COLUMN pk SET DEFAULT nextval('georeferencing.mapping_geonames_distinct_categories_pk_seq'::regclass);


--
-- TOC entry 6910 (class 2604 OID 1443117)
-- Name: t_gtu_country_to_geoname_iso pk; Type: DEFAULT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.t_gtu_country_to_geoname_iso ALTER COLUMN pk SET DEFAULT nextval('georeferencing.t_gtu_to_geoname_iso_pk_seq'::regclass);


--
-- TOC entry 6911 (class 2604 OID 1443118)
-- Name: tv_nominatim_georeference_rivers pk_serial; Type: DEFAULT; Schema: georeferencing; Owner: postgres
--

ALTER TABLE ONLY georeferencing.tv_nominatim_georeference_rivers ALTER COLUMN pk_serial SET DEFAULT nextval('georeferencing.tv_nominatim_georeference_pk_serial_seq'::regclass);


--
-- TOC entry 6912 (class 2604 OID 1443119)
-- Name: belgian_rivers_osm_20200402 gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.belgian_rivers_osm_20200402 ALTER COLUMN gid SET DEFAULT nextval('wfs."wfs.belgian_rivers_osm_20200402_gid_seq"'::regclass);


--
-- TOC entry 6913 (class 2604 OID 1443120)
-- Name: continents_esri gid; Type: DEFAULT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.continents_esri ALTER COLUMN gid SET DEFAULT nextval('wfs.continents_esri_gid_seq'::regclass);


--
-- TOC entry 6914 (class 2604 OID 1443121)
-- Name: eez_archipelagic_waters_v3 gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.eez_archipelagic_waters_v3 ALTER COLUMN gid SET DEFAULT nextval('wfs.eez_archipelagic_waters_v3_id_seq'::regclass);


--
-- TOC entry 6915 (class 2604 OID 1443122)
-- Name: eez_internal_waters_v3 gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.eez_internal_waters_v3 ALTER COLUMN gid SET DEFAULT nextval('wfs.eez_internal_waters_v3_id_seq'::regclass);


--
-- TOC entry 6916 (class 2604 OID 1443123)
-- Name: exclusive_economical_zone_v11 gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.exclusive_economical_zone_v11 ALTER COLUMN gid SET DEFAULT nextval('wfs.exclusive_economical_zone_v11_id_seq'::regclass);


--
-- TOC entry 6917 (class 2604 OID 1443124)
-- Name: high_seas_v1 id; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.high_seas_v1 ALTER COLUMN id SET DEFAULT nextval('wfs."high_Seas_v1_id_seq"'::regclass);


--
-- TOC entry 6918 (class 2604 OID 1443125)
-- Name: ne_10m_admin_0_countries gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_0_countries ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_admin_0_countries_gid_seq'::regclass);


--
-- TOC entry 6923 (class 2604 OID 1443126)
-- Name: ne_10m_admin_0_countries_lakes gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_0_countries_lakes ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_admin_0_countries_lakes_gid_seq'::regclass);


--
-- TOC entry 6919 (class 2604 OID 1443127)
-- Name: ne_10m_admin_1_states_provinces gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_1_states_provinces ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_admin_1_states_provinces_gid_seq'::regclass);


--
-- TOC entry 6924 (class 2604 OID 1443128)
-- Name: ne_10m_admin_1_states_provinces_lakes gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_1_states_provinces_lakes ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_admin_1_states_provinces_lakes_gid_seq'::regclass);


--
-- TOC entry 6920 (class 2604 OID 1443129)
-- Name: ne_10m_geography_marine_polys gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_geography_marine_polys ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_geography_marine_polys_gid_seq'::regclass);


--
-- TOC entry 6921 (class 2604 OID 1443130)
-- Name: ne_10m_geography_regions_polys gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_geography_regions_polys ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_geography_regions_polys_gid_seq'::regclass);


--
-- TOC entry 6925 (class 2604 OID 1443131)
-- Name: ne_10m_lakes gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_lakes_gid_seq'::regclass);


--
-- TOC entry 6926 (class 2604 OID 1443132)
-- Name: ne_10m_lakes_europes gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes_europes ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_lakes_europes_gid_seq'::regclass);


--
-- TOC entry 6927 (class 2604 OID 1443133)
-- Name: ne_10m_lakes_north_america gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes_north_america ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_lakes_north_america_gid_seq'::regclass);


--
-- TOC entry 6928 (class 2604 OID 1443134)
-- Name: ne_10m_populated_places gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_populated_places ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_populated_places_gid_seq'::regclass);


--
-- TOC entry 6929 (class 2604 OID 1443135)
-- Name: ne_10m_reefs gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_reefs ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_reefs_gid_seq'::regclass);


--
-- TOC entry 6930 (class 2604 OID 1443136)
-- Name: ne_10m_urban_areas_landscan gid; Type: DEFAULT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_urban_areas_landscan ALTER COLUMN gid SET DEFAULT nextval('wfs.ne_10m_urban_areas_landscan_gid_seq'::regclass);


--
-- TOC entry 6922 (class 2604 OID 1443137)
-- Name: osm_20200505_boundary_administrative_belgium gid; Type: DEFAULT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.osm_20200505_boundary_administrative_belgium ALTER COLUMN gid SET DEFAULT nextval('wfs.osm_20200505_boundary_administrative_belgium_id_seq'::regclass);


--
-- TOC entry 6931 (class 2604 OID 1443138)
-- Name: osm_belgium_20200505_8_villages gid; Type: DEFAULT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.osm_belgium_20200505_8_villages ALTER COLUMN gid SET DEFAULT nextval('wfs.t_osm_belgium_20200505_8_villages_id_seq'::regclass);


--
-- TOC entry 7017 (class 2606 OID 2856221)
-- Name: collections pk_collections; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT pk_collections PRIMARY KEY (id);


--
-- TOC entry 788 (class 1259 OID 2856222)
-- Name: mv_eml; Type: MATERIALIZED VIEW; Schema: ipt; Owner: ipt_viewer
--

CREATE MATERIALIZED VIEW ipt.mv_eml AS
 SELECT ((((((('The '::text || c.title_en) || ' contains '::text) || c.total) || ' digitised specimens of '::text) || c.nb_species) || ' taxa. The following classes are included: '::text) || c.class_taxonomic_coverage) AS abstract,
    c.total AS nb_specimens,
    c.nb_species,
    NULL::text AS ig_num,
    c.ranks,
    NULL::text AS existing_code,
    c.id,
    c.name,
    c.code,
    c.title_en,
    c.title_nl,
    c.title_fr,
    c.profile,
    c.path,
    c.geographic_coverage,
    c.min_lon,
    c.max_lon,
    c.min_lat,
    c.max_lat,
    c.start_date,
    c.end_date,
    ('natural history collection, RBINS, DaRWIN, '::text || (c.name)::text) AS keywords,
    'Royal Belgian Institute for Natural Sciences'::text AS institute_name,
    'Department of Scientific Heritage Service'::text AS institute_dept_abbrev,
    (((curator.given_name)::text || ' '::text) || (curator.family_name)::text) AS boss,
    uc1.entry AS boss_email,
    'curator'::text AS boss_role,
    (((staff.given_name)::text || ' '::text) || (staff.family_name)::text) AS subboss,
    uc2.entry AS subboss_email,
    'Collection manager'::text AS subboss_role,
    c.class_taxonomic_coverage,
    c.order_taxonomic_coverage
   FROM ((((( SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'aves'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'belgianmarineinvertebrates'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'brachiopoda'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'bryozoa'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'cheliceratamarine'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'cnidaria'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'crustacea'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'echinodermata'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'mammalia'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'mollusca'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'pisces'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'reptilia'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'rotifera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'vertebratestypes'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'acari'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'amphibia'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'araneae'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'coleoptera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'diptera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'heterocera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'hymenoptera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'orthoptera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path
        UNION ALL
         SELECT c_1.id,
            c_1.name,
            c_1.name_indexed AS code,
            c_1.title_en,
            c_1.title_nl,
            c_1.title_fr,
            c_1.profile,
            c_1.path,
            string_agg(DISTINCT mv_darwin_ipt_rbins.country, ', '::text) AS geographic_coverage,
            min(mv_darwin_ipt_rbins.decimal_longitude) AS min_lon,
            max(mv_darwin_ipt_rbins.decimal_longitude) AS max_lon,
            min(mv_darwin_ipt_rbins.decimal_latitude) AS min_lat,
            max(mv_darwin_ipt_rbins.decimal_latitude) AS max_lat,
            min(mv_darwin_ipt_rbins.event_date) AS start_date,
            max(mv_darwin_ipt_rbins.event_date) AS end_date,
            c_1.main_manager_ref,
            c_1.staff_ref,
            count(*) AS total,
            count(DISTINCT mv_darwin_ipt_rbins.scientific_name) AS nb_species,
            string_agg(DISTINCT (mv_darwin_ipt_rbins.taxon_rank)::text, ', '::text) AS ranks,
            string_agg(DISTINCT mv_darwin_ipt_rbins.class, ', '::text) AS class_taxonomic_coverage,
            string_agg(DISTINCT mv_darwin_ipt_rbins.ordo, ', '::text) AS order_taxonomic_coverage
           FROM (ipt.mv_darwin_ipt_rbins
             LEFT JOIN darwin2.collections c_1 ON ((mv_darwin_ipt_rbins.ndwc_collection_path ~~ (('%/'::text || c_1.id) || '/%'::text))))
          WHERE ((c_1.name_indexed)::text = 'rhopalocera'::text)
          GROUP BY c_1.id, c_1.name, c_1.name_indexed, c_1.title_en, c_1.title_nl, c_1.title_fr, c_1.profile, c_1.path) c
     LEFT JOIN darwin2.users curator ON ((c.main_manager_ref = curator.id)))
     LEFT JOIN darwin2.users_comm uc1 ON (((uc1.person_user_ref = curator.id) AND ((uc1.comm_type)::text = 'e-mail'::text))))
     LEFT JOIN darwin2.users staff ON ((c.staff_ref = staff.id)))
     LEFT JOIN darwin2.users_comm uc2 ON (((uc2.person_user_ref = staff.id) AND ((uc2.comm_type)::text = 'e-mail'::text))))
  ORDER BY c.code
  WITH NO DATA;


ALTER TABLE ipt.mv_eml OWNER TO ipt_viewer;

--
-- TOC entry 6939 (class 2606 OID 2856231)
-- Name: authority_domain authority_domain_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.authority_domain
    ADD CONSTRAINT authority_domain_pk PRIMARY KEY (id);


--
-- TOC entry 6941 (class 2606 OID 2856233)
-- Name: authority_domain authority_domain_uq; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.authority_domain
    ADD CONSTRAINT authority_domain_uq UNIQUE (name);


--
-- TOC entry 7058 (class 2606 OID 2856235)
-- Name: temporal_information dates_pkey; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.temporal_information
    ADD CONSTRAINT dates_pkey PRIMARY KEY (id);


--
-- TOC entry 7341 (class 2606 OID 2856237)
-- Name: tag_group_distinct id; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_group_distinct
    ADD CONSTRAINT id PRIMARY KEY (id);


--
-- TOC entry 7085 (class 2606 OID 2856239)
-- Name: identifiers identifiers_pkey; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.identifiers
    ADD CONSTRAINT identifiers_pkey PRIMARY KEY (id);


--
-- TOC entry 7279 (class 2606 OID 2856241)
-- Name: people_sub_types people_sub_types_pkey; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_sub_types
    ADD CONSTRAINT people_sub_types_pkey PRIMARY KEY (id);


--
-- TOC entry 6944 (class 2606 OID 2856243)
-- Name: bibliography pk_bibliography; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.bibliography
    ADD CONSTRAINT pk_bibliography PRIMARY KEY (id);


--
-- TOC entry 6949 (class 2606 OID 2856245)
-- Name: catalogue_bibliography pk_catalogue_bibliography; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_bibliography
    ADD CONSTRAINT pk_catalogue_bibliography PRIMARY KEY (id);


--
-- TOC entry 6953 (class 2606 OID 2856247)
-- Name: catalogue_levels pk_catalogue_levels; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_levels
    ADD CONSTRAINT pk_catalogue_levels PRIMARY KEY (id);


--
-- TOC entry 6962 (class 2606 OID 2856249)
-- Name: catalogue_people pk_catalogue_people; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_people
    ADD CONSTRAINT pk_catalogue_people PRIMARY KEY (id);


--
-- TOC entry 6976 (class 2606 OID 2856251)
-- Name: chronostratigraphy pk_chronostratigraphy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy
    ADD CONSTRAINT pk_chronostratigraphy PRIMARY KEY (id);


--
-- TOC entry 6981 (class 2606 OID 2856253)
-- Name: classification_keywords pk_classification_keywords_id; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.classification_keywords
    ADD CONSTRAINT pk_classification_keywords_id PRIMARY KEY (id);


--
-- TOC entry 6994 (class 2606 OID 2856255)
-- Name: codes pk_codes; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.codes
    ADD CONSTRAINT pk_codes PRIMARY KEY (id);


--
-- TOC entry 7000 (class 2606 OID 2856257)
-- Name: collecting_methods pk_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collecting_methods
    ADD CONSTRAINT pk_collecting_methods PRIMARY KEY (id);


--
-- TOC entry 7006 (class 2606 OID 2856259)
-- Name: collecting_tools pk_collecting_tools; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collecting_tools
    ADD CONSTRAINT pk_collecting_tools PRIMARY KEY (id);


--
-- TOC entry 7013 (class 2606 OID 2856261)
-- Name: collection_maintenance pk_collection_maintenance; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collection_maintenance
    ADD CONSTRAINT pk_collection_maintenance PRIMARY KEY (id);


--
-- TOC entry 7025 (class 2606 OID 2856263)
-- Name: collections_rights pk_collections_right; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections_rights
    ADD CONSTRAINT pk_collections_right PRIMARY KEY (id);


--
-- TOC entry 7033 (class 2606 OID 2856265)
-- Name: comments pk_comments; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.comments
    ADD CONSTRAINT pk_comments PRIMARY KEY (id);


--
-- TOC entry 7072 (class 2606 OID 2856267)
-- Name: expeditions pk_expeditions; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.expeditions
    ADD CONSTRAINT pk_expeditions PRIMARY KEY (id);


--
-- TOC entry 7077 (class 2606 OID 2856269)
-- Name: ext_links pk_ext_links; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.ext_links
    ADD CONSTRAINT pk_ext_links PRIMARY KEY (id);


--
-- TOC entry 7081 (class 2606 OID 2856271)
-- Name: flat_dict pk_flat_dict; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.flat_dict
    ADD CONSTRAINT pk_flat_dict PRIMARY KEY (id);


--
-- TOC entry 7056 (class 2606 OID 2856273)
-- Name: gtu pk_gtu; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.gtu
    ADD CONSTRAINT pk_gtu PRIMARY KEY (id);


--
-- TOC entry 7047 (class 2606 OID 2856275)
-- Name: identifications pk_identifications; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.identifications
    ADD CONSTRAINT pk_identifications PRIMARY KEY (id);


--
-- TOC entry 7091 (class 2606 OID 2856277)
-- Name: igs pk_igs; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.igs
    ADD CONSTRAINT pk_igs PRIMARY KEY (id);


--
-- TOC entry 7095 (class 2606 OID 2856279)
-- Name: imports pk_import; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.imports
    ADD CONSTRAINT pk_import PRIMARY KEY (id);


--
-- TOC entry 7100 (class 2606 OID 2856281)
-- Name: informative_workflow pk_informative_workflow; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.informative_workflow
    ADD CONSTRAINT pk_informative_workflow PRIMARY KEY (id);


--
-- TOC entry 7105 (class 2606 OID 2856283)
-- Name: insurances pk_insurances; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.insurances
    ADD CONSTRAINT pk_insurances PRIMARY KEY (id);


--
-- TOC entry 7114 (class 2606 OID 2856285)
-- Name: lithology pk_lithology; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology
    ADD CONSTRAINT pk_lithology PRIMARY KEY (id);


--
-- TOC entry 7123 (class 2606 OID 2856287)
-- Name: lithostratigraphy pk_lithostratigraphy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy
    ADD CONSTRAINT pk_lithostratigraphy PRIMARY KEY (id);


--
-- TOC entry 7127 (class 2606 OID 2856289)
-- Name: loan_history pk_loan_history; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_history
    ADD CONSTRAINT pk_loan_history PRIMARY KEY (id);


--
-- TOC entry 7132 (class 2606 OID 2856291)
-- Name: loan_items pk_loan_items; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_items
    ADD CONSTRAINT pk_loan_items PRIMARY KEY (id);


--
-- TOC entry 7138 (class 2606 OID 2856293)
-- Name: loan_rights pk_loan_rights; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_rights
    ADD CONSTRAINT pk_loan_rights PRIMARY KEY (id);


--
-- TOC entry 7145 (class 2606 OID 2856295)
-- Name: loan_status pk_loan_status; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_status
    ADD CONSTRAINT pk_loan_status PRIMARY KEY (id);


--
-- TOC entry 7148 (class 2606 OID 2856297)
-- Name: loans pk_loans; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loans
    ADD CONSTRAINT pk_loans PRIMARY KEY (id);


--
-- TOC entry 7157 (class 2606 OID 2856299)
-- Name: mineralogy pk_mineralogy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy
    ADD CONSTRAINT pk_mineralogy PRIMARY KEY (id);


--
-- TOC entry 7163 (class 2606 OID 2856301)
-- Name: multimedia pk_multimedia; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.multimedia
    ADD CONSTRAINT pk_multimedia PRIMARY KEY (id);


--
-- TOC entry 7165 (class 2606 OID 2856303)
-- Name: multimedia_todelete pk_multimedia_todelete; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.multimedia_todelete
    ADD CONSTRAINT pk_multimedia_todelete PRIMARY KEY (id);


--
-- TOC entry 7246 (class 2606 OID 2856305)
-- Name: my_saved_searches pk_my_saved_searches; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_saved_searches
    ADD CONSTRAINT pk_my_saved_searches PRIMARY KEY (id);


--
-- TOC entry 7251 (class 2606 OID 2856307)
-- Name: my_widgets pk_my_widgets; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_widgets
    ADD CONSTRAINT pk_my_widgets PRIMARY KEY (id);


--
-- TOC entry 7258 (class 2606 OID 2856309)
-- Name: people pk_people; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people
    ADD CONSTRAINT pk_people PRIMARY KEY (id);


--
-- TOC entry 7264 (class 2606 OID 2856311)
-- Name: people_addresses pk_people_addresses; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_addresses
    ADD CONSTRAINT pk_people_addresses PRIMARY KEY (id);


--
-- TOC entry 7268 (class 2606 OID 2856313)
-- Name: people_comm pk_people_comm; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_comm
    ADD CONSTRAINT pk_people_comm PRIMARY KEY (id);


--
-- TOC entry 7271 (class 2606 OID 2856315)
-- Name: people_languages pk_people_languages; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_languages
    ADD CONSTRAINT pk_people_languages PRIMARY KEY (id);


--
-- TOC entry 7277 (class 2606 OID 2856317)
-- Name: people_relationships pk_people_relationships; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_relationships
    ADD CONSTRAINT pk_people_relationships PRIMARY KEY (id);


--
-- TOC entry 7042 (class 2606 OID 2856319)
-- Name: properties pk_properties; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.properties
    ADD CONSTRAINT pk_properties PRIMARY KEY (id);


--
-- TOC entry 7290 (class 2606 OID 2856321)
-- Name: reports pk_reports; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.reports
    ADD CONSTRAINT pk_reports PRIMARY KEY (id);


--
-- TOC entry 7293 (class 2606 OID 2856323)
-- Name: specimen_collecting_methods pk_specimen_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_methods
    ADD CONSTRAINT pk_specimen_collecting_methods PRIMARY KEY (id);


--
-- TOC entry 7298 (class 2606 OID 2856325)
-- Name: specimen_collecting_tools pk_specimen_collecting_tools; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_tools
    ADD CONSTRAINT pk_specimen_collecting_tools PRIMARY KEY (id);


--
-- TOC entry 7235 (class 2606 OID 2856327)
-- Name: specimens pk_specimens; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT pk_specimens PRIMARY KEY (id);


--
-- TOC entry 7306 (class 2606 OID 2856363)
-- Name: specimens_relationships pk_specimens_relationships; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT pk_specimens_relationships PRIMARY KEY (id);


--
-- TOC entry 6937 (class 2606 OID 2856365)
-- Name: staging pk_staging; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT pk_staging PRIMARY KEY (id);


--
-- TOC entry 7315 (class 2606 OID 2856367)
-- Name: staging_catalogue pk_staging_catalogue; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_catalogue
    ADD CONSTRAINT pk_staging_catalogue PRIMARY KEY (id);


--
-- TOC entry 7317 (class 2606 OID 2856369)
-- Name: staging_collecting_methods pk_staging_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_collecting_methods
    ADD CONSTRAINT pk_staging_collecting_methods PRIMARY KEY (id);


--
-- TOC entry 7325 (class 2606 OID 2856371)
-- Name: staging_gtu_tag_groups pk_staging_gtu_tag_groups; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu_tag_groups
    ADD CONSTRAINT pk_staging_gtu_tag_groups PRIMARY KEY (id);


--
-- TOC entry 7327 (class 2606 OID 2856373)
-- Name: staging_info pk_staging_info; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_info
    ADD CONSTRAINT pk_staging_info PRIMARY KEY (id);


--
-- TOC entry 7330 (class 2606 OID 2856375)
-- Name: staging_people pk_staging_people; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_people
    ADD CONSTRAINT pk_staging_people PRIMARY KEY (id);


--
-- TOC entry 7333 (class 2606 OID 2856377)
-- Name: staging_relationship pk_staging_relationship; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT pk_staging_relationship PRIMARY KEY (id);


--
-- TOC entry 7335 (class 2606 OID 2856379)
-- Name: staging_tag_groups pk_staging_tag_groups; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_tag_groups
    ADD CONSTRAINT pk_staging_tag_groups PRIMARY KEY (id);


--
-- TOC entry 6986 (class 2606 OID 2856381)
-- Name: classification_synonymies pk_synonym_id; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.classification_synonymies
    ADD CONSTRAINT pk_synonym_id PRIMARY KEY (id);


--
-- TOC entry 7175 (class 2606 OID 2856383)
-- Name: tag_groups pk_tag_groups; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_groups
    ADD CONSTRAINT pk_tag_groups PRIMARY KEY (id);


--
-- TOC entry 7242 (class 2606 OID 2856385)
-- Name: taxonomy pk_taxonomy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy
    ADD CONSTRAINT pk_taxonomy PRIMARY KEY (id);


--
-- TOC entry 7354 (class 2606 OID 2856387)
-- Name: users pk_users; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users
    ADD CONSTRAINT pk_users PRIMARY KEY (id);


--
-- TOC entry 7360 (class 2606 OID 2856389)
-- Name: users_addresses pk_users_addresses; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_addresses
    ADD CONSTRAINT pk_users_addresses PRIMARY KEY (id);


--
-- TOC entry 7364 (class 2606 OID 2856391)
-- Name: users_comm pk_users_comm; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_comm
    ADD CONSTRAINT pk_users_comm PRIMARY KEY (id);


--
-- TOC entry 7366 (class 2606 OID 2856393)
-- Name: users_login_infos pk_users_login_infos; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_login_infos
    ADD CONSTRAINT pk_users_login_infos PRIMARY KEY (id);


--
-- TOC entry 7376 (class 2606 OID 2856395)
-- Name: users_tracking pk_users_tracking_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_tracking
    ADD CONSTRAINT pk_users_tracking_pk PRIMARY KEY (id);


--
-- TOC entry 7385 (class 2606 OID 2856397)
-- Name: vernacular_names pk_vernacular_names; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.vernacular_names
    ADD CONSTRAINT pk_vernacular_names PRIMARY KEY (id);


--
-- TOC entry 7284 (class 2606 OID 2856399)
-- Name: property_tag_authority property_tag_authority_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.property_tag_authority
    ADD CONSTRAINT property_tag_authority_pk PRIMARY KEY (tag_authority_ref, property_type_id, tag_authority_match_predicate);


--
-- TOC entry 7286 (class 2606 OID 2856401)
-- Name: property_type property_type_pk; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.property_type
    ADD CONSTRAINT property_type_pk PRIMARY KEY (id);


--
-- TOC entry 7308 (class 2606 OID 2856403)
-- Name: specimens_stable_ids specimens_stable_ids_pkey; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_stable_ids
    ADD CONSTRAINT specimens_stable_ids_pkey PRIMARY KEY (id);


--
-- TOC entry 7323 (class 2606 OID 2856405)
-- Name: staging_gtu staging_gtu_pkey1; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu
    ADD CONSTRAINT staging_gtu_pkey1 PRIMARY KEY (id);


--
-- TOC entry 7343 (class 2606 OID 2856407)
-- Name: tag_group_distinct subgroup_group_value_unique; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_group_distinct
    ADD CONSTRAINT subgroup_group_value_unique UNIQUE (tag_value, group_name_indexed, sub_group_name_indexed);


--
-- TOC entry 7168 (class 2606 OID 2856409)
-- Name: tag_authority tag_authority_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_authority
    ADD CONSTRAINT tag_authority_pk PRIMARY KEY (id);


--
-- TOC entry 7339 (class 2606 OID 2856411)
-- Name: tag_authority_tag_authority tag_authority_tag_authority_pk; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.tag_authority_tag_authority
    ADD CONSTRAINT tag_authority_tag_authority_pk PRIMARY KEY (tag_authority_ref1, tag_authority_ref2, tag_authority_predicate);


--
-- TOC entry 7170 (class 2606 OID 2856413)
-- Name: tag_authority tag_authority_uq; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_authority
    ADD CONSTRAINT tag_authority_uq UNIQUE (domain_ref, url);


--
-- TOC entry 7180 (class 2606 OID 2856415)
-- Name: tag_tag_authority tag_tag_authority_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_tag_authority
    ADD CONSTRAINT tag_tag_authority_pk PRIMARY KEY (tag_authority_ref, tag_group_distinct_ref, tag_authority_match_predicate);


--
-- TOC entry 7346 (class 2606 OID 2856417)
-- Name: taxonomy_authority taxonomy_authority_pk; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_authority
    ADD CONSTRAINT taxonomy_authority_pk PRIMARY KEY (id);


--
-- TOC entry 7351 (class 2606 OID 2856419)
-- Name: taxonomy_metadata taxonomy_metadata_pkey; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_metadata
    ADD CONSTRAINT taxonomy_metadata_pkey PRIMARY KEY (id);


--
-- TOC entry 7288 (class 2606 OID 2856421)
-- Name: property_type type_uq; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.property_type
    ADD CONSTRAINT type_uq UNIQUE (type);


--
-- TOC entry 6946 (class 2606 OID 2856423)
-- Name: bibliography unq_bibliography; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.bibliography
    ADD CONSTRAINT unq_bibliography UNIQUE (title_indexed, type, year);


--
-- TOC entry 6951 (class 2606 OID 2856425)
-- Name: catalogue_bibliography unq_catalogue_bibliography; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_bibliography
    ADD CONSTRAINT unq_catalogue_bibliography UNIQUE (referenced_relation, record_id, bibliography_ref);


--
-- TOC entry 6955 (class 2606 OID 2856427)
-- Name: catalogue_levels unq_catalogue_levels; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_levels
    ADD CONSTRAINT unq_catalogue_levels UNIQUE (level_type, level_name);


--
-- TOC entry 6964 (class 2606 OID 2856429)
-- Name: catalogue_people unq_catalogue_people; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_people
    ADD CONSTRAINT unq_catalogue_people UNIQUE (referenced_relation, people_type, people_sub_type, record_id, people_ref);


--
-- TOC entry 6967 (class 2606 OID 2856431)
-- Name: catalogue_relationships unq_catalogue_relationships; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_relationships
    ADD CONSTRAINT unq_catalogue_relationships UNIQUE (referenced_relation, relationship_type, record_id_1, record_id_2);


--
-- TOC entry 6978 (class 2606 OID 2856433)
-- Name: chronostratigraphy unq_chronostratigraphy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy
    ADD CONSTRAINT unq_chronostratigraphy UNIQUE (path, name_indexed, level_ref);


--
-- TOC entry 6996 (class 2606 OID 2856435)
-- Name: codes unq_codes; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.codes
    ADD CONSTRAINT unq_codes UNIQUE (referenced_relation, record_id, full_code_indexed, code_category);


--
-- TOC entry 7002 (class 2606 OID 2856437)
-- Name: collecting_methods unq_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collecting_methods
    ADD CONSTRAINT unq_collecting_methods UNIQUE (method_indexed);


--
-- TOC entry 7008 (class 2606 OID 2856439)
-- Name: collecting_tools unq_collecting_tools; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collecting_tools
    ADD CONSTRAINT unq_collecting_tools UNIQUE (tool_indexed);


--
-- TOC entry 7019 (class 2606 OID 2856441)
-- Name: collections unq_collections; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT unq_collections UNIQUE (institution_ref, path, code);


--
-- TOC entry 7021 (class 2606 OID 2856443)
-- Name: collections unq_collections_code; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT unq_collections_code UNIQUE (code);


--
-- TOC entry 7027 (class 2606 OID 2856445)
-- Name: collections_rights unq_collections_rights; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections_rights
    ADD CONSTRAINT unq_collections_rights UNIQUE (collection_ref, user_ref);


--
-- TOC entry 7074 (class 2606 OID 2856447)
-- Name: expeditions unq_expeditions; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.expeditions
    ADD CONSTRAINT unq_expeditions UNIQUE (name_indexed, expedition_from_date, expedition_from_date_mask, expedition_to_date, expedition_to_date_mask);


--
-- TOC entry 7079 (class 2606 OID 2856449)
-- Name: ext_links unq_ext_links; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.ext_links
    ADD CONSTRAINT unq_ext_links UNIQUE (referenced_relation, record_id, url);


--
-- TOC entry 7083 (class 2606 OID 2856451)
-- Name: flat_dict unq_flat_dict; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.flat_dict
    ADD CONSTRAINT unq_flat_dict UNIQUE (dict_value, dict_field, referenced_relation, dict_depend);


--
-- TOC entry 7049 (class 2606 OID 2856453)
-- Name: identifications unq_identifications; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.identifications
    ADD CONSTRAINT unq_identifications UNIQUE (referenced_relation, record_id, notion_concerned, notion_date, value_defined_indexed);


--
-- TOC entry 7093 (class 2606 OID 2856455)
-- Name: igs unq_igs; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.igs
    ADD CONSTRAINT unq_igs UNIQUE (ig_num);


--
-- TOC entry 7116 (class 2606 OID 2856457)
-- Name: lithology unq_lithology; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology
    ADD CONSTRAINT unq_lithology UNIQUE (path, name_indexed, level_ref);


--
-- TOC entry 7125 (class 2606 OID 2856459)
-- Name: lithostratigraphy unq_lithostratigraphy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy
    ADD CONSTRAINT unq_lithostratigraphy UNIQUE (path, name_indexed, level_ref);


--
-- TOC entry 7134 (class 2606 OID 2856461)
-- Name: loan_items unq_loan_items; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_items
    ADD CONSTRAINT unq_loan_items UNIQUE (loan_ref, specimen_ref);


--
-- TOC entry 7140 (class 2606 OID 2856463)
-- Name: loan_rights unq_loan_rights; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_rights
    ADD CONSTRAINT unq_loan_rights UNIQUE (loan_ref, user_ref);


--
-- TOC entry 7159 (class 2606 OID 2856465)
-- Name: mineralogy unq_mineralogy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy
    ADD CONSTRAINT unq_mineralogy UNIQUE (path, name_indexed, level_ref, code);


--
-- TOC entry 7248 (class 2606 OID 2856467)
-- Name: my_saved_searches unq_my_saved_searches; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_saved_searches
    ADD CONSTRAINT unq_my_saved_searches UNIQUE (user_ref, name);


--
-- TOC entry 7253 (class 2606 OID 2856469)
-- Name: my_widgets unq_my_widgets; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_widgets
    ADD CONSTRAINT unq_my_widgets UNIQUE (user_ref, category, group_name);


--
-- TOC entry 7260 (class 2606 OID 2856471)
-- Name: people unq_people; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people
    ADD CONSTRAINT unq_people UNIQUE (is_physical, gender, formated_name_unique, birth_date, birth_date_mask, end_date, end_date_mask);


--
-- TOC entry 7273 (class 2606 OID 2856473)
-- Name: people_languages unq_people_languages; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_languages
    ADD CONSTRAINT unq_people_languages UNIQUE (people_ref, language_country);


--
-- TOC entry 7282 (class 2606 OID 2856475)
-- Name: possible_upper_levels unq_possible_upper_levels; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.possible_upper_levels
    ADD CONSTRAINT unq_possible_upper_levels UNIQUE (level_ref, level_upper_ref);


--
-- TOC entry 7295 (class 2606 OID 2856477)
-- Name: specimen_collecting_methods unq_specimen_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_methods
    ADD CONSTRAINT unq_specimen_collecting_methods UNIQUE (specimen_ref, collecting_method_ref);


--
-- TOC entry 7300 (class 2606 OID 2856479)
-- Name: specimen_collecting_tools unq_specimen_collecting_tools; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_tools
    ADD CONSTRAINT unq_specimen_collecting_tools UNIQUE (specimen_ref, collecting_tool_ref);


--
-- TOC entry 7107 (class 2606 OID 2856481)
-- Name: insurances unq_specimen_parts_insurances; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.insurances
    ADD CONSTRAINT unq_specimen_parts_insurances UNIQUE (referenced_relation, record_id, date_from, date_to, insurer_ref);


--
-- TOC entry 7319 (class 2606 OID 2856483)
-- Name: staging_collecting_methods unq_staging_collecting_methods; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_collecting_methods
    ADD CONSTRAINT unq_staging_collecting_methods UNIQUE (staging_ref, collecting_method_ref);


--
-- TOC entry 7337 (class 2606 OID 2856485)
-- Name: staging_tag_groups unq_staging_tag_groups; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_tag_groups
    ADD CONSTRAINT unq_staging_tag_groups UNIQUE (staging_ref, group_name, sub_group_name);


--
-- TOC entry 6988 (class 2606 OID 2856487)
-- Name: classification_synonymies unq_synonym; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.classification_synonymies
    ADD CONSTRAINT unq_synonym UNIQUE (referenced_relation, record_id, group_id);


--
-- TOC entry 7177 (class 2606 OID 2856489)
-- Name: tag_groups unq_tag_groups; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_groups
    ADD CONSTRAINT unq_tag_groups UNIQUE (gtu_ref, group_name_indexed, sub_group_name_indexed);


--
-- TOC entry 7244 (class 2606 OID 2856491)
-- Name: taxonomy unq_taxonomy; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy
    ADD CONSTRAINT unq_taxonomy UNIQUE (path, name_indexed, level_ref, metadata_ref);


--
-- TOC entry 7349 (class 2606 OID 2856493)
-- Name: taxonomy_authority unq_taxonomy_authority; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_authority
    ADD CONSTRAINT unq_taxonomy_authority UNIQUE (url, taxonomy_ref);


--
-- TOC entry 7060 (class 2606 OID 2856495)
-- Name: temporal_information unq_temporal_information_specimen_ref; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.temporal_information
    ADD CONSTRAINT unq_temporal_information_specimen_ref UNIQUE (specimen_ref);


--
-- TOC entry 7356 (class 2606 OID 2856497)
-- Name: users unq_users; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users
    ADD CONSTRAINT unq_users UNIQUE (is_physical, gender, formated_name_unique, birth_date, birth_date_mask);


--
-- TOC entry 7368 (class 2606 OID 2856499)
-- Name: users_login_infos unq_users_login_infos; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_login_infos
    ADD CONSTRAINT unq_users_login_infos UNIQUE (user_ref, login_type);


--
-- TOC entry 7370 (class 2606 OID 2856501)
-- Name: users_login_infos unq_users_login_infos_user_name; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_login_infos
    ADD CONSTRAINT unq_users_login_infos_user_name UNIQUE (user_name, login_type);


--
-- TOC entry 7387 (class 2606 OID 2856503)
-- Name: vernacular_names unq_vernacular_names; Type: CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.vernacular_names
    ADD CONSTRAINT unq_vernacular_names UNIQUE (referenced_relation, record_id, community_indexed, name_indexed);


--
-- TOC entry 7087 (class 2606 OID 2856505)
-- Name: identifiers uq_identifiers; Type: CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.identifiers
    ADD CONSTRAINT uq_identifiers UNIQUE (referenced_relation, record_id, protocol);


--
-- TOC entry 7391 (class 2606 OID 2856507)
-- Name: mapping_geonames_distinct_categories mapping_geonames_distinct_categories_pkey; Type: CONSTRAINT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.mapping_geonames_distinct_categories
    ADD CONSTRAINT mapping_geonames_distinct_categories_pkey PRIMARY KEY (pk);


--
-- TOC entry 7393 (class 2606 OID 2856509)
-- Name: t_gtu_country_to_geoname_iso pk_country_gtu; Type: CONSTRAINT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.t_gtu_country_to_geoname_iso
    ADD CONSTRAINT pk_country_gtu PRIMARY KEY (pk);


--
-- TOC entry 7389 (class 2606 OID 2856511)
-- Name: mapping_geonames pk_mapping_geonames; Type: CONSTRAINT; Schema: georeferencing; Owner: darwin2
--

ALTER TABLE ONLY georeferencing.mapping_geonames
    ADD CONSTRAINT pk_mapping_geonames PRIMARY KEY (pk);


--
-- TOC entry 7395 (class 2606 OID 2856513)
-- Name: tv_nominatim_georeference_rivers pk_nominatim_georeference; Type: CONSTRAINT; Schema: georeferencing; Owner: postgres
--

ALTER TABLE ONLY georeferencing.tv_nominatim_georeference_rivers
    ADD CONSTRAINT pk_nominatim_georeference PRIMARY KEY (pk_serial);


--
-- TOC entry 7399 (class 2606 OID 2856515)
-- Name: continents_esri continents_esri_pkey; Type: CONSTRAINT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.continents_esri
    ADD CONSTRAINT continents_esri_pkey PRIMARY KEY (gid);


--
-- TOC entry 7402 (class 2606 OID 2856517)
-- Name: eez_archipelagic_waters_v3 eez_archipelagic_waters_v3_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.eez_archipelagic_waters_v3
    ADD CONSTRAINT eez_archipelagic_waters_v3_pkey PRIMARY KEY (gid);


--
-- TOC entry 7405 (class 2606 OID 2856519)
-- Name: eez_internal_waters_v3 eez_internal_waters_v3_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.eez_internal_waters_v3
    ADD CONSTRAINT eez_internal_waters_v3_pkey PRIMARY KEY (gid);


--
-- TOC entry 7408 (class 2606 OID 2856521)
-- Name: exclusive_economical_zone_v11 exclusive_economical_zone_v11_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.exclusive_economical_zone_v11
    ADD CONSTRAINT exclusive_economical_zone_v11_pkey PRIMARY KEY (gid);


--
-- TOC entry 7411 (class 2606 OID 2856523)
-- Name: high_seas_v1 high_Seas_v1_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.high_seas_v1
    ADD CONSTRAINT "high_Seas_v1_pkey" PRIMARY KEY (id);


--
-- TOC entry 7424 (class 2606 OID 2856525)
-- Name: ne_10m_admin_0_countries_lakes ne_10m_admin_0_countries_lakes_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_0_countries_lakes
    ADD CONSTRAINT ne_10m_admin_0_countries_lakes_pkey PRIMARY KEY (gid);


--
-- TOC entry 7414 (class 2606 OID 2856527)
-- Name: ne_10m_admin_0_countries ne_10m_admin_0_countries_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_0_countries
    ADD CONSTRAINT ne_10m_admin_0_countries_pkey PRIMARY KEY (gid);


--
-- TOC entry 7426 (class 2606 OID 2856529)
-- Name: ne_10m_admin_1_states_provinces_lakes ne_10m_admin_1_states_provinces_lakes_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_1_states_provinces_lakes
    ADD CONSTRAINT ne_10m_admin_1_states_provinces_lakes_pkey PRIMARY KEY (gid);


--
-- TOC entry 7416 (class 2606 OID 2856531)
-- Name: ne_10m_admin_1_states_provinces ne_10m_admin_1_states_provinces_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_admin_1_states_provinces
    ADD CONSTRAINT ne_10m_admin_1_states_provinces_pkey PRIMARY KEY (gid);


--
-- TOC entry 7418 (class 2606 OID 2856533)
-- Name: ne_10m_geography_marine_polys ne_10m_geography_marine_polys_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_geography_marine_polys
    ADD CONSTRAINT ne_10m_geography_marine_polys_pkey PRIMARY KEY (gid);


--
-- TOC entry 7420 (class 2606 OID 2856535)
-- Name: ne_10m_geography_regions_polys ne_10m_geography_regions_polys_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_geography_regions_polys
    ADD CONSTRAINT ne_10m_geography_regions_polys_pkey PRIMARY KEY (gid);


--
-- TOC entry 7430 (class 2606 OID 2856537)
-- Name: ne_10m_lakes_europes ne_10m_lakes_europes_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes_europes
    ADD CONSTRAINT ne_10m_lakes_europes_pkey PRIMARY KEY (gid);


--
-- TOC entry 7432 (class 2606 OID 2856539)
-- Name: ne_10m_lakes_north_america ne_10m_lakes_north_america_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes_north_america
    ADD CONSTRAINT ne_10m_lakes_north_america_pkey PRIMARY KEY (gid);


--
-- TOC entry 7428 (class 2606 OID 2856541)
-- Name: ne_10m_lakes ne_10m_lakes_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_lakes
    ADD CONSTRAINT ne_10m_lakes_pkey PRIMARY KEY (gid);


--
-- TOC entry 7434 (class 2606 OID 2856543)
-- Name: ne_10m_populated_places ne_10m_populated_places_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_populated_places
    ADD CONSTRAINT ne_10m_populated_places_pkey PRIMARY KEY (gid);


--
-- TOC entry 7436 (class 2606 OID 2856545)
-- Name: ne_10m_reefs ne_10m_reefs_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_reefs
    ADD CONSTRAINT ne_10m_reefs_pkey PRIMARY KEY (gid);


--
-- TOC entry 7438 (class 2606 OID 2856547)
-- Name: ne_10m_urban_areas_landscan ne_10m_urban_areas_landscan_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.ne_10m_urban_areas_landscan
    ADD CONSTRAINT ne_10m_urban_areas_landscan_pkey PRIMARY KEY (gid);


--
-- TOC entry 7422 (class 2606 OID 2856549)
-- Name: osm_20200505_boundary_administrative_belgium osm_20200505_boundary_administrative_belgium_pkey; Type: CONSTRAINT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.osm_20200505_boundary_administrative_belgium
    ADD CONSTRAINT osm_20200505_boundary_administrative_belgium_pkey PRIMARY KEY (gid);


--
-- TOC entry 7440 (class 2606 OID 2856551)
-- Name: osm_belgium_20200505_8_villages t_osm_belgium_20200505_8_villages_pkey; Type: CONSTRAINT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.osm_belgium_20200505_8_villages
    ADD CONSTRAINT t_osm_belgium_20200505_8_villages_pkey PRIMARY KEY (gid);


--
-- TOC entry 7442 (class 2606 OID 2856553)
-- Name: tdwg_level_1 tdwg_level_1_pkey; Type: CONSTRAINT; Schema: wfs; Owner: darwin2
--

ALTER TABLE ONLY wfs.tdwg_level_1
    ADD CONSTRAINT tdwg_level_1_pkey PRIMARY KEY (gid);


--
-- TOC entry 7397 (class 2606 OID 2856555)
-- Name: belgian_rivers_osm_20200402 wfs.belgian_rivers_osm_20200402_pkey; Type: CONSTRAINT; Schema: wfs; Owner: postgres
--

ALTER TABLE ONLY wfs.belgian_rivers_osm_20200402
    ADD CONSTRAINT "wfs.belgian_rivers_osm_20200402_pkey" PRIMARY KEY (gid);


--
-- TOC entry 7050 (class 1259 OID 2856556)
-- Name: fki_fk_specimen_expedition; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX fki_fk_specimen_expedition ON darwin2.gtu USING btree (expedition_ref);


--
-- TOC entry 7331 (class 1259 OID 2856557)
-- Name: fki_staging_relationships_specimen; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX fki_staging_relationships_specimen ON darwin2.staging_relationship USING btree (existing_specimen_ref);


--
-- TOC entry 7320 (class 1259 OID 2856558)
-- Name: fki_to_gtu; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX fki_to_gtu ON darwin2.staging_gtu USING btree (gtu_ref);


--
-- TOC entry 7321 (class 1259 OID 2856559)
-- Name: fki_to_import; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX fki_to_import ON darwin2.staging_gtu USING btree (import_ref);


--
-- TOC entry 7051 (class 1259 OID 2856560)
-- Name: gtu_geom_idx; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX gtu_geom_idx ON darwin2.gtu USING gist (geom);


--
-- TOC entry 6942 (class 1259 OID 2856561)
-- Name: idx_bibliography_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_bibliography_type ON darwin2.bibliography USING btree (type);


--
-- TOC entry 6947 (class 1259 OID 2856562)
-- Name: idx_catalogue_bibliography_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_bibliography_referenced_record ON darwin2.catalogue_bibliography USING btree (referenced_relation, record_id);


--
-- TOC entry 6956 (class 1259 OID 2856563)
-- Name: idx_catalogue_people_people_order_by; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_people_people_order_by ON darwin2.catalogue_people USING btree (order_by);


--
-- TOC entry 6957 (class 1259 OID 2856564)
-- Name: idx_catalogue_people_people_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_people_people_ref ON darwin2.catalogue_people USING btree (people_ref);


--
-- TOC entry 6958 (class 1259 OID 2856565)
-- Name: idx_catalogue_people_people_sub_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_people_people_sub_type ON darwin2.catalogue_people USING btree (people_sub_type);


--
-- TOC entry 6959 (class 1259 OID 2856566)
-- Name: idx_catalogue_people_people_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_people_people_type ON darwin2.catalogue_people USING btree (people_type);


--
-- TOC entry 6960 (class 1259 OID 2856567)
-- Name: idx_catalogue_people_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_people_referenced_record ON darwin2.catalogue_people USING btree (referenced_relation, record_id);


--
-- TOC entry 6965 (class 1259 OID 2856568)
-- Name: idx_catalogue_relationships_relations; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_catalogue_relationships_relations ON darwin2.catalogue_relationships USING btree (referenced_relation, record_id_1, relationship_type);


--
-- TOC entry 6968 (class 1259 OID 2856569)
-- Name: idx_chronostratigraphy_level_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_chronostratigraphy_level_ref ON darwin2.chronostratigraphy USING btree (level_ref);


--
-- TOC entry 6969 (class 1259 OID 2856570)
-- Name: idx_chronostratigraphy_lower_bound; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_chronostratigraphy_lower_bound ON darwin2.chronostratigraphy USING btree (COALESCE(lower_bound, ('-4600'::integer)::numeric));


--
-- TOC entry 6970 (class 1259 OID 2856571)
-- Name: idx_chronostratigraphy_name_order_by_txt_op; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_chronostratigraphy_name_order_by_txt_op ON darwin2.chronostratigraphy USING btree (name_indexed text_pattern_ops);


--
-- TOC entry 6971 (class 1259 OID 2856572)
-- Name: idx_chronostratigraphy_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_chronostratigraphy_parent_ref ON darwin2.chronostratigraphy USING btree (parent_ref);


--
-- TOC entry 6972 (class 1259 OID 2856573)
-- Name: idx_chronostratigraphy_upper_bound; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_chronostratigraphy_upper_bound ON darwin2.chronostratigraphy USING btree (COALESCE(upper_bound, (1)::numeric));


--
-- TOC entry 6979 (class 1259 OID 2856574)
-- Name: idx_classification_keywords_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_classification_keywords_referenced_record ON darwin2.classification_keywords USING btree (referenced_relation, record_id);


--
-- TOC entry 6982 (class 1259 OID 2856575)
-- Name: idx_classification_synonymies_grouping; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_classification_synonymies_grouping ON darwin2.classification_synonymies USING btree (group_id, is_basionym);


--
-- TOC entry 6983 (class 1259 OID 2856576)
-- Name: idx_classification_synonymies_order_by; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_classification_synonymies_order_by ON darwin2.classification_synonymies USING btree (group_name, order_by);


--
-- TOC entry 6984 (class 1259 OID 2856577)
-- Name: idx_classification_synonymies_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_classification_synonymies_referenced_record ON darwin2.classification_synonymies USING btree (referenced_relation, record_id, group_id);


--
-- TOC entry 6989 (class 1259 OID 2856578)
-- Name: idx_codes_code; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_codes_code ON darwin2.codes USING btree (code_num) WHERE (NOT (code_num IS NULL));


--
-- TOC entry 6990 (class 1259 OID 2856579)
-- Name: idx_codes_full_code_indexed_btree; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_codes_full_code_indexed_btree ON darwin2.codes USING btree (full_code_indexed);


--
-- TOC entry 6991 (class 1259 OID 2856580)
-- Name: idx_codes_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_codes_referenced_record ON darwin2.codes USING btree (referenced_relation, record_id);


--
-- TOC entry 6997 (class 1259 OID 2856581)
-- Name: idx_collecting_methods_method_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collecting_methods_method_indexed ON darwin2.collecting_methods USING btree (method_indexed);


--
-- TOC entry 7003 (class 1259 OID 2856582)
-- Name: idx_collecting_tools_tool_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collecting_tools_tool_indexed ON darwin2.collecting_tools USING btree (tool_indexed);


--
-- TOC entry 7009 (class 1259 OID 2856583)
-- Name: idx_collection_maintenance_action; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collection_maintenance_action ON darwin2.collection_maintenance USING btree (action_observation);


--
-- TOC entry 7010 (class 1259 OID 2856584)
-- Name: idx_collection_maintenance_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collection_maintenance_referenced_record ON darwin2.collection_maintenance USING btree (referenced_relation, record_id);


--
-- TOC entry 7011 (class 1259 OID 2856585)
-- Name: idx_collection_maintenance_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collection_maintenance_user_ref ON darwin2.collection_maintenance USING btree (people_ref);


--
-- TOC entry 7014 (class 1259 OID 2856586)
-- Name: idx_collections_main_manager_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collections_main_manager_ref ON darwin2.collections USING btree (main_manager_ref);


--
-- TOC entry 7015 (class 1259 OID 2856587)
-- Name: idx_collections_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collections_parent_ref ON darwin2.collections USING btree (parent_ref);


--
-- TOC entry 7022 (class 1259 OID 2856588)
-- Name: idx_collections_rights_db_user_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collections_rights_db_user_type ON darwin2.collections_rights USING btree (db_user_type);


--
-- TOC entry 7023 (class 1259 OID 2856589)
-- Name: idx_collections_rights_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_collections_rights_user_ref ON darwin2.collections_rights USING btree (user_ref);


--
-- TOC entry 7028 (class 1259 OID 2856590)
-- Name: idx_comments_notion_concerned; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_comments_notion_concerned ON darwin2.comments USING btree (notion_concerned);


--
-- TOC entry 7029 (class 1259 OID 2856591)
-- Name: idx_comments_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_comments_referenced_record ON darwin2.comments USING btree (referenced_relation, record_id);


--
-- TOC entry 7181 (class 1259 OID 2856592)
-- Name: idx_darwin_flat_gtu_code; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_darwin_flat_gtu_code ON darwin2.specimens USING gin (gtu_code public.gin_trgm_ops);


--
-- TOC entry 7068 (class 1259 OID 2856593)
-- Name: idx_expeditions_expedition_from_date; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_expeditions_expedition_from_date ON darwin2.expeditions USING btree (expedition_from_date, expedition_from_date_mask);


--
-- TOC entry 7069 (class 1259 OID 2856594)
-- Name: idx_expeditions_expedition_to_date; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_expeditions_expedition_to_date ON darwin2.expeditions USING btree (expedition_to_date, expedition_to_date_mask);


--
-- TOC entry 7075 (class 1259 OID 2856595)
-- Name: idx_ext_links_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_ext_links_referenced_record ON darwin2.ext_links USING btree (referenced_relation, record_id);


--
-- TOC entry 6992 (class 1259 OID 2856596)
-- Name: idx_full_code_order_by; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_full_code_order_by ON darwin2.codes USING gin (full_code_indexed public.gin_trgm_ops);


--
-- TOC entry 7052 (class 1259 OID 2856597)
-- Name: idx_gin_gtu_tags_values; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_gtu_tags_values ON darwin2.gtu USING gin (tag_values_indexed);


--
-- TOC entry 7160 (class 1259 OID 2856598)
-- Name: idx_gin_multimedia_search_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_multimedia_search_indexed ON darwin2.multimedia USING gin (search_indexed public.gin_trgm_ops);


--
-- TOC entry 7182 (class 1259 OID 2856599)
-- Name: idx_gin_specimens_gtu_country_tag_indexed_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_specimens_gtu_country_tag_indexed_indexed ON darwin2.specimens USING gin (gtu_country_tag_indexed);


--
-- TOC entry 7183 (class 1259 OID 2856600)
-- Name: idx_gin_specimens_gtu_tag_values_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_specimens_gtu_tag_values_indexed ON darwin2.specimens USING gin (gtu_tag_values_indexed);


--
-- TOC entry 7184 (class 1259 OID 2856651)
-- Name: idx_gin_specimens_spec_coll_ids; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_specimens_spec_coll_ids ON darwin2.specimens USING gin (spec_coll_ids);


--
-- TOC entry 7185 (class 1259 OID 2856652)
-- Name: idx_gin_specimens_spec_don_sel_ids; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_specimens_spec_don_sel_ids ON darwin2.specimens USING gin (spec_don_sel_ids);


--
-- TOC entry 7186 (class 1259 OID 2856653)
-- Name: idx_gin_specimens_spec_ident_ids; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_specimens_spec_ident_ids ON darwin2.specimens USING gin (spec_ident_ids);


--
-- TOC entry 6973 (class 1259 OID 2856661)
-- Name: idx_gin_trgm_chronostratigraphy_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_chronostratigraphy_name_indexed ON darwin2.chronostratigraphy USING btree (name_indexed);


--
-- TOC entry 6974 (class 1259 OID 2856662)
-- Name: idx_gin_trgm_chronostratigraphy_naming; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_chronostratigraphy_naming ON darwin2.chronostratigraphy USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7030 (class 1259 OID 2856663)
-- Name: idx_gin_trgm_comments_comment; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_comments_comment ON darwin2.comments USING gin (comment public.gin_trgm_ops);


--
-- TOC entry 7031 (class 1259 OID 2856751)
-- Name: idx_gin_trgm_comments_comment_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_comments_comment_indexed ON darwin2.comments USING gin (comment_indexed public.gin_trgm_ops);


--
-- TOC entry 7070 (class 1259 OID 2856752)
-- Name: idx_gin_trgm_expeditions_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_expeditions_name ON darwin2.expeditions USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7108 (class 1259 OID 2856753)
-- Name: idx_gin_trgm_lithology_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_lithology_name_indexed ON darwin2.lithology USING btree (name_indexed);


--
-- TOC entry 7109 (class 1259 OID 2856754)
-- Name: idx_gin_trgm_lithology_naming; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_lithology_naming ON darwin2.lithology USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7117 (class 1259 OID 2856755)
-- Name: idx_gin_trgm_lithostratigraphy_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_lithostratigraphy_name_indexed ON darwin2.lithostratigraphy USING btree (name_indexed);


--
-- TOC entry 7118 (class 1259 OID 2856756)
-- Name: idx_gin_trgm_lithostratigraphy_naming; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_lithostratigraphy_naming ON darwin2.lithostratigraphy USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7146 (class 1259 OID 2856757)
-- Name: idx_gin_trgm_loans_search; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_loans_search ON darwin2.loans USING gin (search_indexed public.gin_trgm_ops);


--
-- TOC entry 7149 (class 1259 OID 2856758)
-- Name: idx_gin_trgm_mineralogy_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_mineralogy_name_indexed ON darwin2.mineralogy USING btree (name_indexed);


--
-- TOC entry 7150 (class 1259 OID 2856759)
-- Name: idx_gin_trgm_mineralogy_naming; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_mineralogy_naming ON darwin2.mineralogy USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7254 (class 1259 OID 2856760)
-- Name: idx_gin_trgm_people_formated_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_people_formated_name ON darwin2.people USING gin (formated_name_indexed public.gin_trgm_ops);


--
-- TOC entry 7187 (class 1259 OID 2856761)
-- Name: idx_gin_trgm_specimens_expedition_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_specimens_expedition_name_indexed ON darwin2.specimens USING gin (expedition_name_indexed public.gin_trgm_ops);


--
-- TOC entry 7188 (class 1259 OID 2856762)
-- Name: idx_gin_trgm_specimens_ig_num; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_specimens_ig_num ON darwin2.specimens USING gin (ig_num_indexed public.gin_trgm_ops);


--
-- TOC entry 7189 (class 1259 OID 2856763)
-- Name: idx_gin_trgm_specimens_taxon_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_specimens_taxon_name_indexed ON darwin2.specimens USING gin (taxon_name_indexed public.gin_trgm_ops);


--
-- TOC entry 7190 (class 1259 OID 2856764)
-- Name: idx_gin_trgm_specimens_taxon_path; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_specimens_taxon_path ON darwin2.specimens USING gin (taxon_path public.gin_trgm_ops);


--
-- TOC entry 7236 (class 1259 OID 2856765)
-- Name: idx_gin_trgm_taxonomy_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_taxonomy_name_indexed ON darwin2.taxonomy USING btree (name_indexed text_pattern_ops);


--
-- TOC entry 7237 (class 1259 OID 2856766)
-- Name: idx_gin_trgm_taxonomy_naming; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_taxonomy_naming ON darwin2.taxonomy USING gin (name_indexed public.gin_trgm_ops);


--
-- TOC entry 7352 (class 1259 OID 2856767)
-- Name: idx_gin_trgm_users_formated_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gin_trgm_users_formated_name ON darwin2.users USING gin (formated_name_indexed public.gin_trgm_ops);


--
-- TOC entry 7191 (class 1259 OID 2856768)
-- Name: idx_gist_specimens_gtu_location; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gist_specimens_gtu_location ON darwin2.specimens USING gist (gtu_location);


--
-- TOC entry 7053 (class 1259 OID 2856769)
-- Name: idx_gtu_code; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gtu_code ON darwin2.gtu USING btree (code);


--
-- TOC entry 7054 (class 1259 OID 2856771)
-- Name: idx_gtu_location; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_gtu_location ON darwin2.gtu USING gist (location);


--
-- TOC entry 7043 (class 1259 OID 2856772)
-- Name: idx_identifications_determination_status; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_identifications_determination_status ON darwin2.identifications USING btree (determination_status) WHERE ((determination_status)::text <> ''::text);


--
-- TOC entry 7044 (class 1259 OID 2856773)
-- Name: idx_identifications_notion_concerned; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_identifications_notion_concerned ON darwin2.identifications USING btree (notion_concerned);


--
-- TOC entry 7045 (class 1259 OID 2856774)
-- Name: idx_identifications_order_by; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_identifications_order_by ON darwin2.identifications USING btree (order_by);


--
-- TOC entry 7088 (class 1259 OID 2856775)
-- Name: idx_igs_ig_date; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_igs_ig_date ON darwin2.igs USING btree (ig_date, ig_date_mask);


--
-- TOC entry 7089 (class 1259 OID 2856776)
-- Name: idx_igs_ig_num_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_igs_ig_num_indexed ON darwin2.igs USING btree (ig_num_indexed text_pattern_ops);


--
-- TOC entry 7096 (class 1259 OID 2856777)
-- Name: idx_informative_workflow_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_informative_workflow_referenced_record ON darwin2.informative_workflow USING btree (referenced_relation, record_id);


--
-- TOC entry 7097 (class 1259 OID 2856778)
-- Name: idx_informative_workflow_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_informative_workflow_user_ref ON darwin2.informative_workflow USING btree (user_ref);


--
-- TOC entry 7098 (class 1259 OID 2856779)
-- Name: idx_informative_workflow_user_status; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_informative_workflow_user_status ON darwin2.informative_workflow USING btree (user_ref, status);


--
-- TOC entry 7101 (class 1259 OID 2856780)
-- Name: idx_insurances_contact_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_insurances_contact_ref ON darwin2.insurances USING btree (contact_ref);


--
-- TOC entry 7102 (class 1259 OID 2856781)
-- Name: idx_insurances_insurance_currency; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_insurances_insurance_currency ON darwin2.insurances USING btree (insurance_currency);


--
-- TOC entry 7103 (class 1259 OID 2856782)
-- Name: idx_insurances_insurer_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_insurances_insurer_ref ON darwin2.insurances USING btree (insurer_ref);


--
-- TOC entry 7192 (class 1259 OID 2856783)
-- Name: idx_labeling_ig_num_numeric; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_labeling_ig_num_numeric ON darwin2.specimens USING btree (darwin2.convert_to_integer(COALESCE(ig_num, '-'::character varying)));


--
-- TOC entry 7193 (class 1259 OID 2856784)
-- Name: idx_labeling_other_gtu; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_labeling_other_gtu ON darwin2.specimens USING gin (gtu_others_tag_indexed);


--
-- TOC entry 7194 (class 1259 OID 2856785)
-- Name: idx_labeling_province; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_labeling_province ON darwin2.specimens USING gin (gtu_province_tag_indexed);


--
-- TOC entry 7110 (class 1259 OID 2856786)
-- Name: idx_lithology_level_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithology_level_ref ON darwin2.lithology USING btree (level_ref);


--
-- TOC entry 7111 (class 1259 OID 2856787)
-- Name: idx_lithology_name_order_by_txt_op; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithology_name_order_by_txt_op ON darwin2.lithology USING btree (name_indexed text_pattern_ops);


--
-- TOC entry 7112 (class 1259 OID 2856788)
-- Name: idx_lithology_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithology_parent_ref ON darwin2.lithology USING btree (parent_ref);


--
-- TOC entry 7119 (class 1259 OID 2856789)
-- Name: idx_lithostratigraphy_level_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithostratigraphy_level_ref ON darwin2.lithostratigraphy USING btree (level_ref);


--
-- TOC entry 7120 (class 1259 OID 2856790)
-- Name: idx_lithostratigraphy_name_order_by_txt_op; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithostratigraphy_name_order_by_txt_op ON darwin2.lithostratigraphy USING btree (name_indexed text_pattern_ops);


--
-- TOC entry 7121 (class 1259 OID 2856791)
-- Name: idx_lithostratigraphy_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_lithostratigraphy_parent_ref ON darwin2.lithostratigraphy USING btree (parent_ref);


--
-- TOC entry 7128 (class 1259 OID 2856792)
-- Name: idx_loan_items_ig_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_items_ig_ref ON darwin2.loan_items USING btree (ig_ref);


--
-- TOC entry 7129 (class 1259 OID 2856793)
-- Name: idx_loan_items_loan_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_items_loan_ref ON darwin2.loan_items USING btree (loan_ref);


--
-- TOC entry 7130 (class 1259 OID 2856794)
-- Name: idx_loan_items_part_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_items_part_ref ON darwin2.loan_items USING btree (specimen_ref);


--
-- TOC entry 7135 (class 1259 OID 2856795)
-- Name: idx_loan_rights_ig_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_rights_ig_ref ON darwin2.loan_rights USING btree (loan_ref);


--
-- TOC entry 7136 (class 1259 OID 2856796)
-- Name: idx_loan_rights_part_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_rights_part_ref ON darwin2.loan_rights USING btree (user_ref);


--
-- TOC entry 7141 (class 1259 OID 2856797)
-- Name: idx_loan_status_loan_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_status_loan_ref ON darwin2.loan_status USING btree (loan_ref);


--
-- TOC entry 7142 (class 1259 OID 2856798)
-- Name: idx_loan_status_loan_ref_is_last; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_status_loan_ref_is_last ON darwin2.loan_status USING btree (loan_ref, is_last);


--
-- TOC entry 7143 (class 1259 OID 2856799)
-- Name: idx_loan_status_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_loan_status_user_ref ON darwin2.loan_status USING btree (user_ref);


--
-- TOC entry 7195 (class 1259 OID 8905721)
-- Name: idx_main_code_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_main_code_indexed ON darwin2.specimens USING btree (main_code_indexed);


--
-- TOC entry 6998 (class 1259 OID 2856800)
-- Name: idx_method_trgm; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_method_trgm ON darwin2.collecting_methods USING gin (method public.gin_trgm_ops);


--
-- TOC entry 7151 (class 1259 OID 2856801)
-- Name: idx_mineralogy_code; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_mineralogy_code ON darwin2.mineralogy USING btree (upper((code)::text));


--
-- TOC entry 7152 (class 1259 OID 2856802)
-- Name: idx_mineralogy_cristal_system; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_mineralogy_cristal_system ON darwin2.mineralogy USING btree (cristal_system) WHERE ((cristal_system)::text <> ''::text);


--
-- TOC entry 7153 (class 1259 OID 2856803)
-- Name: idx_mineralogy_level_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_mineralogy_level_ref ON darwin2.mineralogy USING btree (level_ref);


--
-- TOC entry 7154 (class 1259 OID 2856804)
-- Name: idx_mineralogy_name_order_by_txt_op; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_mineralogy_name_order_by_txt_op ON darwin2.mineralogy USING btree (name_indexed text_pattern_ops);


--
-- TOC entry 7155 (class 1259 OID 2856805)
-- Name: idx_mineralogy_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_mineralogy_parent_ref ON darwin2.mineralogy USING btree (parent_ref);


--
-- TOC entry 7161 (class 1259 OID 2856806)
-- Name: idx_multimedia_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_multimedia_referenced_record ON darwin2.multimedia USING btree (referenced_relation, record_id);


--
-- TOC entry 7249 (class 1259 OID 2856807)
-- Name: idx_my_widgets_user_category; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_my_widgets_user_category ON darwin2.my_widgets USING btree (user_ref, category, group_name);


--
-- TOC entry 7261 (class 1259 OID 2856808)
-- Name: idx_people_addresses_country; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_addresses_country ON darwin2.people_addresses USING btree (country);


--
-- TOC entry 7262 (class 1259 OID 2856809)
-- Name: idx_people_addresses_person_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_addresses_person_user_ref ON darwin2.people_addresses USING btree (person_user_ref);


--
-- TOC entry 7265 (class 1259 OID 2856810)
-- Name: idx_people_comm_comm_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_comm_comm_type ON darwin2.people_comm USING btree (comm_type);


--
-- TOC entry 7266 (class 1259 OID 2856811)
-- Name: idx_people_comm_person_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_comm_person_user_ref ON darwin2.people_comm USING btree (person_user_ref);


--
-- TOC entry 7255 (class 1259 OID 2856812)
-- Name: idx_people_family_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_family_name ON darwin2.people USING btree (family_name);


--
-- TOC entry 7269 (class 1259 OID 2856813)
-- Name: idx_people_languages_language_country; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_languages_language_country ON darwin2.people_languages USING btree (language_country);


--
-- TOC entry 7274 (class 1259 OID 2856814)
-- Name: idx_people_relationships_person_1_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_relationships_person_1_ref ON darwin2.people_relationships USING btree (person_1_ref);


--
-- TOC entry 7275 (class 1259 OID 2856815)
-- Name: idx_people_relationships_person_2_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_relationships_person_2_ref ON darwin2.people_relationships USING btree (person_2_ref);


--
-- TOC entry 7256 (class 1259 OID 2856816)
-- Name: idx_people_sub_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_people_sub_type ON darwin2.people USING btree (sub_type) WHERE (NOT (sub_type IS NULL));


--
-- TOC entry 7280 (class 1259 OID 2856817)
-- Name: idx_possible_upper_levels_level_upper_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_possible_upper_levels_level_upper_ref ON darwin2.possible_upper_levels USING btree (level_upper_ref);


--
-- TOC entry 7034 (class 1259 OID 2856818)
-- Name: idx_properties_property_lower_value; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_lower_value ON darwin2.properties USING btree (lower_value);


--
-- TOC entry 7035 (class 1259 OID 2856819)
-- Name: idx_properties_property_lower_value_unified; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_lower_value_unified ON darwin2.properties USING btree (lower_value_unified);


--
-- TOC entry 7036 (class 1259 OID 2856820)
-- Name: idx_properties_property_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_type ON darwin2.properties USING btree (property_type);


--
-- TOC entry 7037 (class 1259 OID 2856821)
-- Name: idx_properties_property_unit; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_unit ON darwin2.properties USING btree (property_unit);


--
-- TOC entry 7038 (class 1259 OID 2856822)
-- Name: idx_properties_property_upper_value; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_upper_value ON darwin2.properties USING btree (upper_value);


--
-- TOC entry 7039 (class 1259 OID 2856823)
-- Name: idx_properties_property_upper_value_unified; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_property_upper_value_unified ON darwin2.properties USING btree (upper_value_unified);


--
-- TOC entry 7040 (class 1259 OID 2856824)
-- Name: idx_properties_referenced_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_properties_referenced_record ON darwin2.properties USING btree (referenced_relation, record_id);


--
-- TOC entry 7291 (class 1259 OID 2856825)
-- Name: idx_specimen_collecting_methods_method_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimen_collecting_methods_method_ref ON darwin2.specimen_collecting_methods USING btree (collecting_method_ref);


--
-- TOC entry 7296 (class 1259 OID 2856826)
-- Name: idx_specimen_collecting_tools_tool_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimen_collecting_tools_tool_ref ON darwin2.specimen_collecting_tools USING btree (collecting_tool_ref);


--
-- TOC entry 7196 (class 1259 OID 2856827)
-- Name: idx_specimen_rock_form; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimen_rock_form ON darwin2.specimens USING btree (rock_form);


--
-- TOC entry 7197 (class 1259 OID 2856829)
-- Name: idx_specimens_category; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_category ON darwin2.specimens USING btree (category);


--
-- TOC entry 7198 (class 1259 OID 2856830)
-- Name: idx_specimens_chrono_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_chrono_ref ON darwin2.specimens USING btree (chrono_ref) WHERE (chrono_ref <> 0);


--
-- TOC entry 7199 (class 1259 OID 2856831)
-- Name: idx_specimens_collection_is_public; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_collection_is_public ON darwin2.specimens USING btree (collection_is_public);


--
-- TOC entry 7200 (class 1259 OID 2856832)
-- Name: idx_specimens_collection_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_collection_name ON darwin2.specimens USING btree (collection_name);


--
-- TOC entry 7201 (class 1259 OID 2856833)
-- Name: idx_specimens_container; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_container ON darwin2.specimens USING btree (container) WHERE (NOT (container IS NULL));


--
-- TOC entry 7202 (class 1259 OID 2856834)
-- Name: idx_specimens_container_storage; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_container_storage ON darwin2.specimens USING btree (container_storage);


--
-- TOC entry 7203 (class 1259 OID 2856835)
-- Name: idx_specimens_container_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_container_type ON darwin2.specimens USING btree (container_type);


--
-- TOC entry 7204 (class 1259 OID 2856836)
-- Name: idx_specimens_expedition_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_expedition_ref ON darwin2.specimens USING btree (expedition_ref) WHERE (expedition_ref <> 0);


--
-- TOC entry 7205 (class 1259 OID 2856837)
-- Name: idx_specimens_gtu_from_date; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_gtu_from_date ON darwin2.specimens USING btree (gtu_from_date);


--
-- TOC entry 7206 (class 1259 OID 2856838)
-- Name: idx_specimens_gtu_from_date_mask; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_gtu_from_date_mask ON darwin2.specimens USING btree (gtu_from_date_mask);


--
-- TOC entry 7207 (class 1259 OID 2856839)
-- Name: idx_specimens_gtu_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_gtu_ref ON darwin2.specimens USING btree (gtu_ref) WHERE (gtu_ref <> 0);


--
-- TOC entry 7208 (class 1259 OID 2856840)
-- Name: idx_specimens_gtu_to_date; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_gtu_to_date ON darwin2.specimens USING btree (gtu_to_date);


--
-- TOC entry 7209 (class 1259 OID 2856841)
-- Name: idx_specimens_gtu_to_date_mask; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_gtu_to_date_mask ON darwin2.specimens USING btree (gtu_to_date_mask);


--
-- TOC entry 7210 (class 1259 OID 11620113)
-- Name: idx_specimens_id; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_id ON darwin2.specimens USING btree (id);


--
-- TOC entry 7211 (class 1259 OID 2856842)
-- Name: idx_specimens_ig_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_ig_ref ON darwin2.specimens USING btree (ig_ref);


--
-- TOC entry 7212 (class 1259 OID 2856843)
-- Name: idx_specimens_institution_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_institution_ref ON darwin2.specimens USING btree (institution_ref);


--
-- TOC entry 7213 (class 1259 OID 2856844)
-- Name: idx_specimens_litho_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_litho_ref ON darwin2.specimens USING btree (litho_ref) WHERE (litho_ref <> 0);


--
-- TOC entry 7214 (class 1259 OID 2856845)
-- Name: idx_specimens_lithology_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_lithology_ref ON darwin2.specimens USING btree (lithology_ref) WHERE (lithology_ref <> 0);


--
-- TOC entry 7215 (class 1259 OID 2856846)
-- Name: idx_specimens_mineral_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_mineral_ref ON darwin2.specimens USING btree (mineral_ref) WHERE (mineral_ref <> 0);


--
-- TOC entry 7216 (class 1259 OID 2856847)
-- Name: idx_specimens_object_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_object_name_indexed ON darwin2.specimens USING btree (object_name_indexed);


--
-- TOC entry 7217 (class 1259 OID 2856828)
-- Name: idx_specimens_part; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_part ON darwin2.specimens USING btree (specimen_part);


--
-- TOC entry 7301 (class 1259 OID 2856848)
-- Name: idx_specimens_relationships_mineral_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_relationships_mineral_ref ON darwin2.specimens_relationships USING btree (mineral_ref);


--
-- TOC entry 7302 (class 1259 OID 2856849)
-- Name: idx_specimens_relationships_specimen_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_relationships_specimen_ref ON darwin2.specimens_relationships USING btree (specimen_ref);


--
-- TOC entry 7303 (class 1259 OID 2856850)
-- Name: idx_specimens_relationships_specimen_related_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_relationships_specimen_related_ref ON darwin2.specimens_relationships USING btree (specimen_related_ref);


--
-- TOC entry 7304 (class 1259 OID 2856851)
-- Name: idx_specimens_relationships_taxon_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_relationships_taxon_ref ON darwin2.specimens_relationships USING btree (taxon_ref);


--
-- TOC entry 7218 (class 1259 OID 2856852)
-- Name: idx_specimens_room; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_room ON darwin2.specimens USING btree (room) WHERE (NOT (room IS NULL));


--
-- TOC entry 7219 (class 1259 OID 2856853)
-- Name: idx_specimens_row; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_row ON darwin2.specimens USING btree ("row") WHERE (NOT ("row" IS NULL));


--
-- TOC entry 7220 (class 1259 OID 2856854)
-- Name: idx_specimens_sex; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_sex ON darwin2.specimens USING btree (sex) WHERE ((sex)::text <> ALL (ARRAY['undefined'::text, 'unknown'::text]));


--
-- TOC entry 7221 (class 1259 OID 2856855)
-- Name: idx_specimens_shelf; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_shelf ON darwin2.specimens USING btree (shelf) WHERE (NOT (shelf IS NULL));


--
-- TOC entry 7222 (class 1259 OID 2856856)
-- Name: idx_specimens_social_status; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_social_status ON darwin2.specimens USING btree (social_status) WHERE ((social_status)::text <> 'not applicable'::text);


--
-- TOC entry 7223 (class 1259 OID 2856857)
-- Name: idx_specimens_stage; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_stage ON darwin2.specimens USING btree (stage) WHERE ((stage)::text <> ALL (ARRAY['undefined'::text, 'unknown'::text]));


--
-- TOC entry 7224 (class 1259 OID 2856858)
-- Name: idx_specimens_state; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_state ON darwin2.specimens USING btree (state) WHERE ((state)::text <> 'not applicable'::text);


--
-- TOC entry 7225 (class 1259 OID 2856859)
-- Name: idx_specimens_station_visible; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_station_visible ON darwin2.specimens USING btree (station_visible);


--
-- TOC entry 7226 (class 1259 OID 2856860)
-- Name: idx_specimens_sub_container; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_sub_container ON darwin2.specimens USING btree (sub_container) WHERE (NOT (sub_container IS NULL));


--
-- TOC entry 7227 (class 1259 OID 2856861)
-- Name: idx_specimens_sub_container_storage; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_sub_container_storage ON darwin2.specimens USING btree (sub_container_storage);


--
-- TOC entry 7228 (class 1259 OID 2856862)
-- Name: idx_specimens_sub_container_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_sub_container_type ON darwin2.specimens USING btree (sub_container_type);


--
-- TOC entry 7229 (class 1259 OID 2856863)
-- Name: idx_specimens_taxon_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_taxon_name_indexed ON darwin2.specimens USING btree (taxon_name_indexed);


--
-- TOC entry 7230 (class 1259 OID 2856864)
-- Name: idx_specimens_taxon_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_taxon_ref ON darwin2.specimens USING btree (taxon_ref) WHERE (taxon_ref <> 0);


--
-- TOC entry 7231 (class 1259 OID 2856865)
-- Name: idx_specimens_type_search; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_specimens_type_search ON darwin2.specimens USING btree (type_search) WHERE ((type_search)::text <> 'specimen'::text);


--
-- TOC entry 7310 (class 1259 OID 2856867)
-- Name: idx_staging_catalogue_catalogue_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_catalogue_catalogue_ref ON darwin2.staging_catalogue USING btree (import_ref, parent_ref) WHERE (catalogue_ref IS NOT NULL);


--
-- TOC entry 7311 (class 1259 OID 2856868)
-- Name: idx_staging_catalogue_filter; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_catalogue_filter ON darwin2.staging_catalogue USING btree (import_ref, name, level_ref);


--
-- TOC entry 7312 (class 1259 OID 2856869)
-- Name: idx_staging_catalogue_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_catalogue_parent_ref ON darwin2.staging_catalogue USING btree (parent_ref) WHERE (parent_ref IS NOT NULL);


--
-- TOC entry 7313 (class 1259 OID 2856870)
-- Name: idx_staging_catalogue_parent_updated; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_catalogue_parent_updated ON darwin2.staging_catalogue USING btree (parent_updated);


--
-- TOC entry 6934 (class 1259 OID 2856871)
-- Name: idx_staging_gtu_code; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_gtu_code ON darwin2.staging USING btree (gtu_code) WHERE (gtu_code IS NOT NULL);


--
-- TOC entry 6935 (class 1259 OID 2856873)
-- Name: idx_staging_import_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_import_ref ON darwin2.staging USING btree (import_ref);


--
-- TOC entry 7328 (class 1259 OID 2856874)
-- Name: idx_staging_people_record; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_staging_people_record ON darwin2.staging_people USING btree (record_id, referenced_relation);


--
-- TOC entry 7171 (class 1259 OID 2856875)
-- Name: idx_tag_groups_group_name_indexed; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tag_groups_group_name_indexed ON darwin2.tag_groups USING btree (group_name_indexed);


--
-- TOC entry 7172 (class 1259 OID 2856876)
-- Name: idx_tag_groups_group_name_indexed_txt_op; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tag_groups_group_name_indexed_txt_op ON darwin2.tag_groups USING btree (group_name_indexed text_pattern_ops);


--
-- TOC entry 7173 (class 1259 OID 2856877)
-- Name: idx_tag_groups_sub_group_name; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tag_groups_sub_group_name ON darwin2.tag_groups USING btree (sub_group_name);


--
-- TOC entry 7061 (class 1259 OID 2856878)
-- Name: idx_tags_group_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_group_ref ON darwin2.tags USING btree (group_ref);


--
-- TOC entry 7062 (class 1259 OID 2856879)
-- Name: idx_tags_group_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_group_type ON darwin2.tags USING btree (group_type);


--
-- TOC entry 7063 (class 1259 OID 2856880)
-- Name: idx_tags_gtu_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_gtu_ref ON darwin2.tags USING btree (gtu_ref);


--
-- TOC entry 7064 (class 1259 OID 2856881)
-- Name: idx_tags_indexed_trgm; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_indexed_trgm ON darwin2.tags USING gin (tag_indexed public.gin_trgm_ops);


--
-- TOC entry 7065 (class 1259 OID 2856882)
-- Name: idx_tags_rmca_indexed_trgm; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_rmca_indexed_trgm ON darwin2.tags USING gin (tag_indexed public.gin_trgm_ops);


--
-- TOC entry 7066 (class 1259 OID 2856883)
-- Name: idx_tags_sub_group_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_sub_group_type ON darwin2.tags USING btree (sub_group_type);


--
-- TOC entry 7067 (class 1259 OID 2856884)
-- Name: idx_tags_trgm; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tags_trgm ON darwin2.tags USING gin (tag public.gin_trgm_ops);


--
-- TOC entry 7238 (class 1259 OID 2856885)
-- Name: idx_taxonomy_level_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_taxonomy_level_ref ON darwin2.taxonomy USING btree (level_ref);


--
-- TOC entry 7239 (class 1259 OID 2856886)
-- Name: idx_taxonomy_parent_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_taxonomy_parent_ref ON darwin2.taxonomy USING btree (parent_ref);


--
-- TOC entry 7240 (class 1259 OID 2856887)
-- Name: idx_taxonomy_path; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_taxonomy_path ON darwin2.taxonomy USING btree (path text_pattern_ops);


--
-- TOC entry 7232 (class 1259 OID 2856888)
-- Name: idx_test_1; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_test_1 ON darwin2.specimens USING gin (spec_coll_ids);


--
-- TOC entry 7233 (class 1259 OID 2856889)
-- Name: idx_test_2; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_test_2 ON darwin2.specimens USING gin (spec_ident_ids);


--
-- TOC entry 7004 (class 1259 OID 2856890)
-- Name: idx_tool_trgm; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_tool_trgm ON darwin2.collecting_tools USING gin (tool public.gin_trgm_ops);


--
-- TOC entry 7357 (class 1259 OID 2856891)
-- Name: idx_users_addresses_country; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_addresses_country ON darwin2.users_addresses USING btree (country);


--
-- TOC entry 7358 (class 1259 OID 2856892)
-- Name: idx_users_addresses_person_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_addresses_person_user_ref ON darwin2.users_addresses USING btree (person_user_ref);


--
-- TOC entry 7361 (class 1259 OID 2856893)
-- Name: idx_users_comm_comm_type; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_comm_comm_type ON darwin2.users_comm USING btree (comm_type);


--
-- TOC entry 7362 (class 1259 OID 2856894)
-- Name: idx_users_comm_person_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_comm_person_user_ref ON darwin2.users_comm USING btree (person_user_ref);


--
-- TOC entry 7371 (class 1259 OID 2856895)
-- Name: idx_users_tracking_action; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_tracking_action ON darwin2.users_tracking USING btree (action);


--
-- TOC entry 7372 (class 1259 OID 2856896)
-- Name: idx_users_tracking_date_time; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_tracking_date_time ON darwin2.users_tracking USING btree (modification_date_time DESC);


--
-- TOC entry 7373 (class 1259 OID 2858134)
-- Name: idx_users_tracking_user_ref; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_tracking_user_ref ON darwin2.users_tracking USING btree (user_ref);


--
-- TOC entry 7374 (class 1259 OID 2856897)
-- Name: idx_users_tracking_user_ref_date_time; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX idx_users_tracking_user_ref_date_time ON darwin2.users_tracking USING btree (user_ref, modification_date_time DESC);


--
-- TOC entry 7381 (class 1259 OID 2856898)
-- Name: idx_vernacular_names_community_indexed; Type: INDEX; Schema: darwin2; Owner: postgres
--

CREATE INDEX idx_vernacular_names_community_indexed ON darwin2.vernacular_names USING btree (community_indexed);


--
-- TOC entry 7382 (class 1259 OID 2856899)
-- Name: idx_vernacular_names_name_indexed; Type: INDEX; Schema: darwin2; Owner: postgres
--

CREATE INDEX idx_vernacular_names_name_indexed ON darwin2.vernacular_names USING btree (name_indexed);


--
-- TOC entry 7383 (class 1259 OID 2856900)
-- Name: idx_vernacular_names_referenced_record; Type: INDEX; Schema: darwin2; Owner: postgres
--

CREATE INDEX idx_vernacular_names_referenced_record ON darwin2.vernacular_names USING btree (referenced_relation, record_id);


--
-- TOC entry 7166 (class 1259 OID 2856901)
-- Name: tag_authority_idx; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE UNIQUE INDEX tag_authority_idx ON darwin2.tag_authority USING btree (domain_ref, pref_label, url, code);


--
-- TOC entry 7178 (class 1259 OID 2856902)
-- Name: tag_tag_authority_idx; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX tag_tag_authority_idx ON darwin2.tag_tag_authority USING btree (tag_authority_ref, tag_group_distinct_ref);


--
-- TOC entry 7344 (class 1259 OID 2856903)
-- Name: taxonomy_authority_idx; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE UNIQUE INDEX taxonomy_authority_idx ON darwin2.taxonomy_authority USING btree (taxonomy_ref, pref_label, url, code);


--
-- TOC entry 7347 (class 1259 OID 2856904)
-- Name: taxonomy_is_marine_authority_idx; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX taxonomy_is_marine_authority_idx ON darwin2.taxonomy_authority USING btree (((profile OPERATOR(public.->) 'isMarine'::text)));


--
-- TOC entry 7309 (class 1259 OID 2856905)
-- Name: test_spatial_idx_specimens; Type: INDEX; Schema: darwin2; Owner: postgres
--

CREATE INDEX test_spatial_idx_specimens ON darwin2.specimens_test_geom USING gist (geom);


--
-- TOC entry 7377 (class 1259 OID 2856906)
-- Name: users_tracking_syn1; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX users_tracking_syn1 ON darwin2.users_tracking USING btree (((new_value OPERATOR(public.->) 'record_id'::text))) WHERE (public.exist(new_value, 'record_id'::text) AND ((referenced_relation)::text = 'classification_synonymies'::text) AND public.exist(new_value, 'action'::text));


--
-- TOC entry 7378 (class 1259 OID 2856907)
-- Name: users_tracking_syn2; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX users_tracking_syn2 ON darwin2.users_tracking USING btree (((old_value OPERATOR(public.->) 'record_id'::text))) WHERE (public.exist(old_value, 'record_id'::text) AND ((referenced_relation)::text = 'classification_synonymies'::text) AND public.exist(old_value, 'action'::text));


--
-- TOC entry 7379 (class 1259 OID 2856908)
-- Name: users_tracking_syn3; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX users_tracking_syn3 ON darwin2.users_tracking USING btree (((new_value OPERATOR(public.->) 'group_id'::text))) WHERE (public.exist(new_value, 'group_id'::text) AND ((referenced_relation)::text = 'classification_synonymies'::text) AND public.exist(new_value, 'action'::text));


--
-- TOC entry 7380 (class 1259 OID 2856909)
-- Name: users_tracking_syn4; Type: INDEX; Schema: darwin2; Owner: darwin2
--

CREATE INDEX users_tracking_syn4 ON darwin2.users_tracking USING btree (((old_value OPERATOR(public.->) 'group_id'::text))) WHERE (public.exist(old_value, 'group_id'::text) AND ((referenced_relation)::text = 'classification_synonymies'::text));


--
-- TOC entry 7400 (class 1259 OID 2856910)
-- Name: sidx_continents_esri_geom; Type: INDEX; Schema: wfs; Owner: darwin2
--

CREATE INDEX sidx_continents_esri_geom ON wfs.continents_esri USING gist (geom);


--
-- TOC entry 7403 (class 1259 OID 2856911)
-- Name: sidx_eez_archipelagic_waters_v3_geom; Type: INDEX; Schema: wfs; Owner: postgres
--

CREATE INDEX sidx_eez_archipelagic_waters_v3_geom ON wfs.eez_archipelagic_waters_v3 USING gist (geom);


--
-- TOC entry 7406 (class 1259 OID 2856912)
-- Name: sidx_eez_internal_waters_v3_geom; Type: INDEX; Schema: wfs; Owner: postgres
--

CREATE INDEX sidx_eez_internal_waters_v3_geom ON wfs.eez_internal_waters_v3 USING gist (geom);


--
-- TOC entry 7409 (class 1259 OID 2856913)
-- Name: sidx_exclusive_economical_zone_v11_geom; Type: INDEX; Schema: wfs; Owner: postgres
--

CREATE INDEX sidx_exclusive_economical_zone_v11_geom ON wfs.exclusive_economical_zone_v11 USING gist (geom);


--
-- TOC entry 7412 (class 1259 OID 2856914)
-- Name: sidx_high_Seas_v1_geom; Type: INDEX; Schema: wfs; Owner: postgres
--

CREATE INDEX "sidx_high_Seas_v1_geom" ON wfs.high_seas_v1 USING gist (geom);


--
-- TOC entry 7905 (class 2618 OID 1440700)
-- Name: doctrine_temporal_information_gtu_group_tags _RETURN; Type: RULE; Schema: darwin2; Owner: darwin2
--

CREATE OR REPLACE VIEW darwin2.doctrine_temporal_information_gtu_group_tags AS
 SELECT DISTINCT gtu.id,
    gtu.code,
    gtu.gtu_from_date_mask,
    gtu.gtu_from_date,
    gtu.gtu_to_date_mask,
    gtu.gtu_to_date,
    gtu.tag_values_indexed,
    gtu.latitude,
    gtu.longitude,
    gtu.lat_long_accuracy,
    gtu.elevation,
    gtu.elevation_accuracy,
    (gtu.location)::character varying AS location,
    gtu.gtu_creation_date,
    gtu.import_ref,
    gtu.collector_refs,
    gtu.expedition_refs,
    gtu.collection_ref,
    gtu.latitude_dms_degree,
    gtu.latitude_dms_minutes,
    gtu.latitude_dms_seconds,
    gtu.latitude_dms_direction,
    gtu.longitude_dms_degree,
    gtu.longitude_dms_minutes,
    gtu.longitude_dms_seconds,
    gtu.longitude_dms_direction,
    gtu.latitude_utm,
    gtu.longitude_utm,
    gtu.utm_zone,
    gtu.coordinates_source,
    array_agg(temporal_information.from_date_mask) AS array_from_date_mask,
    array_agg(temporal_information.from_date) AS array_from_date,
    array_agg(temporal_information.to_date_mask) AS array_to_date_mask,
    array_agg(temporal_information.to_date) AS array_to_date,
    string_agg(DISTINCT btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment))), '|'::text ORDER BY (btrim((((COALESCE(c.notion_concerned, ''::character varying))::text || ' : '::text) || COALESCE(c.comment)))), '|'::text) AS comments,
    string_agg(DISTINCT btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text))), '|'::text ORDER BY (btrim((((COALESCE((((properties.property_type)::text || COALESCE((' - '::text || (properties.applies_to)::text), ''::text)) || ' : '::text), ''::text) || (COALESCE(properties.lower_value, ''::character varying))::text) || COALESCE(('-'::text || (properties.upper_value)::text), ''::text)) || COALESCE((' '::text || (properties.property_unit)::text), ''::text)))), '|'::text) AS properties,
    tags.tag,
    tags.tag_indexed,
    gtu.expedition_ref
   FROM ((((darwin2.gtu
     LEFT JOIN darwin2.temporal_information ON ((gtu.id = temporal_information.gtu_ref)))
     LEFT JOIN darwin2.comments c ON (((gtu.id = c.record_id) AND ((c.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.properties ON (((gtu.id = properties.record_id) AND ((properties.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN darwin2.tags ON ((gtu.id = tags.gtu_ref)))
  GROUP BY gtu.id, gtu.code, gtu.gtu_from_date_mask, gtu.gtu_from_date, gtu.gtu_to_date_mask, gtu.gtu_to_date, gtu.tag_values_indexed, gtu.latitude, gtu.longitude, gtu.lat_long_accuracy, gtu.elevation, gtu.elevation_accuracy, (gtu.location)::character varying, gtu.gtu_creation_date, gtu.import_ref, gtu.collector_refs, gtu.expedition_refs, gtu.collection_ref, gtu.latitude_dms_degree, gtu.latitude_dms_minutes, gtu.latitude_dms_seconds, gtu.latitude_dms_direction, gtu.longitude_dms_degree, gtu.longitude_dms_minutes, gtu.longitude_dms_seconds, gtu.longitude_dms_direction, gtu.latitude_utm, gtu.longitude_utm, gtu.utm_zone, gtu.coordinates_source, tags.tag, tags.tag_indexed;


--
-- TOC entry 7916 (class 2618 OID 1441523)
-- Name: v_diagnose_several_main_in_vertebrates_201909 _RETURN; Type: RULE; Schema: darwin2; Owner: darwin2
--

CREATE OR REPLACE VIEW darwin2.v_diagnose_several_main_in_vertebrates_201909 AS
 SELECT DISTINCT specimens.id,
    specimens.collection_name,
    count(codes.id) AS count,
    string_agg((codes.code)::text, ';'::text ORDER BY (codes.code)::text) AS code_text,
    specimens.taxon_name,
    specimens.gtu_from_date,
    specimens.gtu_others_tag_value
   FROM (darwin2.codes
     LEFT JOIN darwin2.specimens ON ((((codes.referenced_relation)::text = 'specimens'::text) AND (codes.record_id = specimens.id))))
  WHERE ((((((specimens.collection_path)::text || '/'::text) || ((specimens.collection_ref)::character varying)::text) || '/'::text) ~~ '%/1/%'::text) AND ((codes.code_category)::text = 'main'::text))
  GROUP BY specimens.id, specimens.collection_name
 HAVING (count(codes.id) > 1);


--
-- TOC entry 7930 (class 2618 OID 1441603)
-- Name: v_reindex_tag_spaces _RETURN; Type: RULE; Schema: darwin2; Owner: darwin2
--

CREATE OR REPLACE VIEW darwin2.v_reindex_tag_spaces AS
 SELECT a.id,
    a.gtu_ref,
    (a.value)::text AS tag_value
   FROM ( SELECT tag_groups.id,
            tag_groups.gtu_ref,
            darwin2.fulltoindex((unnest(string_to_array((tag_groups.tag_value)::text, ';'::text)))::character varying, true) AS value
           FROM darwin2.tag_groups
          WHERE ((tag_groups.tag_value)::text ~~ '%;%'::text)
          GROUP BY tag_groups.id) a
UNION
 SELECT tag_groups.id,
    tag_groups.gtu_ref,
    darwin2.fulltoindex(tag_groups.tag_value, true) AS tag_value
   FROM darwin2.tag_groups
  WHERE ((tag_groups.tag_value)::text !~~ '%;%'::text);


--
-- TOC entry 7945 (class 2618 OID 1441701)
-- Name: v_rmca_taxonomy_synonyms_with_name_and_specs _RETURN; Type: RULE; Schema: darwin2; Owner: darwin2
--

CREATE OR REPLACE VIEW darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs AS
 SELECT a.referenced_relation,
    array_agg(a.record_id ORDER BY a.record_id) AS records_ids,
    array_agg(a.id ORDER BY a.record_id) AS ids,
    a.group_id,
    a.group_name,
    array_agg(a.is_basionym ORDER BY a.record_id) AS basionyms,
    array_agg(a.order_by ORDER BY a.record_id) AS orders,
    string_agg((a.name)::text, ';'::text ORDER BY a.record_id) AS taxon_names,
    sum(a.count_specimens ORDER BY a.record_id) AS count_specimens,
    public.hstore(((array_agg(a.record_id ORDER BY a.record_id))::character varying)::text, ((array_agg(a.count_specimens ORDER BY a.record_id))::character varying)::text) AS count_specimens_by_taxon
   FROM ( SELECT DISTINCT classification_synonymies.referenced_relation,
            classification_synonymies.record_id,
            classification_synonymies.id,
            classification_synonymies.group_id,
            classification_synonymies.group_name,
            classification_synonymies.is_basionym,
            classification_synonymies.order_by,
            taxonomy.name,
            count(specimens.id) AS count_specimens
           FROM ((darwin2.classification_synonymies
             LEFT JOIN darwin2.taxonomy ON ((classification_synonymies.record_id = taxonomy.id)))
             LEFT JOIN darwin2.specimens ON ((taxonomy.id = specimens.taxon_ref)))
          GROUP BY classification_synonymies.referenced_relation, classification_synonymies.group_id, classification_synonymies.group_name, classification_synonymies.id, classification_synonymies.order_by, taxonomy.name) a
  GROUP BY a.referenced_relation, a.group_id, a.group_name;


--
-- TOC entry 7946 (class 2618 OID 1441705)
-- Name: v_taxonomy_split_author_fast _RETURN; Type: RULE; Schema: darwin2; Owner: darwin2
--

CREATE OR REPLACE VIEW darwin2.v_taxonomy_split_author_fast AS
 WITH a AS (
         SELECT regexp_matches((taxonomy.name)::text, '^[A-Z].+?\s(\(.+?|[A-Z].+?|d''.+?|de\s.+?|van\s.+?)$'::text) AS split_t,
            taxonomy.name,
            taxonomy.name_indexed,
            taxonomy.level_ref,
            taxonomy.status,
            taxonomy.local_naming,
            taxonomy.color,
            taxonomy.path,
            taxonomy.parent_ref,
            taxonomy.id,
            taxonomy.extinct,
            taxonomy.sensitive_info_withheld,
            taxonomy.is_reference_taxonomy,
            taxonomy.metadata_ref,
            taxonomy.taxonomy_creation_date,
            taxonomy.import_ref,
            taxonomy.cites
           FROM darwin2.taxonomy
        ), b AS (
         SELECT a.split_t,
            a.name,
            a.name_indexed,
            a.level_ref,
            a.status,
            a.local_naming,
            a.color,
            a.path,
            a.parent_ref,
            a.id,
            a.extinct,
            a.sensitive_info_withheld,
            a.is_reference_taxonomy,
            a.metadata_ref,
            a.taxonomy_creation_date,
            a.import_ref,
            a.cites
           FROM a
        UNION
         SELECT array_agg(''::character varying) AS array_agg,
            taxonomy.name,
            taxonomy.name_indexed,
            taxonomy.level_ref,
            taxonomy.status,
            taxonomy.local_naming,
            taxonomy.color,
            taxonomy.path,
            taxonomy.parent_ref,
            taxonomy.id,
            taxonomy.extinct,
            taxonomy.sensitive_info_withheld,
            taxonomy.is_reference_taxonomy,
            taxonomy.metadata_ref,
            taxonomy.taxonomy_creation_date,
            taxonomy.import_ref,
            taxonomy.cites
           FROM (darwin2.taxonomy
             LEFT JOIN a ON ((taxonomy.id = a.id)))
          WHERE (a.id IS NULL)
          GROUP BY taxonomy.id
        )
 SELECT b.id,
    b.name,
    b.name_indexed,
    b.level_ref,
    b.status,
    b.local_naming,
    b.color,
    b.path,
    b.parent_ref,
    b.extinct,
    b.sensitive_info_withheld,
    b.metadata_ref,
    b.taxonomy_creation_date,
    btrim(replace((b.name)::text, b.split_t[1], ''::text)) AS name_no_author,
    btrim(b.split_t[1]) AS author
   FROM b;


--
-- TOC entry 7962 (class 2618 OID 1442224)
-- Name: v_darwin_ipt_rbins _RETURN; Type: RULE; Schema: ipt; Owner: ipt_viewer
--

CREATE OR REPLACE VIEW ipt.v_darwin_ipt_rbins AS
 WITH taxonomy_authority_cte AS (
         SELECT t.id AS taxonomy_ref,
            t.name,
            t.status AS taxonomic_status,
            tp.name AS parent_name_usage,
            taxa_gbif.url AS gbif_id,
            taxa_worms.urn AS worms_id,
            kingdom.name AS kingdom,
            phylum.name AS phylum,
            class.name AS class,
            ordo.name AS ordo,
            family.name AS family,
            genus.name AS genus,
            subgenus.name AS subgenus,
            t2.specific_epithet,
            t2.infra_specific_epithet,
                CASE
                    WHEN (t2.specific_epithet IS NOT NULL) THEN btrim("substring"((t.name)::text, ((strpos((t.name)::text, t2.specific_epithet) + char_length(t2.specific_epithet)) + 1)))
                    ELSE btrim("substring"((t.name)::text, ((strpos((t.name)::text, t2.infra_specific_epithet) + char_length(t2.infra_specific_epithet)) + 1)))
                END AS scientific_name_authorship
           FROM (((((((((((darwin2.taxonomy t
             LEFT JOIN darwin2.taxonomy tp ON ((tp.id = t.parent_ref)))
             LEFT JOIN ( SELECT t_1.id,
                        CASE t_1.level_ref
                            WHEN 48 THEN split_part((t_1.name)::text, ' '::text, 2)
                            ELSE NULL::text
                        END AS specific_epithet,
                        CASE t_1.level_ref
                            WHEN 49 THEN split_part((t_1.name)::text, ' '::text, 3)
                            ELSE NULL::text
                        END AS infra_specific_epithet
                   FROM darwin2.taxonomy t_1) t2 ON ((t2.id = t.id)))
             LEFT JOIN darwin2.taxonomy_authority taxa_gbif ON (((taxa_gbif.taxonomy_ref = t.id) AND (taxa_gbif.domain_ref = ( SELECT authority_domain.id
                   FROM darwin2.authority_domain
                  WHERE ((authority_domain.name)::text = 'gbif.org'::text))))))
             LEFT JOIN darwin2.taxonomy_authority taxa_worms ON (((taxa_worms.taxonomy_ref = t.id) AND (taxa_worms.domain_ref = ( SELECT authority_domain.id
                   FROM darwin2.authority_domain
                  WHERE ((authority_domain.name)::text = 'marinespecies.org'::text))))))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[2]) kingdom(r_start_id, id, name, level_ref, parent_ref) ON ((kingdom.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[4]) phylum(r_start_id, id, name, level_ref, parent_ref) ON ((phylum.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[12]) class(r_start_id, id, name, level_ref, parent_ref) ON ((class.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[28]) ordo(r_start_id, id, name, level_ref, parent_ref) ON ((ordo.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[34]) family(r_start_id, id, name, level_ref, parent_ref) ON ((family.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[41]) genus(r_start_id, id, name, level_ref, parent_ref) ON ((genus.r_start_id = t.id)))
             LEFT JOIN LATERAL darwin2.fct_get_tax_hierarchy(t.id, ARRAY[42]) subgenus(r_start_id, id, name, level_ref, parent_ref) ON ((subgenus.r_start_id = t.id)))
          WHERE ((t.level_ref = 48) AND ((t.status)::text <> 'nomen nudum'::text) AND ((t.status)::text <> 'in press'::text) AND ((t.status)::text <> 'in litteris'::text))
          ORDER BY t.id
        ), location_cte AS (
         SELECT q.gtu_ref,
            q.verbatim_location,
            q.location,
            q.ndwc_nice_verbatim_location,
            q.location_id,
            q.ndwc_geotypes,
            q.country,
            q.country_code,
            q.water_body,
            q.island_group,
            q.island,
            q.ndwc_tag_decimal_latitude,
            q.ndwc_tag_decimal_longitude,
            q.ndwc_gtu_decimal_latitude,
            q.ndwc_gtu_decimal_longitude,
            q.geodetic_datum,
            q.verbatim_srs,
            q.coordinate_uncertainty_in_meters,
            q.footprint_wkt,
                CASE
                    WHEN (q.ndwc_gtu_decimal_latitude IS NOT NULL) THEN q.ndwc_gtu_decimal_latitude
                    ELSE (
                    CASE
                        WHEN (q.ndwc_tag_decimal_latitude IS NOT NULL) THEN q.ndwc_tag_decimal_latitude
                        ELSE NULL::numeric
                    END)::double precision
                END AS decimal_latitude,
                CASE
                    WHEN (q.ndwc_gtu_decimal_longitude IS NOT NULL) THEN q.ndwc_gtu_decimal_longitude
                    ELSE (
                    CASE
                        WHEN (q.ndwc_tag_decimal_longitude IS NOT NULL) THEN q.ndwc_tag_decimal_longitude
                        ELSE NULL::numeric
                    END)::double precision
                END AS decimal_longitude,
                CASE
                    WHEN (q.ndwc_gtu_decimal_latitude IS NOT NULL) THEN 'Coordinates are based on original information found on the label or publication.'::text
                    ELSE
                    CASE
                        WHEN (q.ndwc_tag_decimal_latitude IS NOT NULL) THEN (((('No accurate coordinate information on the label. The coordinates have been geocoded from the location (see verbatimLocation) on the label by automated mapping+human verification to GeoNames.org ('::text || q.location) || ' maps to '::text) || (q.location_id)::text) || '). The mapping is done constrained by type and by country (if available), and assessed by probability. When multiple locations have been mapped for this specimen, the most precise is taken.'::text)
                        ELSE NULL::text
                    END
                END AS georeference_remarks
           FROM ( SELECT gtu_1.id AS gtu_ref,
                    string_agg(DISTINCT (tags.tag_value)::text, ', '::text) AS verbatim_location,
                    (array_agg((tag_geoname.gazetteer_pref_label)::text ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS location,
                    string_agg(DISTINCT (tag_geoname.gazetteer_pref_label)::text, ', '::text) AS ndwc_nice_verbatim_location,
                    (array_agg(tag_geoname.gazetteer_url ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS location_id,
                    array_agg(tag_geoname.geonames_type_mapped ORDER BY tag_geoname.priority, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label) AS ndwc_geotypes,
                    string_agg(DISTINCT (tag_geoname.country_pref_label)::text, ', '::text) AS country,
                    string_agg(DISTINCT tag_geoname.country_iso, ', '::text) AS country_code,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = ANY (ARRAY['CHN'::text, 'CHNL'::text, 'CNL'::text, 'CNLD'::text, 'CNLI'::text, 'CNLSB'::text, 'DLTA'::text, 'ESTY'::text, 'FJD'::text, 'GULF'::text, 'ISTH'::text, 'LGN'::text, 'LK'::text, 'LKC'::text, 'LKI'::text, 'LKN'::text, 'LKO'::text, 'LKS'::text, 'OCN'::text, 'RSV'::text, 'SBED'::text, 'SD'::text, 'SEA'::text, 'STM'::text, 'STMA'::text, 'STMD'::text, 'STMI'::text, 'STMM'::text, 'STMS'::text, 'STMSB'::text, 'STRT'::text, 'WTRC'::text])) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS water_body,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = 'ISLS'::text) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS island_group,
                    string_agg(DISTINCT (
                        CASE
                            WHEN (tag_geoname.geonames_type_mapped = ANY (ARRAY['ATOL'::text, 'ISL'::text, 'ISLET'::text])) THEN COALESCE(tag_geoname.gazetteer_pref_label, tag_geoname.original_location)
                            ELSE NULL::character varying
                        END)::text, ', '::text) AS island,
                    (array_agg(tag_geoname.latitude ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS ndwc_tag_decimal_latitude,
                    (array_agg(tag_geoname.longitude ORDER BY tag_geoname.priority DESC, tag_geoname.geonames_type_mapped, tag_geoname.gazetteer_pref_label))[1] AS ndwc_tag_decimal_longitude,
                    coordinates.decimal_start_latitude AS ndwc_gtu_decimal_latitude,
                    coordinates.decimal_start_longitude AS ndwc_gtu_decimal_longitude,
                        CASE coordinates.datum
                            WHEN 'ED50'::text THEN 'EPSG:4230'::text
                            WHEN 'WGS84'::text THEN 'EPSG:4326'::text
                            ELSE NULL::text
                        END AS geodetic_datum,
                    ((((coordinates.datum)::text || ' ('::text) || (coordinates.ellipsoid)::text) || ')'::text) AS verbatim_srs,
                        CASE
                            WHEN (coordinates.decimal_start_longitude IS NOT NULL) THEN gtu_1.lat_long_accuracy
                            ELSE (
                            CASE
                                WHEN ((array_agg(tag_geoname.longitude ORDER BY tag_geoname.priority DESC))[1] IS NOT NULL) THEN 999999
                                ELSE NULL::integer
                            END)::double precision
                        END AS coordinate_uncertainty_in_meters,
                        CASE
                            WHEN ((coordinates.decimal_start_longitude IS NOT NULL) AND (coordinates.decimal_start_latitude IS NOT NULL) AND (coordinates.decimal_end_longitude IS NOT NULL) AND (coordinates.decimal_end_latitude IS NOT NULL)) THEN (((((((('LINESTRING('::text || coordinates.decimal_start_longitude) || ' '::text) || coordinates.decimal_start_latitude) || ', '::text) || coordinates.decimal_end_longitude) || ' '::text) || coordinates.decimal_end_latitude) || ')'::text)
                            ELSE NULL::text
                        END AS footprint_wkt
                   FROM (((darwin2.gtu gtu_1
                     LEFT JOIN darwin2.tag_groups tags ON ((gtu_1.id = tags.gtu_ref)))
                     LEFT JOIN ipt.mv_tag_to_locations tag_geoname ON (((tag_geoname.tag_identifier = tags.id) AND (tag_geoname.geonames_type_mapped IS NOT NULL))))
                     LEFT JOIN ipt.mv_spatial coordinates ON ((coordinates.gtu_ref = gtu_1.id)))
                  WHERE (tag_geoname.geonames_type_mapped IS NOT NULL)
                  GROUP BY gtu_1.id, coordinates.decimal_start_latitude, coordinates.decimal_start_longitude, coordinates.decimal_end_latitude, coordinates.decimal_end_longitude, coordinates.datum, coordinates.ellipsoid, gtu_1.lat_long_accuracy
                  ORDER BY gtu_1.id) q
        )
 SELECT DISTINCT string_agg(DISTINCT ((specimens_stable_ids.uuid)::character varying)::text, ','::text) AS ids,
    'PhysicalObject'::text AS type,
    ('https://darwin.naturalsciences.be/uri/object/'::text || (specimens_stable_ids.uuid)::text) AS occurrence_id,
    min(specimens.specimen_creation_date) AS ndwc_created,
    max(GREATEST(specimen_auditing.modification_date_time, gtu_auditing.modification_date_time)) AS modified,
        CASE
            WHEN ((collections.code)::text = ANY (ARRAY[('paleo'::character varying)::text, ('IST'::character varying)::text, ('PalBot'::character varying)::text])) THEN 'FossilSpecimen'::text
            ELSE 'PreservedSpecimen'::text
        END AS basis_of_record,
    'present'::text AS occurrence_status,
    'Royal Belgian Institute of Natural Sciences'::text AS rights_holder,
    'https://www.wikidata.org/wiki/Q222297'::text AS institution_id,
    'http://biocol.org/urn:lsid:biocol.org:col:35271'::text AS old_institution_id,
    'RBINS-Scientific Heritage'::text AS institution_code,
    'RBINS'::text AS owner_institution_code,
    collections.name_indexed AS dataset_id,
    collections.name AS dataset_name,
    ('urn:catalog:RBINS:'::text || (collections.code)::text) AS collection_code,
    collections.name AS collection_name,
    ('http://collections.naturalsciences.be/'::text || collections.id) AS collection_id,
    (((collections.path)::text || collections.id) || '/'::text) AS ndwc_collection_path,
    string_agg(DISTINCT (((((COALESCE(codes.code_prefix, ''::character varying))::text || (COALESCE(codes.code_prefix_separator, ''::character varying))::text) || (COALESCE(codes.code, ''::character varying))::text) || (COALESCE(codes.code_suffix_separator, ''::character varying))::text) || (COALESCE(codes.code_suffix, ''::character varying))::text), ','::text) AS catalog_number,
    'en'::text AS language,
    'https://creativecommons.org/licenses/by-nc/4.0'::text AS license,
    specimens.taxon_name AS scientific_name,
    taxa.taxonomy_ref AS ndwc_local_taxon_id,
    taxa.worms_id AS scientific_name_id,
    taxa.gbif_id AS taxon_id,
    taxa.parent_name_usage,
    taxa.kingdom,
    taxa.phylum,
    taxa.class,
    taxa.ordo,
    taxa.family,
    taxa.genus,
    taxa.subgenus,
    taxa.specific_epithet,
    taxa.infra_specific_epithet,
    taxa.scientific_name_authorship,
    'ICZN'::text AS nomenclatural_code,
    taxa.taxonomic_status,
    taxon_remarks.comment AS taxon_remarks,
    specimens.taxon_level_name AS taxon_rank,
    btrim("substring"((specimens.taxon_name)::text, ' spp\.+$| sp\.| aff\.+| cfr\.+| cf\.+'::text)) AS identification_qualifier,
    specimens.type AS type_status,
    specimens.taxon_path AS ndwc_taxon_path,
    specimens.taxon_ref AS ndwc_taxon_ref,
    ( SELECT string_agg((people.formated_name)::text, ', '::text ORDER BY people.id) AS string_agg
           FROM darwin2.people
          WHERE (people.id = ANY (specimens.spec_coll_ids))) AS recorded_by,
    max(identifications.notion_date) AS date_identified,
    COALESCE(specimens.specimen_count_max, specimens.specimen_count_min, 1) AS organism_quantity,
    'SpecimensInContainer'::text AS organism_quantity_type,
    specimens.sex,
    specimens.stage AS life_stage,
    (((COALESCE(('container type: '::text || (specimens.container_type)::text), ''::text) || COALESCE(('; sample preparator: '::text || string_agg(mof_preparator.measurement_value, ', '::text)), ''::text)) || COALESCE(('; sample preparation: '::text || string_agg(mof_preparation.measurement_value, ', '::text)), ''::text)) || COALESCE(('; preservation method: '::text || (specimens.container_storage)::text), ''::text)) AS preparations,
    (specimens.specimen_status)::text AS disposition,
    ('urn:catalog:RBINS:IG:'::text || (specimens.ig_num)::text) AS other_catalog_numbers,
    (COALESCE(string_agg(DISTINCT (b.title)::text, ', '::text), ''::text) || COALESCE((' '::text || string_agg(DISTINCT (b.abstract)::text, ', '::text)), ''::text)) AS associated_references,
        CASE
            WHEN specimens.station_visible THEN NULL::text
            ELSE 'Precise location information withheld - country only'::text
        END AS information_withheld,
        CASE
            WHEN specimens.station_visible THEN locations.verbatim_location
            ELSE NULL::text
        END AS verbatim_location,
        CASE
            WHEN specimens.station_visible THEN locations.location
            ELSE NULL::text
        END AS location,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_nice_verbatim_location
            ELSE NULL::text
        END AS ndwc_nice_verbatim_location,
        CASE
            WHEN specimens.station_visible THEN locations.location_id
            ELSE NULL::character varying
        END AS location_id,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_geotypes
            ELSE NULL::text[]
        END AS ndwc_geotypes,
    specimens.gtu_country_tag_value AS ndwc_verbatim_country,
    specimens.gtu_ref AS ndwc_gtu_identifier,
    locations.country,
    locations.country_code,
        CASE
            WHEN specimens.station_visible THEN locations.water_body
            ELSE NULL::text
        END AS water_body,
        CASE
            WHEN specimens.station_visible THEN locations.island_group
            ELSE NULL::text
        END AS island_group,
        CASE
            WHEN specimens.station_visible THEN locations.island
            ELSE NULL::text
        END AS island,
        CASE
            WHEN specimens.station_visible THEN locations.decimal_latitude
            ELSE NULL::double precision
        END AS decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.decimal_longitude
            ELSE NULL::double precision
        END AS decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_tag_decimal_latitude
            ELSE NULL::numeric
        END AS ndwc_tag_decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_tag_decimal_longitude
            ELSE NULL::numeric
        END AS ndwc_tag_decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_gtu_decimal_latitude
            ELSE NULL::double precision
        END AS ndwc_gtu_decimal_latitude,
        CASE
            WHEN specimens.station_visible THEN locations.ndwc_gtu_decimal_longitude
            ELSE NULL::double precision
        END AS ndwc_gtu_decimal_longitude,
        CASE
            WHEN specimens.station_visible THEN locations.geodetic_datum
            ELSE NULL::text
        END AS geodetic_datum,
        CASE
            WHEN specimens.station_visible THEN locations.verbatim_srs
            ELSE NULL::text
        END AS verbatim_srs,
        CASE
            WHEN specimens.station_visible THEN locations.coordinate_uncertainty_in_meters
            ELSE NULL::double precision
        END AS coordinate_uncertainty_in_meters,
        CASE
            WHEN specimens.station_visible THEN locations.footprint_wkt
            ELSE NULL::text
        END AS footprint_wkt,
    elevation.measurement_value AS minimum_elevation_in_meters,
    elevation.measurement_value AS maximum_elevation_in_meters,
        CASE
            WHEN (sampling_depth.measurement_value IS NOT NULL) THEN sampling_depth.measurement_value
            WHEN ((sampling_depth_max.measurement_value IS NOT NULL) AND (sampling_depth_min.measurement_value IS NULL)) THEN sampling_depth_max.measurement_value
            ELSE sampling_depth_min.measurement_value
        END AS minimum_depth_in_meters,
        CASE
            WHEN (sampling_depth.measurement_value IS NOT NULL) THEN sampling_depth.measurement_value
            WHEN ((sampling_depth_min.measurement_value IS NOT NULL) AND (sampling_depth_max.measurement_value IS NULL)) THEN sampling_depth_min.measurement_value
            ELSE sampling_depth_max.measurement_value
        END AS maximum_depth_in_meters,
    ( SELECT string_agg((people.formated_name)::text, ', '::text ORDER BY people.id) AS string_agg
           FROM darwin2.people
          WHERE (people.id = ANY (specimens.spec_ident_ids))) AS identified_by,
    (
        CASE
            WHEN (specimens.gtu_from_date_mask = 0) THEN
            CASE
                WHEN (specimens.gtu_to_date_mask <> 0) THEN replace((specimens.gtu_to_date)::text, '-xx'::text, ''::text)
                ELSE NULL::text
            END
            ELSE replace(darwin2.fct_mask_date(specimens.gtu_from_date, specimens.gtu_from_date_mask), '-xx'::text, ''::text)
        END ||
        CASE
            WHEN ((specimens.gtu_from_date = specimens.gtu_to_date) OR (specimens.gtu_to_date_mask = 0)) THEN ''::text
            ELSE ('/'::text || replace(darwin2.fct_mask_date(specimens.gtu_to_date, specimens.gtu_to_date_mask), '-xx'::text, ''::text))
        END) AS event_date,
    specimens.gtu_code AS field_number,
    NULL::text AS habitat
   FROM ((((((((((((((((((darwin2.specimens
     LEFT JOIN darwin2.specimens_stable_ids ON ((specimens.id = specimens_stable_ids.specimen_ref)))
     LEFT JOIN darwin2.users_tracking specimen_auditing ON (((specimen_auditing.record_id = specimens.id) AND ((specimen_auditing.referenced_relation)::text = 'specimens'::text))))
     LEFT JOIN darwin2.collections ON ((specimens.collection_ref = collections.id)))
     LEFT JOIN darwin2.codes ON ((((codes.referenced_relation)::text = 'specimens'::text) AND ((codes.code_category)::text = 'main'::text) AND (specimens.id = codes.record_id))))
     LEFT JOIN darwin2.identifications ON ((((identifications.referenced_relation)::text = 'specimens'::text) AND (specimens.id = identifications.record_id) AND ((identifications.notion_concerned)::text = 'taxonomy'::text) AND (date_part('year'::text, identifications.notion_date) > (1800)::double precision))))
     LEFT JOIN darwin2.gtu ON ((specimens.gtu_ref = gtu.id)))
     LEFT JOIN darwin2.users_tracking gtu_auditing ON (((gtu_auditing.record_id = gtu.id) AND ((gtu_auditing.referenced_relation)::text = 'gtu'::text))))
     LEFT JOIN location_cte locations ON ((locations.gtu_ref = gtu.id)))
     LEFT JOIN taxonomy_authority_cte taxa ON ((taxa.taxonomy_ref = specimens.taxon_ref)))
     LEFT JOIN darwin2.catalogue_bibliography cb ON (((cb.record_id = specimens.id) AND ((cb.referenced_relation)::text = 'specimens'::text))))
     LEFT JOIN darwin2.bibliography b ON ((b.id = cb.bibliography_ref)))
     LEFT JOIN darwin2.comments taxon_remarks ON (((taxon_remarks.record_id = taxa.taxonomy_ref) AND ((taxon_remarks.referenced_relation)::text = 'taxonomy'::text) AND ((taxon_remarks.notion_concerned)::text = 'taxon information'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof elevation ON (((elevation.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (elevation.measurement_type = 'elevation'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth ON (((sampling_depth.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth.measurement_type = 'sampling_depth'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth_min ON (((sampling_depth_min.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth_min.measurement_type = 'sampling_depth_min'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof sampling_depth_max ON (((sampling_depth_max.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (sampling_depth_max.measurement_type = 'sampling_depth_max'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof mof_preparation ON (((mof_preparation.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (mof_preparation.measurement_type = 'preparation'::text))))
     LEFT JOIN ipt.mv_darwin_ipt_rbins_mof mof_preparator ON (((mof_preparator.occurrence_id = ('http://collections.naturalsciences.be/specimen/'::text || (specimens.id)::text)) AND (mof_preparator.measurement_type = 'preparator'::text))))
  WHERE (((collections.path)::text !~~ '/231%'::text) AND (specimens.taxon_name IS NOT NULL) AND (specimens_stable_ids.uuid IS NOT NULL))
  GROUP BY specimens_stable_ids.uuid, specimens.id, collections.code, collections.name, collections.id, collections.path, specimens.taxon_name, taxa.worms_id, taxa.gbif_id, taxa.kingdom, taxa.phylum, taxa.class, taxa.ordo, taxa.family, taxa.genus, taxa.subgenus, taxa.specific_epithet, taxa.infra_specific_epithet, taxa.scientific_name_authorship, taxa.taxonomy_ref, taxa.parent_name_usage, taxa.taxonomic_status, specimens.taxon_level_name, specimens.spec_coll_ids, specimens.spec_ident_ids, specimens.station_visible, specimens.type, specimens.taxon_path, specimens.taxon_ref, specimens.specimen_count_max, specimens.specimen_count_min, specimens.sex, specimens.stage, specimens.container_type, specimens.container_storage, specimens.ig_num, specimens.gtu_country_tag_value, locations.verbatim_location, locations.country_code, locations.location, locations.ndwc_nice_verbatim_location, locations.location_id, locations.ndwc_geotypes, locations.country, locations.water_body, locations.island_group, locations.island, locations.decimal_latitude, locations.decimal_longitude, locations.ndwc_tag_decimal_latitude, locations.ndwc_tag_decimal_longitude, locations.ndwc_gtu_decimal_latitude, locations.ndwc_gtu_decimal_longitude, locations.geodetic_datum, locations.verbatim_srs, locations.coordinate_uncertainty_in_meters, locations.footprint_wkt, specimens.gtu_from_date_mask, specimens.gtu_from_date, specimens.gtu_to_date_mask, specimens.gtu_to_date, specimens.gtu_ref, specimens.gtu_code, specimens.specimen_status, taxon_remarks.comment, elevation.measurement_value, sampling_depth.measurement_value, sampling_depth_min.measurement_value, sampling_depth_max.measurement_value
  ORDER BY ('https://darwin.naturalsciences.be/uri/object/'::text || (specimens_stable_ids.uuid)::text);


--
-- TOC entry 8027 (class 2618 OID 1442574)
-- Name: v_pb_kerguelen82 _RETURN; Type: RULE; Schema: mista_work; Owner: darwin2
--

CREATE OR REPLACE VIEW mista_work.v_pb_kerguelen82 AS
 SELECT gtu.id,
    gtu.code,
    string_agg((tag_groups.tag_value)::text, ';'::text) AS string_agg,
    gtu.longitude,
    gtu.latitude
   FROM (darwin2.gtu
     LEFT JOIN darwin2.tag_groups ON ((gtu.id = tag_groups.gtu_ref)))
  WHERE ((gtu.code)::text ~~ '%KER82%'::text)
  GROUP BY gtu.id, gtu.code;


--
-- TOC entry 7596 (class 2620 OID 2856922)
-- Name: collections fct_chk_peopleismoral_collections; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_chk_peopleismoral_collections AFTER INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_peopleismoral();


--
-- TOC entry 7560 (class 2620 OID 2856923)
-- Name: bibliography fct_cpy_trg_del_dict_bibliography; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_bibliography AFTER DELETE OR UPDATE ON darwin2.bibliography FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7586 (class 2620 OID 2856924)
-- Name: codes fct_cpy_trg_del_dict_codes; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_codes AFTER DELETE OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7595 (class 2620 OID 2856925)
-- Name: collection_maintenance fct_cpy_trg_del_dict_collection_maintenance; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_collection_maintenance AFTER DELETE OR UPDATE ON darwin2.collection_maintenance FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7626 (class 2620 OID 2856926)
-- Name: identifications fct_cpy_trg_del_dict_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_identifications AFTER DELETE OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7639 (class 2620 OID 2856927)
-- Name: identifiers fct_cpy_trg_del_dict_identifiers; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_identifiers AFTER DELETE OR UPDATE ON darwin2.identifiers FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7651 (class 2620 OID 2856928)
-- Name: insurances fct_cpy_trg_del_dict_insurances; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_insurances AFTER DELETE OR UPDATE ON darwin2.insurances FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7676 (class 2620 OID 2856929)
-- Name: loan_status fct_cpy_trg_del_dict_loan_status; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_loan_status AFTER DELETE OR UPDATE ON darwin2.loan_status FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7681 (class 2620 OID 2856930)
-- Name: mineralogy fct_cpy_trg_del_dict_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_mineralogy AFTER DELETE OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7725 (class 2620 OID 2856931)
-- Name: people fct_cpy_trg_del_dict_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_people AFTER DELETE OR UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7733 (class 2620 OID 2856932)
-- Name: people_addresses fct_cpy_trg_del_dict_people_addresses; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_people_addresses AFTER DELETE OR UPDATE ON darwin2.people_addresses FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7737 (class 2620 OID 2856933)
-- Name: people_sub_types fct_cpy_trg_del_dict_people_sub_types; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_people_sub_types AFTER DELETE OR UPDATE ON darwin2.people_sub_types FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7619 (class 2620 OID 2856934)
-- Name: properties fct_cpy_trg_del_dict_properties; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_properties AFTER DELETE OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7700 (class 2620 OID 2856935)
-- Name: specimens fct_cpy_trg_del_dict_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_specimens AFTER DELETE OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7741 (class 2620 OID 2856936)
-- Name: specimens_relationships fct_cpy_trg_del_dict_specimens_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_specimens_relationships AFTER DELETE OR UPDATE ON darwin2.specimens_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7694 (class 2620 OID 2856937)
-- Name: tag_groups fct_cpy_trg_del_dict_tag_groups; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_tag_groups AFTER DELETE OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7756 (class 2620 OID 2856938)
-- Name: users fct_cpy_trg_del_dict_users; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_users AFTER DELETE OR UPDATE ON darwin2.users FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7761 (class 2620 OID 2856939)
-- Name: users_addresses fct_cpy_trg_del_dict_users_addresses; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_del_dict_users_addresses AFTER DELETE OR UPDATE ON darwin2.users_addresses FOR EACH ROW EXECUTE FUNCTION darwin2.trg_del_dict();


--
-- TOC entry 7559 (class 2620 OID 2856940)
-- Name: bibliography fct_cpy_trg_ins_update_dict_bibliography; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_bibliography AFTER INSERT OR UPDATE ON darwin2.bibliography FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7585 (class 2620 OID 2856941)
-- Name: codes fct_cpy_trg_ins_update_dict_codes; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_codes AFTER INSERT OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7594 (class 2620 OID 2856942)
-- Name: collection_maintenance fct_cpy_trg_ins_update_dict_collection_maintenance; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_collection_maintenance AFTER INSERT OR UPDATE ON darwin2.collection_maintenance FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7625 (class 2620 OID 2856943)
-- Name: identifications fct_cpy_trg_ins_update_dict_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_identifications AFTER INSERT OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7640 (class 2620 OID 2856944)
-- Name: identifiers fct_cpy_trg_ins_update_dict_identifiers; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_identifiers AFTER INSERT OR UPDATE ON darwin2.identifiers FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7652 (class 2620 OID 2856945)
-- Name: insurances fct_cpy_trg_ins_update_dict_insurances; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_insurances AFTER INSERT OR UPDATE ON darwin2.insurances FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7675 (class 2620 OID 2856946)
-- Name: loan_status fct_cpy_trg_ins_update_dict_loan_status; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_loan_status AFTER INSERT OR UPDATE ON darwin2.loan_status FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7682 (class 2620 OID 2856947)
-- Name: mineralogy fct_cpy_trg_ins_update_dict_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_mineralogy AFTER INSERT OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7726 (class 2620 OID 2856948)
-- Name: people fct_cpy_trg_ins_update_dict_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_people AFTER INSERT OR UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7732 (class 2620 OID 2856949)
-- Name: people_addresses fct_cpy_trg_ins_update_dict_people_addresses; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_people_addresses AFTER INSERT OR UPDATE ON darwin2.people_addresses FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7738 (class 2620 OID 2856950)
-- Name: people_sub_types fct_cpy_trg_ins_update_dict_people_sub_types; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_people_sub_types AFTER INSERT OR UPDATE ON darwin2.people_sub_types FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7618 (class 2620 OID 2856951)
-- Name: properties fct_cpy_trg_ins_update_dict_properties; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_properties AFTER INSERT OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7701 (class 2620 OID 2856952)
-- Name: specimens fct_cpy_trg_ins_update_dict_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_specimens AFTER INSERT OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7742 (class 2620 OID 2856953)
-- Name: specimens_relationships fct_cpy_trg_ins_update_dict_specimens_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_specimens_relationships AFTER INSERT OR UPDATE ON darwin2.specimens_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7695 (class 2620 OID 2856954)
-- Name: tag_groups fct_cpy_trg_ins_update_dict_tag_groups; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_tag_groups AFTER INSERT OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7757 (class 2620 OID 2856955)
-- Name: users fct_cpy_trg_ins_update_dict_users; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_users AFTER INSERT OR UPDATE ON darwin2.users FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7762 (class 2620 OID 2856956)
-- Name: users_addresses fct_cpy_trg_ins_update_dict_users_addresses; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_cpy_trg_ins_update_dict_users_addresses AFTER INSERT OR UPDATE ON darwin2.users_addresses FOR EACH ROW EXECUTE FUNCTION darwin2.trg_ins_update_dict();


--
-- TOC entry 7705 (class 2620 OID 2856957)
-- Name: specimens fct_trg_rmca_create_uuid; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_trg_rmca_create_uuid AFTER INSERT ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.trg_rmca_create_uuid();


--
-- TOC entry 7645 (class 2620 OID 2856958)
-- Name: imports fct_trg_rmca_del_import_related; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_trg_rmca_del_import_related BEFORE DELETE OR UPDATE ON darwin2.imports FOR EACH ROW EXECUTE FUNCTION darwin2.trg_rmca_del_import_related();


--
-- TOC entry 7646 (class 2620 OID 2856959)
-- Name: imports fct_trg_rmca_import_taxonomy_history; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER fct_trg_rmca_import_taxonomy_history BEFORE INSERT OR UPDATE ON darwin2.imports FOR EACH ROW EXECUTE FUNCTION darwin2.trg_rmca_import_taxonomy_history();


--
-- TOC entry 7677 (class 2620 OID 2856960)
-- Name: loans trg_add_status_history; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_add_status_history AFTER INSERT ON darwin2.loans FOR EACH ROW EXECUTE FUNCTION darwin2.fct_auto_insert_status_history();


--
-- TOC entry 7553 (class 2620 OID 2856961)
-- Name: staging trg_catalogue_import_keywords_update; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_catalogue_import_keywords_update AFTER INSERT OR DELETE OR UPDATE ON darwin2.staging FOR EACH ROW EXECUTE FUNCTION darwin2.fct_catalogue_import_keywords_update();


--
-- TOC entry 7747 (class 2620 OID 2856962)
-- Name: staging_catalogue trg_catalogue_import_keywords_update; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_catalogue_import_keywords_update AFTER INSERT OR DELETE OR UPDATE ON darwin2.staging_catalogue FOR EACH ROW EXECUTE FUNCTION darwin2.fct_catalogue_import_keywords_update();


--
-- TOC entry 7610 (class 2620 OID 2856963)
-- Name: collections_rights trg_chk_canupdatecollectionsrights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_canupdatecollectionsrights BEFORE UPDATE ON darwin2.collections_rights FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_canupdatecollectionsrights();


--
-- TOC entry 7650 (class 2620 OID 2856964)
-- Name: informative_workflow trg_chk_is_last_informative_workflow; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_is_last_informative_workflow BEFORE INSERT ON darwin2.informative_workflow FOR EACH ROW EXECUTE FUNCTION darwin2.fct_remove_last_flag();


--
-- TOC entry 7674 (class 2620 OID 2856965)
-- Name: loan_status trg_chk_is_last_loan_status; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_is_last_loan_status BEFORE INSERT ON darwin2.loan_status FOR EACH ROW EXECUTE FUNCTION darwin2.fct_remove_last_flag_loan();


--
-- TOC entry 7597 (class 2620 OID 2856966)
-- Name: collections trg_chk_parentcollinstitution; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_parentcollinstitution BEFORE INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_parentcollinstitution();


--
-- TOC entry 7727 (class 2620 OID 2856967)
-- Name: people trg_chk_peopletype; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_peopletype AFTER UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_peopletype();


--
-- TOC entry 7567 (class 2620 OID 2856968)
-- Name: chronostratigraphy trg_chk_possible_upper_level_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_possible_upper_level_chronostratigraphy AFTER INSERT OR UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_chk_possible_upper_level();


--
-- TOC entry 7656 (class 2620 OID 2856969)
-- Name: lithology trg_chk_possible_upper_level_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_possible_upper_level_lithology AFTER INSERT OR UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_chk_possible_upper_level();


--
-- TOC entry 7663 (class 2620 OID 2856970)
-- Name: lithostratigraphy trg_chk_possible_upper_level_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_possible_upper_level_lithostratigraphy AFTER INSERT OR UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_chk_possible_upper_level();


--
-- TOC entry 7683 (class 2620 OID 2856971)
-- Name: mineralogy trg_chk_possible_upper_level_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_possible_upper_level_mineralogy AFTER INSERT OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_chk_possible_upper_level();


--
-- TOC entry 7716 (class 2620 OID 2856972)
-- Name: taxonomy trg_chk_possible_upper_level_taxonomy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_possible_upper_level_taxonomy AFTER INSERT OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_chk_possible_upper_level();


--
-- TOC entry 7584 (class 2620 OID 2856973)
-- Name: codes trg_chk_ref_record_catalogue_codes; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_catalogue_codes AFTER INSERT OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7562 (class 2620 OID 2856974)
-- Name: catalogue_people trg_chk_ref_record_catalogue_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_catalogue_people AFTER INSERT OR UPDATE ON darwin2.catalogue_people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7580 (class 2620 OID 2856975)
-- Name: classification_synonymies trg_chk_ref_record_classification_synonymies; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_classification_synonymies AFTER INSERT OR UPDATE ON darwin2.classification_synonymies FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7593 (class 2620 OID 2856976)
-- Name: collection_maintenance trg_chk_ref_record_collection_maintenance; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_collection_maintenance AFTER INSERT OR UPDATE ON darwin2.collection_maintenance FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7611 (class 2620 OID 2856977)
-- Name: comments trg_chk_ref_record_comments; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_comments AFTER INSERT OR UPDATE ON darwin2.comments FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7636 (class 2620 OID 2856978)
-- Name: ext_links trg_chk_ref_record_ext_links; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_ext_links AFTER INSERT OR UPDATE ON darwin2.ext_links FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7624 (class 2620 OID 2856979)
-- Name: identifications trg_chk_ref_record_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_identifications AFTER INSERT OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7649 (class 2620 OID 2856980)
-- Name: informative_workflow trg_chk_ref_record_informative_workflow; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_informative_workflow AFTER INSERT OR UPDATE ON darwin2.informative_workflow FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7653 (class 2620 OID 2856981)
-- Name: insurances trg_chk_ref_record_insurances; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_insurances AFTER INSERT OR UPDATE ON darwin2.insurances FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7617 (class 2620 OID 2856982)
-- Name: properties trg_chk_ref_record_properties; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_properties AFTER INSERT OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7564 (class 2620 OID 2856983)
-- Name: catalogue_relationships trg_chk_ref_record_relationship_catalogue_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_relationship_catalogue_relationships AFTER INSERT OR UPDATE ON darwin2.catalogue_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecordrelationship();


--
-- TOC entry 7561 (class 2620 OID 2856984)
-- Name: template_table_record_ref trg_chk_ref_record_template_table_record_ref; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_ref_record_template_table_record_ref AFTER INSERT OR UPDATE ON darwin2.template_table_record_ref FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7763 (class 2620 OID 2856985)
-- Name: vernacular_names trg_chk_ref_record_vernacular_names; Type: TRIGGER; Schema: darwin2; Owner: postgres
--

CREATE TRIGGER trg_chk_ref_record_vernacular_names AFTER INSERT OR UPDATE ON darwin2.vernacular_names FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_referencedrecord();


--
-- TOC entry 7706 (class 2620 OID 2856986)
-- Name: specimens trg_chk_specimencollectionallowed; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_specimencollectionallowed BEFORE INSERT OR DELETE OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_specimencollectionallowed();


--
-- TOC entry 7707 (class 2620 OID 2856987)
-- Name: specimens trg_chk_specimens_not_loaned; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_specimens_not_loaned BEFORE DELETE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.chk_specimens_not_loaned();


--
-- TOC entry 7568 (class 2620 OID 2856988)
-- Name: chronostratigraphy trg_chk_upper_level_for_childrens_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_upper_level_for_childrens_chronostratigraphy AFTER UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_upper_level_for_childrens();


--
-- TOC entry 7657 (class 2620 OID 2856989)
-- Name: lithology trg_chk_upper_level_for_childrens_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_upper_level_for_childrens_lithology AFTER UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_upper_level_for_childrens();


--
-- TOC entry 7664 (class 2620 OID 2856990)
-- Name: lithostratigraphy trg_chk_upper_level_for_childrens_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_upper_level_for_childrens_lithostratigraphy AFTER UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_upper_level_for_childrens();


--
-- TOC entry 7684 (class 2620 OID 2856991)
-- Name: mineralogy trg_chk_upper_level_for_childrens_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_upper_level_for_childrens_mineralogy AFTER UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_upper_level_for_childrens();


--
-- TOC entry 7717 (class 2620 OID 2856992)
-- Name: taxonomy trg_chk_upper_level_for_childrens_taxonomy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_chk_upper_level_for_childrens_taxonomy AFTER UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_chk_upper_level_for_childrens();


--
-- TOC entry 7623 (class 2620 OID 2856993)
-- Name: identifications trg_clr_identifiers_in_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_identifiers_in_flat BEFORE DELETE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_identifiers_in_flat();


--
-- TOC entry 7558 (class 2620 OID 2856994)
-- Name: bibliography trg_clr_referencerecord_bibliography; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_bibliography AFTER DELETE OR UPDATE ON darwin2.bibliography FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7569 (class 2620 OID 2856995)
-- Name: chronostratigraphy trg_clr_referencerecord_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_chronostratigraphy AFTER DELETE OR UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7592 (class 2620 OID 2856996)
-- Name: collection_maintenance trg_clr_referencerecord_collectionmaintenance; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_collectionmaintenance AFTER DELETE OR UPDATE ON darwin2.collection_maintenance FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7598 (class 2620 OID 2856997)
-- Name: collections trg_clr_referencerecord_collections; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_collections AFTER DELETE OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7635 (class 2620 OID 2856998)
-- Name: expeditions trg_clr_referencerecord_expeditions; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_expeditions AFTER DELETE OR UPDATE ON darwin2.expeditions FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7627 (class 2620 OID 2856999)
-- Name: gtu trg_clr_referencerecord_gtu; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_gtu AFTER DELETE OR UPDATE ON darwin2.gtu FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7622 (class 2620 OID 2857000)
-- Name: identifications trg_clr_referencerecord_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_identifications AFTER DELETE OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7644 (class 2620 OID 2857001)
-- Name: igs trg_clr_referencerecord_igs; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_igs AFTER DELETE OR UPDATE ON darwin2.igs FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7654 (class 2620 OID 2857002)
-- Name: insurances trg_clr_referencerecord_insurances; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_insurances AFTER DELETE OR UPDATE ON darwin2.insurances FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7658 (class 2620 OID 2857003)
-- Name: lithology trg_clr_referencerecord_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_lithology AFTER DELETE OR UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7665 (class 2620 OID 2857004)
-- Name: lithostratigraphy trg_clr_referencerecord_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_lithostratigraphy AFTER DELETE OR UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7671 (class 2620 OID 2857005)
-- Name: loan_items trg_clr_referencerecord_loan_items; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_loan_items AFTER DELETE OR UPDATE ON darwin2.loan_items FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7678 (class 2620 OID 2857006)
-- Name: loans trg_clr_referencerecord_loans; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_loans AFTER DELETE OR UPDATE ON darwin2.loans FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7685 (class 2620 OID 2857007)
-- Name: mineralogy trg_clr_referencerecord_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_mineralogy AFTER DELETE OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7690 (class 2620 OID 2857008)
-- Name: multimedia trg_clr_referencerecord_multimedia; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_multimedia AFTER DELETE OR UPDATE ON darwin2.multimedia FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7728 (class 2620 OID 2857009)
-- Name: people trg_clr_referencerecord_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_people AFTER DELETE OR UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7708 (class 2620 OID 2857010)
-- Name: specimens trg_clr_referencerecord_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_specimens AFTER DELETE OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7743 (class 2620 OID 2857011)
-- Name: specimens_relationships trg_clr_referencerecord_specimens_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_specimens_relationships AFTER DELETE OR UPDATE ON darwin2.specimens_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7554 (class 2620 OID 2857012)
-- Name: staging trg_clr_referencerecord_staging; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_staging AFTER DELETE OR UPDATE ON darwin2.staging FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7748 (class 2620 OID 2857013)
-- Name: staging_info trg_clr_referencerecord_staging_info; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_staging_info AFTER DELETE OR UPDATE ON darwin2.staging_info FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7718 (class 2620 OID 2857014)
-- Name: taxonomy trg_clr_referencerecord_taxa; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_taxa AFTER DELETE OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7758 (class 2620 OID 2857015)
-- Name: users trg_clr_referencerecord_users; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_referencerecord_users AFTER DELETE OR UPDATE ON darwin2.users FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7764 (class 2620 OID 2857016)
-- Name: vernacular_names trg_clr_referencerecord_vernacularnames; Type: TRIGGER; Schema: darwin2; Owner: postgres
--

CREATE TRIGGER trg_clr_referencerecord_vernacularnames AFTER DELETE OR UPDATE ON darwin2.vernacular_names FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clear_referencedrecord();


--
-- TOC entry 7709 (class 2620 OID 2857017)
-- Name: specimens trg_clr_specialstatus_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_clr_specialstatus_specimens BEFORE INSERT OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_clr_specialstatus();


--
-- TOC entry 7691 (class 2620 OID 2857018)
-- Name: multimedia trg_cpy_deleted_file; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_deleted_file AFTER DELETE ON darwin2.multimedia FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_deleted_file();


--
-- TOC entry 7729 (class 2620 OID 2857019)
-- Name: people trg_cpy_formattedname; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_formattedname BEFORE INSERT OR UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_formattedname();


--
-- TOC entry 7759 (class 2620 OID 2857020)
-- Name: users trg_cpy_formattedname; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_formattedname BEFORE INSERT OR UPDATE ON darwin2.users FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_formattedname();


--
-- TOC entry 7557 (class 2620 OID 2857021)
-- Name: bibliography trg_cpy_fulltoindex_bibliography; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_bibliography BEFORE INSERT OR UPDATE ON darwin2.bibliography FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7570 (class 2620 OID 2857022)
-- Name: chronostratigraphy trg_cpy_fulltoindex_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_chronostratigraphy BEFORE INSERT OR UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7574 (class 2620 OID 2857023)
-- Name: classification_keywords trg_cpy_fulltoindex_classification_keywords; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_classification_keywords BEFORE INSERT OR UPDATE ON darwin2.classification_keywords FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7583 (class 2620 OID 2857024)
-- Name: codes trg_cpy_fulltoindex_codes; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_codes BEFORE INSERT OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7588 (class 2620 OID 2857025)
-- Name: collecting_methods trg_cpy_fulltoindex_collecting_methods; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_collecting_methods BEFORE INSERT OR UPDATE ON darwin2.collecting_methods FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7589 (class 2620 OID 2857026)
-- Name: collecting_tools trg_cpy_fulltoindex_collecting_tools; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_collecting_tools BEFORE INSERT OR UPDATE ON darwin2.collecting_tools FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7599 (class 2620 OID 2857027)
-- Name: collections trg_cpy_fulltoindex_collection; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_collection BEFORE INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7612 (class 2620 OID 2857028)
-- Name: comments trg_cpy_fulltoindex_comments; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_comments BEFORE INSERT OR UPDATE ON darwin2.comments FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7634 (class 2620 OID 2857029)
-- Name: expeditions trg_cpy_fulltoindex_expeditions; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_expeditions BEFORE INSERT OR UPDATE ON darwin2.expeditions FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7637 (class 2620 OID 2857030)
-- Name: ext_links trg_cpy_fulltoindex_ext_links; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_ext_links BEFORE INSERT OR UPDATE ON darwin2.ext_links FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7621 (class 2620 OID 2857031)
-- Name: identifications trg_cpy_fulltoindex_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_identifications BEFORE INSERT OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7643 (class 2620 OID 2857032)
-- Name: igs trg_cpy_fulltoindex_igs; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_igs BEFORE INSERT OR UPDATE ON darwin2.igs FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7659 (class 2620 OID 2857033)
-- Name: lithology trg_cpy_fulltoindex_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_lithology BEFORE INSERT OR UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7666 (class 2620 OID 2857034)
-- Name: lithostratigraphy trg_cpy_fulltoindex_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_lithostratigraphy BEFORE INSERT OR UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7679 (class 2620 OID 2857035)
-- Name: loans trg_cpy_fulltoindex_loans; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_loans BEFORE INSERT OR UPDATE ON darwin2.loans FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7686 (class 2620 OID 2857036)
-- Name: mineralogy trg_cpy_fulltoindex_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_mineralogy BEFORE INSERT OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7692 (class 2620 OID 2857037)
-- Name: multimedia trg_cpy_fulltoindex_multimedia; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_multimedia BEFORE INSERT OR UPDATE ON darwin2.multimedia FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7616 (class 2620 OID 2857038)
-- Name: properties trg_cpy_fulltoindex_properties; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_properties BEFORE INSERT OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7710 (class 2620 OID 2857039)
-- Name: specimens trg_cpy_fulltoindex_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_specimens BEFORE INSERT OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7696 (class 2620 OID 2857040)
-- Name: tag_groups trg_cpy_fulltoindex_taggroups; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_taggroups BEFORE INSERT OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7719 (class 2620 OID 2857041)
-- Name: taxonomy trg_cpy_fulltoindex_taxa; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_fulltoindex_taxa BEFORE INSERT OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7765 (class 2620 OID 2857042)
-- Name: vernacular_names trg_cpy_fulltoindex_vernacularnames; Type: TRIGGER; Schema: darwin2; Owner: postgres
--

CREATE TRIGGER trg_cpy_fulltoindex_vernacularnames BEFORE INSERT OR UPDATE ON darwin2.vernacular_names FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_fulltoindex();


--
-- TOC entry 7697 (class 2620 OID 2857043)
-- Name: tag_groups trg_cpy_gtutags_taggroups; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_gtutags_taggroups AFTER INSERT OR DELETE OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_gtutags();


--
-- TOC entry 7711 (class 2620 OID 2857044)
-- Name: specimens trg_cpy_ig_to_loan_items; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_ig_to_loan_items AFTER UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_ig_to_loan_items();


--
-- TOC entry 7628 (class 2620 OID 2857045)
-- Name: gtu trg_cpy_location; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_location BEFORE INSERT OR UPDATE ON darwin2.gtu FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_location();


--
-- TOC entry 7571 (class 2620 OID 2857046)
-- Name: chronostratigraphy trg_cpy_path_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_chronostratigraphy BEFORE INSERT OR UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path_catalogs();


--
-- TOC entry 7600 (class 2620 OID 2857047)
-- Name: collections trg_cpy_path_collections; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_collections BEFORE INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path();


--
-- TOC entry 7660 (class 2620 OID 2857048)
-- Name: lithology trg_cpy_path_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_lithology BEFORE INSERT OR UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path_catalogs();


--
-- TOC entry 7667 (class 2620 OID 2857049)
-- Name: lithostratigraphy trg_cpy_path_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_lithostratigraphy BEFORE INSERT OR UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path_catalogs();


--
-- TOC entry 7687 (class 2620 OID 2857050)
-- Name: mineralogy trg_cpy_path_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_mineralogy BEFORE INSERT OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path_catalogs();


--
-- TOC entry 7736 (class 2620 OID 2857051)
-- Name: people_relationships trg_cpy_path_peoplerelationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_peoplerelationships BEFORE INSERT OR UPDATE ON darwin2.people_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path();


--
-- TOC entry 7720 (class 2620 OID 2857052)
-- Name: taxonomy trg_cpy_path_taxonomy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_path_taxonomy BEFORE INSERT OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_path_catalogs();


--
-- TOC entry 7615 (class 2620 OID 2857053)
-- Name: properties trg_cpy_unified_values; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_unified_values BEFORE INSERT OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_unified_values();


--
-- TOC entry 7601 (class 2620 OID 2857054)
-- Name: collections trg_cpy_updatecollectionrights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_updatecollectionrights AFTER INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_updatecollectionrights();


--
-- TOC entry 7602 (class 2620 OID 2857055)
-- Name: collections trg_cpy_updatecollinstitutioncascade; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_updatecollinstitutioncascade AFTER UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_updatecollinstitutioncascade();


--
-- TOC entry 7609 (class 2620 OID 2857056)
-- Name: collections_rights trg_cpy_updatemywidgetscollrights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_updatemywidgetscollrights AFTER DELETE OR UPDATE ON darwin2.collections_rights FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_updatemywidgetscoll();


--
-- TOC entry 7608 (class 2620 OID 2857057)
-- Name: collections_rights trg_cpy_updateuserrights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_updateuserrights AFTER INSERT OR DELETE OR UPDATE ON darwin2.collections_rights FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_updateuserrights();


--
-- TOC entry 7603 (class 2620 OID 2857058)
-- Name: collections trg_cpy_updateuserrightscollections; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_cpy_updateuserrightscollections AFTER INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_cpy_updateuserrights();


--
-- TOC entry 7579 (class 2620 OID 2857059)
-- Name: classification_synonymies trg_fct_reinit_sequences_synonyms; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_reinit_sequences_synonyms AFTER INSERT OR UPDATE ON darwin2.classification_synonymies FOR EACH ROW EXECUTE FUNCTION darwin2.fct_reinit_sequences_synonyms();


--
-- TOC entry 7721 (class 2620 OID 2857060)
-- Name: taxonomy trg_fct_rmca_chk_is_already_reference_taxo; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_chk_is_already_reference_taxo BEFORE INSERT OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_chk_is_already_reference_taxo();


--
-- TOC entry 7751 (class 2620 OID 2857061)
-- Name: taxonomy_metadata trg_fct_rmca_chk_only_one_reference_taxo; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_chk_only_one_reference_taxo BEFORE INSERT OR UPDATE ON darwin2.taxonomy_metadata FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo();


--
-- TOC entry 7752 (class 2620 OID 2857062)
-- Name: taxonomy_metadata trg_fct_rmca_chk_uniqueness_reference_taxo_1; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_chk_uniqueness_reference_taxo_1 BEFORE INSERT ON darwin2.taxonomy_metadata FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo();


--
-- TOC entry 7753 (class 2620 OID 2857063)
-- Name: taxonomy_metadata trg_fct_rmca_chk_uniqueness_reference_taxo_2; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_chk_uniqueness_reference_taxo_2 AFTER UPDATE ON darwin2.taxonomy_metadata FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo();


--
-- TOC entry 7746 (class 2620 OID 2857064)
-- Name: staging_catalogue trg_fct_rmca_keep_staging_catalogue_parent; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_keep_staging_catalogue_parent BEFORE INSERT OR UPDATE ON darwin2.staging_catalogue FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_keep_staging_catalogue_parent();


--
-- TOC entry 7722 (class 2620 OID 2857065)
-- Name: taxonomy trg_fct_rmca_update_child_of_taxon_protected; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_update_child_of_taxon_protected BEFORE UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_update_child_of_taxon_protected();


--
-- TOC entry 7754 (class 2620 OID 2857066)
-- Name: taxonomy_metadata trg_fct_rmca_update_reference_taxo; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_fct_rmca_update_reference_taxo AFTER UPDATE ON darwin2.taxonomy_metadata FOR EACH ROW EXECUTE FUNCTION darwin2.fct_rmca_update_reference_taxo();


--
-- TOC entry 7582 (class 2620 OID 2857067)
-- Name: codes trg_insert_auto_code; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_insert_auto_code AFTER INSERT OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.check_auto_increment_code_in_spec();


--
-- TOC entry 7712 (class 2620 OID 2857068)
-- Name: specimens trg_insert_auto_code_del_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_insert_auto_code_del_specimens BEFORE DELETE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.check_auto_increment_code_in_spec_on_specimen();


--
-- TOC entry 7604 (class 2620 OID 2857069)
-- Name: collections trg_mca_update_parent_code; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_mca_update_parent_code AFTER INSERT OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.rmca_update_parent_code();


--
-- TOC entry 7565 (class 2620 OID 2857070)
-- Name: catalogue_relationships trg_nbr_in_relation; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_nbr_in_relation BEFORE INSERT OR UPDATE ON darwin2.catalogue_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_nbr_in_relation();


--
-- TOC entry 7578 (class 2620 OID 2857071)
-- Name: classification_synonymies trg_nbr_in_synonym; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_nbr_in_synonym AFTER INSERT OR UPDATE ON darwin2.classification_synonymies FOR EACH ROW EXECUTE FUNCTION darwin2.fct_nbr_in_synonym();


--
-- TOC entry 7648 (class 2620 OID 2857072)
-- Name: informative_workflow trg_reset_last_flag_informative_workflow; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_reset_last_flag_informative_workflow AFTER DELETE ON darwin2.informative_workflow FOR EACH ROW EXECUTE FUNCTION darwin2.fct_informative_reset_last_flag();


--
-- TOC entry 7629 (class 2620 OID 2857073)
-- Name: gtu trg_rmca_fct_clear_gtu_date; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_rmca_fct_clear_gtu_date BEFORE DELETE ON darwin2.gtu FOR EACH ROW EXECUTE FUNCTION darwin2.rmca_fct_clear_gtu_date();


--
-- TOC entry 7713 (class 2620 OID 2857074)
-- Name: specimens trg_rmca_fct_clear_specimen_date; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_rmca_fct_clear_specimen_date BEFORE DELETE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.rmca_fct_clear_specimen_date();


--
-- TOC entry 7714 (class 2620 OID 2857075)
-- Name: specimens trg_rmca_fct_update_specimen_date; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_rmca_fct_update_specimen_date AFTER INSERT OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.rmca_fct_update_specimen_date();


--
-- TOC entry 7745 (class 2620 OID 2857076)
-- Name: specimens_stable_ids trg_rmca_log_specimens_stable_ids; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_rmca_log_specimens_stable_ids BEFORE INSERT OR UPDATE ON darwin2.specimens_stable_ids FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trg_rmca_log_specimens_stable_ids();


--
-- TOC entry 7755 (class 2620 OID 2857077)
-- Name: taxonomy_metadata trg_rmca_trk_log_table_taxonomy_metadata; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_rmca_trk_log_table_taxonomy_metadata AFTER INSERT OR DELETE OR UPDATE ON darwin2.taxonomy_metadata FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7556 (class 2620 OID 2857078)
-- Name: bibliography trg_trk_log_table_bibliography; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_bibliography AFTER INSERT OR DELETE OR UPDATE ON darwin2.bibliography FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7566 (class 2620 OID 2857079)
-- Name: catalogue_relationships trg_trk_log_table_catalogue_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_catalogue_relationships AFTER INSERT OR DELETE OR UPDATE ON darwin2.catalogue_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7572 (class 2620 OID 2857080)
-- Name: chronostratigraphy trg_trk_log_table_chronostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_chronostratigraphy AFTER INSERT OR DELETE OR UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7575 (class 2620 OID 2857081)
-- Name: classification_keywords trg_trk_log_table_classification_keywords; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_classification_keywords AFTER INSERT OR DELETE OR UPDATE ON darwin2.classification_keywords FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7577 (class 2620 OID 2857082)
-- Name: classification_synonymies trg_trk_log_table_classification_synonymies; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_classification_synonymies AFTER INSERT OR DELETE OR UPDATE ON darwin2.classification_synonymies FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7576 (class 2620 OID 2857083)
-- Name: classification_synonymies trg_trk_log_table_classification_synonymies_history; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_classification_synonymies_history AFTER DELETE ON darwin2.classification_synonymies FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_old_synonyms();


--
-- TOC entry 7581 (class 2620 OID 2857084)
-- Name: codes trg_trk_log_table_codes; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_codes AFTER INSERT OR DELETE OR UPDATE ON darwin2.codes FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7587 (class 2620 OID 2857085)
-- Name: collecting_methods trg_trk_log_table_collecting_methods; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_collecting_methods AFTER INSERT OR DELETE OR UPDATE ON darwin2.collecting_methods FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7590 (class 2620 OID 2857086)
-- Name: collecting_tools trg_trk_log_table_collecting_tools; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_collecting_tools AFTER INSERT OR DELETE OR UPDATE ON darwin2.collecting_tools FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7591 (class 2620 OID 2857087)
-- Name: collection_maintenance trg_trk_log_table_collection_maintenance; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_collection_maintenance AFTER INSERT OR DELETE OR UPDATE ON darwin2.collection_maintenance FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7605 (class 2620 OID 2857088)
-- Name: collections trg_trk_log_table_collections; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_collections AFTER INSERT OR DELETE OR UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7607 (class 2620 OID 2857089)
-- Name: collections_rights trg_trk_log_table_collections_rights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_collections_rights AFTER INSERT OR DELETE OR UPDATE ON darwin2.collections_rights FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7613 (class 2620 OID 2857090)
-- Name: comments trg_trk_log_table_comments; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_comments AFTER INSERT OR DELETE OR UPDATE ON darwin2.comments FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7633 (class 2620 OID 2857091)
-- Name: expeditions trg_trk_log_table_expeditions; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_expeditions AFTER INSERT OR DELETE OR UPDATE ON darwin2.expeditions FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7638 (class 2620 OID 2857092)
-- Name: ext_links trg_trk_log_table_ext_links; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_ext_links AFTER INSERT OR DELETE OR UPDATE ON darwin2.ext_links FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7630 (class 2620 OID 2857093)
-- Name: gtu trg_trk_log_table_gtu; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_gtu AFTER INSERT OR DELETE OR UPDATE ON darwin2.gtu FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7620 (class 2620 OID 2857094)
-- Name: identifications trg_trk_log_table_identifications; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_identifications AFTER INSERT OR DELETE OR UPDATE ON darwin2.identifications FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7642 (class 2620 OID 2857095)
-- Name: igs trg_trk_log_table_igs; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_igs AFTER INSERT OR DELETE OR UPDATE ON darwin2.igs FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7655 (class 2620 OID 2857096)
-- Name: insurances trg_trk_log_table_insurances; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_insurances AFTER INSERT OR DELETE OR UPDATE ON darwin2.insurances FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7661 (class 2620 OID 2857097)
-- Name: lithology trg_trk_log_table_lithology; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_lithology AFTER INSERT OR DELETE OR UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7668 (class 2620 OID 2857098)
-- Name: lithostratigraphy trg_trk_log_table_lithostratigraphy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_lithostratigraphy AFTER INSERT OR DELETE OR UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7670 (class 2620 OID 2857099)
-- Name: loan_items trg_trk_log_table_loan_items; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_loan_items AFTER INSERT OR DELETE OR UPDATE ON darwin2.loan_items FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7672 (class 2620 OID 2857100)
-- Name: loan_rights trg_trk_log_table_loan_rights; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_loan_rights AFTER INSERT OR DELETE OR UPDATE ON darwin2.loan_rights FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7673 (class 2620 OID 2857101)
-- Name: loan_status trg_trk_log_table_loan_status; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_loan_status AFTER INSERT OR DELETE OR UPDATE ON darwin2.loan_status FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7680 (class 2620 OID 2857102)
-- Name: loans trg_trk_log_table_loans; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_loans AFTER INSERT OR DELETE OR UPDATE ON darwin2.loans FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7688 (class 2620 OID 2857103)
-- Name: mineralogy trg_trk_log_table_mineralogy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_mineralogy AFTER INSERT OR DELETE OR UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7693 (class 2620 OID 2857104)
-- Name: multimedia trg_trk_log_table_multimedia; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_multimedia AFTER INSERT OR DELETE OR UPDATE ON darwin2.multimedia FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7730 (class 2620 OID 2857105)
-- Name: people trg_trk_log_table_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_people AFTER INSERT OR DELETE OR UPDATE ON darwin2.people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7731 (class 2620 OID 2857106)
-- Name: people_addresses trg_trk_log_table_people_addresses; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_people_addresses AFTER INSERT OR DELETE OR UPDATE ON darwin2.people_addresses FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7734 (class 2620 OID 2857107)
-- Name: people_comm trg_trk_log_table_people_comm; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_people_comm AFTER INSERT OR DELETE OR UPDATE ON darwin2.people_comm FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7735 (class 2620 OID 2857108)
-- Name: people_relationships trg_trk_log_table_people_relationships; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_people_relationships AFTER INSERT OR DELETE OR UPDATE ON darwin2.people_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7614 (class 2620 OID 2857109)
-- Name: properties trg_trk_log_table_properties; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_properties AFTER INSERT OR DELETE OR UPDATE ON darwin2.properties FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7739 (class 2620 OID 2857110)
-- Name: specimen_collecting_methods trg_trk_log_table_specimen_collecting_methods; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_specimen_collecting_methods AFTER INSERT OR DELETE OR UPDATE ON darwin2.specimen_collecting_methods FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7740 (class 2620 OID 2857111)
-- Name: specimen_collecting_tools trg_trk_log_table_specimen_collecting_tools; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_specimen_collecting_tools AFTER INSERT OR DELETE OR UPDATE ON darwin2.specimen_collecting_tools FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7715 (class 2620 OID 2857112)
-- Name: specimens trg_trk_log_table_specimens; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_specimens AFTER INSERT OR DELETE OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7744 (class 2620 OID 2857113)
-- Name: specimens_relationships trg_trk_log_table_specimens_relationship; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_specimens_relationship AFTER INSERT OR DELETE OR UPDATE ON darwin2.specimens_relationships FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7698 (class 2620 OID 2857114)
-- Name: tag_groups trg_trk_log_table_tag_groups; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_tag_groups AFTER INSERT OR DELETE OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7723 (class 2620 OID 2857115)
-- Name: taxonomy trg_trk_log_table_taxonomy; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_trk_log_table_taxonomy AFTER INSERT OR DELETE OR UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7766 (class 2620 OID 2857116)
-- Name: vernacular_names trg_trk_log_table_vernacular_names; Type: TRIGGER; Schema: darwin2; Owner: postgres
--

CREATE TRIGGER trg_trk_log_table_vernacular_names AFTER INSERT OR DELETE OR UPDATE ON darwin2.vernacular_names FOR EACH ROW EXECUTE FUNCTION darwin2.fct_trk_log_table();


--
-- TOC entry 7760 (class 2620 OID 2857117)
-- Name: users trg_unpromotion_remove_cols; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_unpromotion_remove_cols AFTER UPDATE ON darwin2.users FOR EACH ROW EXECUTE FUNCTION darwin2.fct_unpromotion_impact_prefs();


--
-- TOC entry 7555 (class 2620 OID 2857118)
-- Name: staging trg_upd_fields_staging; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_upd_fields_staging AFTER UPDATE ON darwin2.staging FOR EACH ROW EXECUTE FUNCTION darwin2.fct_upd_staging_fields();


--
-- TOC entry 7750 (class 2620 OID 2857119)
-- Name: staging_relationship trg_upd_institution_staging_relationship; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_upd_institution_staging_relationship AFTER UPDATE ON darwin2.staging_relationship FOR EACH ROW EXECUTE FUNCTION darwin2.fct_upd_institution_staging_relationship();


--
-- TOC entry 7563 (class 2620 OID 2857120)
-- Name: catalogue_people trg_upd_people_in_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_upd_people_in_flat AFTER INSERT OR DELETE OR UPDATE ON darwin2.catalogue_people FOR EACH ROW EXECUTE FUNCTION darwin2.fct_upd_people_in_flat();


--
-- TOC entry 7749 (class 2620 OID 2857121)
-- Name: staging_people trg_upd_people_ref_staging_people; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_upd_people_ref_staging_people AFTER UPDATE ON darwin2.staging_people FOR EACH ROW WHEN ((pg_trigger_depth() = 0)) EXECUTE FUNCTION darwin2.fct_upd_people_staging_fields();


--
-- TOC entry 7573 (class 2620 OID 2857122)
-- Name: chronostratigraphy trg_update_chronostratigraphy_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_chronostratigraphy_darwin_flat AFTER UPDATE ON darwin2.chronostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7702 (class 2620 OID 2857123)
-- Name: specimens trg_update_collections_code_last_val; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_collections_code_last_val AFTER UPDATE OF collection_ref ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.update_collections_code_last_val();


--
-- TOC entry 7703 (class 2620 OID 2857124)
-- Name: specimens trg_update_collections_code_last_val_after_spec_del; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_collections_code_last_val_after_spec_del AFTER DELETE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.update_collections_code_last_val_after_spec_del();


--
-- TOC entry 7606 (class 2620 OID 2857125)
-- Name: collections trg_update_collections_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_collections_darwin_flat AFTER UPDATE ON darwin2.collections FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7632 (class 2620 OID 2857126)
-- Name: expeditions trg_update_expeditions_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_expeditions_darwin_flat AFTER UPDATE ON darwin2.expeditions FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7631 (class 2620 OID 2857127)
-- Name: gtu trg_update_gtu_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_gtu_darwin_flat AFTER UPDATE ON darwin2.gtu FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7641 (class 2620 OID 2857128)
-- Name: igs trg_update_igs_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_igs_darwin_flat AFTER UPDATE ON darwin2.igs FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7647 (class 2620 OID 2857129)
-- Name: imports trg_update_import; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_import AFTER UPDATE ON darwin2.imports FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_import();


--
-- TOC entry 7662 (class 2620 OID 2857130)
-- Name: lithology trg_update_lithology_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_lithology_darwin_flat AFTER UPDATE ON darwin2.lithology FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7669 (class 2620 OID 2857131)
-- Name: lithostratigraphy trg_update_lithostratigraphy_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_lithostratigraphy_darwin_flat AFTER UPDATE ON darwin2.lithostratigraphy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7689 (class 2620 OID 2857132)
-- Name: mineralogy trg_update_mineralogy_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_mineralogy_darwin_flat AFTER UPDATE ON darwin2.mineralogy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7704 (class 2620 OID 2857133)
-- Name: specimens trg_update_specimens_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_specimens_darwin_flat BEFORE INSERT OR UPDATE ON darwin2.specimens FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimen_flat();


--
-- TOC entry 7699 (class 2620 OID 2857134)
-- Name: tag_groups trg_update_tag_groups_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_tag_groups_darwin_flat AFTER INSERT OR DELETE OR UPDATE ON darwin2.tag_groups FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7724 (class 2620 OID 2857135)
-- Name: taxonomy trg_update_taxonomy_darwin_flat; Type: TRIGGER; Schema: darwin2; Owner: darwin2
--

CREATE TRIGGER trg_update_taxonomy_darwin_flat AFTER UPDATE ON darwin2.taxonomy FOR EACH ROW EXECUTE FUNCTION darwin2.fct_update_specimens_flat_related();


--
-- TOC entry 7464 (class 2606 OID 2857136)
-- Name: temporal_information dates_gtu_ref_fkey; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.temporal_information
    ADD CONSTRAINT dates_gtu_ref_fkey FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id);


--
-- TOC entry 7465 (class 2606 OID 2857141)
-- Name: temporal_information dates_specimen_ref_fkey; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.temporal_information
    ADD CONSTRAINT dates_specimen_ref_fkey FOREIGN KEY (specimen_ref) REFERENCES darwin2.specimens(id);


--
-- TOC entry 7490 (class 2606 OID 2857146)
-- Name: tag_tag_authority fk_authority; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_tag_authority
    ADD CONSTRAINT fk_authority FOREIGN KEY (tag_authority_ref) REFERENCES darwin2.tag_authority(id);


--
-- TOC entry 7487 (class 2606 OID 2857151)
-- Name: tag_authority fk_authority_domain; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_authority
    ADD CONSTRAINT fk_authority_domain FOREIGN KEY (domain_ref) REFERENCES darwin2.authority_domain(id);


--
-- TOC entry 7544 (class 2606 OID 2857156)
-- Name: tag_authority_tag_authority fk_authority_ref1; Type: FK CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.tag_authority_tag_authority
    ADD CONSTRAINT fk_authority_ref1 FOREIGN KEY (tag_authority_ref1) REFERENCES darwin2.tag_authority(id);


--
-- TOC entry 7545 (class 2606 OID 2857161)
-- Name: tag_authority_tag_authority fk_authority_ref2; Type: FK CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.tag_authority_tag_authority
    ADD CONSTRAINT fk_authority_ref2 FOREIGN KEY (tag_authority_ref2) REFERENCES darwin2.tag_authority(id);


--
-- TOC entry 7450 (class 2606 OID 2857166)
-- Name: catalogue_bibliography fk_bibliography; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_bibliography
    ADD CONSTRAINT fk_bibliography FOREIGN KEY (bibliography_ref) REFERENCES darwin2.bibliography(id) ON DELETE CASCADE;


--
-- TOC entry 7453 (class 2606 OID 2857171)
-- Name: chronostratigraphy fk_chronostratigraphy_catalogue_levels; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy
    ADD CONSTRAINT fk_chronostratigraphy_catalogue_levels FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7454 (class 2606 OID 2857176)
-- Name: chronostratigraphy fk_chronostratigraphy_parent_ref_chronostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.chronostratigraphy
    ADD CONSTRAINT fk_chronostratigraphy_parent_ref_chronostratigraphy FOREIGN KEY (parent_ref) REFERENCES darwin2.chronostratigraphy(id) ON DELETE CASCADE;


--
-- TOC entry 7452 (class 2606 OID 2857181)
-- Name: template_classifications fk_classification_to_metadata; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.template_classifications
    ADD CONSTRAINT fk_classification_to_metadata FOREIGN KEY (metadata_ref) REFERENCES darwin2.taxonomy_metadata(id);


--
-- TOC entry 7455 (class 2606 OID 2857186)
-- Name: collection_maintenance fk_collection_maintenance_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collection_maintenance
    ADD CONSTRAINT fk_collection_maintenance_users FOREIGN KEY (people_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7456 (class 2606 OID 2857191)
-- Name: collections fk_collections_collections; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT fk_collections_collections FOREIGN KEY (parent_ref) REFERENCES darwin2.collections(id) ON DELETE CASCADE;


--
-- TOC entry 7457 (class 2606 OID 2857196)
-- Name: collections fk_collections_institutions; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT fk_collections_institutions FOREIGN KEY (institution_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7460 (class 2606 OID 2857201)
-- Name: collections_rights fk_collections_rights_collections; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections_rights
    ADD CONSTRAINT fk_collections_rights_collections FOREIGN KEY (collection_ref) REFERENCES darwin2.collections(id) ON DELETE CASCADE;


--
-- TOC entry 7461 (class 2606 OID 2857206)
-- Name: collections_rights fk_collections_rights_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections_rights
    ADD CONSTRAINT fk_collections_rights_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7458 (class 2606 OID 2857211)
-- Name: collections fk_collections_staff; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT fk_collections_staff FOREIGN KEY (staff_ref) REFERENCES darwin2.users(id) ON DELETE SET NULL;


--
-- TOC entry 7459 (class 2606 OID 2857216)
-- Name: collections fk_collections_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.collections
    ADD CONSTRAINT fk_collections_users FOREIGN KEY (main_manager_ref) REFERENCES darwin2.users(id);


--
-- TOC entry 7468 (class 2606 OID 2857221)
-- Name: imports fk_imports_collections; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.imports
    ADD CONSTRAINT fk_imports_collections FOREIGN KEY (collection_ref) REFERENCES darwin2.collections(id) ON DELETE CASCADE;


--
-- TOC entry 7469 (class 2606 OID 2857226)
-- Name: imports fk_imports_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.imports
    ADD CONSTRAINT fk_imports_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7470 (class 2606 OID 2857231)
-- Name: informative_workflow fk_informative_workflow_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.informative_workflow
    ADD CONSTRAINT fk_informative_workflow_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7473 (class 2606 OID 2857236)
-- Name: lithology fk_lithology_catalogue_levels; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology
    ADD CONSTRAINT fk_lithology_catalogue_levels FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7474 (class 2606 OID 2857241)
-- Name: lithology fk_lithology_parent_ref_lithology; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithology
    ADD CONSTRAINT fk_lithology_parent_ref_lithology FOREIGN KEY (parent_ref) REFERENCES darwin2.lithology(id) ON DELETE CASCADE;


--
-- TOC entry 7475 (class 2606 OID 2857246)
-- Name: lithostratigraphy fk_lithostratigraphy_catalogue_levels; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy
    ADD CONSTRAINT fk_lithostratigraphy_catalogue_levels FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7476 (class 2606 OID 2857251)
-- Name: lithostratigraphy fk_lithostratigraphy_parent_ref_lithostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.lithostratigraphy
    ADD CONSTRAINT fk_lithostratigraphy_parent_ref_lithostratigraphy FOREIGN KEY (parent_ref) REFERENCES darwin2.lithostratigraphy(id) ON DELETE CASCADE;


--
-- TOC entry 7477 (class 2606 OID 2857256)
-- Name: loan_history fk_loan_history_loan_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_history
    ADD CONSTRAINT fk_loan_history_loan_ref FOREIGN KEY (loan_ref) REFERENCES darwin2.loans(id) ON DELETE CASCADE;


--
-- TOC entry 7478 (class 2606 OID 2857261)
-- Name: loan_items fk_loan_items_ig; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_items
    ADD CONSTRAINT fk_loan_items_ig FOREIGN KEY (ig_ref) REFERENCES darwin2.igs(id);


--
-- TOC entry 7479 (class 2606 OID 2857266)
-- Name: loan_items fk_loan_items_loan_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_items
    ADD CONSTRAINT fk_loan_items_loan_ref FOREIGN KEY (loan_ref) REFERENCES darwin2.loans(id) ON DELETE CASCADE;


--
-- TOC entry 7480 (class 2606 OID 2857271)
-- Name: loan_items fk_loan_items_specimen_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_items
    ADD CONSTRAINT fk_loan_items_specimen_ref FOREIGN KEY (specimen_ref) REFERENCES darwin2.specimens(id) ON DELETE SET NULL;


--
-- TOC entry 7481 (class 2606 OID 2857276)
-- Name: loan_rights fk_loan_rights_loan_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_rights
    ADD CONSTRAINT fk_loan_rights_loan_ref FOREIGN KEY (loan_ref) REFERENCES darwin2.loans(id) ON DELETE CASCADE;


--
-- TOC entry 7482 (class 2606 OID 2857281)
-- Name: loan_rights fk_loan_rights_user_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_rights
    ADD CONSTRAINT fk_loan_rights_user_ref FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7483 (class 2606 OID 2857286)
-- Name: loan_status fk_loan_status_loan_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_status
    ADD CONSTRAINT fk_loan_status_loan_ref FOREIGN KEY (loan_ref) REFERENCES darwin2.loans(id) ON DELETE CASCADE;


--
-- TOC entry 7484 (class 2606 OID 2857291)
-- Name: loan_status fk_loan_status_user_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.loan_status
    ADD CONSTRAINT fk_loan_status_user_ref FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7485 (class 2606 OID 2857296)
-- Name: mineralogy fk_mineralogy_catalogue_levels; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy
    ADD CONSTRAINT fk_mineralogy_catalogue_levels FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7486 (class 2606 OID 2857301)
-- Name: mineralogy fk_mineralogy_parent_ref_mineralogy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.mineralogy
    ADD CONSTRAINT fk_mineralogy_parent_ref_mineralogy FOREIGN KEY (parent_ref) REFERENCES darwin2.mineralogy(id) ON DELETE CASCADE;


--
-- TOC entry 7505 (class 2606 OID 2857306)
-- Name: my_saved_searches fk_my_saved_searches_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_saved_searches
    ADD CONSTRAINT fk_my_saved_searches_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7506 (class 2606 OID 2857311)
-- Name: my_widgets fk_my_widgets_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.my_widgets
    ADD CONSTRAINT fk_my_widgets_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7507 (class 2606 OID 2857316)
-- Name: people_addresses fk_people_addresses_people; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_addresses
    ADD CONSTRAINT fk_people_addresses_people FOREIGN KEY (person_user_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7508 (class 2606 OID 2857321)
-- Name: people_comm fk_people_comm_people; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_comm
    ADD CONSTRAINT fk_people_comm_people FOREIGN KEY (person_user_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7509 (class 2606 OID 2857326)
-- Name: people_languages fk_people_languages_people; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_languages
    ADD CONSTRAINT fk_people_languages_people FOREIGN KEY (people_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7451 (class 2606 OID 2857331)
-- Name: catalogue_people fk_people_list_person; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.catalogue_people
    ADD CONSTRAINT fk_people_list_person FOREIGN KEY (people_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7510 (class 2606 OID 2857336)
-- Name: people_relationships fk_people_relationships_people_01; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_relationships
    ADD CONSTRAINT fk_people_relationships_people_01 FOREIGN KEY (person_1_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7511 (class 2606 OID 2857341)
-- Name: people_relationships fk_people_relationships_people_02; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_relationships
    ADD CONSTRAINT fk_people_relationships_people_02 FOREIGN KEY (person_2_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7512 (class 2606 OID 2857346)
-- Name: people_sub_types fk_people_sub_type_people_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.people_sub_types
    ADD CONSTRAINT fk_people_sub_type_people_ref FOREIGN KEY (people_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7513 (class 2606 OID 2857351)
-- Name: possible_upper_levels fk_possible_upper_levels_catalogue_levels_01; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.possible_upper_levels
    ADD CONSTRAINT fk_possible_upper_levels_catalogue_levels_01 FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id) ON DELETE CASCADE;


--
-- TOC entry 7514 (class 2606 OID 2857356)
-- Name: possible_upper_levels fk_possible_upper_levels_catalogue_levels_02; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.possible_upper_levels
    ADD CONSTRAINT fk_possible_upper_levels_catalogue_levels_02 FOREIGN KEY (level_upper_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7516 (class 2606 OID 2857361)
-- Name: property_tag_authority fk_property_authority_auth; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.property_tag_authority
    ADD CONSTRAINT fk_property_authority_auth FOREIGN KEY (tag_authority_ref) REFERENCES darwin2.tag_authority(id);


--
-- TOC entry 7517 (class 2606 OID 2857366)
-- Name: property_tag_authority fk_property_authority_prop; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.property_tag_authority
    ADD CONSTRAINT fk_property_authority_prop FOREIGN KEY (property_type_id) REFERENCES darwin2.tag_group_distinct(id);


--
-- TOC entry 7462 (class 2606 OID 2857371)
-- Name: properties fk_property_type_id; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.properties
    ADD CONSTRAINT fk_property_type_id FOREIGN KEY (property_type_ref) REFERENCES darwin2.property_type(id);


--
-- TOC entry 7538 (class 2606 OID 2857376)
-- Name: staging_relationship fk_record_id; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT fk_record_id FOREIGN KEY (record_id) REFERENCES darwin2.staging(id) ON DELETE CASCADE;


--
-- TOC entry 7518 (class 2606 OID 2857381)
-- Name: reports fk_reports_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: postgres
--

ALTER TABLE ONLY darwin2.reports
    ADD CONSTRAINT fk_reports_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7519 (class 2606 OID 2857386)
-- Name: specimen_collecting_methods fk_specimen_collecting_methods_method; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_methods
    ADD CONSTRAINT fk_specimen_collecting_methods_method FOREIGN KEY (collecting_method_ref) REFERENCES darwin2.collecting_methods(id) ON DELETE CASCADE;


--
-- TOC entry 7520 (class 2606 OID 2857391)
-- Name: specimen_collecting_methods fk_specimen_collecting_methods_specimen; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_methods
    ADD CONSTRAINT fk_specimen_collecting_methods_specimen FOREIGN KEY (specimen_ref) REFERENCES darwin2.specimens(id) ON DELETE CASCADE;


--
-- TOC entry 7521 (class 2606 OID 2857396)
-- Name: specimen_collecting_tools fk_specimen_collecting_tools_specimen; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_tools
    ADD CONSTRAINT fk_specimen_collecting_tools_specimen FOREIGN KEY (specimen_ref) REFERENCES darwin2.specimens(id) ON DELETE CASCADE;


--
-- TOC entry 7522 (class 2606 OID 2857401)
-- Name: specimen_collecting_tools fk_specimen_collecting_tools_tool; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimen_collecting_tools
    ADD CONSTRAINT fk_specimen_collecting_tools_tool FOREIGN KEY (collecting_tool_ref) REFERENCES darwin2.collecting_tools(id) ON DELETE CASCADE;


--
-- TOC entry 7463 (class 2606 OID 2857406)
-- Name: gtu fk_specimen_expedition; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.gtu
    ADD CONSTRAINT fk_specimen_expedition FOREIGN KEY (expedition_ref) REFERENCES darwin2.expeditions(id) NOT VALID;


--
-- TOC entry 7492 (class 2606 OID 2857411)
-- Name: specimens fk_specimen_institutions; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimen_institutions FOREIGN KEY (institution_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7471 (class 2606 OID 2857416)
-- Name: insurances fk_specimen_parts_insurances_contact; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.insurances
    ADD CONSTRAINT fk_specimen_parts_insurances_contact FOREIGN KEY (contact_ref) REFERENCES darwin2.people(id) ON DELETE SET NULL;


--
-- TOC entry 7472 (class 2606 OID 2857421)
-- Name: insurances fk_specimen_parts_insurances_people; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.insurances
    ADD CONSTRAINT fk_specimen_parts_insurances_people FOREIGN KEY (insurer_ref) REFERENCES darwin2.people(id) ON DELETE SET NULL;


--
-- TOC entry 7493 (class 2606 OID 2857426)
-- Name: specimens fk_specimens_chronostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_chronostratigraphy FOREIGN KEY (chrono_ref) REFERENCES darwin2.chronostratigraphy(id);


--
-- TOC entry 7494 (class 2606 OID 2857431)
-- Name: specimens fk_specimens_collections; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_collections FOREIGN KEY (collection_ref) REFERENCES darwin2.collections(id);


--
-- TOC entry 7495 (class 2606 OID 2857436)
-- Name: specimens fk_specimens_expeditions; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_expeditions FOREIGN KEY (expedition_ref) REFERENCES darwin2.expeditions(id);


--
-- TOC entry 7496 (class 2606 OID 2857441)
-- Name: specimens fk_specimens_gtu; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_gtu FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id);


--
-- TOC entry 7497 (class 2606 OID 2857446)
-- Name: specimens fk_specimens_igs; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_igs FOREIGN KEY (ig_ref) REFERENCES darwin2.igs(id);


--
-- TOC entry 7498 (class 2606 OID 2857451)
-- Name: specimens fk_specimens_lithology; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_lithology FOREIGN KEY (lithology_ref) REFERENCES darwin2.lithology(id);


--
-- TOC entry 7499 (class 2606 OID 2857456)
-- Name: specimens fk_specimens_lithostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_lithostratigraphy FOREIGN KEY (litho_ref) REFERENCES darwin2.lithostratigraphy(id);


--
-- TOC entry 7500 (class 2606 OID 2857461)
-- Name: specimens fk_specimens_mineralogy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_mineralogy FOREIGN KEY (mineral_ref) REFERENCES darwin2.mineralogy(id);


--
-- TOC entry 7523 (class 2606 OID 2857466)
-- Name: specimens_relationships fk_specimens_relationships_institution; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT fk_specimens_relationships_institution FOREIGN KEY (institution_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7539 (class 2606 OID 2857471)
-- Name: staging_relationship fk_specimens_relationships_institution; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT fk_specimens_relationships_institution FOREIGN KEY (institution_ref) REFERENCES darwin2.people(id);


--
-- TOC entry 7524 (class 2606 OID 2857476)
-- Name: specimens_relationships fk_specimens_relationships_mineralogy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT fk_specimens_relationships_mineralogy FOREIGN KEY (mineral_ref) REFERENCES darwin2.mineralogy(id);


--
-- TOC entry 7540 (class 2606 OID 2857481)
-- Name: staging_relationship fk_specimens_relationships_mineralogy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT fk_specimens_relationships_mineralogy FOREIGN KEY (mineral_ref) REFERENCES darwin2.mineralogy(id);


--
-- TOC entry 7525 (class 2606 OID 2857486)
-- Name: specimens_relationships fk_specimens_relationships_specimens; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT fk_specimens_relationships_specimens FOREIGN KEY (specimen_ref) REFERENCES darwin2.specimens(id) ON DELETE CASCADE;


--
-- TOC entry 7526 (class 2606 OID 2857491)
-- Name: specimens_relationships fk_specimens_relationships_specimens_related; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT fk_specimens_relationships_specimens_related FOREIGN KEY (specimen_related_ref) REFERENCES darwin2.specimens(id) ON DELETE CASCADE;


--
-- TOC entry 7527 (class 2606 OID 2857496)
-- Name: specimens_relationships fk_specimens_relationships_taxonomy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_relationships
    ADD CONSTRAINT fk_specimens_relationships_taxonomy FOREIGN KEY (taxon_ref) REFERENCES darwin2.taxonomy(id);


--
-- TOC entry 7541 (class 2606 OID 2857501)
-- Name: staging_relationship fk_specimens_relationships_taxonomy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT fk_specimens_relationships_taxonomy FOREIGN KEY (taxon_ref) REFERENCES darwin2.taxonomy(id);


--
-- TOC entry 7528 (class 2606 OID 2857506)
-- Name: specimens_stable_ids fk_specimens_stable_ids_specimens; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens_stable_ids
    ADD CONSTRAINT fk_specimens_stable_ids_specimens FOREIGN KEY (specimen_fk) REFERENCES darwin2.specimens(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 7501 (class 2606 OID 2857511)
-- Name: specimens fk_specimens_taxonomy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.specimens
    ADD CONSTRAINT fk_specimens_taxonomy FOREIGN KEY (taxon_ref) REFERENCES darwin2.taxonomy(id);


--
-- TOC entry 7443 (class 2606 OID 2857516)
-- Name: staging fk_staging_chronostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_chronostratigraphy FOREIGN KEY (chrono_ref) REFERENCES darwin2.chronostratigraphy(id) ON DELETE SET NULL;


--
-- TOC entry 7531 (class 2606 OID 2857521)
-- Name: staging_collecting_methods fk_staging_collecting_methods_method; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_collecting_methods
    ADD CONSTRAINT fk_staging_collecting_methods_method FOREIGN KEY (collecting_method_ref) REFERENCES darwin2.collecting_methods(id) ON DELETE CASCADE;


--
-- TOC entry 7532 (class 2606 OID 2857526)
-- Name: staging_collecting_methods fk_staging_collecting_methods_staging; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_collecting_methods
    ADD CONSTRAINT fk_staging_collecting_methods_staging FOREIGN KEY (staging_ref) REFERENCES darwin2.staging(id) ON DELETE CASCADE;


--
-- TOC entry 7444 (class 2606 OID 2857531)
-- Name: staging fk_staging_gtu; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_gtu FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id) ON DELETE SET NULL;


--
-- TOC entry 7445 (class 2606 OID 2857536)
-- Name: staging fk_staging_import; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_import FOREIGN KEY (import_ref) REFERENCES darwin2.imports(id) ON DELETE CASCADE;


--
-- TOC entry 7446 (class 2606 OID 2857541)
-- Name: staging fk_staging_lithology; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_lithology FOREIGN KEY (lithology_ref) REFERENCES darwin2.lithology(id) ON DELETE SET NULL;


--
-- TOC entry 7447 (class 2606 OID 2857546)
-- Name: staging fk_staging_lithostratigraphy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_lithostratigraphy FOREIGN KEY (litho_ref) REFERENCES darwin2.lithostratigraphy(id) ON DELETE SET NULL;


--
-- TOC entry 7448 (class 2606 OID 2857551)
-- Name: staging fk_staging_mineralogy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_mineralogy FOREIGN KEY (mineral_ref) REFERENCES darwin2.mineralogy(id) ON DELETE SET NULL;


--
-- TOC entry 7537 (class 2606 OID 2857556)
-- Name: staging_people fk_staging_people_list_person; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_people
    ADD CONSTRAINT fk_staging_people_list_person FOREIGN KEY (people_ref) REFERENCES darwin2.people(id) ON DELETE CASCADE;


--
-- TOC entry 7536 (class 2606 OID 2857561)
-- Name: staging_info fk_staging_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_info
    ADD CONSTRAINT fk_staging_ref FOREIGN KEY (staging_ref) REFERENCES darwin2.staging(id) ON DELETE CASCADE;


--
-- TOC entry 7542 (class 2606 OID 2857566)
-- Name: staging_relationship fk_staging_relationships_specimen; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_relationship
    ADD CONSTRAINT fk_staging_relationships_specimen FOREIGN KEY (existing_specimen_ref) REFERENCES darwin2.specimens(id);


--
-- TOC entry 7543 (class 2606 OID 2857571)
-- Name: staging_tag_groups fk_staging_tag_groups; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_tag_groups
    ADD CONSTRAINT fk_staging_tag_groups FOREIGN KEY (staging_ref) REFERENCES darwin2.staging(id) ON DELETE CASCADE;


--
-- TOC entry 7449 (class 2606 OID 2857576)
-- Name: staging fk_staging_taxonomy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging
    ADD CONSTRAINT fk_staging_taxonomy FOREIGN KEY (taxon_ref) REFERENCES darwin2.taxonomy(id) ON DELETE SET NULL;


--
-- TOC entry 7529 (class 2606 OID 2857581)
-- Name: staging_catalogue fk_stg_catalogue_import_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_catalogue
    ADD CONSTRAINT fk_stg_catalogue_import_ref FOREIGN KEY (import_ref) REFERENCES darwin2.imports(id) ON DELETE CASCADE;


--
-- TOC entry 7530 (class 2606 OID 2857586)
-- Name: staging_catalogue fk_stg_catalogue_level_ref; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_catalogue
    ADD CONSTRAINT fk_stg_catalogue_level_ref FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7491 (class 2606 OID 2857591)
-- Name: tag_tag_authority fk_tag; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_tag_authority
    ADD CONSTRAINT fk_tag FOREIGN KEY (tag_group_distinct_ref) REFERENCES darwin2.tag_group_distinct(id);


--
-- TOC entry 7488 (class 2606 OID 2857596)
-- Name: tag_groups fk_tag_group_distinct_id; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_groups
    ADD CONSTRAINT fk_tag_group_distinct_id FOREIGN KEY (tag_group_distinct_ref) REFERENCES darwin2.tag_group_distinct(id);


--
-- TOC entry 7489 (class 2606 OID 2857601)
-- Name: tag_groups fk_tag_groups_gtu; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tag_groups
    ADD CONSTRAINT fk_tag_groups_gtu FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id) ON DELETE CASCADE;


--
-- TOC entry 7466 (class 2606 OID 2857606)
-- Name: tags fk_tags_gtu; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tags
    ADD CONSTRAINT fk_tags_gtu FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id) ON DELETE CASCADE;


--
-- TOC entry 7467 (class 2606 OID 2857611)
-- Name: tags fk_tags_tag_groups; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.tags
    ADD CONSTRAINT fk_tags_tag_groups FOREIGN KEY (group_ref) REFERENCES darwin2.tag_groups(id) ON DELETE CASCADE;


--
-- TOC entry 7546 (class 2606 OID 2857616)
-- Name: taxonomy_authority fk_taxon; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_authority
    ADD CONSTRAINT fk_taxon FOREIGN KEY (taxonomy_ref) REFERENCES darwin2.taxonomy(id) ON DELETE CASCADE;


--
-- TOC entry 7547 (class 2606 OID 2857621)
-- Name: taxonomy_authority fk_taxonomy_authority_domain_id; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy_authority
    ADD CONSTRAINT fk_taxonomy_authority_domain_id FOREIGN KEY (domain_ref) REFERENCES darwin2.authority_domain(id);


--
-- TOC entry 7502 (class 2606 OID 2857626)
-- Name: taxonomy fk_taxonomy_level_ref_catalogue_levels; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy
    ADD CONSTRAINT fk_taxonomy_level_ref_catalogue_levels FOREIGN KEY (level_ref) REFERENCES darwin2.catalogue_levels(id);


--
-- TOC entry 7503 (class 2606 OID 2857631)
-- Name: taxonomy fk_taxonomy_metadata; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy
    ADD CONSTRAINT fk_taxonomy_metadata FOREIGN KEY (metadata_ref) REFERENCES darwin2.taxonomy_metadata(id);


--
-- TOC entry 7504 (class 2606 OID 2857636)
-- Name: taxonomy fk_taxonomy_parent_ref_taxonomy; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.taxonomy
    ADD CONSTRAINT fk_taxonomy_parent_ref_taxonomy FOREIGN KEY (parent_ref) REFERENCES darwin2.taxonomy(id) ON DELETE CASCADE;


--
-- TOC entry 7533 (class 2606 OID 2857641)
-- Name: staging_gtu fk_to_gtu; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu
    ADD CONSTRAINT fk_to_gtu FOREIGN KEY (gtu_ref) REFERENCES darwin2.gtu(id);


--
-- TOC entry 7534 (class 2606 OID 2857646)
-- Name: staging_gtu fk_to_import; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu
    ADD CONSTRAINT fk_to_import FOREIGN KEY (import_ref) REFERENCES darwin2.imports(id);


--
-- TOC entry 7548 (class 2606 OID 2857651)
-- Name: users fk_user_people_id; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users
    ADD CONSTRAINT fk_user_people_id FOREIGN KEY (people_id) REFERENCES darwin2.people(id) ON DELETE SET NULL;


--
-- TOC entry 7549 (class 2606 OID 2857656)
-- Name: users_addresses fk_users_addresses_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_addresses
    ADD CONSTRAINT fk_users_addresses_users FOREIGN KEY (person_user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7550 (class 2606 OID 2857661)
-- Name: users_comm fk_users_comm_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_comm
    ADD CONSTRAINT fk_users_comm_users FOREIGN KEY (person_user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7551 (class 2606 OID 2857666)
-- Name: users_login_infos fk_users_login_infos_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_login_infos
    ADD CONSTRAINT fk_users_login_infos_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7515 (class 2606 OID 2857671)
-- Name: preferences fk_users_preferences; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.preferences
    ADD CONSTRAINT fk_users_preferences FOREIGN KEY (user_ref) REFERENCES darwin2.users(id) ON DELETE CASCADE;


--
-- TOC entry 7552 (class 2606 OID 2857676)
-- Name: users_tracking fk_users_tracking_users; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.users_tracking
    ADD CONSTRAINT fk_users_tracking_users FOREIGN KEY (user_ref) REFERENCES darwin2.users(id);


--
-- TOC entry 7535 (class 2606 OID 2857681)
-- Name: staging_gtu staging_gtu_import_ref_fkey; Type: FK CONSTRAINT; Schema: darwin2; Owner: darwin2
--

ALTER TABLE ONLY darwin2.staging_gtu
    ADD CONSTRAINT staging_gtu_import_ref_fkey FOREIGN KEY (import_ref) REFERENCES darwin2.imports(id);


--
-- TOC entry 8092 (class 0 OID 0)
-- Dependencies: 16
-- Name: SCHEMA darwin2; Type: ACL; Schema: -; Owner: darwin2
--

GRANT USAGE ON SCHEMA darwin2 TO d2viewer;
GRANT ALL ON SCHEMA darwin2 TO tvandenberghe;
GRANT USAGE ON SCHEMA darwin2 TO cetaf_viewer;
GRANT USAGE ON SCHEMA darwin2 TO ipt_viewer;


--
-- TOC entry 8093 (class 0 OID 0)
-- Dependencies: 21
-- Name: SCHEMA darwin2_rbins_data; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA darwin2_rbins_data TO darwin2;


--
-- TOC entry 8094 (class 0 OID 0)
-- Dependencies: 22
-- Name: SCHEMA data_cleaning; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA data_cleaning TO darwin2;


--
-- TOC entry 8095 (class 0 OID 0)
-- Dependencies: 19
-- Name: SCHEMA georeferencing; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA georeferencing TO darwin2;


--
-- TOC entry 8096 (class 0 OID 0)
-- Dependencies: 29
-- Name: SCHEMA import; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA import TO darwin2;


--
-- TOC entry 8097 (class 0 OID 0)
-- Dependencies: 31
-- Name: SCHEMA ipt; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA ipt TO darwin2;
GRANT ALL ON SCHEMA ipt TO ipt_viewer;
GRANT ALL ON SCHEMA ipt TO tvandenberghe;


--
-- TOC entry 8098 (class 0 OID 0)
-- Dependencies: 18
-- Name: SCHEMA mista_work; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA mista_work TO darwin2;


--
-- TOC entry 8099 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA naturalheritage; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA naturalheritage TO darwin2;
GRANT USAGE ON SCHEMA naturalheritage TO cetaf_viewer;


--
-- TOC entry 8100 (class 0 OID 0)
-- Dependencies: 23
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 8101 (class 0 OID 0)
-- Dependencies: 24
-- Name: SCHEMA wfs; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA wfs TO darwin2;


--
-- TOC entry 8114 (class 0 OID 0)
-- Dependencies: 790
-- Name: FUNCTION check_auto_increment_code_in_spec(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.check_auto_increment_code_in_spec() TO postgres;
GRANT ALL ON FUNCTION darwin2.check_auto_increment_code_in_spec() TO ipt_viewer;


--
-- TOC entry 8115 (class 0 OID 0)
-- Dependencies: 1764
-- Name: FUNCTION check_auto_increment_code_in_spec_on_specimen(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.check_auto_increment_code_in_spec_on_specimen() TO ipt_viewer;


--
-- TOC entry 8116 (class 0 OID 0)
-- Dependencies: 1761
-- Name: FUNCTION chk_part_not_loaned(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.chk_part_not_loaned() TO ipt_viewer;


--
-- TOC entry 8117 (class 0 OID 0)
-- Dependencies: 1766
-- Name: FUNCTION chk_specimens_not_loaned(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.chk_specimens_not_loaned() TO darwin2;
GRANT ALL ON FUNCTION darwin2.chk_specimens_not_loaned() TO ipt_viewer;


--
-- TOC entry 8118 (class 0 OID 0)
-- Dependencies: 791
-- Name: FUNCTION clean_imports(integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.clean_imports(integer) TO ipt_viewer;


--
-- TOC entry 8119 (class 0 OID 0)
-- Dependencies: 1765
-- Name: FUNCTION cleanup_sample_properties(dms_string text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.cleanup_sample_properties(dms_string text) TO ipt_viewer;


--
-- TOC entry 8120 (class 0 OID 0)
-- Dependencies: 1767
-- Name: FUNCTION cleanupdms(dms_string text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.cleanupdms(dms_string text) TO ipt_viewer;


--
-- TOC entry 8121 (class 0 OID 0)
-- Dependencies: 1768
-- Name: FUNCTION concat(VARIADIC text[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.concat(VARIADIC text[]) TO ipt_viewer;


--
-- TOC entry 8122 (class 0 OID 0)
-- Dependencies: 1750
-- Name: FUNCTION connectby(text, text, text, text, integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.connectby(text, text, text, text, integer) TO ipt_viewer;


--
-- TOC entry 8123 (class 0 OID 0)
-- Dependencies: 1751
-- Name: FUNCTION connectby(text, text, text, text, integer, text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.connectby(text, text, text, text, integer, text) TO ipt_viewer;


--
-- TOC entry 8124 (class 0 OID 0)
-- Dependencies: 1752
-- Name: FUNCTION connectby(text, text, text, text, text, integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.connectby(text, text, text, text, text, integer) TO ipt_viewer;


--
-- TOC entry 8125 (class 0 OID 0)
-- Dependencies: 1753
-- Name: FUNCTION connectby(text, text, text, text, text, integer, text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.connectby(text, text, text, text, text, integer, text) TO ipt_viewer;


--
-- TOC entry 8126 (class 0 OID 0)
-- Dependencies: 1769
-- Name: FUNCTION convert_to_integer(v_input character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.convert_to_integer(v_input character varying) TO ipt_viewer;


--
-- TOC entry 8127 (class 0 OID 0)
-- Dependencies: 1762
-- Name: FUNCTION convert_to_real(v_input character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.convert_to_real(v_input character varying) TO ipt_viewer;


--
-- TOC entry 8128 (class 0 OID 0)
-- Dependencies: 803
-- Name: FUNCTION convert_to_unified(property character varying, property_unit character varying); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying) TO darwin2;
GRANT ALL ON FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8129 (class 0 OID 0)
-- Dependencies: 804
-- Name: FUNCTION convert_to_unified(property character varying, property_unit character varying, property_type character varying); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying, property_type character varying) TO darwin2;
GRANT ALL ON FUNCTION darwin2.convert_to_unified(property character varying, property_unit character varying, property_type character varying) TO ipt_viewer;


--
-- TOC entry 8130 (class 0 OID 0)
-- Dependencies: 1754
-- Name: FUNCTION crosstab(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab(text) TO ipt_viewer;


--
-- TOC entry 8131 (class 0 OID 0)
-- Dependencies: 1755
-- Name: FUNCTION crosstab(text, integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab(text, integer) TO ipt_viewer;


--
-- TOC entry 8132 (class 0 OID 0)
-- Dependencies: 1756
-- Name: FUNCTION crosstab(text, text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab(text, text) TO ipt_viewer;


--
-- TOC entry 8133 (class 0 OID 0)
-- Dependencies: 1757
-- Name: FUNCTION crosstab2(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab2(text) TO ipt_viewer;


--
-- TOC entry 8134 (class 0 OID 0)
-- Dependencies: 1758
-- Name: FUNCTION crosstab3(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab3(text) TO ipt_viewer;


--
-- TOC entry 8135 (class 0 OID 0)
-- Dependencies: 1759
-- Name: FUNCTION crosstab4(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.crosstab4(text) TO ipt_viewer;


--
-- TOC entry 8136 (class 0 OID 0)
-- Dependencies: 1771
-- Name: FUNCTION dms2dd(strdegminsec text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.dms2dd(strdegminsec text) TO ipt_viewer;


--
-- TOC entry 8137 (class 0 OID 0)
-- Dependencies: 1772
-- Name: FUNCTION fct_add_in_dict(ref_relation text, ref_field text, dict_val text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, dict_val text) TO ipt_viewer;


--
-- TOC entry 8138 (class 0 OID 0)
-- Dependencies: 1770
-- Name: FUNCTION fct_add_in_dict(ref_relation text, ref_field text, old_value text, new_val text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_add_in_dict(ref_relation text, ref_field text, old_value text, new_val text) TO ipt_viewer;


--
-- TOC entry 8139 (class 0 OID 0)
-- Dependencies: 1775
-- Name: FUNCTION fct_add_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_add_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text) TO ipt_viewer;


--
-- TOC entry 8140 (class 0 OID 0)
-- Dependencies: 1777
-- Name: FUNCTION fct_after_save_add_code(collectionid integer, specimenid integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_after_save_add_code(collectionid integer, specimenid integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_after_save_add_code(collectionid integer, specimenid integer) TO ipt_viewer;


--
-- TOC entry 8141 (class 0 OID 0)
-- Dependencies: 1776
-- Name: FUNCTION fct_array_find(in_array anyarray, elem anyelement, OUT item_order integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_array_find(in_array anyarray, elem anyelement, OUT item_order integer) TO ipt_viewer;


--
-- TOC entry 8142 (class 0 OID 0)
-- Dependencies: 1778
-- Name: FUNCTION fct_array_find(in_array character varying, elem anyelement, OUT item_order integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_array_find(in_array character varying, elem anyelement, OUT item_order integer) TO ipt_viewer;


--
-- TOC entry 8143 (class 0 OID 0)
-- Dependencies: 1779
-- Name: FUNCTION fct_auto_insert_status_history(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_auto_insert_status_history() TO ipt_viewer;


--
-- TOC entry 8144 (class 0 OID 0)
-- Dependencies: 1773
-- Name: FUNCTION fct_cast_to_real(element text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cast_to_real(element text) TO ipt_viewer;


--
-- TOC entry 8145 (class 0 OID 0)
-- Dependencies: 805
-- Name: FUNCTION fct_catalogue_import_keywords_update(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_catalogue_import_keywords_update() TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_catalogue_import_keywords_update() TO ipt_viewer;


--
-- TOC entry 8146 (class 0 OID 0)
-- Dependencies: 1784
-- Name: FUNCTION fct_chk_arerole(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_arerole() TO ipt_viewer;


--
-- TOC entry 8147 (class 0 OID 0)
-- Dependencies: 1780
-- Name: FUNCTION fct_chk_canupdatecollectionsrights(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_canupdatecollectionsrights() TO ipt_viewer;


--
-- TOC entry 8148 (class 0 OID 0)
-- Dependencies: 1781
-- Name: FUNCTION fct_chk_onceinpath(path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_onceinpath(path character varying) TO ipt_viewer;


--
-- TOC entry 8149 (class 0 OID 0)
-- Dependencies: 1785
-- Name: FUNCTION fct_chk_parentcollinstitution(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_parentcollinstitution() TO ipt_viewer;


--
-- TOC entry 8150 (class 0 OID 0)
-- Dependencies: 1782
-- Name: FUNCTION fct_chk_peopleismoral(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_peopleismoral() TO ipt_viewer;


--
-- TOC entry 8151 (class 0 OID 0)
-- Dependencies: 806
-- Name: FUNCTION fct_chk_peopletype(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_peopletype() TO ipt_viewer;


--
-- TOC entry 8152 (class 0 OID 0)
-- Dependencies: 807
-- Name: FUNCTION fct_chk_possible_upper_level(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_possible_upper_level(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) TO ipt_viewer;


--
-- TOC entry 8153 (class 0 OID 0)
-- Dependencies: 808
-- Name: FUNCTION fct_chk_possible_upper_level_rmca_allow_upper(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_chk_possible_upper_level_rmca_allow_upper(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_chk_possible_upper_level_rmca_allow_upper(referenced_relation character varying, new_parent_ref integer, new_level_ref integer, new_id integer) TO ipt_viewer;


--
-- TOC entry 8154 (class 0 OID 0)
-- Dependencies: 1788
-- Name: FUNCTION fct_chk_referencedrecord(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_referencedrecord() TO ipt_viewer;


--
-- TOC entry 8155 (class 0 OID 0)
-- Dependencies: 1789
-- Name: FUNCTION fct_chk_referencedrecordrelationship(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_referencedrecordrelationship() TO ipt_viewer;


--
-- TOC entry 8156 (class 0 OID 0)
-- Dependencies: 809
-- Name: FUNCTION fct_chk_specimencollectionallowed(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_specimencollectionallowed() TO ipt_viewer;


--
-- TOC entry 8157 (class 0 OID 0)
-- Dependencies: 1786
-- Name: FUNCTION fct_chk_upper_level_for_childrens(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_chk_upper_level_for_childrens() TO ipt_viewer;


--
-- TOC entry 8158 (class 0 OID 0)
-- Dependencies: 1794
-- Name: FUNCTION fct_clean_staging_catalogue(importref integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_clean_staging_catalogue(importref integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_clean_staging_catalogue(importref integer) TO ipt_viewer;


--
-- TOC entry 8159 (class 0 OID 0)
-- Dependencies: 1793
-- Name: FUNCTION fct_clear_identifiers_in_flat(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_clear_identifiers_in_flat() TO ipt_viewer;


--
-- TOC entry 8160 (class 0 OID 0)
-- Dependencies: 1795
-- Name: FUNCTION fct_clear_referencedrecord(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_clear_referencedrecord() TO ipt_viewer;


--
-- TOC entry 8161 (class 0 OID 0)
-- Dependencies: 1790
-- Name: FUNCTION fct_clr_specialstatus(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_clr_specialstatus() TO ipt_viewer;


--
-- TOC entry 8162 (class 0 OID 0)
-- Dependencies: 1797
-- Name: FUNCTION fct_count_units(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_count_units() TO ipt_viewer;


--
-- TOC entry 8163 (class 0 OID 0)
-- Dependencies: 1798
-- Name: FUNCTION fct_cpy_deleted_file(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_deleted_file() TO ipt_viewer;


--
-- TOC entry 8164 (class 0 OID 0)
-- Dependencies: 1799
-- Name: FUNCTION fct_cpy_formattedname(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_formattedname() TO ipt_viewer;


--
-- TOC entry 8165 (class 0 OID 0)
-- Dependencies: 845
-- Name: FUNCTION fct_cpy_fulltoindex(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_fulltoindex() TO ipt_viewer;


--
-- TOC entry 8166 (class 0 OID 0)
-- Dependencies: 1787
-- Name: FUNCTION fct_cpy_gtutags(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_gtutags() TO ipt_viewer;


--
-- TOC entry 8167 (class 0 OID 0)
-- Dependencies: 1791
-- Name: FUNCTION fct_cpy_ig_to_loan_items(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_ig_to_loan_items() TO ipt_viewer;


--
-- TOC entry 8168 (class 0 OID 0)
-- Dependencies: 1800
-- Name: FUNCTION fct_cpy_length_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8169 (class 0 OID 0)
-- Dependencies: 1796
-- Name: FUNCTION fct_cpy_length_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_length_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8170 (class 0 OID 0)
-- Dependencies: 1802
-- Name: FUNCTION fct_cpy_loan_history(loan_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_loan_history(loan_id integer) TO ipt_viewer;


--
-- TOC entry 8171 (class 0 OID 0)
-- Dependencies: 1803
-- Name: FUNCTION fct_cpy_location(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_location() TO ipt_viewer;


--
-- TOC entry 8172 (class 0 OID 0)
-- Dependencies: 1801
-- Name: FUNCTION fct_cpy_path(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_path() TO ipt_viewer;


--
-- TOC entry 8173 (class 0 OID 0)
-- Dependencies: 1804
-- Name: FUNCTION fct_cpy_path_catalogs(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_path_catalogs() TO ipt_viewer;


--
-- TOC entry 8174 (class 0 OID 0)
-- Dependencies: 1807
-- Name: FUNCTION fct_cpy_specimensmaincode(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_specimensmaincode() TO ipt_viewer;


--
-- TOC entry 8175 (class 0 OID 0)
-- Dependencies: 1808
-- Name: FUNCTION fct_cpy_speed_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8176 (class 0 OID 0)
-- Dependencies: 1805
-- Name: FUNCTION fct_cpy_speed_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_speed_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8177 (class 0 OID 0)
-- Dependencies: 1813
-- Name: FUNCTION fct_cpy_tags_to_distinct(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_tags_to_distinct() TO ipt_viewer;


--
-- TOC entry 8178 (class 0 OID 0)
-- Dependencies: 1810
-- Name: FUNCTION fct_cpy_tags_to_distinct_bedic(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_tags_to_distinct_bedic() TO ipt_viewer;


--
-- TOC entry 8179 (class 0 OID 0)
-- Dependencies: 1814
-- Name: FUNCTION fct_cpy_temperature_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8180 (class 0 OID 0)
-- Dependencies: 1811
-- Name: FUNCTION fct_cpy_temperature_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_temperature_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8181 (class 0 OID 0)
-- Dependencies: 810
-- Name: FUNCTION fct_cpy_time_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8182 (class 0 OID 0)
-- Dependencies: 1809
-- Name: FUNCTION fct_cpy_time_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_time_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8183 (class 0 OID 0)
-- Dependencies: 1806
-- Name: FUNCTION fct_cpy_unified_values(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_unified_values() TO ipt_viewer;


--
-- TOC entry 8184 (class 0 OID 0)
-- Dependencies: 1817
-- Name: FUNCTION fct_cpy_updatecollectionrights(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_updatecollectionrights() TO ipt_viewer;


--
-- TOC entry 8185 (class 0 OID 0)
-- Dependencies: 1818
-- Name: FUNCTION fct_cpy_updatecollinstitutioncascade(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_updatecollinstitutioncascade() TO ipt_viewer;


--
-- TOC entry 8186 (class 0 OID 0)
-- Dependencies: 1819
-- Name: FUNCTION fct_cpy_updatemywidgetscoll(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_updatemywidgetscoll() TO ipt_viewer;


--
-- TOC entry 8187 (class 0 OID 0)
-- Dependencies: 1816
-- Name: FUNCTION fct_cpy_updatespechostimpact(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_updatespechostimpact() TO ipt_viewer;


--
-- TOC entry 8188 (class 0 OID 0)
-- Dependencies: 1823
-- Name: FUNCTION fct_cpy_updateuserrights(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_updateuserrights() TO ipt_viewer;


--
-- TOC entry 8189 (class 0 OID 0)
-- Dependencies: 1820
-- Name: FUNCTION fct_cpy_volume_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8190 (class 0 OID 0)
-- Dependencies: 1825
-- Name: FUNCTION fct_cpy_volume_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_volume_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8191 (class 0 OID 0)
-- Dependencies: 1821
-- Name: FUNCTION fct_cpy_weight_conversion(property real, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit text) TO ipt_viewer;


--
-- TOC entry 8192 (class 0 OID 0)
-- Dependencies: 1824
-- Name: FUNCTION fct_cpy_weight_conversion(property real, property_unit character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_cpy_weight_conversion(property real, property_unit character varying) TO ipt_viewer;


--
-- TOC entry 8193 (class 0 OID 0)
-- Dependencies: 1822
-- Name: FUNCTION fct_del_in_dict(ref_relation text, ref_field text, dict_val text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, dict_val text) TO ipt_viewer;


--
-- TOC entry 8194 (class 0 OID 0)
-- Dependencies: 1826
-- Name: FUNCTION fct_del_in_dict(ref_relation text, ref_field text, old_value text, new_val text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_del_in_dict(ref_relation text, ref_field text, old_value text, new_val text) TO ipt_viewer;


--
-- TOC entry 8195 (class 0 OID 0)
-- Dependencies: 1831
-- Name: FUNCTION fct_del_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text, depending_field text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_del_in_dict_dept(ref_relation text, ref_field text, old_value text, new_val text, depending_old_value text, depending_new_value text, depending_field text) TO ipt_viewer;


--
-- TOC entry 8196 (class 0 OID 0)
-- Dependencies: 811
-- Name: FUNCTION fct_duplicate_loans(loan_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_duplicate_loans(loan_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_duplicate_loans(loan_id integer) TO ipt_viewer;


--
-- TOC entry 8197 (class 0 OID 0)
-- Dependencies: 1832
-- Name: FUNCTION fct_encode_uri(input text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_encode_uri(input text) TO ipt_viewer;


--
-- TOC entry 8198 (class 0 OID 0)
-- Dependencies: 1833
-- Name: FUNCTION fct_explode_array(in_array anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_explode_array(in_array anyarray) TO ipt_viewer;


--
-- TOC entry 8199 (class 0 OID 0)
-- Dependencies: 1834
-- Name: FUNCTION fct_filter_encodable_row(ids character varying, col_name character varying, user_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_filter_encodable_row(ids character varying, col_name character varying, user_id integer) TO ipt_viewer;


--
-- TOC entry 8200 (class 0 OID 0)
-- Dependencies: 1827
-- Name: FUNCTION fct_find_tax_level(tax_path text, searched_level integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_find_tax_level(tax_path text, searched_level integer) TO ipt_viewer;


--
-- TOC entry 8201 (class 0 OID 0)
-- Dependencies: 1828
-- Name: FUNCTION fct_get_tax_hierarchy(start_id integer, levels integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_get_tax_hierarchy(start_id integer, levels integer[]) TO ipt_viewer;


--
-- TOC entry 8202 (class 0 OID 0)
-- Dependencies: 240
-- Name: SEQUENCE staging_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_id_seq TO ipt_viewer;


--
-- TOC entry 8203 (class 0 OID 0)
-- Dependencies: 241
-- Name: TABLE staging; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging TO d2viewer;
GRANT SELECT ON TABLE darwin2.staging TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging TO postgres;


--
-- TOC entry 8204 (class 0 OID 0)
-- Dependencies: 1829
-- Name: FUNCTION fct_imp_checker(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8205 (class 0 OID 0)
-- Dependencies: 1836
-- Name: FUNCTION fct_imp_checker_catalogue(line darwin2.staging, catalogue_table text, prefix text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_catalogue(line darwin2.staging, catalogue_table text, prefix text) TO ipt_viewer;


--
-- TOC entry 8206 (class 0 OID 0)
-- Dependencies: 1837
-- Name: FUNCTION fct_imp_checker_catalogues_parents(line darwin2.staging, rec_id integer, catalogue_table text, prefix text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_catalogues_parents(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) TO ipt_viewer;


--
-- TOC entry 8207 (class 0 OID 0)
-- Dependencies: 1835
-- Name: FUNCTION fct_imp_checker_catalogues_parents_bck20180829(line darwin2.staging, rec_id integer, catalogue_table text, prefix text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_catalogues_parents_bck20180829(line darwin2.staging, rec_id integer, catalogue_table text, prefix text) TO ipt_viewer;


--
-- TOC entry 8208 (class 0 OID 0)
-- Dependencies: 1830
-- Name: FUNCTION fct_imp_checker_category(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_category(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8209 (class 0 OID 0)
-- Dependencies: 812
-- Name: FUNCTION fct_imp_checker_expeditions(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_expeditions(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8210 (class 0 OID 0)
-- Dependencies: 1838
-- Name: FUNCTION fct_imp_checker_gtu(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_gtu(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8211 (class 0 OID 0)
-- Dependencies: 1846
-- Name: FUNCTION fct_imp_checker_igs(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_igs(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8212 (class 0 OID 0)
-- Dependencies: 848
-- Name: FUNCTION fct_imp_checker_manager(line darwin2.staging); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_manager(line darwin2.staging) TO ipt_viewer;


--
-- TOC entry 8213 (class 0 OID 0)
-- Dependencies: 1849
-- Name: FUNCTION fct_imp_checker_people(line darwin2.staging); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_people(line darwin2.staging) TO ipt_viewer;


--
-- TOC entry 8214 (class 0 OID 0)
-- Dependencies: 1850
-- Name: FUNCTION fct_imp_checker_staging_info(line darwin2.staging, st_type text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info(line darwin2.staging, st_type text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info(line darwin2.staging, st_type text) TO ipt_viewer;


--
-- TOC entry 8215 (class 0 OID 0)
-- Dependencies: 1851
-- Name: FUNCTION fct_imp_checker_staging_info_comments(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_comments(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_comments(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO ipt_viewer;


--
-- TOC entry 8216 (class 0 OID 0)
-- Dependencies: 1852
-- Name: FUNCTION fct_imp_checker_staging_info_ext_links(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_ext_links(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_ext_links(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO ipt_viewer;


--
-- TOC entry 8217 (class 0 OID 0)
-- Dependencies: 1853
-- Name: FUNCTION fct_imp_checker_staging_info_insurances(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_insurances(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_insurances(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO ipt_viewer;


--
-- TOC entry 8218 (class 0 OID 0)
-- Dependencies: 1854
-- Name: FUNCTION fct_imp_checker_staging_info_multimedia(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_multimedia(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_multimedia(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO ipt_viewer;


--
-- TOC entry 8219 (class 0 OID 0)
-- Dependencies: 813
-- Name: FUNCTION fct_imp_checker_staging_info_properties(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_properties(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_info_properties(targeted_referenced_relation character varying, targeted_record_id integer, new_referenced_relation character varying, new_record_id integer) TO ipt_viewer;


--
-- TOC entry 8220 (class 0 OID 0)
-- Dependencies: 1858
-- Name: FUNCTION fct_imp_checker_staging_relationship(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_relationship() TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_checker_staging_relationship() TO ipt_viewer;


--
-- TOC entry 8221 (class 0 OID 0)
-- Dependencies: 1857
-- Name: FUNCTION fct_imp_create_catalogues_and_parents(line darwin2.staging, catalogue_table text, prefix text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_imp_create_catalogues_and_parents(line darwin2.staging, catalogue_table text, prefix text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_imp_create_catalogues_and_parents(line darwin2.staging, catalogue_table text, prefix text) TO ipt_viewer;


--
-- TOC entry 8222 (class 0 OID 0)
-- Dependencies: 1859
-- Name: FUNCTION fct_importer_abcd(req_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_abcd(req_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8223 (class 0 OID 0)
-- Dependencies: 1856
-- Name: FUNCTION fct_importer_catalogue(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO postgres;
GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8224 (class 0 OID 0)
-- Dependencies: 1855
-- Name: FUNCTION fct_importer_catalogue_backup_pad(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_backup_pad(req_import_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8225 (class 0 OID 0)
-- Dependencies: 1862
-- Name: FUNCTION fct_importer_catalogue_non_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8226 (class 0 OID 0)
-- Dependencies: 1863
-- Name: FUNCTION fct_importer_catalogue_non_reference_taxonomy_add_author(var_staging_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author(var_staging_id integer) TO ipt_viewer;


--
-- TOC entry 8227 (class 0 OID 0)
-- Dependencies: 1860
-- Name: FUNCTION fct_importer_catalogue_non_reference_taxonomy_add_author_file(var_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_file(var_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8228 (class 0 OID 0)
-- Dependencies: 1861
-- Name: FUNCTION fct_importer_catalogue_non_reference_taxonomy_add_author_loop(var_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_non_reference_taxonomy_add_author_loop(var_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8229 (class 0 OID 0)
-- Dependencies: 1864
-- Name: FUNCTION fct_importer_catalogue_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8230 (class 0 OID 0)
-- Dependencies: 814
-- Name: FUNCTION fct_importer_catalogue_reference_taxonomy_logic(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8231 (class 0 OID 0)
-- Dependencies: 1865
-- Name: FUNCTION fct_importer_catalogue_reference_taxonomy_logic_non_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_non_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8232 (class 0 OID 0)
-- Dependencies: 1867
-- Name: FUNCTION fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_logic_reference(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8233 (class 0 OID 0)
-- Dependencies: 1868
-- Name: FUNCTION fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_importer_catalogue_reference_taxonomy_rmca_non_taxo(req_import_ref integer, var_metadata_ref integer, referenced_relation text, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8234 (class 0 OID 0)
-- Dependencies: 1869
-- Name: FUNCTION fct_informative_reset_last_flag(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_informative_reset_last_flag() TO ipt_viewer;


--
-- TOC entry 8235 (class 0 OID 0)
-- Dependencies: 815
-- Name: FUNCTION fct_listing_botany(nbr_records integer, VARIADIC taxon_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_botany(nbr_records integer, VARIADIC taxon_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_botany(nbr_records integer, VARIADIC taxon_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8236 (class 0 OID 0)
-- Dependencies: 1866
-- Name: FUNCTION fct_listing_chronostratigraphy(nbr_records integer, VARIADIC chrono_unit_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_chronostratigraphy(nbr_records integer, VARIADIC chrono_unit_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_chronostratigraphy(nbr_records integer, VARIADIC chrono_unit_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8237 (class 0 OID 0)
-- Dependencies: 816
-- Name: FUNCTION fct_listing_lithology(nbr_records integer, VARIADIC litholo_unit_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_lithology(nbr_records integer, VARIADIC litholo_unit_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_lithology(nbr_records integer, VARIADIC litholo_unit_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8238 (class 0 OID 0)
-- Dependencies: 1870
-- Name: FUNCTION fct_listing_lithostratigraphy(nbr_records integer, VARIADIC litho_unit_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_lithostratigraphy(nbr_records integer, VARIADIC litho_unit_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_lithostratigraphy(nbr_records integer, VARIADIC litho_unit_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8239 (class 0 OID 0)
-- Dependencies: 1871
-- Name: FUNCTION fct_listing_mineralogy(nbr_records integer, VARIADIC mineralo_unit_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_mineralogy(nbr_records integer, VARIADIC mineralo_unit_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_mineralogy(nbr_records integer, VARIADIC mineralo_unit_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8240 (class 0 OID 0)
-- Dependencies: 1872
-- Name: FUNCTION fct_listing_taxonomy(nbr_records integer, VARIADIC taxon_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_taxonomy(nbr_records integer, VARIADIC taxon_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_taxonomy(nbr_records integer, VARIADIC taxon_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8241 (class 0 OID 0)
-- Dependencies: 1875
-- Name: FUNCTION fct_listing_zoology(nbr_records integer, VARIADIC taxon_ids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_listing_zoology(nbr_records integer, VARIADIC taxon_ids integer[]) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.fct_listing_zoology(nbr_records integer, VARIADIC taxon_ids integer[]) TO ipt_viewer;


--
-- TOC entry 8242 (class 0 OID 0)
-- Dependencies: 1874
-- Name: FUNCTION fct_look_for_institution(fullname text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_look_for_institution(fullname text) TO ipt_viewer;


--
-- TOC entry 8243 (class 0 OID 0)
-- Dependencies: 1876
-- Name: FUNCTION fct_look_for_people(fullname text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_look_for_people(fullname text) TO ipt_viewer;


--
-- TOC entry 8244 (class 0 OID 0)
-- Dependencies: 1877
-- Name: FUNCTION fct_mask_date(date_fld timestamp without time zone, mask_fld integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_mask_date(date_fld timestamp without time zone, mask_fld integer) TO ipt_viewer;


--
-- TOC entry 8245 (class 0 OID 0)
-- Dependencies: 1839
-- Name: FUNCTION fct_nbr_in_relation(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_nbr_in_relation() TO ipt_viewer;


--
-- TOC entry 8246 (class 0 OID 0)
-- Dependencies: 1840
-- Name: FUNCTION fct_nbr_in_synonym(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_nbr_in_synonym() TO ipt_viewer;


--
-- TOC entry 8247 (class 0 OID 0)
-- Dependencies: 1841
-- Name: FUNCTION fct_rcma_sort_letter_before_numbers(character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rcma_sort_letter_before_numbers(character varying) TO ipt_viewer;


--
-- TOC entry 8248 (class 0 OID 0)
-- Dependencies: 1842
-- Name: FUNCTION fct_remove_array_elem(in_array anyarray, elem anyarray, OUT out_array anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyarray, OUT out_array anyarray) TO ipt_viewer;


--
-- TOC entry 8249 (class 0 OID 0)
-- Dependencies: 1847
-- Name: FUNCTION fct_remove_array_elem(in_array anyarray, elem anyelement, OUT out_array anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_remove_array_elem(in_array anyarray, elem anyelement, OUT out_array anyarray) TO ipt_viewer;


--
-- TOC entry 8250 (class 0 OID 0)
-- Dependencies: 1848
-- Name: FUNCTION fct_remove_last_flag(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_remove_last_flag() TO ipt_viewer;


--
-- TOC entry 8251 (class 0 OID 0)
-- Dependencies: 1843
-- Name: FUNCTION fct_remove_last_flag_loan(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_remove_last_flag_loan() TO ipt_viewer;


--
-- TOC entry 8252 (class 0 OID 0)
-- Dependencies: 1845
-- Name: FUNCTION fct_remove_null_array_elem(in_array anyarray, OUT out_array anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_remove_null_array_elem(in_array anyarray, OUT out_array anyarray) TO ipt_viewer;


--
-- TOC entry 8253 (class 0 OID 0)
-- Dependencies: 817
-- Name: FUNCTION fct_report_loans_addresses(loan_id integer, target_copy text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_report_loans_addresses(loan_id integer, target_copy text) TO ipt_viewer;


--
-- TOC entry 8254 (class 0 OID 0)
-- Dependencies: 1878
-- Name: FUNCTION fct_report_loans_forms(loan_id integer, full_target_list text, short_target_list text, selected_target_list text, targeted_catalogues text, with_addr boolean, lang text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_report_loans_forms(loan_id integer, full_target_list text, short_target_list text, selected_target_list text, targeted_catalogues text, with_addr boolean, lang text) TO ipt_viewer;


--
-- TOC entry 8255 (class 0 OID 0)
-- Dependencies: 1879
-- Name: FUNCTION fct_report_loans_maintenances(loan_id integer, maintenance_type text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_report_loans_maintenances(loan_id integer, maintenance_type text) TO ipt_viewer;


--
-- TOC entry 8256 (class 0 OID 0)
-- Dependencies: 1880
-- Name: FUNCTION fct_report_loans_return_to(loan_id integer, lang text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_report_loans_return_to(loan_id integer, lang text) TO ipt_viewer;


--
-- TOC entry 8257 (class 0 OID 0)
-- Dependencies: 818
-- Name: FUNCTION fct_report_loans_transporters(loan_id integer, transporter_side text, lang text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_report_loans_transporters(loan_id integer, transporter_side text, lang text) TO ipt_viewer;


--
-- TOC entry 8258 (class 0 OID 0)
-- Dependencies: 819
-- Name: FUNCTION fct_rmca_abbreviate_names(given_name character varying); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_abbreviate_names(given_name character varying) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_rmca_abbreviate_names(given_name character varying) TO ipt_viewer;


--
-- TOC entry 8259 (class 0 OID 0)
-- Dependencies: 1882
-- Name: FUNCTION fct_rmca_check_integrity(p_schema character varying); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_check_integrity(p_schema character varying) TO darwin2;


--
-- TOC entry 8260 (class 0 OID 0)
-- Dependencies: 1883
-- Name: FUNCTION fct_rmca_chk_is_already_reference_taxo(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_chk_is_already_reference_taxo() TO ipt_viewer;


--
-- TOC entry 8261 (class 0 OID 0)
-- Dependencies: 1881
-- Name: FUNCTION fct_rmca_chk_only_one_reference_taxo(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_chk_only_one_reference_taxo() TO ipt_viewer;


--
-- TOC entry 8262 (class 0 OID 0)
-- Dependencies: 1884
-- Name: FUNCTION fct_rmca_chk_uniqueness_reference_taxo(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_chk_uniqueness_reference_taxo() TO ipt_viewer;


--
-- TOC entry 8263 (class 0 OID 0)
-- Dependencies: 1774
-- Name: FUNCTION fct_rmca_collection_access_rights(id_user integer, with_writing boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_access_rights(id_user integer, with_writing boolean) TO ipt_viewer;


--
-- TOC entry 8264 (class 0 OID 0)
-- Dependencies: 1783
-- Name: FUNCTION fct_rmca_collection_access_rights_array(id_user integer, searched_cols integer[], with_writing boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_access_rights_array(id_user integer, searched_cols integer[], with_writing boolean) TO ipt_viewer;


--
-- TOC entry 8265 (class 0 OID 0)
-- Dependencies: 820
-- Name: FUNCTION fct_rmca_collection_calculate_autoincrement_hierarchy(col_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_calculate_autoincrement_hierarchy(col_id integer) TO ipt_viewer;


--
-- TOC entry 8266 (class 0 OID 0)
-- Dependencies: 846
-- Name: FUNCTION fct_rmca_collection_check_code_unicity(col_id integer, code_indexed character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_check_code_unicity(col_id integer, code_indexed character varying) TO ipt_viewer;


--
-- TOC entry 8267 (class 0 OID 0)
-- Dependencies: 1885
-- Name: FUNCTION fct_rmca_collection_get_autoincrement_hierarchy(col_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_get_autoincrement_hierarchy(col_id integer) TO ipt_viewer;


--
-- TOC entry 8268 (class 0 OID 0)
-- Dependencies: 1888
-- Name: FUNCTION fct_rmca_collection_get_collections_ai_hierarchy(col_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_get_collections_ai_hierarchy(col_id integer) TO ipt_viewer;


--
-- TOC entry 8269 (class 0 OID 0)
-- Dependencies: 1886
-- Name: FUNCTION fct_rmca_collection_update_autoincrements_hierarchy(col_id integer, new_code_value bigint); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_collection_update_autoincrements_hierarchy(col_id integer, new_code_value bigint) TO ipt_viewer;


--
-- TOC entry 8270 (class 0 OID 0)
-- Dependencies: 1892
-- Name: FUNCTION fct_rmca_compare_taxonomy_staging_darwin(req_import_ref integer, with_rank boolean, is_indexed boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin(req_import_ref integer, with_rank boolean, is_indexed boolean) TO ipt_viewer;


--
-- TOC entry 8271 (class 0 OID 0)
-- Dependencies: 1889
-- Name: FUNCTION fct_rmca_compare_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean) TO ipt_viewer;


--
-- TOC entry 8272 (class 0 OID 0)
-- Dependencies: 1896
-- Name: FUNCTION fct_rmca_compare_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_units boolean) TO ipt_viewer;


--
-- TOC entry 8273 (class 0 OID 0)
-- Dependencies: 1894
-- Name: FUNCTION fct_rmca_compare_taxonomy_staging_darwin_tagging(req_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_compare_taxonomy_staging_darwin_tagging(req_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8274 (class 0 OID 0)
-- Dependencies: 1897
-- Name: FUNCTION fct_rmca_concatenate_comment(record_ref integer, relation character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_concatenate_comment(record_ref integer, relation character varying) TO ipt_viewer;


--
-- TOC entry 8275 (class 0 OID 0)
-- Dependencies: 1895
-- Name: FUNCTION fct_rmca_concatenate_properties(record_ref integer, relation character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_concatenate_properties(record_ref integer, relation character varying) TO ipt_viewer;


--
-- TOC entry 8276 (class 0 OID 0)
-- Dependencies: 821
-- Name: FUNCTION fct_rmca_document_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_non_reference(req_import_ref integer, var_metadata_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean) TO ipt_viewer;


--
-- TOC entry 8277 (class 0 OID 0)
-- Dependencies: 1891
-- Name: FUNCTION fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean) TO postgres;
GRANT ALL ON FUNCTION darwin2.fct_rmca_document_taxonomy_staging_darwin_reference(req_import_ref integer, with_rank boolean, is_indexed boolean, match_invalid_taxonomies boolean) TO ipt_viewer;


--
-- TOC entry 8278 (class 0 OID 0)
-- Dependencies: 822
-- Name: FUNCTION fct_rmca_dynamic_saved_search(id_query integer, id_user integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer) TO ipt_viewer;


--
-- TOC entry 8279 (class 0 OID 0)
-- Dependencies: 1903
-- Name: FUNCTION fct_rmca_dynamic_saved_search(id_query integer, id_user integer, page integer, page_size integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search(id_query integer, id_user integer, page integer, page_size integer) TO ipt_viewer;


--
-- TOC entry 8280 (class 0 OID 0)
-- Dependencies: 1898
-- Name: FUNCTION fct_rmca_dynamic_saved_search_geojson(id_query integer, id_user integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search_geojson(id_query integer, id_user integer) TO ipt_viewer;


--
-- TOC entry 8281 (class 0 OID 0)
-- Dependencies: 1908
-- Name: FUNCTION fct_rmca_dynamic_saved_search_get_specimen(query_id integer, user_id integer, url_prefix character varying, page integer, page_size integer, is_admin boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search_get_specimen(query_id integer, user_id integer, url_prefix character varying, page integer, page_size integer, is_admin boolean) TO ipt_viewer;


--
-- TOC entry 8282 (class 0 OID 0)
-- Dependencies: 823
-- Name: FUNCTION fct_rmca_dynamic_saved_search_taxonomy(id_query integer, id_user integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy(id_query integer, id_user integer) TO ipt_viewer;


--
-- TOC entry 8283 (class 0 OID 0)
-- Dependencies: 1915
-- Name: FUNCTION fct_rmca_dynamic_saved_search_taxonomy_statistics(id_query integer, id_user integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics(id_query integer, id_user integer) TO ipt_viewer;


--
-- TOC entry 8284 (class 0 OID 0)
-- Dependencies: 1916
-- Name: FUNCTION fct_rmca_dynamic_saved_search_taxonomy_statistics_detail(id_query integer, id_user integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_dynamic_saved_search_taxonomy_statistics_detail(id_query integer, id_user integer) TO ipt_viewer;


--
-- TOC entry 8285 (class 0 OID 0)
-- Dependencies: 1917
-- Name: FUNCTION fct_rmca_get_all_child_direct_synonyms(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_get_all_child_direct_synonyms(integer) TO ipt_viewer;


--
-- TOC entry 8286 (class 0 OID 0)
-- Dependencies: 1912
-- Name: FUNCTION fct_rmca_get_all_child_synonyms(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_get_all_child_synonyms(integer) TO ipt_viewer;


--
-- TOC entry 8287 (class 0 OID 0)
-- Dependencies: 1904
-- Name: FUNCTION fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8288 (class 0 OID 0)
-- Dependencies: 1899
-- Name: FUNCTION fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, taxonomy_metadata_id integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_get_merge_catalogue_path_in_staging_existing_taxonomy(id_staging_taxon integer, taxonomy_metadata_id integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8289 (class 0 OID 0)
-- Dependencies: 1902
-- Name: FUNCTION fct_rmca_gtu_linetotagarray_pattern(pattern text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_gtu_linetotagarray_pattern(pattern text) TO ipt_viewer;


--
-- TOC entry 8290 (class 0 OID 0)
-- Dependencies: 1905
-- Name: FUNCTION fct_rmca_gtu_orderby_pattern(character varying, character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_gtu_orderby_pattern(character varying, character varying) TO ipt_viewer;


--
-- TOC entry 8291 (class 0 OID 0)
-- Dependencies: 824
-- Name: FUNCTION fct_rmca_handle_lithostratigraphy_import(req_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_handle_lithostratigraphy_import(req_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8292 (class 0 OID 0)
-- Dependencies: 1906
-- Name: FUNCTION fct_rmca_handle_non_reference_taxonomies(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8293 (class 0 OID 0)
-- Dependencies: 1909
-- Name: FUNCTION fct_rmca_handle_non_reference_taxonomies_bck(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_bck(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8294 (class 0 OID 0)
-- Dependencies: 1910
-- Name: FUNCTION fct_rmca_handle_non_reference_taxonomies_same_taxo(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_handle_non_reference_taxonomies_same_taxo(req_import_ref integer, var_metadata_ref integer, exclude_invalid_entries boolean) TO ipt_viewer;


--
-- TOC entry 8295 (class 0 OID 0)
-- Dependencies: 1911
-- Name: FUNCTION fct_rmca_imp_checker_gtu_search_code(line darwin2.staging, collection_ref_for_gtu_var integer, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code(line darwin2.staging, collection_ref_for_gtu_var integer, import boolean) TO ipt_viewer;


--
-- TOC entry 8296 (class 0 OID 0)
-- Dependencies: 1918
-- Name: FUNCTION fct_rmca_imp_checker_gtu_search_code_2(line darwin2.staging, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code_2(line darwin2.staging, import boolean) TO postgres;
GRANT ALL ON FUNCTION darwin2.fct_rmca_imp_checker_gtu_search_code_2(line darwin2.staging, import boolean) TO ipt_viewer;


--
-- TOC entry 8297 (class 0 OID 0)
-- Dependencies: 847
-- Name: FUNCTION fct_rmca_imp_checker_specimen_code(line darwin2.staging, collection_ref integer, import boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_imp_checker_specimen_code(line darwin2.staging, collection_ref integer, import boolean) TO ipt_viewer;


--
-- TOC entry 8298 (class 0 OID 0)
-- Dependencies: 1920
-- Name: FUNCTION fct_rmca_keep_staging_catalogue_parent(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_keep_staging_catalogue_parent() TO ipt_viewer;


--
-- TOC entry 8299 (class 0 OID 0)
-- Dependencies: 825
-- Name: FUNCTION fct_rmca_log_original_specimens_id_uuid(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_log_original_specimens_id_uuid() TO ipt_viewer;


--
-- TOC entry 8300 (class 0 OID 0)
-- Dependencies: 1919
-- Name: FUNCTION fct_rmca_look_related_specimens(p_specimen_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_look_related_specimens(p_specimen_ref integer) TO ipt_viewer;


--
-- TOC entry 8301 (class 0 OID 0)
-- Dependencies: 1913
-- Name: FUNCTION fct_rmca_people_array_to_name(int_array integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_people_array_to_name(int_array integer[]) TO ipt_viewer;


--
-- TOC entry 8302 (class 0 OID 0)
-- Dependencies: 826
-- Name: FUNCTION fct_rmca_py_webservice(uri text, body text, content_type text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_py_webservice(uri text, body text, content_type text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_rmca_py_webservice(uri text, body text, content_type text) TO ipt_viewer;


--
-- TOC entry 8303 (class 0 OID 0)
-- Dependencies: 1914
-- Name: FUNCTION fct_rmca_redo_taxonomic_import(req_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_redo_taxonomic_import(req_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8304 (class 0 OID 0)
-- Dependencies: 1763
-- Name: FUNCTION fct_rmca_refresh_ipt_views(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_refresh_ipt_views() TO ipt_viewer;


--
-- TOC entry 8305 (class 0 OID 0)
-- Dependencies: 1887
-- Name: FUNCTION fct_rmca_reporting_refresh_views(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_reporting_refresh_views() TO ipt_viewer;


--
-- TOC entry 8306 (class 0 OID 0)
-- Dependencies: 1890
-- Name: FUNCTION fct_rmca_retrieve_taxa_in_collection_fastly(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly(integer) TO ipt_viewer;


--
-- TOC entry 8307 (class 0 OID 0)
-- Dependencies: 1893
-- Name: FUNCTION fct_rmca_retrieve_taxa_in_collection_fastly_array(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_retrieve_taxa_in_collection_fastly_array(integer) TO ipt_viewer;


--
-- TOC entry 8308 (class 0 OID 0)
-- Dependencies: 1922
-- Name: FUNCTION fct_rmca_search_compare_date_array(array_from_date_mask integer[], array_from_date timestamp without time zone[], array_to_date_mask integer[], array_to_date timestamp without time zone[], query_mode character varying, val_from timestamp without time zone, val_to timestamp without time zone); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_search_compare_date_array(array_from_date_mask integer[], array_from_date timestamp without time zone[], array_to_date_mask integer[], array_to_date timestamp without time zone[], query_mode character varying, val_from timestamp without time zone, val_to timestamp without time zone) TO ipt_viewer;


--
-- TOC entry 8309 (class 0 OID 0)
-- Dependencies: 1923
-- Name: FUNCTION fct_rmca_sort_taxon_get_parent_level(id_taxon integer, id_level integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level(id_taxon integer, id_level integer) TO ipt_viewer;


--
-- TOC entry 8310 (class 0 OID 0)
-- Dependencies: 827
-- Name: FUNCTION fct_rmca_sort_taxon_get_parent_level_text(id_taxon integer, id_level integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_get_parent_level_text(id_taxon integer, id_level integer) TO ipt_viewer;


--
-- TOC entry 8311 (class 0 OID 0)
-- Dependencies: 1925
-- Name: FUNCTION fct_rmca_sort_taxon_path_all_json(src_path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_all_json(src_path character varying) TO ipt_viewer;


--
-- TOC entry 8312 (class 0 OID 0)
-- Dependencies: 1926
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically(path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying) TO ipt_viewer;


--
-- TOC entry 8313 (class 0 OID 0)
-- Dependencies: 1921
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically(path character varying, last_level integer, with_rank boolean, is_indexed boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically(path character varying, last_level integer, with_rank boolean, is_indexed boolean) TO ipt_viewer;


--
-- TOC entry 8314 (class 0 OID 0)
-- Dependencies: 844
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically_hstore(path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore(path character varying) TO ipt_viewer;


--
-- TOC entry 8315 (class 0 OID 0)
-- Dependencies: 1924
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically_hstore_key(path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_hstore_key(path character varying) TO ipt_viewer;


--
-- TOC entry 8316 (class 0 OID 0)
-- Dependencies: 1815
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically_not_indexed(path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_not_indexed(path character varying) TO ipt_viewer;


--
-- TOC entry 8317 (class 0 OID 0)
-- Dependencies: 1812
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically_staging(taxon_id integer, with_rank boolean, is_indexed boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging(taxon_id integer, with_rank boolean, is_indexed boolean) TO ipt_viewer;


--
-- TOC entry 8318 (class 0 OID 0)
-- Dependencies: 1927
-- Name: FUNCTION fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(taxon_id integer, req_import_ref integer, with_rank boolean, is_indexed boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_alphabetically_staging_merge_reference(taxon_id integer, req_import_ref integer, with_rank boolean, is_indexed boolean) TO ipt_viewer;


--
-- TOC entry 8319 (class 0 OID 0)
-- Dependencies: 1928
-- Name: FUNCTION fct_rmca_sort_taxon_path_get_max_level_in_staging(taxon_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_sort_taxon_path_get_max_level_in_staging(taxon_id integer) TO ipt_viewer;


--
-- TOC entry 8320 (class 0 OID 0)
-- Dependencies: 1931
-- Name: FUNCTION fct_rmca_taxonomy_get_old_synonyms(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_get_old_synonyms(integer) TO ipt_viewer;


--
-- TOC entry 8321 (class 0 OID 0)
-- Dependencies: 1932
-- Name: FUNCTION fct_rmca_taxonomy_get_other_synonyms(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_get_other_synonyms(integer) TO ipt_viewer;


--
-- TOC entry 8322 (class 0 OID 0)
-- Dependencies: 828
-- Name: FUNCTION fct_rmca_taxonomy_get_staging_hierarchy_recursive(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_get_staging_hierarchy_recursive(integer) TO ipt_viewer;


--
-- TOC entry 8323 (class 0 OID 0)
-- Dependencies: 1929
-- Name: FUNCTION fct_rmca_taxonomy_split_name_author(name character varying, rank_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_split_name_author(name character varying, rank_id integer) TO ipt_viewer;


--
-- TOC entry 8324 (class 0 OID 0)
-- Dependencies: 829
-- Name: FUNCTION fct_rmca_taxonomy_taxon_path_all_json(src_path character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_taxon_path_all_json(src_path character varying) TO ipt_viewer;


--
-- TOC entry 8325 (class 0 OID 0)
-- Dependencies: 1937
-- Name: FUNCTION fct_rmca_taxonomy_try_to_isolate_from_author(name character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author(name character varying) TO ipt_viewer;


--
-- TOC entry 8326 (class 0 OID 0)
-- Dependencies: 1939
-- Name: FUNCTION fct_rmca_taxonomy_try_to_isolate_from_author_old(character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_taxonomy_try_to_isolate_from_author_old(character varying) TO ipt_viewer;


--
-- TOC entry 8327 (class 0 OID 0)
-- Dependencies: 1940
-- Name: FUNCTION fct_rmca_update_child_of_taxon_protected(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_update_child_of_taxon_protected() TO ipt_viewer;


--
-- TOC entry 8328 (class 0 OID 0)
-- Dependencies: 1941
-- Name: FUNCTION fct_rmca_update_reference_taxo(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_rmca_update_reference_taxo() TO ipt_viewer;


--
-- TOC entry 8329 (class 0 OID 0)
-- Dependencies: 1933
-- Name: FUNCTION fct_search_authorized_encoding_collections(user_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_search_authorized_encoding_collections(user_id integer) TO ipt_viewer;


--
-- TOC entry 8330 (class 0 OID 0)
-- Dependencies: 1934
-- Name: FUNCTION fct_search_authorized_view_collections(user_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_search_authorized_view_collections(user_id integer) TO ipt_viewer;


--
-- TOC entry 8331 (class 0 OID 0)
-- Dependencies: 1935
-- Name: FUNCTION fct_search_methods(str_ids character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_search_methods(str_ids character varying) TO ipt_viewer;


--
-- TOC entry 8332 (class 0 OID 0)
-- Dependencies: 1936
-- Name: FUNCTION fct_search_tools(str_ids character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_search_tools(str_ids character varying) TO ipt_viewer;


--
-- TOC entry 8333 (class 0 OID 0)
-- Dependencies: 830
-- Name: FUNCTION fct_searchcodes(VARIADIC character varying[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_searchcodes(VARIADIC character varying[]) TO ipt_viewer;


--
-- TOC entry 8334 (class 0 OID 0)
-- Dependencies: 1945
-- Name: FUNCTION fct_set_user(userid integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_set_user(userid integer) TO ipt_viewer;


--
-- TOC entry 8335 (class 0 OID 0)
-- Dependencies: 1946
-- Name: FUNCTION fct_trg_chk_possible_upper_level(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trg_chk_possible_upper_level() TO ipt_viewer;


--
-- TOC entry 8336 (class 0 OID 0)
-- Dependencies: 1947
-- Name: FUNCTION fct_trg_rmca_codes_log_id(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trg_rmca_codes_log_id() TO ipt_viewer;


--
-- TOC entry 8337 (class 0 OID 0)
-- Dependencies: 1948
-- Name: FUNCTION fct_trg_rmca_log_specimens_stable_ids(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trg_rmca_log_specimens_stable_ids() TO ipt_viewer;


--
-- TOC entry 8338 (class 0 OID 0)
-- Dependencies: 1949
-- Name: FUNCTION fct_trg_rmca_specimens_log_id_uuid(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trg_rmca_specimens_log_id_uuid() TO ipt_viewer;


--
-- TOC entry 8339 (class 0 OID 0)
-- Dependencies: 1943
-- Name: FUNCTION fct_trk_log_old_synonyms(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trk_log_old_synonyms() TO ipt_viewer;


--
-- TOC entry 8340 (class 0 OID 0)
-- Dependencies: 1944
-- Name: FUNCTION fct_trk_log_table(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_trk_log_table() TO ipt_viewer;


--
-- TOC entry 8341 (class 0 OID 0)
-- Dependencies: 1942
-- Name: FUNCTION fct_unpromotion_impact_prefs(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_unpromotion_impact_prefs() TO ipt_viewer;


--
-- TOC entry 8342 (class 0 OID 0)
-- Dependencies: 1954
-- Name: FUNCTION fct_upd_institution_staging_relationship(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_upd_institution_staging_relationship() TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_upd_institution_staging_relationship() TO ipt_viewer;


--
-- TOC entry 8343 (class 0 OID 0)
-- Dependencies: 1953
-- Name: FUNCTION fct_upd_people_in_flat(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_upd_people_in_flat() TO ipt_viewer;


--
-- TOC entry 8344 (class 0 OID 0)
-- Dependencies: 1955
-- Name: FUNCTION fct_upd_people_staging_fields(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_upd_people_staging_fields() TO ipt_viewer;


--
-- TOC entry 8345 (class 0 OID 0)
-- Dependencies: 1950
-- Name: FUNCTION fct_upd_staging_fields(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_upd_staging_fields() TO ipt_viewer;


--
-- TOC entry 8346 (class 0 OID 0)
-- Dependencies: 1956
-- Name: FUNCTION fct_update_import(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fct_update_import() TO darwin2;
GRANT ALL ON FUNCTION darwin2.fct_update_import() TO ipt_viewer;


--
-- TOC entry 8347 (class 0 OID 0)
-- Dependencies: 831
-- Name: FUNCTION fct_update_specimen_flat(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_update_specimen_flat() TO ipt_viewer;


--
-- TOC entry 8348 (class 0 OID 0)
-- Dependencies: 1951
-- Name: FUNCTION fct_update_specimens_flat_related(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fct_update_specimens_flat_related() TO ipt_viewer;


--
-- TOC entry 8349 (class 0 OID 0)
-- Dependencies: 1952
-- Name: FUNCTION fulltoindex(to_indexed character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fulltoindex(to_indexed character varying) TO ipt_viewer;


--
-- TOC entry 8350 (class 0 OID 0)
-- Dependencies: 832
-- Name: FUNCTION fulltoindex(to_indexed character varying, keep_space boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean) TO ipt_viewer;


--
-- TOC entry 8351 (class 0 OID 0)
-- Dependencies: 1959
-- Name: FUNCTION fulltoindex(to_indexed character varying, keep_space boolean, keep_star boolean); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_space boolean, keep_star boolean) TO ipt_viewer;


--
-- TOC entry 8352 (class 0 OID 0)
-- Dependencies: 833
-- Name: FUNCTION fulltoindex(to_indexed character varying, keep_chars character varying, to_spaces character varying[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_chars character varying, to_spaces character varying[]) TO darwin2;
GRANT ALL ON FUNCTION darwin2.fulltoindex(to_indexed character varying, keep_chars character varying, to_spaces character varying[]) TO ipt_viewer;


--
-- TOC entry 8353 (class 0 OID 0)
-- Dependencies: 1957
-- Name: FUNCTION fulltoindex_add_prefix_suffix(pattern character varying, prefix character varying, suffix character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.fulltoindex_add_prefix_suffix(pattern character varying, prefix character varying, suffix character varying) TO ipt_viewer;


--
-- TOC entry 8354 (class 0 OID 0)
-- Dependencies: 1960
-- Name: FUNCTION get_import_row(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.get_import_row() TO ipt_viewer;


--
-- TOC entry 8355 (class 0 OID 0)
-- Dependencies: 1961
-- Name: FUNCTION get_setting(param text, OUT value text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.get_setting(param text, OUT value text) TO ipt_viewer;


--
-- TOC entry 8356 (class 0 OID 0)
-- Dependencies: 834
-- Name: FUNCTION getspecificparentforlevel(referenced_relation character varying, path character varying, level_searched character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.getspecificparentforlevel(referenced_relation character varying, path character varying, level_searched character varying) TO ipt_viewer;


--
-- TOC entry 8357 (class 0 OID 0)
-- Dependencies: 1958
-- Name: FUNCTION gettagsindexedasarray(taglist character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.gettagsindexedasarray(taglist character varying) TO ipt_viewer;


--
-- TOC entry 8358 (class 0 OID 0)
-- Dependencies: 835
-- Name: FUNCTION is_property_unit_in_group(searched_unit text, property_unit text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.is_property_unit_in_group(searched_unit text, property_unit text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.is_property_unit_in_group(searched_unit text, property_unit text) TO ipt_viewer;


--
-- TOC entry 8359 (class 0 OID 0)
-- Dependencies: 1966
-- Name: FUNCTION isinteger(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.isinteger(text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.isinteger(text) TO ipt_viewer;


--
-- TOC entry 8360 (class 0 OID 0)
-- Dependencies: 1967
-- Name: FUNCTION isnumeric(text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.isnumeric(text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.isnumeric(text) TO ipt_viewer;


--
-- TOC entry 8361 (class 0 OID 0)
-- Dependencies: 1969
-- Name: FUNCTION labeling_code_for_indexation(part_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.labeling_code_for_indexation(part_ref integer) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.labeling_code_for_indexation(part_ref integer) TO ipt_viewer;


--
-- TOC entry 8362 (class 0 OID 0)
-- Dependencies: 1965
-- Name: FUNCTION labeling_individual_type_for_indexation(individual_type character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.labeling_individual_type_for_indexation(individual_type character varying) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.labeling_individual_type_for_indexation(individual_type character varying) TO ipt_viewer;


--
-- TOC entry 8363 (class 0 OID 0)
-- Dependencies: 1968
-- Name: FUNCTION labeling_part_for_indexation(part character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.labeling_part_for_indexation(part character varying) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.labeling_part_for_indexation(part character varying) TO ipt_viewer;


--
-- TOC entry 8364 (class 0 OID 0)
-- Dependencies: 1970
-- Name: FUNCTION labeling_type_for_indexation(individual_type character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.labeling_type_for_indexation(individual_type character varying) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.labeling_type_for_indexation(individual_type character varying) TO ipt_viewer;


--
-- TOC entry 8365 (class 0 OID 0)
-- Dependencies: 1971
-- Name: FUNCTION linetotagarray(line text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.linetotagarray(line text) TO ipt_viewer;


--
-- TOC entry 8366 (class 0 OID 0)
-- Dependencies: 1972
-- Name: FUNCTION linetotagrows(line text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.linetotagrows(line text) TO ipt_viewer;


--
-- TOC entry 8367 (class 0 OID 0)
-- Dependencies: 1760
-- Name: FUNCTION normal_rand(integer, double precision, double precision); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.normal_rand(integer, double precision, double precision) TO ipt_viewer;


--
-- TOC entry 8368 (class 0 OID 0)
-- Dependencies: 1962
-- Name: FUNCTION point_equal(point, point); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.point_equal(point, point) TO darwin2;
GRANT ALL ON FUNCTION darwin2.point_equal(point, point) TO ipt_viewer;


--
-- TOC entry 8369 (class 0 OID 0)
-- Dependencies: 1963
-- Name: FUNCTION rmca_cast_staging_gtu_date_to_mask(p_date timestamp without time zone, p_time time without time zone, date_resolution character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_cast_staging_gtu_date_to_mask(p_date timestamp without time zone, p_time time without time zone, date_resolution character varying) TO ipt_viewer;


--
-- TOC entry 8370 (class 0 OID 0)
-- Dependencies: 1964
-- Name: FUNCTION rmca_clean_gtu_imports(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_clean_gtu_imports(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8371 (class 0 OID 0)
-- Dependencies: 1973
-- Name: FUNCTION rmca_create_missing_people_in_staging(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_create_missing_people_in_staging(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8372 (class 0 OID 0)
-- Dependencies: 1974
-- Name: FUNCTION rmca_delete_specimens_from_import_all(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_delete_specimens_from_import_all(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8373 (class 0 OID 0)
-- Dependencies: 1975
-- Name: FUNCTION rmca_delete_staging_from_import_all(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_delete_staging_from_import_all(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8375 (class 0 OID 0)
-- Dependencies: 1978
-- Name: FUNCTION rmca_dms_to_dd(coord_dms character varying, direction character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_dms_to_dd(coord_dms character varying, direction character varying) TO ipt_viewer;


--
-- TOC entry 8376 (class 0 OID 0)
-- Dependencies: 1979
-- Name: FUNCTION rmca_dms_to_text(coordinates_format character varying, degrees integer, minutes double precision, seconds double precision, direction integer, coord_decimal double precision, lat_lon character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_dms_to_text(coordinates_format character varying, degrees integer, minutes double precision, seconds double precision, direction integer, coord_decimal double precision, lat_lon character varying) TO ipt_viewer;


--
-- TOC entry 8377 (class 0 OID 0)
-- Dependencies: 836
-- Name: FUNCTION rmca_dmscheck_syntax(coord_dms character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_dmscheck_syntax(coord_dms character varying) TO postgres;
GRANT ALL ON FUNCTION darwin2.rmca_dmscheck_syntax(coord_dms character varying) TO ipt_viewer;


--
-- TOC entry 8378 (class 0 OID 0)
-- Dependencies: 1976
-- Name: FUNCTION rmca_fct_clear_gtu_date(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_fct_clear_gtu_date() TO ipt_viewer;


--
-- TOC entry 8379 (class 0 OID 0)
-- Dependencies: 1977
-- Name: FUNCTION rmca_fct_clear_specimen_date(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_fct_clear_specimen_date() TO ipt_viewer;


--
-- TOC entry 8380 (class 0 OID 0)
-- Dependencies: 1980
-- Name: FUNCTION rmca_fct_taxonomy_get_old_synonyms(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_fct_taxonomy_get_old_synonyms(integer) TO ipt_viewer;


--
-- TOC entry 8381 (class 0 OID 0)
-- Dependencies: 1983
-- Name: FUNCTION rmca_fct_update_specimen_date(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_fct_update_specimen_date() TO ipt_viewer;


--
-- TOC entry 8382 (class 0 OID 0)
-- Dependencies: 1984
-- Name: FUNCTION rmca_get_import_row(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_import_row(integer) TO ipt_viewer;


--
-- TOC entry 8383 (class 0 OID 0)
-- Dependencies: 1985
-- Name: FUNCTION rmca_get_wfs_geom(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gids integer[]) TO darwin2;
GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gids integer[]) TO ipt_viewer;


--
-- TOC entry 8384 (class 0 OID 0)
-- Dependencies: 1981
-- Name: FUNCTION rmca_get_wfs_geom(table_name character varying, gid integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom(table_name character varying, gid integer) TO ipt_viewer;


--
-- TOC entry 8385 (class 0 OID 0)
-- Dependencies: 1982
-- Name: FUNCTION rmca_get_wfs_geom_subdivide(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom_subdivide(table_name character varying, gids integer[]) TO postgres;


--
-- TOC entry 8386 (class 0 OID 0)
-- Dependencies: 1987
-- Name: FUNCTION rmca_get_wfs_geom_subdivide_gtu(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu(table_name character varying, gids integer[]) TO postgres;


--
-- TOC entry 8387 (class 0 OID 0)
-- Dependencies: 1988
-- Name: FUNCTION rmca_get_wfs_geom_subdivide_gtu_flat(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_flat(table_name character varying, gids integer[]) TO postgres;


--
-- TOC entry 8388 (class 0 OID 0)
-- Dependencies: 1989
-- Name: FUNCTION rmca_get_wfs_geom_subdivide_gtu_string(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_geom_subdivide_gtu_string(table_name character varying, gids integer[]) TO darwin2;


--
-- TOC entry 8389 (class 0 OID 0)
-- Dependencies: 1986
-- Name: FUNCTION rmca_get_wfs_names(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_get_wfs_names(table_name character varying, gids integer[]) TO ipt_viewer;


--
-- TOC entry 8390 (class 0 OID 0)
-- Dependencies: 1992
-- Name: FUNCTION rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_import_gtu_create_missing_people_in_staging(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8391 (class 0 OID 0)
-- Dependencies: 1995
-- Name: FUNCTION rmca_import_gtu_force(p_staging_gtu_id integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_import_gtu_force(p_staging_gtu_id integer) TO ipt_viewer;


--
-- TOC entry 8392 (class 0 OID 0)
-- Dependencies: 1991
-- Name: FUNCTION rmca_import_gtu_in_darwin_fast(p_import_ref integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_import_gtu_in_darwin_fast(p_import_ref integer) TO postgres;
GRANT ALL ON FUNCTION darwin2.rmca_import_gtu_in_darwin_fast(p_import_ref integer) TO ipt_viewer;


--
-- TOC entry 8393 (class 0 OID 0)
-- Dependencies: 1993
-- Name: FUNCTION rmca_reinit_statistical_view(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_reinit_statistical_view() TO ipt_viewer;


--
-- TOC entry 8394 (class 0 OID 0)
-- Dependencies: 1994
-- Name: FUNCTION rmca_update_parent_code(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_update_parent_code() TO ipt_viewer;


--
-- TOC entry 8395 (class 0 OID 0)
-- Dependencies: 1990
-- Name: FUNCTION rmca_wfs_get_darwin_translations(table_name character varying, gids integer[]); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_wfs_get_darwin_translations(table_name character varying, gids integer[]) TO ipt_viewer;


--
-- TOC entry 8396 (class 0 OID 0)
-- Dependencies: 1996
-- Name: FUNCTION rmca_wfs_translation_service(name_pattern character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying) TO ipt_viewer;


--
-- TOC entry 8397 (class 0 OID 0)
-- Dependencies: 1997
-- Name: FUNCTION rmca_wfs_translation_service(src_geom public.geometry); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_wfs_translation_service(src_geom public.geometry) TO ipt_viewer;


--
-- TOC entry 8398 (class 0 OID 0)
-- Dependencies: 1998
-- Name: FUNCTION rmca_wfs_translation_service(name_pattern character varying, src_geom public.geometry); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_wfs_translation_service(name_pattern character varying, src_geom public.geometry) TO ipt_viewer;


--
-- TOC entry 8399 (class 0 OID 0)
-- Dependencies: 2002
-- Name: FUNCTION rmca_wfs_translation_service_2(name_pattern character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.rmca_wfs_translation_service_2(name_pattern character varying) TO ipt_viewer;


--
-- TOC entry 8400 (class 0 OID 0)
-- Dependencies: 2003
-- Name: FUNCTION set_path(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.set_path() TO ipt_viewer;


--
-- TOC entry 8401 (class 0 OID 0)
-- Dependencies: 1999
-- Name: FUNCTION sha1(bytea); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.sha1(bytea) TO ipt_viewer;


--
-- TOC entry 8402 (class 0 OID 0)
-- Dependencies: 2000
-- Name: FUNCTION specimens_log_id(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.specimens_log_id() TO ipt_viewer;


--
-- TOC entry 8404 (class 0 OID 0)
-- Dependencies: 2005
-- Name: FUNCTION stats_collections_encoding(integer, text, text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_collections_encoding(integer, text, text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding(integer, text, text) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding(integer, text, text) TO ipt_viewer;


--
-- TOC entry 8406 (class 0 OID 0)
-- Dependencies: 837
-- Name: FUNCTION stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding(integer, timestamp without time zone, timestamp without time zone) TO ipt_viewer;


--
-- TOC entry 8408 (class 0 OID 0)
-- Dependencies: 2004
-- Name: FUNCTION stats_collections_encoding_optimistics(integer, text, text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, text, text) TO ipt_viewer;


--
-- TOC entry 8410 (class 0 OID 0)
-- Dependencies: 838
-- Name: FUNCTION stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_collections_encoding_optimistics(integer, timestamp without time zone, timestamp without time zone) TO ipt_viewer;


--
-- TOC entry 8412 (class 0 OID 0)
-- Dependencies: 2008
-- Name: FUNCTION stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date text, to_date text) TO ipt_viewer;


--
-- TOC entry 8414 (class 0 OID 0)
-- Dependencies: 839
-- Name: FUNCTION stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO ipt_viewer;


--
-- TOC entry 8416 (class 0 OID 0)
-- Dependencies: 2009
-- Name: FUNCTION stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date text, to_date text) TO ipt_viewer;


--
-- TOC entry 8418 (class 0 OID 0)
-- Dependencies: 840
-- Name: FUNCTION stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO darwin2;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO d2viewer;
GRANT ALL ON FUNCTION darwin2.stats_encoders_encoding_optimistics(top_collection integer, users_array text, from_date timestamp without time zone, to_date timestamp without time zone) TO ipt_viewer;


--
-- TOC entry 8419 (class 0 OID 0)
-- Dependencies: 2006
-- Name: FUNCTION taxo_collections_count(integer); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.taxo_collections_count(integer) TO ipt_viewer;


--
-- TOC entry 8420 (class 0 OID 0)
-- Dependencies: 2007
-- Name: FUNCTION touniquestr(to_indexed character varying); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.touniquestr(to_indexed character varying) TO ipt_viewer;


--
-- TOC entry 8421 (class 0 OID 0)
-- Dependencies: 841
-- Name: FUNCTION trg_del_dict(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.trg_del_dict() TO ipt_viewer;


--
-- TOC entry 8422 (class 0 OID 0)
-- Dependencies: 2010
-- Name: FUNCTION trg_ins_update_dict(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.trg_ins_update_dict() TO ipt_viewer;


--
-- TOC entry 8423 (class 0 OID 0)
-- Dependencies: 2011
-- Name: FUNCTION trg_rmca_create_uuid(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.trg_rmca_create_uuid() TO ipt_viewer;


--
-- TOC entry 8424 (class 0 OID 0)
-- Dependencies: 2014
-- Name: FUNCTION trg_rmca_del_import_related(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.trg_rmca_del_import_related() TO ipt_viewer;


--
-- TOC entry 8425 (class 0 OID 0)
-- Dependencies: 2012
-- Name: FUNCTION trg_rmca_import_taxonomy_history(); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.trg_rmca_import_taxonomy_history() TO ipt_viewer;


--
-- TOC entry 8426 (class 0 OID 0)
-- Dependencies: 2013
-- Name: FUNCTION update_collections_code_last_val(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.update_collections_code_last_val() TO darwin2;
GRANT ALL ON FUNCTION darwin2.update_collections_code_last_val() TO ipt_viewer;


--
-- TOC entry 8427 (class 0 OID 0)
-- Dependencies: 842
-- Name: FUNCTION update_collections_code_last_val_after_spec_del(); Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON FUNCTION darwin2.update_collections_code_last_val_after_spec_del() TO darwin2;
GRANT ALL ON FUNCTION darwin2.update_collections_code_last_val_after_spec_del() TO ipt_viewer;


--
-- TOC entry 8428 (class 0 OID 0)
-- Dependencies: 2016
-- Name: FUNCTION upsert(tablename character varying, keyvalues public.hstore); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.upsert(tablename character varying, keyvalues public.hstore) TO ipt_viewer;


--
-- TOC entry 8429 (class 0 OID 0)
-- Dependencies: 2017
-- Name: FUNCTION urlencode(in_str text, OUT _result text); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.urlencode(in_str text, OUT _result text) TO ipt_viewer;


--
-- TOC entry 8430 (class 0 OID 0)
-- Dependencies: 2020
-- Name: FUNCTION call_nominatim_service(name character varying, iso_code character varying, p_osm_class character varying, p_osm_types text[], url text, url_osm text); Type: ACL; Schema: georeferencing; Owner: postgres
--

GRANT ALL ON FUNCTION georeferencing.call_nominatim_service(name character varying, iso_code character varying, p_osm_class character varying, p_osm_types text[], url text, url_osm text) TO darwin2;


--
-- TOC entry 8431 (class 0 OID 0)
-- Dependencies: 843
-- Name: FUNCTION fct_bedic_adjust_distinct_tags(); Type: ACL; Schema: ipt; Owner: darwin2
--

GRANT ALL ON FUNCTION ipt.fct_bedic_adjust_distinct_tags() TO tvandenberghe;
GRANT ALL ON FUNCTION ipt.fct_bedic_adjust_distinct_tags() TO ipt_viewer;


--
-- TOC entry 8432 (class 0 OID 0)
-- Dependencies: 2028
-- Name: FUNCTION fct_bedic_refresh_materialized_views(); Type: ACL; Schema: ipt; Owner: postgres
--

GRANT ALL ON FUNCTION ipt.fct_bedic_refresh_materialized_views() TO darwin2;
GRANT ALL ON FUNCTION ipt.fct_bedic_refresh_materialized_views() TO tvandenberghe;
GRANT ALL ON FUNCTION ipt.fct_bedic_refresh_materialized_views() TO ipt_viewer;


--
-- TOC entry 8433 (class 0 OID 0)
-- Dependencies: 2022
-- Name: FUNCTION fct_cetaf_rdf(integer); Type: ACL; Schema: naturalheritage; Owner: postgres
--

GRANT ALL ON FUNCTION naturalheritage.fct_cetaf_rdf(integer) TO cetaf_viewer;


--
-- TOC entry 8434 (class 0 OID 0)
-- Dependencies: 4152
-- Name: FUNCTION array_accum(anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.array_accum(anyarray) TO ipt_viewer;


--
-- TOC entry 8435 (class 0 OID 0)
-- Dependencies: 4151
-- Name: FUNCTION array_cat_agg(anyarray); Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT ALL ON FUNCTION darwin2.array_cat_agg(anyarray) TO ipt_viewer;


--
-- TOC entry 8436 (class 0 OID 0)
-- Dependencies: 5385
-- Name: FOREIGN SERVER darwin2_server; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON FOREIGN SERVER darwin2_server TO darwin2;


--
-- TOC entry 8445 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE authority_domain; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.authority_domain TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.authority_domain TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.authority_domain TO postgres;


--
-- TOC entry 8447 (class 0 OID 0)
-- Dependencies: 243
-- Name: SEQUENCE authority_domain_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.authority_domain_id_seq TO ipt_viewer;


--
-- TOC entry 8455 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE bibliography; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.bibliography TO d2viewer;
GRANT SELECT ON TABLE darwin2.bibliography TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.bibliography TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.bibliography TO postgres;


--
-- TOC entry 8457 (class 0 OID 0)
-- Dependencies: 245
-- Name: SEQUENCE bibliography_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.bibliography_id_seq TO ipt_viewer;


--
-- TOC entry 8461 (class 0 OID 0)
-- Dependencies: 246
-- Name: TABLE template_table_record_ref; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.template_table_record_ref TO d2viewer;
GRANT SELECT ON TABLE darwin2.template_table_record_ref TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.template_table_record_ref TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.template_table_record_ref TO postgres;


--
-- TOC entry 8467 (class 0 OID 0)
-- Dependencies: 247
-- Name: TABLE catalogue_bibliography; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.catalogue_bibliography TO d2viewer;
GRANT SELECT ON TABLE darwin2.catalogue_bibliography TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_bibliography TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_bibliography TO postgres;


--
-- TOC entry 8469 (class 0 OID 0)
-- Dependencies: 248
-- Name: SEQUENCE catalogue_bibliography_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.catalogue_bibliography_id_seq TO ipt_viewer;


--
-- TOC entry 8470 (class 0 OID 0)
-- Dependencies: 249
-- Name: SEQUENCE catalogue_levels_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.catalogue_levels_id_seq TO ipt_viewer;


--
-- TOC entry 8477 (class 0 OID 0)
-- Dependencies: 250
-- Name: TABLE catalogue_levels; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.catalogue_levels TO d2viewer;
GRANT SELECT ON TABLE darwin2.catalogue_levels TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_levels TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_levels TO postgres;


--
-- TOC entry 8478 (class 0 OID 0)
-- Dependencies: 251
-- Name: SEQUENCE catalogue_people_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.catalogue_people_id_seq TO ipt_viewer;


--
-- TOC entry 8487 (class 0 OID 0)
-- Dependencies: 252
-- Name: TABLE catalogue_people; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.catalogue_people TO d2viewer;
GRANT SELECT ON TABLE darwin2.catalogue_people TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_people TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_people TO postgres;


--
-- TOC entry 8488 (class 0 OID 0)
-- Dependencies: 253
-- Name: SEQUENCE catalogue_properties_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.catalogue_properties_id_seq TO ipt_viewer;


--
-- TOC entry 8489 (class 0 OID 0)
-- Dependencies: 254
-- Name: SEQUENCE catalogue_relationships_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.catalogue_relationships_id_seq TO ipt_viewer;


--
-- TOC entry 8495 (class 0 OID 0)
-- Dependencies: 255
-- Name: TABLE catalogue_relationships; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.catalogue_relationships TO d2viewer;
GRANT SELECT ON TABLE darwin2.catalogue_relationships TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_relationships TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.catalogue_relationships TO postgres;


--
-- TOC entry 8496 (class 0 OID 0)
-- Dependencies: 256
-- Name: SEQUENCE chronostratigraphy_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.chronostratigraphy_id_seq TO ipt_viewer;


--
-- TOC entry 8506 (class 0 OID 0)
-- Dependencies: 257
-- Name: TABLE template_classifications; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.template_classifications TO d2viewer;
GRANT SELECT ON TABLE darwin2.template_classifications TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.template_classifications TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.template_classifications TO postgres;


--
-- TOC entry 8517 (class 0 OID 0)
-- Dependencies: 258
-- Name: TABLE chronostratigraphy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.chronostratigraphy TO d2viewer;
GRANT SELECT ON TABLE darwin2.chronostratigraphy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.chronostratigraphy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.chronostratigraphy TO postgres;


--
-- TOC entry 8518 (class 0 OID 0)
-- Dependencies: 259
-- Name: SEQUENCE class_vernacular_names_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.class_vernacular_names_id_seq TO ipt_viewer;


--
-- TOC entry 8519 (class 0 OID 0)
-- Dependencies: 260
-- Name: SEQUENCE classification_keywords_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.classification_keywords_id_seq TO ipt_viewer;


--
-- TOC entry 8525 (class 0 OID 0)
-- Dependencies: 261
-- Name: TABLE classification_keywords; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.classification_keywords TO d2viewer;
GRANT SELECT ON TABLE darwin2.classification_keywords TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.classification_keywords TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.classification_keywords TO postgres;


--
-- TOC entry 8526 (class 0 OID 0)
-- Dependencies: 262
-- Name: SEQUENCE classification_synonymies_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.classification_synonymies_id_seq TO ipt_viewer;


--
-- TOC entry 8534 (class 0 OID 0)
-- Dependencies: 263
-- Name: TABLE classification_synonymies; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.classification_synonymies TO d2viewer;
GRANT SELECT ON TABLE darwin2.classification_synonymies TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.classification_synonymies TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.classification_synonymies TO postgres;


--
-- TOC entry 8535 (class 0 OID 0)
-- Dependencies: 264
-- Name: SEQUENCE classification_synonymies_group_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.classification_synonymies_group_id_seq TO ipt_viewer;


--
-- TOC entry 8536 (class 0 OID 0)
-- Dependencies: 265
-- Name: TABLE classification_synonymies_history; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.classification_synonymies_history TO postgres;
GRANT SELECT ON TABLE darwin2.classification_synonymies_history TO ipt_viewer;


--
-- TOC entry 8538 (class 0 OID 0)
-- Dependencies: 266
-- Name: SEQUENCE classification_synonymies_history_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.classification_synonymies_history_id_seq TO ipt_viewer;


--
-- TOC entry 8539 (class 0 OID 0)
-- Dependencies: 267
-- Name: SEQUENCE codes_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.codes_id_seq TO ipt_viewer;


--
-- TOC entry 8553 (class 0 OID 0)
-- Dependencies: 268
-- Name: TABLE codes; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.codes TO d2viewer;
GRANT SELECT ON TABLE darwin2.codes TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.codes TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.codes TO postgres;


--
-- TOC entry 8554 (class 0 OID 0)
-- Dependencies: 269
-- Name: SEQUENCE collecting_methods_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.collecting_methods_id_seq TO ipt_viewer;


--
-- TOC entry 8559 (class 0 OID 0)
-- Dependencies: 270
-- Name: TABLE collecting_methods; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.collecting_methods TO d2viewer;
GRANT SELECT ON TABLE darwin2.collecting_methods TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.collecting_methods TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.collecting_methods TO postgres;


--
-- TOC entry 8560 (class 0 OID 0)
-- Dependencies: 271
-- Name: SEQUENCE collecting_tools_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.collecting_tools_id_seq TO ipt_viewer;


--
-- TOC entry 8565 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE collecting_tools; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.collecting_tools TO d2viewer;
GRANT SELECT ON TABLE darwin2.collecting_tools TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.collecting_tools TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.collecting_tools TO postgres;


--
-- TOC entry 8566 (class 0 OID 0)
-- Dependencies: 273
-- Name: SEQUENCE collection_maintenance_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.collection_maintenance_id_seq TO ipt_viewer;


--
-- TOC entry 8577 (class 0 OID 0)
-- Dependencies: 274
-- Name: TABLE collection_maintenance; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.collection_maintenance TO d2viewer;
GRANT SELECT ON TABLE darwin2.collection_maintenance TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.collection_maintenance TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.collection_maintenance TO postgres;


--
-- TOC entry 8578 (class 0 OID 0)
-- Dependencies: 275
-- Name: SEQUENCE collections_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.collections_id_seq TO ipt_viewer;


--
-- TOC entry 8602 (class 0 OID 0)
-- Dependencies: 276
-- Name: TABLE collections; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.collections TO d2viewer;
GRANT SELECT ON TABLE darwin2.collections TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.collections TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.collections TO postgres;


--
-- TOC entry 8603 (class 0 OID 0)
-- Dependencies: 277
-- Name: SEQUENCE collections_rights_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.collections_rights_id_seq TO ipt_viewer;


--
-- TOC entry 8609 (class 0 OID 0)
-- Dependencies: 278
-- Name: TABLE collections_rights; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.collections_rights TO d2viewer;
GRANT SELECT ON TABLE darwin2.collections_rights TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.collections_rights TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.collections_rights TO postgres;


--
-- TOC entry 8610 (class 0 OID 0)
-- Dependencies: 279
-- Name: SEQUENCE comments_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.comments_id_seq TO ipt_viewer;


--
-- TOC entry 8618 (class 0 OID 0)
-- Dependencies: 280
-- Name: TABLE comments; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.comments TO d2viewer;
GRANT SELECT ON TABLE darwin2.comments TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.comments TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.comments TO postgres;


--
-- TOC entry 8619 (class 0 OID 0)
-- Dependencies: 281
-- Name: SEQUENCE darwin_flat_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.darwin_flat_id_seq TO ipt_viewer;


--
-- TOC entry 8621 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE db_version; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.db_version TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.db_version TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.db_version TO postgres;


--
-- TOC entry 8640 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE properties; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.properties TO d2viewer;
GRANT SELECT ON TABLE darwin2.properties TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.properties TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.properties TO postgres;


--
-- TOC entry 8641 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE doctrine_gtu_comments; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_gtu_comments TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_gtu_comments TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_gtu_comments TO postgres;


--
-- TOC entry 8642 (class 0 OID 0)
-- Dependencies: 285
-- Name: SEQUENCE identifications_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.identifications_id_seq TO ipt_viewer;


--
-- TOC entry 8654 (class 0 OID 0)
-- Dependencies: 286
-- Name: TABLE identifications; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.identifications TO d2viewer;
GRANT SELECT ON TABLE darwin2.identifications TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.identifications TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.identifications TO postgres;


--
-- TOC entry 8655 (class 0 OID 0)
-- Dependencies: 287
-- Name: TABLE doctrine_taxonomic_identifications; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_taxonomic_identifications TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_taxonomic_identifications TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_taxonomic_identifications TO postgres;


--
-- TOC entry 8656 (class 0 OID 0)
-- Dependencies: 288
-- Name: SEQUENCE gtu_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.gtu_id_seq TO ipt_viewer;


--
-- TOC entry 8670 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE gtu; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.gtu TO d2viewer;
GRANT SELECT ON TABLE darwin2.gtu TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.gtu TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.gtu TO postgres;


--
-- TOC entry 8675 (class 0 OID 0)
-- Dependencies: 290
-- Name: TABLE temporal_information; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.temporal_information TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.temporal_information TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.temporal_information TO postgres;


--
-- TOC entry 8676 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE doctrine_temporal_information_gtu_group; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group TO postgres;


--
-- TOC entry 8677 (class 0 OID 0)
-- Dependencies: 292
-- Name: TABLE doctrine_temporal_information_gtu_group_tags; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_tags TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_tags TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_tags TO postgres;


--
-- TOC entry 8678 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE doctrine_temporal_information_gtu_group_unnest; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest TO postgres;


--
-- TOC entry 8686 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE tags; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tags TO d2viewer;
GRANT SELECT ON TABLE darwin2.tags TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tags TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.tags TO postgres;


--
-- TOC entry 8687 (class 0 OID 0)
-- Dependencies: 295
-- Name: TABLE doctrine_temporal_information_gtu_group_unnest_tags; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest_tags TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest_tags TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.doctrine_temporal_information_gtu_group_unnest_tags TO postgres;


--
-- TOC entry 8688 (class 0 OID 0)
-- Dependencies: 296
-- Name: SEQUENCE expeditions_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.expeditions_id_seq TO ipt_viewer;


--
-- TOC entry 8697 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE expeditions; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.expeditions TO d2viewer;
GRANT SELECT ON TABLE darwin2.expeditions TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.expeditions TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.expeditions TO postgres;


--
-- TOC entry 8698 (class 0 OID 0)
-- Dependencies: 298
-- Name: SEQUENCE ext_links_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.ext_links_id_seq TO ipt_viewer;


--
-- TOC entry 8707 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE ext_links; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.ext_links TO d2viewer;
GRANT SELECT ON TABLE darwin2.ext_links TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.ext_links TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.ext_links TO postgres;


--
-- TOC entry 8708 (class 0 OID 0)
-- Dependencies: 300
-- Name: SEQUENCE flat_dict_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.flat_dict_id_seq TO ipt_viewer;


--
-- TOC entry 8713 (class 0 OID 0)
-- Dependencies: 301
-- Name: TABLE flat_dict; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.flat_dict TO d2viewer;
GRANT SELECT ON TABLE darwin2.flat_dict TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.flat_dict TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.flat_dict TO postgres;


--
-- TOC entry 8714 (class 0 OID 0)
-- Dependencies: 302
-- Name: TABLE identifiers; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.identifiers TO postgres;
GRANT SELECT ON TABLE darwin2.identifiers TO ipt_viewer;


--
-- TOC entry 8716 (class 0 OID 0)
-- Dependencies: 303
-- Name: SEQUENCE identifiers_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.identifiers_id_seq TO ipt_viewer;


--
-- TOC entry 8717 (class 0 OID 0)
-- Dependencies: 304
-- Name: SEQUENCE igs_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.igs_id_seq TO ipt_viewer;


--
-- TOC entry 8723 (class 0 OID 0)
-- Dependencies: 305
-- Name: TABLE igs; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.igs TO d2viewer;
GRANT SELECT ON TABLE darwin2.igs TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.igs TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.igs TO postgres;


--
-- TOC entry 8724 (class 0 OID 0)
-- Dependencies: 306
-- Name: SEQUENCE imports_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.imports_id_seq TO ipt_viewer;


--
-- TOC entry 8736 (class 0 OID 0)
-- Dependencies: 307
-- Name: TABLE imports; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.imports TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.imports TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.imports TO postgres;


--
-- TOC entry 8737 (class 0 OID 0)
-- Dependencies: 308
-- Name: SEQUENCE informative_workflow_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,USAGE ON SEQUENCE darwin2.informative_workflow_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.informative_workflow_id_seq TO ipt_viewer;


--
-- TOC entry 8747 (class 0 OID 0)
-- Dependencies: 309
-- Name: TABLE informative_workflow; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT,UPDATE ON TABLE darwin2.informative_workflow TO d2viewer;
GRANT SELECT ON TABLE darwin2.informative_workflow TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.informative_workflow TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.informative_workflow TO postgres;


--
-- TOC entry 8748 (class 0 OID 0)
-- Dependencies: 310
-- Name: SEQUENCE insurances_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.insurances_id_seq TO ipt_viewer;


--
-- TOC entry 8755 (class 0 OID 0)
-- Dependencies: 311
-- Name: TABLE insurances; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.insurances TO d2viewer;
GRANT SELECT ON TABLE darwin2.insurances TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.insurances TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.insurances TO postgres;


--
-- TOC entry 8756 (class 0 OID 0)
-- Dependencies: 312
-- Name: SEQUENCE lithology_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.lithology_id_seq TO ipt_viewer;


--
-- TOC entry 8765 (class 0 OID 0)
-- Dependencies: 313
-- Name: TABLE lithology; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.lithology TO d2viewer;
GRANT SELECT ON TABLE darwin2.lithology TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.lithology TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.lithology TO postgres;


--
-- TOC entry 8766 (class 0 OID 0)
-- Dependencies: 314
-- Name: SEQUENCE lithostratigraphy_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.lithostratigraphy_id_seq TO ipt_viewer;


--
-- TOC entry 8775 (class 0 OID 0)
-- Dependencies: 315
-- Name: TABLE lithostratigraphy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.lithostratigraphy TO d2viewer;
GRANT SELECT ON TABLE darwin2.lithostratigraphy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.lithostratigraphy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.lithostratigraphy TO postgres;


--
-- TOC entry 8781 (class 0 OID 0)
-- Dependencies: 316
-- Name: TABLE loan_history; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.loan_history TO d2viewer;
GRANT SELECT ON TABLE darwin2.loan_history TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.loan_history TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.loan_history TO postgres;


--
-- TOC entry 8783 (class 0 OID 0)
-- Dependencies: 317
-- Name: SEQUENCE loan_history_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.loan_history_id_seq TO ipt_viewer;


--
-- TOC entry 8784 (class 0 OID 0)
-- Dependencies: 318
-- Name: SEQUENCE loan_items_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.loan_items_id_seq TO ipt_viewer;


--
-- TOC entry 8793 (class 0 OID 0)
-- Dependencies: 319
-- Name: TABLE loan_items; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.loan_items TO d2viewer;
GRANT SELECT ON TABLE darwin2.loan_items TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.loan_items TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.loan_items TO postgres;


--
-- TOC entry 8794 (class 0 OID 0)
-- Dependencies: 320
-- Name: SEQUENCE loan_rights_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.loan_rights_id_seq TO ipt_viewer;


--
-- TOC entry 8800 (class 0 OID 0)
-- Dependencies: 321
-- Name: TABLE loan_rights; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.loan_rights TO d2viewer;
GRANT SELECT ON TABLE darwin2.loan_rights TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.loan_rights TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.loan_rights TO postgres;


--
-- TOC entry 8801 (class 0 OID 0)
-- Dependencies: 322
-- Name: SEQUENCE loan_status_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.loan_status_id_seq TO ipt_viewer;


--
-- TOC entry 8810 (class 0 OID 0)
-- Dependencies: 323
-- Name: TABLE loan_status; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.loan_status TO d2viewer;
GRANT SELECT ON TABLE darwin2.loan_status TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.loan_status TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.loan_status TO postgres;


--
-- TOC entry 8811 (class 0 OID 0)
-- Dependencies: 324
-- Name: SEQUENCE loans_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.loans_id_seq TO ipt_viewer;


--
-- TOC entry 8819 (class 0 OID 0)
-- Dependencies: 325
-- Name: TABLE loans; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.loans TO d2viewer;
GRANT SELECT ON TABLE darwin2.loans TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.loans TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.loans TO postgres;


--
-- TOC entry 8820 (class 0 OID 0)
-- Dependencies: 326
-- Name: SEQUENCE mineralogy_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.mineralogy_id_seq TO ipt_viewer;


--
-- TOC entry 8834 (class 0 OID 0)
-- Dependencies: 327
-- Name: TABLE mineralogy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.mineralogy TO d2viewer;
GRANT SELECT ON TABLE darwin2.mineralogy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.mineralogy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.mineralogy TO postgres;


--
-- TOC entry 8835 (class 0 OID 0)
-- Dependencies: 328
-- Name: SEQUENCE multimedia_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.multimedia_id_seq TO ipt_viewer;


--
-- TOC entry 8856 (class 0 OID 0)
-- Dependencies: 329
-- Name: TABLE multimedia; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.multimedia TO d2viewer;
GRANT SELECT ON TABLE darwin2.multimedia TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.multimedia TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.multimedia TO postgres;


--
-- TOC entry 8859 (class 0 OID 0)
-- Dependencies: 330
-- Name: TABLE multimedia_todelete; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.multimedia_todelete TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.multimedia_todelete TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.multimedia_todelete TO postgres;


--
-- TOC entry 8861 (class 0 OID 0)
-- Dependencies: 331
-- Name: SEQUENCE multimedia_todelete_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.multimedia_todelete_id_seq TO ipt_viewer;


--
-- TOC entry 8862 (class 0 OID 0)
-- Dependencies: 332
-- Name: TABLE mv_spatial; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.mv_spatial TO postgres;
GRANT SELECT ON TABLE darwin2.mv_spatial TO ipt_viewer;


--
-- TOC entry 8876 (class 0 OID 0)
-- Dependencies: 333
-- Name: TABLE tag_authority; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tag_authority TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.tag_authority TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tag_authority TO postgres;


--
-- TOC entry 8877 (class 0 OID 0)
-- Dependencies: 334
-- Name: SEQUENCE tag_groups_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.tag_groups_id_seq TO ipt_viewer;


--
-- TOC entry 8888 (class 0 OID 0)
-- Dependencies: 335
-- Name: TABLE tag_groups; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tag_groups TO d2viewer;
GRANT SELECT ON TABLE darwin2.tag_groups TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tag_groups TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.tag_groups TO postgres;


--
-- TOC entry 8893 (class 0 OID 0)
-- Dependencies: 336
-- Name: TABLE tag_tag_authority; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tag_tag_authority TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.tag_tag_authority TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tag_tag_authority TO postgres;


--
-- TOC entry 8894 (class 0 OID 0)
-- Dependencies: 337
-- Name: TABLE mv_tag_to_country; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.mv_tag_to_country TO postgres;
GRANT SELECT ON TABLE darwin2.mv_tag_to_country TO ipt_viewer;


--
-- TOC entry 8895 (class 0 OID 0)
-- Dependencies: 338
-- Name: TABLE tag_groups_authority_categories; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON TABLE darwin2.tag_groups_authority_categories TO darwin2;
GRANT SELECT ON TABLE darwin2.tag_groups_authority_categories TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.tag_groups_authority_categories TO ipt_viewer;


--
-- TOC entry 8896 (class 0 OID 0)
-- Dependencies: 339
-- Name: TABLE mv_tag_to_country; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_tag_to_country TO postgres;
GRANT ALL ON TABLE ipt.mv_tag_to_country TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_tag_to_country TO darwin2;


--
-- TOC entry 8897 (class 0 OID 0)
-- Dependencies: 340
-- Name: TABLE mv_tag_to_locations; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.mv_tag_to_locations TO postgres;
GRANT SELECT ON TABLE darwin2.mv_tag_to_locations TO ipt_viewer;


--
-- TOC entry 8943 (class 0 OID 0)
-- Dependencies: 341
-- Name: TABLE specimens; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimens TO d2viewer;
GRANT SELECT ON TABLE darwin2.specimens TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.specimens TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.specimens TO postgres;


--
-- TOC entry 8944 (class 0 OID 0)
-- Dependencies: 342
-- Name: SEQUENCE taxonomy_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.taxonomy_id_seq TO ipt_viewer;


--
-- TOC entry 8954 (class 0 OID 0)
-- Dependencies: 343
-- Name: TABLE taxonomy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.taxonomy TO d2viewer;
GRANT SELECT ON TABLE darwin2.taxonomy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.taxonomy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.taxonomy TO postgres;


--
-- TOC entry 8955 (class 0 OID 0)
-- Dependencies: 344
-- Name: TABLE mv_taxo_ranks_counter; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.mv_taxo_ranks_counter TO postgres;
GRANT SELECT ON TABLE darwin2.mv_taxo_ranks_counter TO ipt_viewer;


--
-- TOC entry 8956 (class 0 OID 0)
-- Dependencies: 345
-- Name: SEQUENCE my_saved_searches_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.my_saved_searches_id_seq TO ipt_viewer;


--
-- TOC entry 8965 (class 0 OID 0)
-- Dependencies: 346
-- Name: TABLE my_saved_searches; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.my_saved_searches TO d2viewer;
GRANT SELECT ON TABLE darwin2.my_saved_searches TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.my_saved_searches TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.my_saved_searches TO postgres;


--
-- TOC entry 8966 (class 0 OID 0)
-- Dependencies: 347
-- Name: SEQUENCE my_widgets_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.my_widgets_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.my_widgets_id_seq TO ipt_viewer;


--
-- TOC entry 8982 (class 0 OID 0)
-- Dependencies: 348
-- Name: TABLE my_widgets; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.my_widgets TO d2viewer;
GRANT SELECT ON TABLE darwin2.my_widgets TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.my_widgets TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.my_widgets TO postgres;


--
-- TOC entry 8983 (class 0 OID 0)
-- Dependencies: 349
-- Name: SEQUENCE people_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_id_seq TO ipt_viewer;


--
-- TOC entry 8997 (class 0 OID 0)
-- Dependencies: 350
-- Name: TABLE template_people; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.template_people TO d2viewer;
GRANT SELECT ON TABLE darwin2.template_people TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.template_people TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.template_people TO postgres;


--
-- TOC entry 9018 (class 0 OID 0)
-- Dependencies: 351
-- Name: TABLE people; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people TO d2viewer;
GRANT SELECT ON TABLE darwin2.people TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.people TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.people TO postgres;


--
-- TOC entry 9019 (class 0 OID 0)
-- Dependencies: 352
-- Name: SEQUENCE people_addresses_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_addresses_id_seq TO ipt_viewer;


--
-- TOC entry 9027 (class 0 OID 0)
-- Dependencies: 353
-- Name: TABLE template_people_users_addr_common; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.template_people_users_addr_common TO d2viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_addr_common TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_addr_common TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_addr_common TO postgres;


--
-- TOC entry 9031 (class 0 OID 0)
-- Dependencies: 354
-- Name: TABLE template_people_users_comm_common; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.template_people_users_comm_common TO d2viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_comm_common TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_comm_common TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.template_people_users_comm_common TO postgres;


--
-- TOC entry 9043 (class 0 OID 0)
-- Dependencies: 355
-- Name: TABLE people_addresses; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people_addresses TO d2viewer;
GRANT SELECT ON TABLE darwin2.people_addresses TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.people_addresses TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.people_addresses TO postgres;


--
-- TOC entry 9044 (class 0 OID 0)
-- Dependencies: 356
-- Name: SEQUENCE people_comm_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_comm_id_seq TO ipt_viewer;


--
-- TOC entry 9051 (class 0 OID 0)
-- Dependencies: 357
-- Name: TABLE people_comm; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people_comm TO d2viewer;
GRANT SELECT ON TABLE darwin2.people_comm TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.people_comm TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.people_comm TO postgres;


--
-- TOC entry 9052 (class 0 OID 0)
-- Dependencies: 358
-- Name: SEQUENCE people_languages_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_languages_id_seq TO ipt_viewer;


--
-- TOC entry 9058 (class 0 OID 0)
-- Dependencies: 359
-- Name: TABLE people_languages; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people_languages TO d2viewer;
GRANT SELECT ON TABLE darwin2.people_languages TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.people_languages TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.people_languages TO postgres;


--
-- TOC entry 9059 (class 0 OID 0)
-- Dependencies: 360
-- Name: SEQUENCE people_relationships_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_relationships_id_seq TO ipt_viewer;


--
-- TOC entry 9070 (class 0 OID 0)
-- Dependencies: 361
-- Name: TABLE people_relationships; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people_relationships TO d2viewer;
GRANT SELECT ON TABLE darwin2.people_relationships TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.people_relationships TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.people_relationships TO postgres;


--
-- TOC entry 9072 (class 0 OID 0)
-- Dependencies: 362
-- Name: TABLE people_sub_types; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.people_sub_types TO postgres;
GRANT SELECT ON TABLE darwin2.people_sub_types TO ipt_viewer;


--
-- TOC entry 9074 (class 0 OID 0)
-- Dependencies: 363
-- Name: SEQUENCE people_sub_types_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.people_sub_types_id_seq TO ipt_viewer;


--
-- TOC entry 9078 (class 0 OID 0)
-- Dependencies: 364
-- Name: TABLE possible_upper_levels; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.possible_upper_levels TO d2viewer;
GRANT SELECT ON TABLE darwin2.possible_upper_levels TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.possible_upper_levels TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.possible_upper_levels TO postgres;


--
-- TOC entry 9079 (class 0 OID 0)
-- Dependencies: 365
-- Name: SEQUENCE preferences_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.preferences_id_seq TO ipt_viewer;


--
-- TOC entry 9084 (class 0 OID 0)
-- Dependencies: 366
-- Name: TABLE preferences; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.preferences TO d2viewer;
GRANT SELECT ON TABLE darwin2.preferences TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.preferences TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.preferences TO postgres;


--
-- TOC entry 9086 (class 0 OID 0)
-- Dependencies: 367
-- Name: SEQUENCE properties_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.properties_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.properties_id_seq TO ipt_viewer;


--
-- TOC entry 9087 (class 0 OID 0)
-- Dependencies: 368
-- Name: SEQUENCE properties_values_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.properties_values_id_seq TO ipt_viewer;


--
-- TOC entry 9088 (class 0 OID 0)
-- Dependencies: 369
-- Name: TABLE property_tag_authority; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.property_tag_authority TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.property_tag_authority TO postgres;
GRANT SELECT ON TABLE darwin2.property_tag_authority TO ipt_viewer;


--
-- TOC entry 9089 (class 0 OID 0)
-- Dependencies: 370
-- Name: TABLE property_type; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON TABLE darwin2.property_type TO darwin2;
GRANT SELECT ON TABLE darwin2.property_type TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.property_type TO ipt_viewer;


--
-- TOC entry 9091 (class 0 OID 0)
-- Dependencies: 371
-- Name: SEQUENCE property_type_id_seq; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON SEQUENCE darwin2.property_type_id_seq TO darwin2;
GRANT USAGE ON SEQUENCE darwin2.property_type_id_seq TO ipt_viewer;


--
-- TOC entry 9092 (class 0 OID 0)
-- Dependencies: 372
-- Name: TABLE ref_rec; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.ref_rec TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.ref_rec TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.ref_rec TO postgres;


--
-- TOC entry 9101 (class 0 OID 0)
-- Dependencies: 373
-- Name: TABLE reports; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON TABLE darwin2.reports TO darwin2;
GRANT SELECT ON TABLE darwin2.reports TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.reports TO ipt_viewer;


--
-- TOC entry 9103 (class 0 OID 0)
-- Dependencies: 374
-- Name: SEQUENCE reports_id_seq; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON SEQUENCE darwin2.reports_id_seq TO darwin2;
GRANT USAGE ON SEQUENCE darwin2.reports_id_seq TO ipt_viewer;


--
-- TOC entry 9104 (class 0 OID 0)
-- Dependencies: 375
-- Name: TABLE returned; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.returned TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.returned TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.returned TO postgres;


--
-- TOC entry 9105 (class 0 OID 0)
-- Dependencies: 376
-- Name: SEQUENCE specimen_collecting_methods_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimen_collecting_methods_id_seq TO ipt_viewer;


--
-- TOC entry 9110 (class 0 OID 0)
-- Dependencies: 377
-- Name: TABLE specimen_collecting_methods; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimen_collecting_methods TO d2viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_methods TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_methods TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_methods TO postgres;


--
-- TOC entry 9111 (class 0 OID 0)
-- Dependencies: 378
-- Name: SEQUENCE specimen_collecting_tools_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimen_collecting_tools_id_seq TO ipt_viewer;


--
-- TOC entry 9116 (class 0 OID 0)
-- Dependencies: 379
-- Name: TABLE specimen_collecting_tools; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimen_collecting_tools TO d2viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_tools TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_tools TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.specimen_collecting_tools TO postgres;


--
-- TOC entry 9117 (class 0 OID 0)
-- Dependencies: 380
-- Name: SEQUENCE specimens_accompanying_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimens_accompanying_id_seq TO ipt_viewer;


--
-- TOC entry 9119 (class 0 OID 0)
-- Dependencies: 381
-- Name: SEQUENCE specimens_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimens_id_seq TO ipt_viewer;


--
-- TOC entry 9120 (class 0 OID 0)
-- Dependencies: 382
-- Name: TABLE specimens_maincodes; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimens_maincodes TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.specimens_maincodes TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.specimens_maincodes TO postgres;


--
-- TOC entry 9131 (class 0 OID 0)
-- Dependencies: 383
-- Name: TABLE specimens_relationships; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimens_relationships TO d2viewer;
GRANT SELECT ON TABLE darwin2.specimens_relationships TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.specimens_relationships TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.specimens_relationships TO postgres;


--
-- TOC entry 9133 (class 0 OID 0)
-- Dependencies: 384
-- Name: SEQUENCE specimens_relationships_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimens_relationships_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.specimens_relationships_id_seq TO ipt_viewer;


--
-- TOC entry 9135 (class 0 OID 0)
-- Dependencies: 385
-- Name: TABLE specimens_stable_ids; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.specimens_stable_ids TO postgres;
GRANT SELECT ON TABLE darwin2.specimens_stable_ids TO ipt_viewer;


--
-- TOC entry 9137 (class 0 OID 0)
-- Dependencies: 386
-- Name: SEQUENCE specimens_stable_ids_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.specimens_stable_ids_id_seq TO ipt_viewer;


--
-- TOC entry 9138 (class 0 OID 0)
-- Dependencies: 387
-- Name: TABLE specimens_test_geom; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON TABLE darwin2.specimens_test_geom TO darwin2;


--
-- TOC entry 9147 (class 0 OID 0)
-- Dependencies: 388
-- Name: TABLE staging_catalogue; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_catalogue TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_catalogue TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_catalogue TO postgres;


--
-- TOC entry 9149 (class 0 OID 0)
-- Dependencies: 389
-- Name: SEQUENCE staging_catalogue_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_catalogue_id_seq TO ipt_viewer;


--
-- TOC entry 9154 (class 0 OID 0)
-- Dependencies: 390
-- Name: TABLE staging_collecting_methods; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_collecting_methods TO d2viewer;
GRANT SELECT ON TABLE darwin2.staging_collecting_methods TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_collecting_methods TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_collecting_methods TO postgres;


--
-- TOC entry 9156 (class 0 OID 0)
-- Dependencies: 391
-- Name: SEQUENCE staging_collecting_methods_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_collecting_methods_id_seq TO ipt_viewer;


--
-- TOC entry 9157 (class 0 OID 0)
-- Dependencies: 392
-- Name: SEQUENCE staging_gtu_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_gtu_id_seq TO ipt_viewer;


--
-- TOC entry 9159 (class 0 OID 0)
-- Dependencies: 393
-- Name: TABLE staging_gtu; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_gtu TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_gtu TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_gtu TO postgres;


--
-- TOC entry 9161 (class 0 OID 0)
-- Dependencies: 394
-- Name: SEQUENCE staging_gtu_id_seq1; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_gtu_id_seq1 TO ipt_viewer;


--
-- TOC entry 9168 (class 0 OID 0)
-- Dependencies: 395
-- Name: TABLE staging_gtu_tag_groups; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_gtu_tag_groups TO d2viewer;
GRANT SELECT ON TABLE darwin2.staging_gtu_tag_groups TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_gtu_tag_groups TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_gtu_tag_groups TO postgres;


--
-- TOC entry 9170 (class 0 OID 0)
-- Dependencies: 396
-- Name: SEQUENCE staging_gtu_tag_groups_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_gtu_tag_groups_id_seq TO ipt_viewer;


--
-- TOC entry 9171 (class 0 OID 0)
-- Dependencies: 397
-- Name: TABLE staging_info; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_info TO d2viewer;
GRANT SELECT ON TABLE darwin2.staging_info TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_info TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_info TO postgres;


--
-- TOC entry 9173 (class 0 OID 0)
-- Dependencies: 398
-- Name: SEQUENCE staging_info_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_info_id_seq TO ipt_viewer;


--
-- TOC entry 9177 (class 0 OID 0)
-- Dependencies: 399
-- Name: TABLE staging_multimedia; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_multimedia TO postgres;
GRANT SELECT ON TABLE darwin2.staging_multimedia TO ipt_viewer;


--
-- TOC entry 9179 (class 0 OID 0)
-- Dependencies: 400
-- Name: SEQUENCE staging_multimedia_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_multimedia_id_seq TO ipt_viewer;


--
-- TOC entry 9180 (class 0 OID 0)
-- Dependencies: 401
-- Name: SEQUENCE staging_people_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_people_id_seq TO ipt_viewer;


--
-- TOC entry 9190 (class 0 OID 0)
-- Dependencies: 402
-- Name: TABLE staging_people; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_people TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_people TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_people TO postgres;


--
-- TOC entry 9199 (class 0 OID 0)
-- Dependencies: 403
-- Name: TABLE staging_relationship; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_relationship TO d2viewer;
GRANT SELECT ON TABLE darwin2.staging_relationship TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_relationship TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_relationship TO postgres;


--
-- TOC entry 9201 (class 0 OID 0)
-- Dependencies: 404
-- Name: SEQUENCE staging_relationship_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_relationship_id_seq TO ipt_viewer;


--
-- TOC entry 9202 (class 0 OID 0)
-- Dependencies: 405
-- Name: SEQUENCE staging_tag_groups_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.staging_tag_groups_id_seq TO ipt_viewer;


--
-- TOC entry 9209 (class 0 OID 0)
-- Dependencies: 406
-- Name: TABLE staging_tag_groups; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.staging_tag_groups TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.staging_tag_groups TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.staging_tag_groups TO postgres;


--
-- TOC entry 9211 (class 0 OID 0)
-- Dependencies: 407
-- Name: SEQUENCE tag_authority_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.tag_authority_id_seq TO ipt_viewer;


--
-- TOC entry 9216 (class 0 OID 0)
-- Dependencies: 408
-- Name: TABLE tag_authority_tag_authority; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT ALL ON TABLE darwin2.tag_authority_tag_authority TO darwin2;
GRANT SELECT ON TABLE darwin2.tag_authority_tag_authority TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.tag_authority_tag_authority TO ipt_viewer;


--
-- TOC entry 9222 (class 0 OID 0)
-- Dependencies: 409
-- Name: TABLE tag_group_distinct; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tag_group_distinct TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.tag_group_distinct TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tag_group_distinct TO postgres;


--
-- TOC entry 9224 (class 0 OID 0)
-- Dependencies: 410
-- Name: SEQUENCE tag_group_distinct_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.tag_group_distinct_id_seq TO ipt_viewer;


--
-- TOC entry 9226 (class 0 OID 0)
-- Dependencies: 411
-- Name: SEQUENCE tags_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.tags_id_seq TO ipt_viewer;


--
-- TOC entry 9227 (class 0 OID 0)
-- Dependencies: 412
-- Name: TABLE taxonomy_authority; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.taxonomy_authority TO cetaf_viewer;
GRANT ALL ON TABLE darwin2.taxonomy_authority TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.taxonomy_authority TO postgres;


--
-- TOC entry 9229 (class 0 OID 0)
-- Dependencies: 413
-- Name: SEQUENCE taxonomy_authority_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.taxonomy_authority_id_seq TO ipt_viewer;


--
-- TOC entry 9230 (class 0 OID 0)
-- Dependencies: 414
-- Name: TABLE taxonomy_metadata; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.taxonomy_metadata TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.taxonomy_metadata TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.taxonomy_metadata TO postgres;


--
-- TOC entry 9232 (class 0 OID 0)
-- Dependencies: 415
-- Name: SEQUENCE taxonomy_metadata_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.taxonomy_metadata_id_seq TO ipt_viewer;


--
-- TOC entry 9233 (class 0 OID 0)
-- Dependencies: 416
-- Name: TABLE temp_mineralogy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.temp_mineralogy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.temp_mineralogy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.temp_mineralogy TO postgres;


--
-- TOC entry 9235 (class 0 OID 0)
-- Dependencies: 417
-- Name: SEQUENCE temporal_information_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.temporal_information_id_seq TO ipt_viewer;


--
-- TOC entry 9236 (class 0 OID 0)
-- Dependencies: 418
-- Name: TABLE tv_reporting_count_all_specimens_by_collection_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig TO d2viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_by_collection_year_ig TO postgres;


--
-- TOC entry 9237 (class 0 OID 0)
-- Dependencies: 419
-- Name: TABLE tv_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig TO d2viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_count_all_specimens_type_by_collection_ref_year_ig TO postgres;


--
-- TOC entry 9238 (class 0 OID 0)
-- Dependencies: 420
-- Name: TABLE tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO d2viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.tv_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO postgres;


--
-- TOC entry 9239 (class 0 OID 0)
-- Dependencies: 421
-- Name: SEQUENCE users_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.users_id_seq TO ipt_viewer;


--
-- TOC entry 9257 (class 0 OID 0)
-- Dependencies: 422
-- Name: TABLE users; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.users TO d2viewer;
GRANT SELECT ON TABLE darwin2.users TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.users TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.users TO postgres;


--
-- TOC entry 9258 (class 0 OID 0)
-- Dependencies: 423
-- Name: SEQUENCE users_addresses_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_addresses_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.users_addresses_id_seq TO ipt_viewer;


--
-- TOC entry 9272 (class 0 OID 0)
-- Dependencies: 424
-- Name: TABLE users_addresses; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.users_addresses TO d2viewer;
GRANT SELECT ON TABLE darwin2.users_addresses TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.users_addresses TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.users_addresses TO postgres;


--
-- TOC entry 9273 (class 0 OID 0)
-- Dependencies: 425
-- Name: SEQUENCE users_comm_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_comm_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.users_comm_id_seq TO ipt_viewer;


--
-- TOC entry 9280 (class 0 OID 0)
-- Dependencies: 426
-- Name: TABLE users_comm; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.users_comm TO d2viewer;
GRANT SELECT ON TABLE darwin2.users_comm TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.users_comm TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.users_comm TO postgres;


--
-- TOC entry 9281 (class 0 OID 0)
-- Dependencies: 427
-- Name: SEQUENCE users_languages_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_languages_id_seq TO ipt_viewer;


--
-- TOC entry 9282 (class 0 OID 0)
-- Dependencies: 428
-- Name: SEQUENCE users_login_info_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_login_info_id_seq TO d2viewer;
GRANT USAGE ON SEQUENCE darwin2.users_login_info_id_seq TO ipt_viewer;


--
-- TOC entry 9290 (class 0 OID 0)
-- Dependencies: 429
-- Name: TABLE users_login_infos; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT,INSERT ON TABLE darwin2.users_login_infos TO d2viewer;
GRANT SELECT ON TABLE darwin2.users_login_infos TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.users_login_infos TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.users_login_infos TO postgres;


--
-- TOC entry 9291 (class 0 OID 0)
-- Dependencies: 430
-- Name: SEQUENCE users_tracking_id_seq; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT USAGE ON SEQUENCE darwin2.users_tracking_id_seq TO ipt_viewer;


--
-- TOC entry 9299 (class 0 OID 0)
-- Dependencies: 431
-- Name: TABLE users_tracking; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.users_tracking TO d2viewer;
GRANT SELECT ON TABLE darwin2.users_tracking TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.users_tracking TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.users_tracking TO postgres;


--
-- TOC entry 9300 (class 0 OID 0)
-- Dependencies: 432
-- Name: TABLE v_darwin_ipt_taxonomy; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy TO postgres;


--
-- TOC entry 9308 (class 0 OID 0)
-- Dependencies: 433
-- Name: TABLE vernacular_names; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT SELECT ON TABLE darwin2.vernacular_names TO d2viewer;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE darwin2.vernacular_names TO darwin2;
GRANT SELECT ON TABLE darwin2.vernacular_names TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.vernacular_names TO ipt_viewer;


--
-- TOC entry 9309 (class 0 OID 0)
-- Dependencies: 434
-- Name: TABLE v_darwin_ipt_taxonomy_vernacular; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy_vernacular TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy_vernacular TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_darwin_ipt_taxonomy_vernacular TO postgres;


--
-- TOC entry 9310 (class 0 OID 0)
-- Dependencies: 435
-- Name: TABLE v_diagnose_several_main_in_vertebrates_201909; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_diagnose_several_main_in_vertebrates_201909 TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_diagnose_several_main_in_vertebrates_201909 TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_diagnose_several_main_in_vertebrates_201909 TO postgres;


--
-- TOC entry 9311 (class 0 OID 0)
-- Dependencies: 436
-- Name: TABLE v_erik_verheyen_mammals_in_alcohol_2020; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020 TO postgres;
GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020 TO ipt_viewer;


--
-- TOC entry 9312 (class 0 OID 0)
-- Dependencies: 437
-- Name: TABLE v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro TO postgres;
GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_detail_rodent_chiro TO ipt_viewer;


--
-- TOC entry 9313 (class 0 OID 0)
-- Dependencies: 438
-- Name: TABLE v_erik_verheyen_mammals_in_alcohol_2020_generic; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_generic TO postgres;
GRANT SELECT ON TABLE darwin2.v_erik_verheyen_mammals_in_alcohol_2020_generic TO ipt_viewer;


--
-- TOC entry 9314 (class 0 OID 0)
-- Dependencies: 439
-- Name: TABLE v_gtu_countries_in_gtu; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_gtu_countries_in_gtu TO postgres;
GRANT SELECT ON TABLE darwin2.v_gtu_countries_in_gtu TO ipt_viewer;


--
-- TOC entry 9315 (class 0 OID 0)
-- Dependencies: 440
-- Name: TABLE v_gtu_tags_no_coords_and_country; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_gtu_tags_no_coords_and_country TO postgres;
GRANT SELECT ON TABLE darwin2.v_gtu_tags_no_coords_and_country TO ipt_viewer;


--
-- TOC entry 9316 (class 0 OID 0)
-- Dependencies: 441
-- Name: TABLE v_historic_synonymies; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_historic_synonymies TO postgres;
GRANT SELECT ON TABLE darwin2.v_historic_synonymies TO ipt_viewer;


--
-- TOC entry 9317 (class 0 OID 0)
-- Dependencies: 442
-- Name: TABLE v_imports_encoded_xml_name; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_imports_encoded_xml_name TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_imports_encoded_xml_name TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_imports_encoded_xml_name TO postgres;


--
-- TOC entry 9318 (class 0 OID 0)
-- Dependencies: 446
-- Name: TABLE v_migration_compare_gtu_with_tags; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_migration_compare_gtu_with_tags TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_migration_compare_gtu_with_tags TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_migration_compare_gtu_with_tags TO postgres;


--
-- TOC entry 9319 (class 0 OID 0)
-- Dependencies: 447
-- Name: TABLE v_migration_wrong_temporal_information_date; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_migration_wrong_temporal_information_date TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_migration_wrong_temporal_information_date TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_migration_wrong_temporal_information_date TO postgres;


--
-- TOC entry 9320 (class 0 OID 0)
-- Dependencies: 448
-- Name: TABLE v_normalize_gtu_without_date; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_normalize_gtu_without_date TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_normalize_gtu_without_date TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_normalize_gtu_without_date TO postgres;


--
-- TOC entry 9321 (class 0 OID 0)
-- Dependencies: 449
-- Name: TABLE v_normalize_gtu_without_date_no_code; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_normalize_gtu_without_date_no_code TO postgres;
GRANT SELECT ON TABLE darwin2.v_normalize_gtu_without_date_no_code TO ipt_viewer;


--
-- TOC entry 9322 (class 0 OID 0)
-- Dependencies: 450
-- Name: TABLE v_possible_duplicates; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_possible_duplicates TO postgres;
GRANT SELECT ON TABLE darwin2.v_possible_duplicates TO ipt_viewer;


--
-- TOC entry 9323 (class 0 OID 0)
-- Dependencies: 451
-- Name: TABLE v_reindex_tag_spaces; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reindex_tag_spaces TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reindex_tag_spaces TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reindex_tag_spaces TO postgres;


--
-- TOC entry 9324 (class 0 OID 0)
-- Dependencies: 452
-- Name: TABLE v_reporting_count_all_specimens; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens TO postgres;


--
-- TOC entry 9325 (class 0 OID 0)
-- Dependencies: 453
-- Name: TABLE v_reporting_count_all_specimens_by_collection_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_collection_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_collection_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_collection_year_ig TO postgres;


--
-- TOC entry 9326 (class 0 OID 0)
-- Dependencies: 454
-- Name: TABLE v_reporting_count_all_specimens_by_year; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_year TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_year TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_by_year TO postgres;


--
-- TOC entry 9327 (class 0 OID 0)
-- Dependencies: 455
-- Name: TABLE v_reporting_count_all_specimens_type; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type TO postgres;


--
-- TOC entry 9328 (class 0 OID 0)
-- Dependencies: 456
-- Name: TABLE v_reporting_count_all_specimens_type_by_collection_ref_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_collection_ref_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_collection_ref_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_collection_ref_year_ig TO postgres;


--
-- TOC entry 9329 (class 0 OID 0)
-- Dependencies: 457
-- Name: TABLE v_reporting_count_all_specimens_type_by_year; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_year TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_year TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_count_all_specimens_type_by_year TO postgres;


--
-- TOC entry 9330 (class 0 OID 0)
-- Dependencies: 458
-- Name: TABLE v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_rank_collection_ref_year_ig TO postgres;


--
-- TOC entry 9331 (class 0 OID 0)
-- Dependencies: 460
-- Name: TABLE v_reporting_taxa_in_specimen_per_year; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_year TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_year TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxa_in_specimen_per_year TO postgres;


--
-- TOC entry 9332 (class 0 OID 0)
-- Dependencies: 461
-- Name: TABLE v_reporting_taxonomy_general; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_general TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_general TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_general TO postgres;


--
-- TOC entry 9333 (class 0 OID 0)
-- Dependencies: 462
-- Name: TABLE v_reporting_taxonomy_in_specimen; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_in_specimen TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_in_specimen TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_reporting_taxonomy_in_specimen TO postgres;


--
-- TOC entry 9334 (class 0 OID 0)
-- Dependencies: 463
-- Name: TABLE v_rmca_collections_path_as_text; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_rmca_collections_path_as_text TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_rmca_collections_path_as_text TO postgres;
GRANT SELECT ON TABLE darwin2.v_rmca_collections_path_as_text TO ipt_viewer;


--
-- TOC entry 9335 (class 0 OID 0)
-- Dependencies: 464
-- Name: TABLE v_rmca_host_parasite_specimens_to_taxa; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_rmca_host_parasite_specimens_to_taxa TO postgres;
GRANT SELECT ON TABLE darwin2.v_rmca_host_parasite_specimens_to_taxa TO ipt_viewer;


--
-- TOC entry 9336 (class 0 OID 0)
-- Dependencies: 465
-- Name: TABLE v_rmca_taxo_detect_duplicate_hierarchies; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_rmca_taxo_detect_duplicate_hierarchies TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_rmca_taxo_detect_duplicate_hierarchies TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_rmca_taxo_detect_duplicate_hierarchies TO postgres;


--
-- TOC entry 9337 (class 0 OID 0)
-- Dependencies: 466
-- Name: TABLE v_rmca_taxonomy_synonyms_with_name_and_specs; Type: ACL; Schema: darwin2; Owner: darwin2
--

GRANT SELECT ON TABLE darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs TO ipt_viewer;
GRANT SELECT ON TABLE darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs TO cetaf_viewer;
GRANT SELECT ON TABLE darwin2.v_rmca_taxonomy_synonyms_with_name_and_specs TO postgres;


--
-- TOC entry 9339 (class 0 OID 0)
-- Dependencies: 468
-- Name: SEQUENCE vernacular_names_id_seq; Type: ACL; Schema: darwin2; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE darwin2.vernacular_names_id_seq TO darwin2;
GRANT USAGE ON SEQUENCE darwin2.vernacular_names_id_seq TO ipt_viewer;


--
-- TOC entry 9343 (class 0 OID 0)
-- Dependencies: 611
-- Name: TABLE tv_nominatim_georeference_rivers; Type: ACL; Schema: georeferencing; Owner: postgres
--

GRANT ALL ON TABLE georeferencing.tv_nominatim_georeference_rivers TO darwin2;


--
-- TOC entry 9345 (class 0 OID 0)
-- Dependencies: 615
-- Name: TABLE v_nominatim_osm_darwin_rivers; Type: ACL; Schema: georeferencing; Owner: postgres
--

GRANT ALL ON TABLE georeferencing.v_nominatim_osm_darwin_rivers TO darwin2;


--
-- TOC entry 9346 (class 0 OID 0)
-- Dependencies: 618
-- Name: TABLE v_darwin_ipt_rbins; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.v_darwin_ipt_rbins TO tvandenberghe;
GRANT ALL ON TABLE ipt.v_darwin_ipt_rbins TO darwin2;


--
-- TOC entry 9347 (class 0 OID 0)
-- Dependencies: 619
-- Name: TABLE mv_darwin_ipt_rbins; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_darwin_ipt_rbins TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_darwin_ipt_rbins TO darwin2;


--
-- TOC entry 9348 (class 0 OID 0)
-- Dependencies: 620
-- Name: TABLE be_rbins_darwin; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_darwin TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_darwin TO darwin2;


--
-- TOC entry 9349 (class 0 OID 0)
-- Dependencies: 621
-- Name: TABLE mv_properties; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_properties TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_properties TO darwin2;


--
-- TOC entry 9350 (class 0 OID 0)
-- Dependencies: 622
-- Name: TABLE v_darwin_ipt_rbins_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.v_darwin_ipt_rbins_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.v_darwin_ipt_rbins_mof TO darwin2;


--
-- TOC entry 9351 (class 0 OID 0)
-- Dependencies: 623
-- Name: TABLE mv_darwin_ipt_rbins_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_darwin_ipt_rbins_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_darwin_ipt_rbins_mof TO darwin2;


--
-- TOC entry 9352 (class 0 OID 0)
-- Dependencies: 624
-- Name: TABLE be_rbins_darwin_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_darwin_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_darwin_mof TO darwin2;


--
-- TOC entry 9353 (class 0 OID 0)
-- Dependencies: 625
-- Name: TABLE be_rbins_entomology_coleoptera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_coleoptera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_coleoptera TO darwin2;


--
-- TOC entry 9354 (class 0 OID 0)
-- Dependencies: 626
-- Name: TABLE be_rbins_entomology_coleoptera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_coleoptera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_coleoptera_mof TO darwin2;


--
-- TOC entry 9355 (class 0 OID 0)
-- Dependencies: 627
-- Name: TABLE be_rbins_entomology_diptera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_diptera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_diptera TO darwin2;


--
-- TOC entry 9356 (class 0 OID 0)
-- Dependencies: 628
-- Name: TABLE be_rbins_entomology_diptera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_diptera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_diptera_mof TO darwin2;


--
-- TOC entry 9357 (class 0 OID 0)
-- Dependencies: 629
-- Name: TABLE be_rbins_entomology_heterocera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_heterocera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_heterocera TO darwin2;


--
-- TOC entry 9358 (class 0 OID 0)
-- Dependencies: 630
-- Name: TABLE be_rbins_entomology_heterocera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_heterocera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_heterocera_mof TO darwin2;


--
-- TOC entry 9359 (class 0 OID 0)
-- Dependencies: 631
-- Name: TABLE be_rbins_entomology_hymenoptera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_hymenoptera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_hymenoptera TO darwin2;


--
-- TOC entry 9360 (class 0 OID 0)
-- Dependencies: 632
-- Name: TABLE be_rbins_entomology_hymenoptera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_hymenoptera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_hymenoptera_mof TO darwin2;


--
-- TOC entry 9361 (class 0 OID 0)
-- Dependencies: 633
-- Name: TABLE be_rbins_entomology_orthoptera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_orthoptera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_orthoptera TO darwin2;


--
-- TOC entry 9362 (class 0 OID 0)
-- Dependencies: 634
-- Name: TABLE be_rbins_entomology_orthoptera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_orthoptera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_orthoptera_mof TO darwin2;


--
-- TOC entry 9363 (class 0 OID 0)
-- Dependencies: 635
-- Name: TABLE be_rbins_entomology_rhopalocera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_rhopalocera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_rhopalocera TO darwin2;


--
-- TOC entry 9364 (class 0 OID 0)
-- Dependencies: 636
-- Name: TABLE be_rbins_entomology_rhopalocera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_entomology_rhopalocera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_entomology_rhopalocera_mof TO darwin2;


--
-- TOC entry 9365 (class 0 OID 0)
-- Dependencies: 637
-- Name: TABLE be_rbins_invertebrates_acari; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_acari TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_acari TO darwin2;


--
-- TOC entry 9366 (class 0 OID 0)
-- Dependencies: 638
-- Name: TABLE be_rbins_invertebrates_acari_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_acari_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_acari_mof TO darwin2;


--
-- TOC entry 9367 (class 0 OID 0)
-- Dependencies: 639
-- Name: TABLE be_rbins_invertebrates_araneae; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_araneae TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_araneae TO darwin2;


--
-- TOC entry 9368 (class 0 OID 0)
-- Dependencies: 640
-- Name: TABLE be_rbins_invertebrates_araneae_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_araneae_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_araneae_mof TO darwin2;


--
-- TOC entry 9369 (class 0 OID 0)
-- Dependencies: 641
-- Name: TABLE be_rbins_invertebrates_belgianmarineinvertebrates; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates TO darwin2;


--
-- TOC entry 9370 (class 0 OID 0)
-- Dependencies: 642
-- Name: TABLE be_rbins_invertebrates_belgianmarineinvertebrates_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_belgianmarineinvertebrates_mof TO darwin2;


--
-- TOC entry 9371 (class 0 OID 0)
-- Dependencies: 643
-- Name: TABLE be_rbins_invertebrates_brachiopoda; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_brachiopoda TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_brachiopoda TO darwin2;


--
-- TOC entry 9372 (class 0 OID 0)
-- Dependencies: 644
-- Name: TABLE be_rbins_invertebrates_brachiopoda_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_brachiopoda_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_brachiopoda_mof TO darwin2;


--
-- TOC entry 9373 (class 0 OID 0)
-- Dependencies: 645
-- Name: TABLE be_rbins_invertebrates_bryozoa; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_bryozoa TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_bryozoa TO darwin2;


--
-- TOC entry 9374 (class 0 OID 0)
-- Dependencies: 646
-- Name: TABLE be_rbins_invertebrates_bryozoa_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_bryozoa_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_bryozoa_mof TO darwin2;


--
-- TOC entry 9375 (class 0 OID 0)
-- Dependencies: 647
-- Name: TABLE be_rbins_invertebrates_cheliceratamarine; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cheliceratamarine TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cheliceratamarine TO darwin2;


--
-- TOC entry 9376 (class 0 OID 0)
-- Dependencies: 648
-- Name: TABLE be_rbins_invertebrates_cheliceratamarine_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cheliceratamarine_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cheliceratamarine_mof TO darwin2;


--
-- TOC entry 9377 (class 0 OID 0)
-- Dependencies: 649
-- Name: TABLE be_rbins_invertebrates_cnidaria; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cnidaria TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cnidaria TO darwin2;


--
-- TOC entry 9378 (class 0 OID 0)
-- Dependencies: 650
-- Name: TABLE be_rbins_invertebrates_cnidaria_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cnidaria_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_cnidaria_mof TO darwin2;


--
-- TOC entry 9379 (class 0 OID 0)
-- Dependencies: 651
-- Name: TABLE be_rbins_invertebrates_crustacea; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_crustacea TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_crustacea TO darwin2;


--
-- TOC entry 9380 (class 0 OID 0)
-- Dependencies: 652
-- Name: TABLE be_rbins_invertebrates_crustacea_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_crustacea_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_crustacea_mof TO darwin2;


--
-- TOC entry 9381 (class 0 OID 0)
-- Dependencies: 653
-- Name: TABLE be_rbins_invertebrates_echinodermata; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_echinodermata TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_echinodermata TO darwin2;


--
-- TOC entry 9382 (class 0 OID 0)
-- Dependencies: 654
-- Name: TABLE be_rbins_invertebrates_echinodermata_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_echinodermata_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_echinodermata_mof TO darwin2;


--
-- TOC entry 9383 (class 0 OID 0)
-- Dependencies: 655
-- Name: TABLE be_rbins_invertebrates_mollusca; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_mollusca TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_mollusca TO darwin2;


--
-- TOC entry 9384 (class 0 OID 0)
-- Dependencies: 656
-- Name: TABLE be_rbins_invertebrates_mollusca_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_mollusca_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_mollusca_mof TO darwin2;


--
-- TOC entry 9385 (class 0 OID 0)
-- Dependencies: 657
-- Name: TABLE be_rbins_invertebrates_rotifera; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_rotifera TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_rotifera TO darwin2;


--
-- TOC entry 9386 (class 0 OID 0)
-- Dependencies: 658
-- Name: TABLE be_rbins_invertebrates_rotifera_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_invertebrates_rotifera_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_invertebrates_rotifera_mof TO darwin2;


--
-- TOC entry 9387 (class 0 OID 0)
-- Dependencies: 659
-- Name: TABLE be_rbins_vertebrates_amphibia; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_amphibia TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_amphibia TO darwin2;


--
-- TOC entry 9388 (class 0 OID 0)
-- Dependencies: 660
-- Name: TABLE be_rbins_vertebrates_amphibia_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_amphibia_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_amphibia_mof TO darwin2;


--
-- TOC entry 9389 (class 0 OID 0)
-- Dependencies: 661
-- Name: TABLE be_rbins_vertebrates_aves; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_aves TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_aves TO darwin2;


--
-- TOC entry 9390 (class 0 OID 0)
-- Dependencies: 662
-- Name: TABLE be_rbins_vertebrates_aves_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_aves_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_aves_mof TO darwin2;


--
-- TOC entry 9391 (class 0 OID 0)
-- Dependencies: 663
-- Name: TABLE be_rbins_vertebrates_mammalia; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_mammalia TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_mammalia TO darwin2;


--
-- TOC entry 9392 (class 0 OID 0)
-- Dependencies: 664
-- Name: TABLE be_rbins_vertebrates_mammalia_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_mammalia_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_mammalia_mof TO darwin2;


--
-- TOC entry 9393 (class 0 OID 0)
-- Dependencies: 665
-- Name: TABLE be_rbins_vertebrates_pisces; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_pisces TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_pisces TO darwin2;


--
-- TOC entry 9394 (class 0 OID 0)
-- Dependencies: 666
-- Name: TABLE be_rbins_vertebrates_pisces_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_pisces_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_pisces_mof TO darwin2;


--
-- TOC entry 9395 (class 0 OID 0)
-- Dependencies: 667
-- Name: TABLE be_rbins_vertebrates_reptilia; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_reptilia TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_reptilia TO darwin2;


--
-- TOC entry 9396 (class 0 OID 0)
-- Dependencies: 668
-- Name: TABLE be_rbins_vertebrates_reptilia_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_reptilia_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_reptilia_mof TO darwin2;


--
-- TOC entry 9397 (class 0 OID 0)
-- Dependencies: 669
-- Name: TABLE be_rbins_vertebrates_vertebratestypes; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_vertebratestypes TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_vertebratestypes TO darwin2;


--
-- TOC entry 9398 (class 0 OID 0)
-- Dependencies: 670
-- Name: TABLE be_rbins_vertebrates_vertebratestypes_mof; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.be_rbins_vertebrates_vertebratestypes_mof TO tvandenberghe;
GRANT ALL ON TABLE ipt.be_rbins_vertebrates_vertebratestypes_mof TO darwin2;


--
-- TOC entry 9399 (class 0 OID 0)
-- Dependencies: 671
-- Name: TABLE mv_spatial; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_spatial TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_spatial TO darwin2;


--
-- TOC entry 9400 (class 0 OID 0)
-- Dependencies: 672
-- Name: TABLE mv_tag_to_locations; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_tag_to_locations TO postgres;
GRANT ALL ON TABLE ipt.mv_tag_to_locations TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_tag_to_locations TO darwin2;


--
-- TOC entry 9401 (class 0 OID 0)
-- Dependencies: 687
-- Name: TABLE v_rmca_collections_path_as_text_naturalheritage; Type: ACL; Schema: naturalheritage; Owner: darwin2
--

GRANT SELECT ON TABLE naturalheritage.v_rmca_collections_path_as_text_naturalheritage TO cetaf_viewer;


--
-- TOC entry 9402 (class 0 OID 0)
-- Dependencies: 688
-- Name: TABLE v_darwin_ipt_rbins_nh; Type: ACL; Schema: naturalheritage; Owner: darwin2
--

GRANT SELECT ON TABLE naturalheritage.v_darwin_ipt_rbins_nh TO cetaf_viewer;


--
-- TOC entry 9403 (class 0 OID 0)
-- Dependencies: 690
-- Name: TABLE mv_darwin_ipt_rbins_nh_collection_stats; Type: ACL; Schema: naturalheritage; Owner: darwin2
--

GRANT SELECT ON TABLE naturalheritage.mv_darwin_ipt_rbins_nh_collection_stats TO cetaf_viewer;


--
-- TOC entry 9404 (class 0 OID 0)
-- Dependencies: 691
-- Name: TABLE mvd_cetaf_rdf_view; Type: ACL; Schema: naturalheritage; Owner: darwin2
--

GRANT SELECT ON TABLE naturalheritage.mvd_cetaf_rdf_view TO cetaf_viewer;
GRANT ALL ON TABLE naturalheritage.mvd_cetaf_rdf_view TO postgres;


--
-- TOC entry 9405 (class 0 OID 0)
-- Dependencies: 693
-- Name: TABLE v_darwin_ipt_rbins_nh_dwc_name_output; Type: ACL; Schema: naturalheritage; Owner: darwin2
--

GRANT SELECT ON TABLE naturalheritage.v_darwin_ipt_rbins_nh_dwc_name_output TO cetaf_viewer;


--
-- TOC entry 9406 (class 0 OID 0)
-- Dependencies: 696
-- Name: TABLE labeling; Type: ACL; Schema: public; Owner: darwin2
--

GRANT SELECT ON TABLE public.labeling TO d2viewer;


--
-- TOC entry 9407 (class 0 OID 0)
-- Dependencies: 699
-- Name: TABLE v_gtu_for_normalization_correspondences; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.v_gtu_for_normalization_correspondences TO darwin2;


--
-- TOC entry 9408 (class 0 OID 0)
-- Dependencies: 708
-- Name: TABLE belgian_rivers_osm_20200402; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.belgian_rivers_osm_20200402 TO darwin2;


--
-- TOC entry 9410 (class 0 OID 0)
-- Dependencies: 713
-- Name: TABLE eez_archipelagic_waters_v3; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.eez_archipelagic_waters_v3 TO darwin2;


--
-- TOC entry 9412 (class 0 OID 0)
-- Dependencies: 715
-- Name: TABLE eez_internal_waters_v3; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.eez_internal_waters_v3 TO darwin2;


--
-- TOC entry 9414 (class 0 OID 0)
-- Dependencies: 717
-- Name: TABLE exclusive_economical_zone_v11; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.exclusive_economical_zone_v11 TO darwin2;


--
-- TOC entry 9416 (class 0 OID 0)
-- Dependencies: 719
-- Name: TABLE high_seas_v1; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.high_seas_v1 TO darwin2;


--
-- TOC entry 9418 (class 0 OID 0)
-- Dependencies: 723
-- Name: TABLE ne_10m_admin_0_countries; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_admin_0_countries TO darwin2;


--
-- TOC entry 9419 (class 0 OID 0)
-- Dependencies: 724
-- Name: TABLE ne_10m_admin_1_states_provinces; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_admin_1_states_provinces TO darwin2;


--
-- TOC entry 9420 (class 0 OID 0)
-- Dependencies: 725
-- Name: TABLE ne_10m_geography_marine_polys; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_geography_marine_polys TO darwin2;


--
-- TOC entry 9421 (class 0 OID 0)
-- Dependencies: 726
-- Name: TABLE ne_10m_geography_regions_polys; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_geography_regions_polys TO darwin2;


--
-- TOC entry 9423 (class 0 OID 0)
-- Dependencies: 731
-- Name: TABLE ne_10m_admin_0_countries_lakes; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_admin_0_countries_lakes TO darwin2;


--
-- TOC entry 9426 (class 0 OID 0)
-- Dependencies: 734
-- Name: TABLE ne_10m_admin_1_states_provinces_lakes; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_admin_1_states_provinces_lakes TO darwin2;


--
-- TOC entry 9430 (class 0 OID 0)
-- Dependencies: 738
-- Name: TABLE ne_10m_lakes; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_lakes TO darwin2;


--
-- TOC entry 9431 (class 0 OID 0)
-- Dependencies: 739
-- Name: TABLE ne_10m_lakes_europes; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_lakes_europes TO darwin2;


--
-- TOC entry 9434 (class 0 OID 0)
-- Dependencies: 742
-- Name: TABLE ne_10m_lakes_north_america; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_lakes_north_america TO darwin2;


--
-- TOC entry 9436 (class 0 OID 0)
-- Dependencies: 744
-- Name: TABLE ne_10m_populated_places; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_populated_places TO darwin2;


--
-- TOC entry 9438 (class 0 OID 0)
-- Dependencies: 746
-- Name: TABLE ne_10m_reefs; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_reefs TO darwin2;


--
-- TOC entry 9440 (class 0 OID 0)
-- Dependencies: 748
-- Name: TABLE ne_10m_urban_areas_landscan; Type: ACL; Schema: wfs; Owner: postgres
--

GRANT ALL ON TABLE wfs.ne_10m_urban_areas_landscan TO darwin2;


--
-- TOC entry 9445 (class 0 OID 0)
-- Dependencies: 788
-- Name: TABLE mv_eml; Type: ACL; Schema: ipt; Owner: ipt_viewer
--

GRANT ALL ON TABLE ipt.mv_eml TO tvandenberghe;
GRANT ALL ON TABLE ipt.mv_eml TO darwin2;


--
-- TOC entry 5386 (class 826 OID 2857710)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: darwin2; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 REVOKE ALL ON SEQUENCES  FROM postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 GRANT ALL ON SEQUENCES  TO darwin2;


--
-- TOC entry 5387 (class 826 OID 2857711)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: darwin2; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 REVOKE ALL ON FUNCTIONS  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 REVOKE ALL ON FUNCTIONS  FROM postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 GRANT ALL ON FUNCTIONS  TO darwin2;


--
-- TOC entry 5388 (class 826 OID 2857712)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: darwin2; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 REVOKE ALL ON TABLES  FROM postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA darwin2 GRANT ALL ON TABLES  TO darwin2;


-- Completed on 2021-11-10 16:50:15

--
-- PostgreSQL database dump complete
--

