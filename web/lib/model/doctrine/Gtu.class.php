<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Gtu extends BaseGtu
{
  public function getGtuFromDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuToDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'),false, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuFromDate()
  {
    $from_date = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true,true);
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getGtuToDate()
  {
    $to_date = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'), false,true);
    return $to_date->getDateTimeMaskedAsArray();
  }

  public function setGtuFromDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_from_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_from_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $dateTime->getMask());
    }
  }

  public function setGtuToDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_to_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, false,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_to_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $dateTime->getMask());
    }
  }

  public function getName($view = null, $countriesOnly = false)
  {
    if($this->_get('id')==0) return '-';
    $nbr = count($this->TagGroups);
    if(! $nbr) return "No Tags";
    $str = '<ul  class="search_tags">';
    foreach($this->TagGroups as $group)
    {
      if(!$countriesOnly || ($countriesOnly && $group->getSubGroupName()=='country')) {
        $str .= '<li><label>'.$group->getSubGroupName().'<span class="gtu_group"> - '.TagGroups::getGroup($group->getGroupName()).'</span></label><ul class="name_tags'.(($view !== null)?"_view":"").'">';
        $tags = explode(";",$group->getTagValue());
        foreach($tags as $value)
          if (strlen($value))
            $str .=  '<li>' . trim($value).'</li>';
        $str .= '</ul><div class="clear"></div>';
        if($countriesOnly)
          break;
      }
    }
    $str .= '</ul>';
    return $str;
  }

  public function getMap()
  {
    if( $this->getLatitude() != '' && $this->getLongitude()!= '')
      return '<img class="gtu_img_loc" src="http://staticmap.openstreetmap.de/staticmap.php?&size=480x240&center='.$this->getLatitude().','.$this->getLongitude().'&zoom=5&markers='.$this->getLatitude().','.$this->getLongitude().',red-pushpin" alt="Sampling location" />';
    return '';
  }
  public function getTagsWithCode($view = null)
  {
    $str = $this->getName($view);
    if($this->getLongitude() != '')
      $str .= '<b class="img">'.$this->getMap().'</b>';
    $str .=  '<b class="code">'.$this->getCode().'</b>';
    $str .=  '<b class="lat">'.$this->getLatitude().'</b>';
    $str .=  '<b class="lon">'.$this->getLongitude().'</b>';

    return $str;
  }

  public function getCode()
  {
    if(! $this->isNew() && $this->_get('id')==0)
      return '-';
    return $this->_get('code');
  }

  public function hasCountries()
  {
    $q = Doctrine_Query::create()
         ->from('TagGroups tg')
         ->where('tg.gtu_ref = ? and tg.sub_group_name_indexed = ?', array($this->_get('id'), 'country'));
    return (count($q->execute()));
  }
  

  
  //ftheeten 2018 12 12
  public function getRelatedTemporalInformationMasked()
  { return("GTU");
	  $returned=Array();
	  foreach(Doctrine::getTable('TemporalInformation')->findByGtuRef($this->getId()) as $key=>$item)
      {
		    if((int)$item->getFromDateMask()>0||(int)$item->getToDateMask()>0)
			{
				$tmp=Array();
                //$tmp['id']=$item->getId();
                $tmp['from_raw']=$item->getFromDate();
				$tmp['to_raw']=$item->getToDate();
				$tmp["from"]=$item->getFromDateString();//getFromDateMasked(ESC_RAW);
				$tmp["to"]=$item->getToDateString(); //getToDateMasked(ESC_RAW);
                $tmp["from_masked"]=$item->getFromDateMasked(ESC_RAW);
                $tmp["to_masked"]=$item->getToDateMasked(ESC_RAW);
                $tmp["from_mask"]=(int)$item->getFromDateMask();
                $tmp["to_mask"]=(int)$item->getToDateMask();
                
                $tmp['from_year']=$item->getFromDate()['year'];
                $tmp['from_month']=$item->getFromDate()['month'];
                $tmp['from_day']=$item->getFromDate()['day'];
                $tmp['from_hour']=$item->getFromDate()['hour'];
                $tmp['from_minute']=$item->getFromDate()['minute'];
                $tmp['from_second']=$item->getFromDate()['second'];
                $tmp['to_year']=$item->getToDate()['year'];
                $tmp['to_month']=$item->getToDate()['month'];
                $tmp['to_day']=$item->getToDate()['day'];
                $tmp['to_hour']=$item->getToDate()['hour'];
                $tmp['to_minute']=$item->getToDate()['minute'];
                $tmp['to_second']=$item->getToDate()['second'];
                

				$returned[]=$tmp;
			}
	  }
      usort($returned, function($a, $b) {
        return ($a['from_masked'].$a['to_masked']) - ($b['from_masked'].$b['to_masked']);
        });
	  $returned= array_unique($returned, SORT_REGULAR);
	  
	  
	  return $returned;
  }
  
  
  
  //ftheeten 2018 12 12
  /*public function getComments()
  {
    return $this->getDoctrineGtuComments()->getComments();    
  }*/
  
 /* public function getArrayFromDate()
  {
    return "";
  }*/
}
