<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Specimens extends BaseSpecimens
{

  //ftheeten 2016 09 22
  private $flagStorageLinked=false;
  public $partsAssociation=array();
  /*public function construct()
  {
    sfDoctrineRecord::construct();
    $this->flagStorageLinked=false;
  }*/
  
  public function getAcquisitionDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $dateTime->getDateMasked();
  }

  public function getAcquisitionDate()
  {
    $from_date = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getRawAcquisitionDate()
  {
    return $this->_get('acquisition_date');
  }

  public function setAcquisitionDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      if ($this->getAcquisitionDate() != $fd->getDateTimeMaskedAsArray()) {
        $this->_set('acquisition_date', $fd->format('Y/m/d'));
        $this->_set('acquisition_date_mask', $fd->getMask());
      }
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true); 
      if ($this->getAcquisitionDate() != $dateTime->getDateTimeMaskedAsArray()) {
        $this->_set('acquisition_date', $dateTime->format('Y/m/d'));
        $this->_set('acquisition_date_mask', $dateTime->getMask());
      }
    }
  }

    //ftheeten group date 2016 07 07
    public function getGtuFromDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuToDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'),false, true);
    return $dateTime->getDateMasked();
  }
  
  public function getGtuFromDate()
  {
    $from_date = new FuzzyDateTime($this->_get('gtu_from_date'), $this->_get('gtu_from_date_mask'),true,true);
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getGtuToDate()
  {
    $to_date = new FuzzyDateTime($this->_get('gtu_to_date'), $this->_get('gtu_to_date_mask'), false,true);
    return $to_date->getDateTimeMaskedAsArray();
  }

  public function setGtuFromDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_from_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, true,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_from_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_from_date_mask', $dateTime->getMask());
    }
  }

  public function setGtuToDate($fd)
  {
    if ($fd instanceof FuzzyDateTime)
    {
      $this->_set('gtu_to_date', $fd->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $fd->getMask());
    }
    else
    {
      $dateTime = new FuzzyDateTime($fd, 56, false,true);
      if(is_array($fd))
        $dateTime->setMask(FuzzyDateTime::getMaskFromDate($fd));
      $this->_set('gtu_to_date', $dateTime->format('Y/m/d H:i:s'));
      $this->_set('gtu_to_date_mask', $dateTime->getMask());
    }
  }
  
  public function getRawGtuToDate()
  {
    return $this->_get('gtu_to_date');
  }
  
    public function getRawGtuFromDate()
  {
    return $this->_get('gtu_from_date');
  }

// end group date  
    

  public function setHostRelationship($value)
  {
    if($value != $this->_get('host_relationship')) {
      $this->_set('host_relationship', $value);
    }
  }

  //ftheeten 2016 09 21
  /*
  public function setCategory($value)
  {
    if($value != $this->_get('category')) {
      $this->_set('category', $value);
    }
  }

  public static function getCategories()
  {
    return array(
      'physical' => 'Physical',
      'observation' => 'Observation',
      'figurate' => 'Figurate',
      'figurate-physical' => 'Figurate-Physical',
    );
  }
*/
  public function getName()
  {
    $name = '-';
    if(! $this->isNew() && $this->_get('id')==0)
      return $name;
    $codes = Doctrine::getTable('Codes')->getCodesRelated('specimens', $this->_get('id'));
    if (!$codes->count())
      return $name;
    $name = '';
    foreach ($codes as $code)
    {
      if ($code->getCodeCategory() == 'main') {
        $name = '['.$code->getCodeFormated().'] ';
        break;
      }
      else {
        $name .= '['.$code->getCodeFormated().'] ';
      }
    }
    $name = rtrim($name);
    return $name;
  }

  public function getAggregatedName($sep = ' / ')
  {
    $items = array(
        $this->getCollectionName(),
        $this->getTaxonName(),
        $this->getChronoName(),
        $this->getLithoName(),
        $this->getLithologyName(),
        $this->getMineralName()
   );

    $items = array_filter($items);
    return implode($sep, $items);
  } 


  public function getCountryTags($is_view = false)
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';
    
    return $str;
  }

  public function getOtherGtuTags($is_view = false)
  {
    //$tags = explode(';',$this->getGtuCountryTagValue(''));
    //rmca 2016 05 12
    $tags = explode(';',$this->getGtuOthersTagValue(''));

    $nbr = count($tags);
    if(! $nbr) return "-";
	//JMHerpers 2018 02 23
    //$str = '<ul class="name_tags_view">';
	$str = '<ul>';
    foreach($tags as $value)
      if (strlen($value))
		    //JMHerpers 2018 02 23
		  if ($value != "Africa")
			$str .= '<li>‚óè '.trim($value).'</li>';
    $str .= '</ul>';

    return $str;
  }

  public function getTypeFormated()
  {
    return ucfirst($this->_get('type'));
  }

  public function getTypeSearchFormated()
  {
    return ucfirst($this->_get('type_search'));
  }

  public function getTypeGroupFormated()
  {
    return ucfirst($this->_get('type_group'));
  }
  

  public function getSexFormated()
  {
    if ($this->_get('sex') == 'undefined')
      return '-';
    return ucfirst($this->_get('sex'));
  }

  public function getSexSearchFormated()
  {
    return ucfirst($this->_get('sex'));
  }

  public function getStateFormated()
  {
    if ($this->_get('state') == 'not applicable')
      return '-';
    return ucfirst($this->_get('state'));
  }

  public function getStateSearchFormated()
  {
    return ucfirst($this->_get('state'));
  }

  public function getStageFormated()
  {
    if ($this->_get('stage') == 'undefined')
      return '-';
    return ucfirst($this->_get('stage'));
  }

  public function getStageSearchFormated()
  {
    return ucfirst($this->_get('stage'));
  }

  public function getSocialStatusFormated()
  {
    if ($this->_get('social_status') == 'not applicable')
      return '-';
    return ucfirst($this->_get('social_status'));
  }

  public function getSocialStatusSearchFormated()
  {
    return ucfirst($this->_get('social_status'));
  }

  public function getRockFormFormated()
  {
    if ($this->_get('rock_form') == 'not applicable')
      return '-';
    return ucfirst($this->_get('rock_form'));
  }

  public function getRockFormSearchFormated()
  {
    return ucfirst($this->_get('rock_form'));
  }

  
  //ftheeten 2016 09 22
  
   public function getStoragePartsDataset()
  {
     if($this->flagStorageLinked===false)
     {
        $this->partsAssociation = Doctrine::getTable('StorageParts')->findBySpecimenRef($this->_get('id'));
        $this->flagStorageLinked=true;
     } 
     
  }

  //ftheeten 2016 09 22
  
  public function getStoragePartFieldHTML($field)
  {
     $returned=array();
     if($this->flagStorageLinked===false)
     {
        $this->getStoragePartsDataset();
     }
     $recordSet= $this->partsAssociation;
     foreach($recordSet as $specimen)
	 {
        $returned[]=$specimen->_get($field);
     }
     return implode("<br/>", $returned);
  }
  
   public function getStoragePartFieldArray($field, $unique=true)
  {
     $returned=array();
     if($this->flagStorageLinked===false)
     {
        $this->getStoragePartsDataset();
     }
     $recordSet= $this->partsAssociation;
     foreach($recordSet as $specimen)
	 {
        if($unique==true&&in_array($specimen->_get($field), $returned)===FALSE)
        {
            $returned[]=$specimen->_get($field);
        }
        else
        {
            $returned[]=$specimen->_get($field);
        }
     }
     return  $returned;
  }
  
  //ftheeten 2016 11 23
  public function getBuilding()
  {
        return implode(",", $this->getStoragePartFieldArray("building") );
  }
  
    //ftheeten 2016 11 23
  public function getFloor()
  {
        return implode(",", $this->getStoragePartFieldArray("floor") );
  }
  
      //ftheeten 2016 11 23
  public function getRoom()
  {
        return implode(",", $this->getStoragePartFieldArray("room") );
  }
        //ftheeten 2016 11 23
   public function getRow()
  {
        return implode(",", $this->getStoragePartFieldArray("row") );
  }
  
          //ftheeten 2016 11 23
   public function getShelf()
  {
        return implode(",", $this->getStoragePartFieldArray("shelf") );
  }

  //ftheeten 2017 04 28
  public function getLoanDescription()
  {
    
    if($this->getId()){
      $loans = Doctrine::getTable('Loans')->getRelatedToSpecimen($this->getId());
      $loan_list = array();
      foreach($loans as $loan) {
           $loan_list[$loan->getId()]['name']=$loan->getName();
           $status = Doctrine::getTable('LoanStatus')->getLastLoanStatus($loan->getId()) ;
          
          foreach($status as $sta) {
             $loan_list[$loan->getId()]['last_status'] = $sta->getStatus();
          }
      }
      
      return $loan_list;
    }
  }



}
