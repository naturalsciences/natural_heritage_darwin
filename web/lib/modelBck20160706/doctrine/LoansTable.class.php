<?php

/**
 * LoansTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LoansTable extends DarwinTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object LoansTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Loans');
  }


  /**
  * getMyLoans
  *
  * Get the loans for a user that are not Closed/Returned/Rejected
  *
  * @param int $user_id The user id to look for
  * @param int $max_items a number loans to get
  *
  * @return Doctrine_Query Query with loans ordered by from_date desc
  */
  public function getMyLoans($user_id, $max_items = FALSE)
  {

    $status_group = LoanStatus::getClosedStatus('closed');
    $status_group_params = implode(',',array_fill(0,count($status_group),'?'));

    $q = Doctrine_Query::create()
      ->from('Loans l')
      ->where('EXISTS (SELECT lr.id FROM LoanRights lr WHERE lr.loan_ref = l.id AND lr.user_ref = ? )', $user_id)
      ->andWhere("EXISTS (SELECT ls.id FROM LoanStatus ls WHERE loan_ref = l.id AND ls.status NOT IN (". $status_group_params.") AND is_last = TRUE )", $status_group)
      ->orderBy('l.from_date desc');
      if( $max_items )
        $q->limit($max_items);

    return $q;
  }

  public function syncHistory($id) {

    $conn_MGR = Doctrine_Manager::connection();
    $conn = $conn_MGR->getDbh();
    $conn->exec('SELECT fct_cpy_loan_history('.intval($id).')');
  }

  public function fetchHistories($id) {
    $conn_MGR = Doctrine_Manager::connection();
    $conn = $conn_MGR->getDbh();
    $statement = $conn->prepare('SELECT loan_ref, count(*) as items, modification_date_time as date FROM loan_history where loan_ref = :id group by
      loan_ref, modification_date_time  order by modification_date_time desc');
    $statement->execute(array(':id' => $id));
    $results = $statement->fetchAll(PDO::FETCH_ASSOC);
    return $results;
  }

  public function findLoaned($part_id) {
    $q = Doctrine_Query::create()
      ->from('Loans l')
      ->andWhere("EXISTS (SELECT ls.id FROM LoanStatus ls WHERE loan_ref = l.id AND ls.status IN ('running', 'extended') AND is_last = TRUE )")
      ->andWhere('EXISTS (SELECT li.id FROM LoanItems li WHERE li.loan_ref = l.id AND li.specimen_ref = ? )', $part_id);
    return $q->execute();
  }

  public function getRelatedToSpecimen($id) {
    $q = Doctrine_Query::create()
      ->from('Loans l')
      ->innerJoin('l.LoanStatus')
//       ->andWhere("EXISTS (SELECT ls.id FROM LoanStatus ls WHERE loan_ref = l.id AND ls.status IN ('running', 'extended') AND is_last = TRUE )")
      ->andWhere('EXISTS (SELECT li.id FROM LoanItems li WHERE li.loan_ref = l.id AND li.specimen_ref = ? )', $id);
    return $q->execute();
  }
}