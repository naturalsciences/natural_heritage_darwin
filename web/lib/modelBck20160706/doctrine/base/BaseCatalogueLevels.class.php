<?php

/**
 * BaseCatalogueLevels
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $level_type
 * @property string $level_name
 * @property string $level_sys_name
 * @property boolean $optional_level
 * @property integer $level_order
 * @property Doctrine_Collection $PossibleUpperLevels
 * @property Doctrine_Collection $Taxonomy
 * @property Doctrine_Collection $Chronostratigraphy
 * @property Doctrine_Collection $Lithostratigraphy
 * @property Doctrine_Collection $Mineralogy
 * @property Doctrine_Collection $Lithology
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getLevelType()           Returns the current record's "level_type" value
 * @method string              getLevelName()           Returns the current record's "level_name" value
 * @method string              getLevelSysName()        Returns the current record's "level_sys_name" value
 * @method boolean             getOptionalLevel()       Returns the current record's "optional_level" value
 * @method integer             getLevelOrder()          Returns the current record's "level_order" value
 * @method Doctrine_Collection getPossibleUpperLevels() Returns the current record's "PossibleUpperLevels" collection
 * @method Doctrine_Collection getTaxonomy()            Returns the current record's "Taxonomy" collection
 * @method Doctrine_Collection getChronostratigraphy()  Returns the current record's "Chronostratigraphy" collection
 * @method Doctrine_Collection getLithostratigraphy()   Returns the current record's "Lithostratigraphy" collection
 * @method Doctrine_Collection getMineralogy()          Returns the current record's "Mineralogy" collection
 * @method Doctrine_Collection getLithology()           Returns the current record's "Lithology" collection
 * @method CatalogueLevels     setId()                  Sets the current record's "id" value
 * @method CatalogueLevels     setLevelType()           Sets the current record's "level_type" value
 * @method CatalogueLevels     setLevelName()           Sets the current record's "level_name" value
 * @method CatalogueLevels     setLevelSysName()        Sets the current record's "level_sys_name" value
 * @method CatalogueLevels     setOptionalLevel()       Sets the current record's "optional_level" value
 * @method CatalogueLevels     setLevelOrder()          Sets the current record's "level_order" value
 * @method CatalogueLevels     setPossibleUpperLevels() Sets the current record's "PossibleUpperLevels" collection
 * @method CatalogueLevels     setTaxonomy()            Sets the current record's "Taxonomy" collection
 * @method CatalogueLevels     setChronostratigraphy()  Sets the current record's "Chronostratigraphy" collection
 * @method CatalogueLevels     setLithostratigraphy()   Sets the current record's "Lithostratigraphy" collection
 * @method CatalogueLevels     setMineralogy()          Sets the current record's "Mineralogy" collection
 * @method CatalogueLevels     setLithology()           Sets the current record's "Lithology" collection
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCatalogueLevels extends DarwinModel
{
    public function setTableDefinition()
    {
        $this->setTableName('catalogue_levels');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('level_type', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('level_name', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('level_sys_name', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('optional_level', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('level_order', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('PossibleUpperLevels', array(
             'local' => 'id',
             'foreign' => 'level_upper_ref'));

        $this->hasMany('Taxonomy', array(
             'local' => 'id',
             'foreign' => 'level_ref'));

        $this->hasMany('Chronostratigraphy', array(
             'local' => 'id',
             'foreign' => 'level_ref'));

        $this->hasMany('Lithostratigraphy', array(
             'local' => 'id',
             'foreign' => 'level_ref'));

        $this->hasMany('Mineralogy', array(
             'local' => 'id',
             'foreign' => 'level_ref'));

        $this->hasMany('Lithology', array(
             'local' => 'id',
             'foreign' => 'level_ref'));
    }
}