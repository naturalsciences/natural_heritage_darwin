<?php

/**
 * StagingGtu filter form base class.
 *
 * @package    darwin
 * @subpackage filter
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: sfDoctrineFormFilterGeneratedTemplate.php 29570 2010-05-21 14:49:47Z Kris.Wallsmith $
 */
abstract class BaseStagingGtuFormFilter extends BaseFormFilterDoctrine
{
  public function setup()
  {
    $this->setWidgets(array(
      'import_ref'                     => new sfWidgetFormDoctrineChoice(array('model' => $this->getRelatedModelName('Import'), 'add_empty' => true)),
      'status'                         => new sfWidgetFormFilterInput(),
      'date_included'                  => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'tags_merged'                    => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'sensitive_information_withheld' => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'gtu_ref'                        => new sfWidgetFormFilterInput(),
      'station_type'                   => new sfWidgetFormFilterInput(),
      'sampling_code'                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'sampling_field_number'          => new sfWidgetFormFilterInput(),
      'event_cluster_code'             => new sfWidgetFormFilterInput(),
      'event_order'                    => new sfWidgetFormFilterInput(),
      'ig_num'                         => new sfWidgetFormFilterInput(),
      'ig_num_indexed'                 => new sfWidgetFormFilterInput(),
      'collections'                    => new sfWidgetFormFilterInput(),
      'collectors'                     => new sfWidgetFormFilterInput(),
      'expeditions'                    => new sfWidgetFormFilterInput(),
      'collection_refs'                => new sfWidgetFormFilterInput(),
      'collector_refs'                 => new sfWidgetFormFilterInput(),
      'expedition_ref'                 => new sfWidgetFormFilterInput(),
      'iso3166'                        => new sfWidgetFormFilterInput(),
      'iso3166_subdivision'            => new sfWidgetFormFilterInput(),
      'countries'                      => new sfWidgetFormFilterInput(),
      'tags'                           => new sfWidgetFormFilterInput(),
      'tags_indexed'                   => new sfWidgetFormFilterInput(),
      'locality_text'                  => new sfWidgetFormFilterInput(),
      'locality_text_indexed'          => new sfWidgetFormFilterInput(),
      'ecology_text'                   => new sfWidgetFormFilterInput(),
      'ecology_text_indexed'           => new sfWidgetFormFilterInput(),
      'coordinates_format'             => new sfWidgetFormFilterInput(),
      'latitude1'                      => new sfWidgetFormFilterInput(),
      'longitude1'                     => new sfWidgetFormFilterInput(),
      'latitude2'                      => new sfWidgetFormFilterInput(),
      'longitude2'                     => new sfWidgetFormFilterInput(),
      'gis_type'                       => new sfWidgetFormFilterInput(),
      'coordinates_wkt'                => new sfWidgetFormFilterInput(),
      'coordinates_datum'              => new sfWidgetFormFilterInput(),
      'coordinates_proj_ref'           => new sfWidgetFormFilterInput(),
      'coordinates_original'           => new sfWidgetFormFilterInput(),
      'coordinates_accuracy'           => new sfWidgetFormFilterInput(),
      'coordinates_accuracy_text'      => new sfWidgetFormFilterInput(),
      'station_baseline_elevation'     => new sfWidgetFormFilterInput(),
      'station_baseline_accuracy'      => new sfWidgetFormFilterInput(),
      'sampling_elevation_start'       => new sfWidgetFormFilterInput(),
      'sampling_elevation_end'         => new sfWidgetFormFilterInput(),
      'sampling_elevation_accuracy'    => new sfWidgetFormFilterInput(),
      'original_elevation_data'        => new sfWidgetFormFilterInput(),
      'sampling_depth_start'           => new sfWidgetFormFilterInput(),
      'sampling_depth_end'             => new sfWidgetFormFilterInput(),
      'sampling_depth_accuracy'        => new sfWidgetFormFilterInput(),
      'original_depth_data'            => new sfWidgetFormFilterInput(),
      'collecting_date_begin'          => new sfWidgetFormFilterInput(),
      'collecting_date_begin_mask'     => new sfWidgetFormFilterInput(),
      'collecting_date_end'            => new sfWidgetFormFilterInput(),
      'collecting_date_end_mask'       => new sfWidgetFormFilterInput(),
      'collecting_time_begin'          => new sfWidgetFormFilterInput(),
      'collecting_time_end'            => new sfWidgetFormFilterInput(),
      'sampling_method'                => new sfWidgetFormFilterInput(),
      'sampling_fixation'              => new sfWidgetFormFilterInput(),
    ));

    $this->setValidators(array(
      'import_ref'                     => new sfValidatorDoctrineChoice(array('required' => false, 'model' => $this->getRelatedModelName('Import'), 'column' => 'id')),
      'status'                         => new sfValidatorPass(array('required' => false)),
      'date_included'                  => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'tags_merged'                    => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'sensitive_information_withheld' => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'gtu_ref'                        => new sfValidatorSchemaFilter('text', new sfValidatorInteger(array('required' => false))),
      'station_type'                   => new sfValidatorPass(array('required' => false)),
      'sampling_code'                  => new sfValidatorPass(array('required' => false)),
      'sampling_field_number'          => new sfValidatorPass(array('required' => false)),
      'event_cluster_code'             => new sfValidatorPass(array('required' => false)),
      'event_order'                    => new sfValidatorPass(array('required' => false)),
      'ig_num'                         => new sfValidatorPass(array('required' => false)),
      'ig_num_indexed'                 => new sfValidatorPass(array('required' => false)),
      'collections'                    => new sfValidatorPass(array('required' => false)),
      'collectors'                     => new sfValidatorPass(array('required' => false)),
      'expeditions'                    => new sfValidatorPass(array('required' => false)),
      'collection_refs'                => new sfValidatorPass(array('required' => false)),
      'collector_refs'                 => new sfValidatorPass(array('required' => false)),
      'expedition_ref'                 => new sfValidatorPass(array('required' => false)),
      'iso3166'                        => new sfValidatorPass(array('required' => false)),
      'iso3166_subdivision'            => new sfValidatorPass(array('required' => false)),
      'countries'                      => new sfValidatorPass(array('required' => false)),
      'tags'                           => new sfValidatorPass(array('required' => false)),
      'tags_indexed'                   => new sfValidatorPass(array('required' => false)),
      'locality_text'                  => new sfValidatorPass(array('required' => false)),
      'locality_text_indexed'          => new sfValidatorPass(array('required' => false)),
      'ecology_text'                   => new sfValidatorPass(array('required' => false)),
      'ecology_text_indexed'           => new sfValidatorPass(array('required' => false)),
      'coordinates_format'             => new sfValidatorPass(array('required' => false)),
      'latitude1'                      => new sfValidatorPass(array('required' => false)),
      'longitude1'                     => new sfValidatorPass(array('required' => false)),
      'latitude2'                      => new sfValidatorPass(array('required' => false)),
      'longitude2'                     => new sfValidatorPass(array('required' => false)),
      'gis_type'                       => new sfValidatorPass(array('required' => false)),
      'coordinates_wkt'                => new sfValidatorPass(array('required' => false)),
      'coordinates_datum'              => new sfValidatorPass(array('required' => false)),
      'coordinates_proj_ref'           => new sfValidatorSchemaFilter('text', new sfValidatorInteger(array('required' => false))),
      'coordinates_original'           => new sfValidatorPass(array('required' => false)),
      'coordinates_accuracy'           => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'coordinates_accuracy_text'      => new sfValidatorPass(array('required' => false)),
      'station_baseline_elevation'     => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'station_baseline_accuracy'      => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'sampling_elevation_start'       => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'sampling_elevation_end'         => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'sampling_elevation_accuracy'    => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'original_elevation_data'        => new sfValidatorPass(array('required' => false)),
      'sampling_depth_start'           => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'sampling_depth_end'             => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'sampling_depth_accuracy'        => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'original_depth_data'            => new sfValidatorPass(array('required' => false)),
      'collecting_date_begin'          => new sfValidatorPass(array('required' => false)),
      'collecting_date_begin_mask'     => new sfValidatorPass(array('required' => false)),
      'collecting_date_end'            => new sfValidatorPass(array('required' => false)),
      'collecting_date_end_mask'       => new sfValidatorPass(array('required' => false)),
      'collecting_time_begin'          => new sfValidatorPass(array('required' => false)),
      'collecting_time_end'            => new sfValidatorPass(array('required' => false)),
      'sampling_method'                => new sfValidatorPass(array('required' => false)),
      'sampling_fixation'              => new sfValidatorPass(array('required' => false)),
    ));

    $this->widgetSchema->setNameFormat('staging_gtu_filters[%s]');

    $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);

    $this->setupInheritance();

    parent::setup();
  }

  public function getModelName()
  {
    return 'StagingGtu';
  }

  public function getFields()
  {
    return array(
      'id'                             => 'Number',
      'import_ref'                     => 'ForeignKey',
      'status'                         => 'Text',
      'date_included'                  => 'Boolean',
      'tags_merged'                    => 'Boolean',
      'sensitive_information_withheld' => 'Boolean',
      'gtu_ref'                        => 'Number',
      'station_type'                   => 'Text',
      'sampling_code'                  => 'Text',
      'sampling_field_number'          => 'Text',
      'event_cluster_code'             => 'Text',
      'event_order'                    => 'Text',
      'ig_num'                         => 'Text',
      'ig_num_indexed'                 => 'Text',
      'collections'                    => 'Text',
      'collectors'                     => 'Text',
      'expeditions'                    => 'Text',
      'collection_refs'                => 'Text',
      'collector_refs'                 => 'Text',
      'expedition_ref'                 => 'Text',
      'iso3166'                        => 'Text',
      'iso3166_subdivision'            => 'Text',
      'countries'                      => 'Text',
      'tags'                           => 'Text',
      'tags_indexed'                   => 'Text',
      'locality_text'                  => 'Text',
      'locality_text_indexed'          => 'Text',
      'ecology_text'                   => 'Text',
      'ecology_text_indexed'           => 'Text',
      'coordinates_format'             => 'Text',
      'latitude1'                      => 'Text',
      'longitude1'                     => 'Text',
      'latitude2'                      => 'Text',
      'longitude2'                     => 'Text',
      'gis_type'                       => 'Text',
      'coordinates_wkt'                => 'Text',
      'coordinates_datum'              => 'Text',
      'coordinates_proj_ref'           => 'Number',
      'coordinates_original'           => 'Text',
      'coordinates_accuracy'           => 'Number',
      'coordinates_accuracy_text'      => 'Text',
      'station_baseline_elevation'     => 'Number',
      'station_baseline_accuracy'      => 'Number',
      'sampling_elevation_start'       => 'Number',
      'sampling_elevation_end'         => 'Number',
      'sampling_elevation_accuracy'    => 'Number',
      'original_elevation_data'        => 'Text',
      'sampling_depth_start'           => 'Number',
      'sampling_depth_end'             => 'Number',
      'sampling_depth_accuracy'        => 'Number',
      'original_depth_data'            => 'Text',
      'collecting_date_begin'          => 'Text',
      'collecting_date_begin_mask'     => 'Text',
      'collecting_date_end'            => 'Text',
      'collecting_date_end_mask'       => 'Text',
      'collecting_time_begin'          => 'Text',
      'collecting_time_end'            => 'Text',
      'sampling_method'                => 'Text',
      'sampling_fixation'              => 'Text',
    );
  }
}
